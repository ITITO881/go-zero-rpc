// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: tag_manager.proto

package rfidPb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BulkPushReturnInspectAggRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *BulkPushReturnInspectAggRequest) Reset() {
	*x = BulkPushReturnInspectAggRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPushReturnInspectAggRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPushReturnInspectAggRequest) ProtoMessage() {}

func (x *BulkPushReturnInspectAggRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPushReturnInspectAggRequest.ProtoReflect.Descriptor instead.
func (*BulkPushReturnInspectAggRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{0}
}

func (x *BulkPushReturnInspectAggRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type BulkPushReturnInspectAggResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BulkPushReturnInspectAggResponse) Reset() {
	*x = BulkPushReturnInspectAggResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPushReturnInspectAggResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPushReturnInspectAggResponse) ProtoMessage() {}

func (x *BulkPushReturnInspectAggResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPushReturnInspectAggResponse.ProtoReflect.Descriptor instead.
func (*BulkPushReturnInspectAggResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{1}
}

func (x *BulkPushReturnInspectAggResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkPushReturnInspectAggResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkPushReturnInspectAggResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DestroyReturnInspectAggRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *DestroyReturnInspectAggRequest) Reset() {
	*x = DestroyReturnInspectAggRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReturnInspectAggRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReturnInspectAggRequest) ProtoMessage() {}

func (x *DestroyReturnInspectAggRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReturnInspectAggRequest.ProtoReflect.Descriptor instead.
func (*DestroyReturnInspectAggRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{2}
}

func (x *DestroyReturnInspectAggRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type DestroyReturnInspectAggResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DestroyReturnInspectAggResponse) Reset() {
	*x = DestroyReturnInspectAggResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReturnInspectAggResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReturnInspectAggResponse) ProtoMessage() {}

func (x *DestroyReturnInspectAggResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReturnInspectAggResponse.ProtoReflect.Descriptor instead.
func (*DestroyReturnInspectAggResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{3}
}

func (x *DestroyReturnInspectAggResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyReturnInspectAggResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyReturnInspectAggResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type EpcSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcList []string `protobuf:"bytes,1,rep,name=epc_list,json=epcList,proto3" json:"epc_list,omitempty"`
}

func (x *EpcSyncRequest) Reset() {
	*x = EpcSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpcSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpcSyncRequest) ProtoMessage() {}

func (x *EpcSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpcSyncRequest.ProtoReflect.Descriptor instead.
func (*EpcSyncRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{4}
}

func (x *EpcSyncRequest) GetEpcList() []string {
	if x != nil {
		return x.EpcList
	}
	return nil
}

type EpcSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EpcSyncResponse) Reset() {
	*x = EpcSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpcSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpcSyncResponse) ProtoMessage() {}

func (x *EpcSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpcSyncResponse.ProtoReflect.Descriptor instead.
func (*EpcSyncResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{5}
}

func (x *EpcSyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EpcSyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EpcSyncResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InspectConfigOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InspectConfigOptionsRequest) Reset() {
	*x = InspectConfigOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectConfigOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectConfigOptionsRequest) ProtoMessage() {}

func (x *InspectConfigOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectConfigOptionsRequest.ProtoReflect.Descriptor instead.
func (*InspectConfigOptionsRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{6}
}

type InspectConfigOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggConsignStatus []*LabelValueResponse `protobuf:"bytes,1,rep,name=agg_consign_status,json=aggConsignStatus,proto3" json:"agg_consign_status,omitempty"`
	QualityResult    []*LabelValueResponse `protobuf:"bytes,2,rep,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	PushWdtStatus    []*LabelValueResponse `protobuf:"bytes,3,rep,name=push_wdt_status,json=pushWdtStatus,proto3" json:"push_wdt_status,omitempty"`
	AggType          []*LabelValueResponse `protobuf:"bytes,4,rep,name=agg_type,json=aggType,proto3" json:"agg_type,omitempty"`
	WarehouseInfo    []*LabelValueResponse `protobuf:"bytes,5,rep,name=warehouse_info,json=warehouseInfo,proto3" json:"warehouse_info,omitempty"`
	PublishType      []*LabelValueResponse `protobuf:"bytes,6,rep,name=publish_type,json=publishType,proto3" json:"publish_type,omitempty"`
	QaType           []*LabelValueResponse `protobuf:"bytes,7,rep,name=qa_type,json=qaType,proto3" json:"qa_type,omitempty"`
	QaResult         []*LabelValueResponse `protobuf:"bytes,8,rep,name=qa_result,json=qaResult,proto3" json:"qa_result,omitempty"`
	TagStatus        []*LabelValueResponse `protobuf:"bytes,9,rep,name=tag_status,json=tagStatus,proto3" json:"tag_status,omitempty"`
	ProdCondition    []*LabelValueResponse `protobuf:"bytes,10,rep,name=prod_condition,json=prodCondition,proto3" json:"prod_condition,omitempty"`
}

func (x *InspectConfigOptionsResponse) Reset() {
	*x = InspectConfigOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectConfigOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectConfigOptionsResponse) ProtoMessage() {}

func (x *InspectConfigOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectConfigOptionsResponse.ProtoReflect.Descriptor instead.
func (*InspectConfigOptionsResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{7}
}

func (x *InspectConfigOptionsResponse) GetAggConsignStatus() []*LabelValueResponse {
	if x != nil {
		return x.AggConsignStatus
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetQualityResult() []*LabelValueResponse {
	if x != nil {
		return x.QualityResult
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetPushWdtStatus() []*LabelValueResponse {
	if x != nil {
		return x.PushWdtStatus
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetAggType() []*LabelValueResponse {
	if x != nil {
		return x.AggType
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetWarehouseInfo() []*LabelValueResponse {
	if x != nil {
		return x.WarehouseInfo
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetPublishType() []*LabelValueResponse {
	if x != nil {
		return x.PublishType
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetQaType() []*LabelValueResponse {
	if x != nil {
		return x.QaType
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetQaResult() []*LabelValueResponse {
	if x != nil {
		return x.QaResult
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetTagStatus() []*LabelValueResponse {
	if x != nil {
		return x.TagStatus
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetProdCondition() []*LabelValueResponse {
	if x != nil {
		return x.ProdCondition
	}
	return nil
}

type LabelValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelValueResponse) Reset() {
	*x = LabelValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValueResponse) ProtoMessage() {}

func (x *LabelValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValueResponse.ProtoReflect.Descriptor instead.
func (*LabelValueResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{8}
}

func (x *LabelValueResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LabelValueResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type RetrieveReturnInspectAggRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RetrieveReturnInspectAggRequest) Reset() {
	*x = RetrieveReturnInspectAggRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveReturnInspectAggRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveReturnInspectAggRequest) ProtoMessage() {}

func (x *RetrieveReturnInspectAggRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveReturnInspectAggRequest.ProtoReflect.Descriptor instead.
func (*RetrieveReturnInspectAggRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{9}
}

func (x *RetrieveReturnInspectAggRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidPublishEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	IsDestroyed       *bool   `protobuf:"varint,4,opt,name=is_destroyed,json=isDestroyed,proto3,oneof" json:"is_destroyed,omitempty"`
	PublishType       *int32  `protobuf:"varint,5,opt,name=publish_type,json=publishType,proto3,oneof" json:"publish_type,omitempty"`
	PublishDesc       *string `protobuf:"bytes,6,opt,name=publish_desc,json=publishDesc,proto3,oneof" json:"publish_desc,omitempty"`
	PublishRemark     *string `protobuf:"bytes,7,opt,name=publish_remark,json=publishRemark,proto3,oneof" json:"publish_remark,omitempty"`
	LimitSupplierNo   *string `protobuf:"bytes,9,opt,name=limit_supplier_no,json=limitSupplierNo,proto3,oneof" json:"limit_supplier_no,omitempty"`
	LimitSupplierName *string `protobuf:"bytes,10,opt,name=limit_supplier_name,json=limitSupplierName,proto3,oneof" json:"limit_supplier_name,omitempty"`
	LimitUserNo       *string `protobuf:"bytes,12,opt,name=limit_user_no,json=limitUserNo,proto3,oneof" json:"limit_user_no,omitempty"`
	LimitUserName     *string `protobuf:"bytes,13,opt,name=limit_user_name,json=limitUserName,proto3,oneof" json:"limit_user_name,omitempty"`
	LimitGoodsNoList  *string `protobuf:"bytes,15,opt,name=limit_goods_no_list,json=limitGoodsNoList,proto3,oneof" json:"limit_goods_no_list,omitempty"`
	LimitSpecNoList   *string `protobuf:"bytes,16,opt,name=limit_spec_no_list,json=limitSpecNoList,proto3,oneof" json:"limit_spec_no_list,omitempty"`
	SecurityCode      *string `protobuf:"bytes,19,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo           *string `protobuf:"bytes,20,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo            *string `protobuf:"bytes,21,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName         *string `protobuf:"bytes,22,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SupplierNo        *string `protobuf:"bytes,23,opt,name=supplier_no,json=supplierNo,proto3,oneof" json:"supplier_no,omitempty"`
	SupplierName      *string `protobuf:"bytes,24,opt,name=supplier_name,json=supplierName,proto3,oneof" json:"supplier_name,omitempty"`
	UserNo            *string `protobuf:"bytes,25,opt,name=user_no,json=userNo,proto3,oneof" json:"user_no,omitempty"`
	UserName          *string `protobuf:"bytes,26,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	OperatorId        *int32  `protobuf:"varint,27,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName      *string `protobuf:"bytes,28,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Epc               *string `protobuf:"bytes,29,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	OperationTime     *string `protobuf:"bytes,30,opt,name=operation_time,json=operationTime,proto3,oneof" json:"operation_time,omitempty"`
	BatchNo           *string `protobuf:"bytes,31,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	Tid               *string `protobuf:"bytes,32,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	LimitSupplier     *bool   `protobuf:"varint,33,opt,name=limit_supplier,json=limitSupplier,proto3,oneof" json:"limit_supplier,omitempty"`
	LimitUser         *bool   `protobuf:"varint,34,opt,name=limit_user,json=limitUser,proto3,oneof" json:"limit_user,omitempty"`
	LimitGoods        *bool   `protobuf:"varint,35,opt,name=limit_goods,json=limitGoods,proto3,oneof" json:"limit_goods,omitempty"`
	OperatorNo        *string `protobuf:"bytes,36,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	ImgUrl            *string `protobuf:"bytes,37,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
}

func (x *RfidPublishEntitiesCreateRequest) Reset() {
	*x = RfidPublishEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidPublishEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidPublishEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidPublishEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidPublishEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidPublishEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{10}
}

func (x *RfidPublishEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetIsDestroyed() bool {
	if x != nil && x.IsDestroyed != nil {
		return *x.IsDestroyed
	}
	return false
}

func (x *RfidPublishEntitiesCreateRequest) GetPublishType() int32 {
	if x != nil && x.PublishType != nil {
		return *x.PublishType
	}
	return 0
}

func (x *RfidPublishEntitiesCreateRequest) GetPublishDesc() string {
	if x != nil && x.PublishDesc != nil {
		return *x.PublishDesc
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetPublishRemark() string {
	if x != nil && x.PublishRemark != nil {
		return *x.PublishRemark
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitSupplierNo() string {
	if x != nil && x.LimitSupplierNo != nil {
		return *x.LimitSupplierNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitSupplierName() string {
	if x != nil && x.LimitSupplierName != nil {
		return *x.LimitSupplierName
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitUserNo() string {
	if x != nil && x.LimitUserNo != nil {
		return *x.LimitUserNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitUserName() string {
	if x != nil && x.LimitUserName != nil {
		return *x.LimitUserName
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitGoodsNoList() string {
	if x != nil && x.LimitGoodsNoList != nil {
		return *x.LimitGoodsNoList
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitSpecNoList() string {
	if x != nil && x.LimitSpecNoList != nil {
		return *x.LimitSpecNoList
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetSupplierNo() string {
	if x != nil && x.SupplierNo != nil {
		return *x.SupplierNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetSupplierName() string {
	if x != nil && x.SupplierName != nil {
		return *x.SupplierName
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetUserNo() string {
	if x != nil && x.UserNo != nil {
		return *x.UserNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidPublishEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetOperationTime() string {
	if x != nil && x.OperationTime != nil {
		return *x.OperationTime
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitSupplier() bool {
	if x != nil && x.LimitSupplier != nil {
		return *x.LimitSupplier
	}
	return false
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitUser() bool {
	if x != nil && x.LimitUser != nil {
		return *x.LimitUser
	}
	return false
}

func (x *RfidPublishEntitiesCreateRequest) GetLimitGoods() bool {
	if x != nil && x.LimitGoods != nil {
		return *x.LimitGoods
	}
	return false
}

func (x *RfidPublishEntitiesCreateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidPublishEntitiesCreateRequest) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

type RfidPublishEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidPublishEntitiesDestroyRequest) Reset() {
	*x = RfidPublishEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidPublishEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidPublishEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidPublishEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidPublishEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidPublishEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{11}
}

func (x *RfidPublishEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidPublishEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidPublishEntitiesListRequest) Reset() {
	*x = RfidPublishEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidPublishEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidPublishEntitiesListRequest) ProtoMessage() {}

func (x *RfidPublishEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidPublishEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidPublishEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{12}
}

func (x *RfidPublishEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidPublishEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidPublishEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidPublishEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidPublishEntitiesListResponse) Reset() {
	*x = RfidPublishEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidPublishEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidPublishEntitiesListResponse) ProtoMessage() {}

func (x *RfidPublishEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidPublishEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidPublishEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{13}
}

func (x *RfidPublishEntitiesListResponse) GetResults() []*RfidPublishEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidPublishEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidPublishEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PublishTypeName   *string `protobuf:"bytes,2,opt,name=publish_type_name,json=publishTypeName,proto3,oneof" json:"publish_type_name,omitempty"`
	CreateTime        *string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime        *string `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	IsDestroyed       *bool   `protobuf:"varint,5,opt,name=is_destroyed,json=isDestroyed,proto3,oneof" json:"is_destroyed,omitempty"`
	PublishType       *int32  `protobuf:"varint,6,opt,name=publish_type,json=publishType,proto3,oneof" json:"publish_type,omitempty"`
	PublishDesc       *string `protobuf:"bytes,7,opt,name=publish_desc,json=publishDesc,proto3,oneof" json:"publish_desc,omitempty"`
	PublishRemark     *string `protobuf:"bytes,8,opt,name=publish_remark,json=publishRemark,proto3,oneof" json:"publish_remark,omitempty"`
	LimitSupplierNo   *string `protobuf:"bytes,10,opt,name=limit_supplier_no,json=limitSupplierNo,proto3,oneof" json:"limit_supplier_no,omitempty"`
	LimitSupplierName *string `protobuf:"bytes,11,opt,name=limit_supplier_name,json=limitSupplierName,proto3,oneof" json:"limit_supplier_name,omitempty"`
	LimitUserNo       *string `protobuf:"bytes,13,opt,name=limit_user_no,json=limitUserNo,proto3,oneof" json:"limit_user_no,omitempty"`
	LimitUserName     *string `protobuf:"bytes,14,opt,name=limit_user_name,json=limitUserName,proto3,oneof" json:"limit_user_name,omitempty"`
	LimitGoodsNoList  *string `protobuf:"bytes,16,opt,name=limit_goods_no_list,json=limitGoodsNoList,proto3,oneof" json:"limit_goods_no_list,omitempty"`
	LimitSpecNoList   *string `protobuf:"bytes,17,opt,name=limit_spec_no_list,json=limitSpecNoList,proto3,oneof" json:"limit_spec_no_list,omitempty"`
	SecurityCode      *string `protobuf:"bytes,20,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo           *string `protobuf:"bytes,21,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo            *string `protobuf:"bytes,22,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName         *string `protobuf:"bytes,23,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SupplierNo        *string `protobuf:"bytes,24,opt,name=supplier_no,json=supplierNo,proto3,oneof" json:"supplier_no,omitempty"`
	SupplierName      *string `protobuf:"bytes,25,opt,name=supplier_name,json=supplierName,proto3,oneof" json:"supplier_name,omitempty"`
	UserNo            *string `protobuf:"bytes,26,opt,name=user_no,json=userNo,proto3,oneof" json:"user_no,omitempty"`
	UserName          *string `protobuf:"bytes,27,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	OperatorId        *int32  `protobuf:"varint,28,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName      *string `protobuf:"bytes,29,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Epc               *string `protobuf:"bytes,30,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	OperationTime     *string `protobuf:"bytes,31,opt,name=operation_time,json=operationTime,proto3,oneof" json:"operation_time,omitempty"`
	BatchNo           *string `protobuf:"bytes,32,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	Tid               *string `protobuf:"bytes,33,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	LimitSupplier     *bool   `protobuf:"varint,34,opt,name=limit_supplier,json=limitSupplier,proto3,oneof" json:"limit_supplier,omitempty"`
	LimitUser         *bool   `protobuf:"varint,35,opt,name=limit_user,json=limitUser,proto3,oneof" json:"limit_user,omitempty"`
	LimitGoods        *bool   `protobuf:"varint,36,opt,name=limit_goods,json=limitGoods,proto3,oneof" json:"limit_goods,omitempty"`
	OperatorNo        *string `protobuf:"bytes,37,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	ImgUrl            *string `protobuf:"bytes,38,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
}

func (x *RfidPublishEntitiesResponse) Reset() {
	*x = RfidPublishEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidPublishEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidPublishEntitiesResponse) ProtoMessage() {}

func (x *RfidPublishEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidPublishEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidPublishEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{14}
}

func (x *RfidPublishEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetPublishTypeName() string {
	if x != nil && x.PublishTypeName != nil {
		return *x.PublishTypeName
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetIsDestroyed() bool {
	if x != nil && x.IsDestroyed != nil {
		return *x.IsDestroyed
	}
	return false
}

func (x *RfidPublishEntitiesResponse) GetPublishType() int32 {
	if x != nil && x.PublishType != nil {
		return *x.PublishType
	}
	return 0
}

func (x *RfidPublishEntitiesResponse) GetPublishDesc() string {
	if x != nil && x.PublishDesc != nil {
		return *x.PublishDesc
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetPublishRemark() string {
	if x != nil && x.PublishRemark != nil {
		return *x.PublishRemark
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetLimitSupplierNo() string {
	if x != nil && x.LimitSupplierNo != nil {
		return *x.LimitSupplierNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetLimitSupplierName() string {
	if x != nil && x.LimitSupplierName != nil {
		return *x.LimitSupplierName
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetLimitUserNo() string {
	if x != nil && x.LimitUserNo != nil {
		return *x.LimitUserNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetLimitUserName() string {
	if x != nil && x.LimitUserName != nil {
		return *x.LimitUserName
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetLimitGoodsNoList() string {
	if x != nil && x.LimitGoodsNoList != nil {
		return *x.LimitGoodsNoList
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetLimitSpecNoList() string {
	if x != nil && x.LimitSpecNoList != nil {
		return *x.LimitSpecNoList
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetSupplierNo() string {
	if x != nil && x.SupplierNo != nil {
		return *x.SupplierNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetSupplierName() string {
	if x != nil && x.SupplierName != nil {
		return *x.SupplierName
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetUserNo() string {
	if x != nil && x.UserNo != nil {
		return *x.UserNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidPublishEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetOperationTime() string {
	if x != nil && x.OperationTime != nil {
		return *x.OperationTime
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetLimitSupplier() bool {
	if x != nil && x.LimitSupplier != nil {
		return *x.LimitSupplier
	}
	return false
}

func (x *RfidPublishEntitiesResponse) GetLimitUser() bool {
	if x != nil && x.LimitUser != nil {
		return *x.LimitUser
	}
	return false
}

func (x *RfidPublishEntitiesResponse) GetLimitGoods() bool {
	if x != nil && x.LimitGoods != nil {
		return *x.LimitGoods
	}
	return false
}

func (x *RfidPublishEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidPublishEntitiesResponse) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

type RfidPublishEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidPublishEntitiesRetrieveRequest) Reset() {
	*x = RfidPublishEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidPublishEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidPublishEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidPublishEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidPublishEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidPublishEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{15}
}

func (x *RfidPublishEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidPublishEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	IsDestroyed          *bool    `protobuf:"varint,5,opt,name=is_destroyed,json=isDestroyed,proto3,oneof" json:"is_destroyed,omitempty"`
	PublishType          *int32   `protobuf:"varint,6,opt,name=publish_type,json=publishType,proto3,oneof" json:"publish_type,omitempty"`
	PublishDesc          *string  `protobuf:"bytes,7,opt,name=publish_desc,json=publishDesc,proto3,oneof" json:"publish_desc,omitempty"`
	PublishRemark        *string  `protobuf:"bytes,8,opt,name=publish_remark,json=publishRemark,proto3,oneof" json:"publish_remark,omitempty"`
	LimitSupplierNo      *string  `protobuf:"bytes,10,opt,name=limit_supplier_no,json=limitSupplierNo,proto3,oneof" json:"limit_supplier_no,omitempty"`
	LimitSupplierName    *string  `protobuf:"bytes,11,opt,name=limit_supplier_name,json=limitSupplierName,proto3,oneof" json:"limit_supplier_name,omitempty"`
	LimitUserNo          *string  `protobuf:"bytes,13,opt,name=limit_user_no,json=limitUserNo,proto3,oneof" json:"limit_user_no,omitempty"`
	LimitUserName        *string  `protobuf:"bytes,14,opt,name=limit_user_name,json=limitUserName,proto3,oneof" json:"limit_user_name,omitempty"`
	LimitGoodsNoList     *string  `protobuf:"bytes,16,opt,name=limit_goods_no_list,json=limitGoodsNoList,proto3,oneof" json:"limit_goods_no_list,omitempty"`
	LimitSpecNoList      *string  `protobuf:"bytes,17,opt,name=limit_spec_no_list,json=limitSpecNoList,proto3,oneof" json:"limit_spec_no_list,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,20,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,21,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,22,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,23,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SupplierNo           *string  `protobuf:"bytes,24,opt,name=supplier_no,json=supplierNo,proto3,oneof" json:"supplier_no,omitempty"`
	SupplierName         *string  `protobuf:"bytes,25,opt,name=supplier_name,json=supplierName,proto3,oneof" json:"supplier_name,omitempty"`
	UserNo               *string  `protobuf:"bytes,26,opt,name=user_no,json=userNo,proto3,oneof" json:"user_no,omitempty"`
	UserName             *string  `protobuf:"bytes,27,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	OperatorId           *int32   `protobuf:"varint,28,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName         *string  `protobuf:"bytes,29,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Epc                  *string  `protobuf:"bytes,30,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	OperationTime        *string  `protobuf:"bytes,31,opt,name=operation_time,json=operationTime,proto3,oneof" json:"operation_time,omitempty"`
	BatchNo              *string  `protobuf:"bytes,32,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	Tid                  *string  `protobuf:"bytes,33,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	LimitSupplier        *bool    `protobuf:"varint,34,opt,name=limit_supplier,json=limitSupplier,proto3,oneof" json:"limit_supplier,omitempty"`
	LimitUser            *bool    `protobuf:"varint,35,opt,name=limit_user,json=limitUser,proto3,oneof" json:"limit_user,omitempty"`
	LimitGoods           *bool    `protobuf:"varint,36,opt,name=limit_goods,json=limitGoods,proto3,oneof" json:"limit_goods,omitempty"`
	OperatorNo           *string  `protobuf:"bytes,37,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	ImgUrl               *string  `protobuf:"bytes,38,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
}

func (x *RfidPublishEntitiesUpdateRequest) Reset() {
	*x = RfidPublishEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidPublishEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidPublishEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidPublishEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidPublishEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidPublishEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{16}
}

func (x *RfidPublishEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidPublishEntitiesUpdateRequest) GetIsDestroyed() bool {
	if x != nil && x.IsDestroyed != nil {
		return *x.IsDestroyed
	}
	return false
}

func (x *RfidPublishEntitiesUpdateRequest) GetPublishType() int32 {
	if x != nil && x.PublishType != nil {
		return *x.PublishType
	}
	return 0
}

func (x *RfidPublishEntitiesUpdateRequest) GetPublishDesc() string {
	if x != nil && x.PublishDesc != nil {
		return *x.PublishDesc
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetPublishRemark() string {
	if x != nil && x.PublishRemark != nil {
		return *x.PublishRemark
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitSupplierNo() string {
	if x != nil && x.LimitSupplierNo != nil {
		return *x.LimitSupplierNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitSupplierName() string {
	if x != nil && x.LimitSupplierName != nil {
		return *x.LimitSupplierName
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitUserNo() string {
	if x != nil && x.LimitUserNo != nil {
		return *x.LimitUserNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitUserName() string {
	if x != nil && x.LimitUserName != nil {
		return *x.LimitUserName
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitGoodsNoList() string {
	if x != nil && x.LimitGoodsNoList != nil {
		return *x.LimitGoodsNoList
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitSpecNoList() string {
	if x != nil && x.LimitSpecNoList != nil {
		return *x.LimitSpecNoList
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetSupplierNo() string {
	if x != nil && x.SupplierNo != nil {
		return *x.SupplierNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetSupplierName() string {
	if x != nil && x.SupplierName != nil {
		return *x.SupplierName
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetUserNo() string {
	if x != nil && x.UserNo != nil {
		return *x.UserNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidPublishEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetOperationTime() string {
	if x != nil && x.OperationTime != nil {
		return *x.OperationTime
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitSupplier() bool {
	if x != nil && x.LimitSupplier != nil {
		return *x.LimitSupplier
	}
	return false
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitUser() bool {
	if x != nil && x.LimitUser != nil {
		return *x.LimitUser
	}
	return false
}

func (x *RfidPublishEntitiesUpdateRequest) GetLimitGoods() bool {
	if x != nil && x.LimitGoods != nil {
		return *x.LimitGoods
	}
	return false
}

func (x *RfidPublishEntitiesUpdateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidPublishEntitiesUpdateRequest) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

type RfidQualityEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	GoodsNo       *string `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        *string `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName     *string `protobuf:"bytes,9,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	Epc           *string `protobuf:"bytes,23,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	OperationTime *string `protobuf:"bytes,24,opt,name=operation_time,json=operationTime,proto3,oneof" json:"operation_time,omitempty"`
	Tid           *string `protobuf:"bytes,25,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode  *string `protobuf:"bytes,26,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	QaType        *int32  `protobuf:"varint,27,opt,name=qa_type,json=qaType,proto3,oneof" json:"qa_type,omitempty"`
	QaResult      *int32  `protobuf:"varint,28,opt,name=qa_result,json=qaResult,proto3,oneof" json:"qa_result,omitempty"`
	QaResultDesc  *string `protobuf:"bytes,30,opt,name=qa_result_desc,json=qaResultDesc,proto3,oneof" json:"qa_result_desc,omitempty"`
	QaRemark      *string `protobuf:"bytes,31,opt,name=qa_remark,json=qaRemark,proto3,oneof" json:"qa_remark,omitempty"`
	OperatorId    *int32  `protobuf:"varint,32,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo    *string `protobuf:"bytes,33,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName  *string `protobuf:"bytes,34,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
}

func (x *RfidQualityEntitiesCreateRequest) Reset() {
	*x = RfidQualityEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidQualityEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidQualityEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidQualityEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidQualityEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidQualityEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{17}
}

func (x *RfidQualityEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetOperationTime() string {
	if x != nil && x.OperationTime != nil {
		return *x.OperationTime
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetQaType() int32 {
	if x != nil && x.QaType != nil {
		return *x.QaType
	}
	return 0
}

func (x *RfidQualityEntitiesCreateRequest) GetQaResult() int32 {
	if x != nil && x.QaResult != nil {
		return *x.QaResult
	}
	return 0
}

func (x *RfidQualityEntitiesCreateRequest) GetQaResultDesc() string {
	if x != nil && x.QaResultDesc != nil {
		return *x.QaResultDesc
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetQaRemark() string {
	if x != nil && x.QaRemark != nil {
		return *x.QaRemark
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidQualityEntitiesCreateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidQualityEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

type RfidQualityEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidQualityEntitiesDestroyRequest) Reset() {
	*x = RfidQualityEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidQualityEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidQualityEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidQualityEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidQualityEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidQualityEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{18}
}

func (x *RfidQualityEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidQualityEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidQualityEntitiesListRequest) Reset() {
	*x = RfidQualityEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidQualityEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidQualityEntitiesListRequest) ProtoMessage() {}

func (x *RfidQualityEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidQualityEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidQualityEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{19}
}

func (x *RfidQualityEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidQualityEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidQualityEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidQualityEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidQualityEntitiesListResponse) Reset() {
	*x = RfidQualityEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidQualityEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidQualityEntitiesListResponse) ProtoMessage() {}

func (x *RfidQualityEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidQualityEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidQualityEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{20}
}

func (x *RfidQualityEntitiesListResponse) GetResults() []*RfidQualityEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidQualityEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidQualityEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime    *string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime    *string `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	GoodsNo       *string `protobuf:"bytes,9,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        *string `protobuf:"bytes,10,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName     *string `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	Epc           *string `protobuf:"bytes,23,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	OperationTime *string `protobuf:"bytes,24,opt,name=operation_time,json=operationTime,proto3,oneof" json:"operation_time,omitempty"`
	Tid           *string `protobuf:"bytes,25,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode  *string `protobuf:"bytes,26,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	QaType        *int32  `protobuf:"varint,27,opt,name=qa_type,json=qaType,proto3,oneof" json:"qa_type,omitempty"`
	QaResult      *int32  `protobuf:"varint,28,opt,name=qa_result,json=qaResult,proto3,oneof" json:"qa_result,omitempty"`
	QaResultDesc  *string `protobuf:"bytes,30,opt,name=qa_result_desc,json=qaResultDesc,proto3,oneof" json:"qa_result_desc,omitempty"`
	QaRemark      *string `protobuf:"bytes,31,opt,name=qa_remark,json=qaRemark,proto3,oneof" json:"qa_remark,omitempty"`
	OperatorId    *int32  `protobuf:"varint,32,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo    *string `protobuf:"bytes,33,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName  *string `protobuf:"bytes,34,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QaTypeName    *string `protobuf:"bytes,35,opt,name=qa_type_name,json=qaTypeName,proto3,oneof" json:"qa_type_name,omitempty"`
	QaResultName  *string `protobuf:"bytes,36,opt,name=qa_result_name,json=qaResultName,proto3,oneof" json:"qa_result_name,omitempty"`
	QaRemarkName  *string `protobuf:"bytes,37,opt,name=qa_remark_name,json=qaRemarkName,proto3,oneof" json:"qa_remark_name,omitempty"`
}

func (x *RfidQualityEntitiesResponse) Reset() {
	*x = RfidQualityEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidQualityEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidQualityEntitiesResponse) ProtoMessage() {}

func (x *RfidQualityEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidQualityEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidQualityEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{21}
}

func (x *RfidQualityEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetOperationTime() string {
	if x != nil && x.OperationTime != nil {
		return *x.OperationTime
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetQaType() int32 {
	if x != nil && x.QaType != nil {
		return *x.QaType
	}
	return 0
}

func (x *RfidQualityEntitiesResponse) GetQaResult() int32 {
	if x != nil && x.QaResult != nil {
		return *x.QaResult
	}
	return 0
}

func (x *RfidQualityEntitiesResponse) GetQaResultDesc() string {
	if x != nil && x.QaResultDesc != nil {
		return *x.QaResultDesc
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetQaRemark() string {
	if x != nil && x.QaRemark != nil {
		return *x.QaRemark
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidQualityEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetQaTypeName() string {
	if x != nil && x.QaTypeName != nil {
		return *x.QaTypeName
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetQaResultName() string {
	if x != nil && x.QaResultName != nil {
		return *x.QaResultName
	}
	return ""
}

func (x *RfidQualityEntitiesResponse) GetQaRemarkName() string {
	if x != nil && x.QaRemarkName != nil {
		return *x.QaRemarkName
	}
	return ""
}

type RfidQualityEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidQualityEntitiesRetrieveRequest) Reset() {
	*x = RfidQualityEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidQualityEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidQualityEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidQualityEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidQualityEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidQualityEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{22}
}

func (x *RfidQualityEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidQualityEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Epc                  *string  `protobuf:"bytes,3,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	Tid                  *string  `protobuf:"bytes,4,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,5,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,6,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,7,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,8,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	OperationTime        *string  `protobuf:"bytes,9,opt,name=operation_time,json=operationTime,proto3,oneof" json:"operation_time,omitempty"`
	QaType               *int32   `protobuf:"varint,10,opt,name=qa_type,json=qaType,proto3,oneof" json:"qa_type,omitempty"`
	QaResult             *int32   `protobuf:"varint,11,opt,name=qa_result,json=qaResult,proto3,oneof" json:"qa_result,omitempty"`
	QaResultDesc         *string  `protobuf:"bytes,13,opt,name=qa_result_desc,json=qaResultDesc,proto3,oneof" json:"qa_result_desc,omitempty"`
	QaRemark             *string  `protobuf:"bytes,14,opt,name=qa_remark,json=qaRemark,proto3,oneof" json:"qa_remark,omitempty"`
	OperatorId           *int32   `protobuf:"varint,15,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo           *string  `protobuf:"bytes,16,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName         *string  `protobuf:"bytes,17,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
}

func (x *RfidQualityEntitiesUpdateRequest) Reset() {
	*x = RfidQualityEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidQualityEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidQualityEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidQualityEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidQualityEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidQualityEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{23}
}

func (x *RfidQualityEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidQualityEntitiesUpdateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetOperationTime() string {
	if x != nil && x.OperationTime != nil {
		return *x.OperationTime
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetQaType() int32 {
	if x != nil && x.QaType != nil {
		return *x.QaType
	}
	return 0
}

func (x *RfidQualityEntitiesUpdateRequest) GetQaResult() int32 {
	if x != nil && x.QaResult != nil {
		return *x.QaResult
	}
	return 0
}

func (x *RfidQualityEntitiesUpdateRequest) GetQaResultDesc() string {
	if x != nil && x.QaResultDesc != nil {
		return *x.QaResultDesc
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetQaRemark() string {
	if x != nil && x.QaRemark != nil {
		return *x.QaRemark
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidQualityEntitiesUpdateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidQualityEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

type RfidReasonEntitiesChildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime   *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime   *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ReasonCode   int32   `protobuf:"varint,4,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName   string  `protobuf:"bytes,5,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	WithRemark   *bool   `protobuf:"varint,6,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved   *bool   `protobuf:"varint,7,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId   *int32  `protobuf:"varint,8,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName *string `protobuf:"bytes,9,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	ParentCode   *int32  `protobuf:"varint,10,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	BeCited      *bool   `protobuf:"varint,11,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesChildResponse) Reset() {
	*x = RfidReasonEntitiesChildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesChildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesChildResponse) ProtoMessage() {}

func (x *RfidReasonEntitiesChildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesChildResponse.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesChildResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{24}
}

func (x *RfidReasonEntitiesChildResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesChildResponse) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesChildResponse) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesChildResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesChildResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesChildResponse) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReasonEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ReasonCode   int32   `protobuf:"varint,2,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName   string  `protobuf:"bytes,3,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ParentCode   *int32  `protobuf:"varint,4,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	WithRemark   *bool   `protobuf:"varint,5,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved   *bool   `protobuf:"varint,6,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId   *int32  `protobuf:"varint,7,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName *string `protobuf:"bytes,8,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	BeCited      *bool   `protobuf:"varint,9,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesCreateRequest) Reset() {
	*x = RfidReasonEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{25}
}

func (x *RfidReasonEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesCreateRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesCreateRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesCreateRequest) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesCreateRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesCreateRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesCreateRequest) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReasonEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReasonEntitiesDestroyRequest) Reset() {
	*x = RfidReasonEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{26}
}

func (x *RfidReasonEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReasonEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReasonEntitiesListRequest) Reset() {
	*x = RfidReasonEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesListRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{27}
}

func (x *RfidReasonEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReasonEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReasonEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReasonEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReasonEntitiesListResponse) Reset() {
	*x = RfidReasonEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesListResponse) ProtoMessage() {}

func (x *RfidReasonEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{28}
}

func (x *RfidReasonEntitiesListResponse) GetResults() []*RfidReasonEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReasonEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReasonEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId             *string                            `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime      *string                            `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime      *string                            `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ReasonCode      int32                              `protobuf:"varint,4,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName      string                             `protobuf:"bytes,5,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	WithRemark      *bool                              `protobuf:"varint,6,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved      *bool                              `protobuf:"varint,7,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId      *int32                             `protobuf:"varint,8,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName    *string                            `protobuf:"bytes,9,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	ChildrenReasons []*RfidReasonEntitiesChildResponse `protobuf:"bytes,10,rep,name=children_reasons,json=childrenReasons,proto3" json:"children_reasons,omitempty"`
	ParentCode      *int32                             `protobuf:"varint,11,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	BeCited         *bool                              `protobuf:"varint,12,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesResponse) Reset() {
	*x = RfidReasonEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesResponse) ProtoMessage() {}

func (x *RfidReasonEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{29}
}

func (x *RfidReasonEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesResponse) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesResponse) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetChildrenReasons() []*RfidReasonEntitiesChildResponse {
	if x != nil {
		return x.ChildrenReasons
	}
	return nil
}

func (x *RfidReasonEntitiesResponse) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesResponse) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReasonEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReasonEntitiesRetrieveRequest) Reset() {
	*x = RfidReasonEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{30}
}

func (x *RfidReasonEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReasonEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ReasonCode           int32    `protobuf:"varint,3,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName           string   `protobuf:"bytes,4,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ParentCode           *int32   `protobuf:"varint,5,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	WithRemark           *bool    `protobuf:"varint,6,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved           *bool    `protobuf:"varint,7,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId           *int32   `protobuf:"varint,8,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName         *string  `protobuf:"bytes,9,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	BeCited              *bool    `protobuf:"varint,10,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesUpdateRequest) Reset() {
	*x = RfidReasonEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{31}
}

func (x *RfidReasonEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidReasonEntitiesUpdateRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesUpdateRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesUpdateRequest) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesUpdateRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesUpdateRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesUpdateRequest) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReturnInspectAggEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                              `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	EpcList             *string                              `protobuf:"bytes,2,opt,name=epc_list,json=epcList,proto3,oneof" json:"epc_list,omitempty"`
	CreateTime          *string                              `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                              `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	QualityResult       *int32                               `protobuf:"varint,5,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	GoodsNo             *string                              `protobuf:"bytes,6,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string                              `protobuf:"bytes,7,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName           *string                              `protobuf:"bytes,8,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	Num                 *int32                               `protobuf:"varint,9,opt,name=num,proto3,oneof" json:"num,omitempty"`
	FromWarehouseNo     *string                              `protobuf:"bytes,10,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string                              `protobuf:"bytes,11,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo   *string                              `protobuf:"bytes,12,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string                              `protobuf:"bytes,13,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo          *string                              `protobuf:"bytes,14,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName        *string                              `protobuf:"bytes,15,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	EpcIds              []*RfidReturnInspectEntitiesResponse `protobuf:"bytes,16,rep,name=epc_ids,json=epcIds,proto3" json:"epc_ids,omitempty"`
	QualityResultName   *string                              `protobuf:"bytes,17,opt,name=quality_result_name,json=qualityResultName,proto3,oneof" json:"quality_result_name,omitempty"`
}

func (x *RfidReturnInspectAggEntitiesResponse) Reset() {
	*x = RfidReturnInspectAggEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggEntitiesResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{32}
}

func (x *RfidReturnInspectAggEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetEpcList() string {
	if x != nil && x.EpcList != nil {
		return *x.EpcList
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectAggEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *RfidReturnInspectAggEntitiesResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetEpcIds() []*RfidReturnInspectEntitiesResponse {
	if x != nil {
		return x.EpcIds
	}
	return nil
}

func (x *RfidReturnInspectAggEntitiesResponse) GetQualityResultName() string {
	if x != nil && x.QualityResultName != nil {
		return *x.QualityResultName
	}
	return ""
}

type RfidReturnInspectAggListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReturnInspectAggListRequest) Reset() {
	*x = RfidReturnInspectAggListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggListRequest) ProtoMessage() {}

func (x *RfidReturnInspectAggListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggListRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{33}
}

func (x *RfidReturnInspectAggListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReturnInspectAggListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReturnInspectAggListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReturnInspectAggResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectAggListResponse) Reset() {
	*x = RfidReturnInspectAggListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggListResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggListResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{34}
}

func (x *RfidReturnInspectAggListResponse) GetResults() []*RfidReturnInspectAggResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReturnInspectAggListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectAggResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggEntities         []*RfidReturnInspectAggEntitiesResponse `protobuf:"bytes,2,rep,name=agg_entities,json=aggEntities,proto3" json:"agg_entities,omitempty"`
	CreateTime          *string                                 `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                                 `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	AggNo               *string                                 `protobuf:"bytes,5,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                                 `protobuf:"bytes,6,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	PushWdtStatus       *int32                                  `protobuf:"varint,7,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	WdtTransferNo       *string                                 `protobuf:"bytes,8,opt,name=wdt_transfer_no,json=wdtTransferNo,proto3,oneof" json:"wdt_transfer_no,omitempty"`
	WdtPushTime         *string                                 `protobuf:"bytes,9,opt,name=wdt_push_time,json=wdtPushTime,proto3,oneof" json:"wdt_push_time,omitempty"`
	AggType             *int32                                  `protobuf:"varint,10,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	FromWarehouseNo     *string                                 `protobuf:"bytes,11,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string                                 `protobuf:"bytes,12,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo   *string                                 `protobuf:"bytes,13,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string                                 `protobuf:"bytes,14,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	AggGoodsTypeCount   *int32                                  `protobuf:"varint,15,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *float64                                `protobuf:"fixed64,16,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	WdtFailureReasons   *string                                 `protobuf:"bytes,17,opt,name=wdt_failure_reasons,json=wdtFailureReasons,proto3,oneof" json:"wdt_failure_reasons,omitempty"`
	PushWdtStatusName   *string                                 `protobuf:"bytes,18,opt,name=push_wdt_status_name,json=pushWdtStatusName,proto3,oneof" json:"push_wdt_status_name,omitempty"`
	AggTypeName         *string                                 `protobuf:"bytes,19,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
}

func (x *RfidReturnInspectAggResponse) Reset() {
	*x = RfidReturnInspectAggResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{35}
}

func (x *RfidReturnInspectAggResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggEntities() []*RfidReturnInspectAggEntitiesResponse {
	if x != nil {
		return x.AggEntities
	}
	return nil
}

func (x *RfidReturnInspectAggResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetWdtTransferNo() string {
	if x != nil && x.WdtTransferNo != nil {
		return *x.WdtTransferNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetWdtPushTime() string {
	if x != nil && x.WdtPushTime != nil {
		return *x.WdtPushTime
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetWdtFailureReasons() string {
	if x != nil && x.WdtFailureReasons != nil {
		return *x.WdtFailureReasons
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetPushWdtStatusName() string {
	if x != nil && x.PushWdtStatusName != nil {
		return *x.PushWdtStatusName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

type RfidReturnInspectAggSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RfidReturnInspectAggSyncRequest) Reset() {
	*x = RfidReturnInspectAggSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggSyncRequest) ProtoMessage() {}

func (x *RfidReturnInspectAggSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggSyncRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggSyncRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{36}
}

type RfidReturnInspectAggSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectAggSyncResponse) Reset() {
	*x = RfidReturnInspectAggSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggSyncResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggSyncResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggSyncResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{37}
}

func (x *RfidReturnInspectAggSyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidReturnInspectAggSyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidReturnInspectAggSyncResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectConfigCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ConfigNo         string   `protobuf:"bytes,2,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	ConfigName       string   `protobuf:"bytes,3,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	ConfigRemark     *string  `protobuf:"bytes,4,opt,name=config_remark,json=configRemark,proto3,oneof" json:"config_remark,omitempty"`
	QualityResult    *int32   `protobuf:"varint,5,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	SrcWarehouseName string   `protobuf:"bytes,6,opt,name=src_warehouse_name,json=srcWarehouseName,proto3" json:"src_warehouse_name,omitempty"`
	SrcWarehouseNo   string   `protobuf:"bytes,7,opt,name=src_warehouse_no,json=srcWarehouseNo,proto3" json:"src_warehouse_no,omitempty"`
	WarehouseName    string   `protobuf:"bytes,8,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	WarehouseNo      string   `protobuf:"bytes,9,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	OperatorId       *int32   `protobuf:"varint,10,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName     *string  `protobuf:"bytes,11,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	RelatedIds       []string `protobuf:"bytes,12,rep,name=related_ids,json=relatedIds,proto3" json:"related_ids,omitempty"`
}

func (x *RfidReturnInspectConfigCreateRequest) Reset() {
	*x = RfidReturnInspectConfigCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigCreateRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{38}
}

func (x *RfidReturnInspectConfigCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetConfigRemark() string {
	if x != nil && x.ConfigRemark != nil {
		return *x.ConfigRemark
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectConfigCreateRequest) GetSrcWarehouseName() string {
	if x != nil {
		return x.SrcWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetSrcWarehouseNo() string {
	if x != nil {
		return x.SrcWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReturnInspectConfigCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetRelatedIds() []string {
	if x != nil {
		return x.RelatedIds
	}
	return nil
}

type RfidReturnInspectConfigDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectConfigDestroyRequest) Reset() {
	*x = RfidReturnInspectConfigDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigDestroyRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{39}
}

func (x *RfidReturnInspectConfigDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectConfigListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReturnInspectConfigListRequest) Reset() {
	*x = RfidReturnInspectConfigListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigListRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigListRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{40}
}

func (x *RfidReturnInspectConfigListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReturnInspectConfigListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReturnInspectConfigListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReturnInspectConfigResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectConfigListResponse) Reset() {
	*x = RfidReturnInspectConfigListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigListResponse) ProtoMessage() {}

func (x *RfidReturnInspectConfigListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigListResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{41}
}

func (x *RfidReturnInspectConfigListResponse) GetResults() []*RfidReturnInspectConfigResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReturnInspectConfigListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string                       `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	InspectReasons    []*RfidReasonEntitiesResponse `protobuf:"bytes,2,rep,name=inspect_reasons,json=inspectReasons,proto3" json:"inspect_reasons,omitempty"`
	CreateTime        *string                       `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime        *string                       `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ConfigNo          string                        `protobuf:"bytes,5,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	ConfigName        string                        `protobuf:"bytes,6,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	ConfigRemark      *string                       `protobuf:"bytes,7,opt,name=config_remark,json=configRemark,proto3,oneof" json:"config_remark,omitempty"`
	QualityResult     *int32                        `protobuf:"varint,8,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	SrcWarehouseName  string                        `protobuf:"bytes,9,opt,name=src_warehouse_name,json=srcWarehouseName,proto3" json:"src_warehouse_name,omitempty"`
	SrcWarehouseNo    string                        `protobuf:"bytes,10,opt,name=src_warehouse_no,json=srcWarehouseNo,proto3" json:"src_warehouse_no,omitempty"`
	WarehouseName     string                        `protobuf:"bytes,11,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	WarehouseNo       string                        `protobuf:"bytes,12,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	OperatorId        *int32                        `protobuf:"varint,13,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName      *string                       `protobuf:"bytes,14,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResultName *string                       `protobuf:"bytes,15,opt,name=quality_result_name,json=qualityResultName,proto3,oneof" json:"quality_result_name,omitempty"`
}

func (x *RfidReturnInspectConfigResponse) Reset() {
	*x = RfidReturnInspectConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigResponse) ProtoMessage() {}

func (x *RfidReturnInspectConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{42}
}

func (x *RfidReturnInspectConfigResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetInspectReasons() []*RfidReasonEntitiesResponse {
	if x != nil {
		return x.InspectReasons
	}
	return nil
}

func (x *RfidReturnInspectConfigResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetConfigRemark() string {
	if x != nil && x.ConfigRemark != nil {
		return *x.ConfigRemark
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectConfigResponse) GetSrcWarehouseName() string {
	if x != nil {
		return x.SrcWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetSrcWarehouseNo() string {
	if x != nil {
		return x.SrcWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReturnInspectConfigResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetQualityResultName() string {
	if x != nil && x.QualityResultName != nil {
		return *x.QualityResultName
	}
	return ""
}

type RfidReturnInspectConfigRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectConfigRetrieveRequest) Reset() {
	*x = RfidReturnInspectConfigRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigRetrieveRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{43}
}

func (x *RfidReturnInspectConfigRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ConfigNo             string   `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	ConfigName           string   `protobuf:"bytes,4,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	ConfigRemark         *string  `protobuf:"bytes,5,opt,name=config_remark,json=configRemark,proto3,oneof" json:"config_remark,omitempty"`
	QualityResult        *int32   `protobuf:"varint,6,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	SrcWarehouseName     string   `protobuf:"bytes,7,opt,name=src_warehouse_name,json=srcWarehouseName,proto3" json:"src_warehouse_name,omitempty"`
	SrcWarehouseNo       string   `protobuf:"bytes,8,opt,name=src_warehouse_no,json=srcWarehouseNo,proto3" json:"src_warehouse_no,omitempty"`
	WarehouseName        string   `protobuf:"bytes,9,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	WarehouseNo          string   `protobuf:"bytes,10,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	OperatorId           *int32   `protobuf:"varint,11,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName         *string  `protobuf:"bytes,12,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,13,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	UpdateIds            []string `protobuf:"bytes,14,rep,name=update_ids,json=updateIds,proto3" json:"update_ids,omitempty"`
}

func (x *RfidReturnInspectConfigUpdateRequest) Reset() {
	*x = RfidReturnInspectConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigUpdateRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{44}
}

func (x *RfidReturnInspectConfigUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetConfigRemark() string {
	if x != nil && x.ConfigRemark != nil {
		return *x.ConfigRemark
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectConfigUpdateRequest) GetSrcWarehouseName() string {
	if x != nil {
		return x.SrcWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetSrcWarehouseNo() string {
	if x != nil {
		return x.SrcWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReturnInspectConfigUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidReturnInspectConfigUpdateRequest) GetUpdateIds() []string {
	if x != nil {
		return x.UpdateIds
	}
	return nil
}

type RfidReturnInspectEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	InspectTime         *string  `protobuf:"bytes,2,opt,name=inspect_time,json=inspectTime,proto3,oneof" json:"inspect_time,omitempty"`
	IsWithdraw          *bool    `protobuf:"varint,3,opt,name=is_withdraw,json=isWithdraw,proto3,oneof" json:"is_withdraw,omitempty"`
	AggConsignStatus    *int32   `protobuf:"varint,4,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo               *string  `protobuf:"bytes,5,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string  `protobuf:"bytes,6,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	GoodsNo             *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName           *string  `protobuf:"bytes,9,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsEpc            *string  `protobuf:"bytes,10,opt,name=goods_epc,json=goodsEpc,proto3,oneof" json:"goods_epc,omitempty"`
	GoodsTid            *string  `protobuf:"bytes,11,opt,name=goods_tid,json=goodsTid,proto3,oneof" json:"goods_tid,omitempty"`
	FromWarehouseNo     *string  `protobuf:"bytes,12,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string  `protobuf:"bytes,13,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo   *string  `protobuf:"bytes,14,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string  `protobuf:"bytes,15,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo          *string  `protobuf:"bytes,16,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName        *string  `protobuf:"bytes,17,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResult       *int32   `protobuf:"varint,18,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	QualityRemark       *string  `protobuf:"bytes,20,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	AntiFake            *string  `protobuf:"bytes,21,opt,name=anti_fake,json=antiFake,proto3,oneof" json:"anti_fake,omitempty"`
	RelatedIds          []string `protobuf:"bytes,22,rep,name=related_ids,json=relatedIds,proto3" json:"related_ids,omitempty"`
	StockInCount        *int32   `protobuf:"varint,23,opt,name=stock_in_count,json=stockInCount,proto3,oneof" json:"stock_in_count,omitempty"`
	StockOutCount       *int32   `protobuf:"varint,24,opt,name=stock_out_count,json=stockOutCount,proto3,oneof" json:"stock_out_count,omitempty"`
	Uuid                *string  `protobuf:"bytes,25,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
}

func (x *RfidReturnInspectEntitiesCreateRequest) Reset() {
	*x = RfidReturnInspectEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{45}
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetInspectTime() string {
	if x != nil && x.InspectTime != nil {
		return *x.InspectTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetIsWithdraw() bool {
	if x != nil && x.IsWithdraw != nil {
		return *x.IsWithdraw
	}
	return false
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsEpc() string {
	if x != nil && x.GoodsEpc != nil {
		return *x.GoodsEpc
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsTid() string {
	if x != nil && x.GoodsTid != nil {
		return *x.GoodsTid
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAntiFake() string {
	if x != nil && x.AntiFake != nil {
		return *x.AntiFake
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetRelatedIds() []string {
	if x != nil {
		return x.RelatedIds
	}
	return nil
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetStockInCount() int32 {
	if x != nil && x.StockInCount != nil {
		return *x.StockInCount
	}
	return 0
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetStockOutCount() int32 {
	if x != nil && x.StockOutCount != nil {
		return *x.StockOutCount
	}
	return 0
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

type RfidReturnInspectEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectEntitiesDestroyRequest) Reset() {
	*x = RfidReturnInspectEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{46}
}

func (x *RfidReturnInspectEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReturnInspectEntitiesListRequest) Reset() {
	*x = RfidReturnInspectEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesListRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{47}
}

func (x *RfidReturnInspectEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReturnInspectEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReturnInspectEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReturnInspectEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectEntitiesListResponse) Reset() {
	*x = RfidReturnInspectEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesListResponse) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{48}
}

func (x *RfidReturnInspectEntitiesListResponse) GetResults() []*RfidReturnInspectEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReturnInspectEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string                       `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	InspectTime          *string                       `protobuf:"bytes,2,opt,name=inspect_time,json=inspectTime,proto3,oneof" json:"inspect_time,omitempty"`
	CreateTime           *string                       `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime           *string                       `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	IsWithdraw           *bool                         `protobuf:"varint,5,opt,name=is_withdraw,json=isWithdraw,proto3,oneof" json:"is_withdraw,omitempty"`
	AggConsignStatus     *int32                        `protobuf:"varint,6,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo                *string                       `protobuf:"bytes,7,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName              *string                       `protobuf:"bytes,8,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	GoodsNo              *string                       `protobuf:"bytes,9,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string                       `protobuf:"bytes,10,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string                       `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsEpc             *string                       `protobuf:"bytes,12,opt,name=goods_epc,json=goodsEpc,proto3,oneof" json:"goods_epc,omitempty"`
	GoodsTid             *string                       `protobuf:"bytes,13,opt,name=goods_tid,json=goodsTid,proto3,oneof" json:"goods_tid,omitempty"`
	FromWarehouseNo      *string                       `protobuf:"bytes,14,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string                       `protobuf:"bytes,15,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo    *string                       `protobuf:"bytes,16,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName  *string                       `protobuf:"bytes,17,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo           *string                       `protobuf:"bytes,18,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName         *string                       `protobuf:"bytes,19,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResult        *int32                        `protobuf:"varint,20,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	QualityRemark        *string                       `protobuf:"bytes,22,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	AntiFake             *string                       `protobuf:"bytes,23,opt,name=anti_fake,json=antiFake,proto3,oneof" json:"anti_fake,omitempty"`
	ResultReasons        []*RfidReasonEntitiesResponse `protobuf:"bytes,24,rep,name=result_reasons,json=resultReasons,proto3" json:"result_reasons,omitempty"`
	AggConsignStatusName *string                       `protobuf:"bytes,25,opt,name=agg_consign_status_name,json=aggConsignStatusName,proto3,oneof" json:"agg_consign_status_name,omitempty"`
	QualityResultName    *string                       `protobuf:"bytes,26,opt,name=quality_result_name,json=qualityResultName,proto3,oneof" json:"quality_result_name,omitempty"`
	StockInCount         *int32                        `protobuf:"varint,27,opt,name=stock_in_count,json=stockInCount,proto3,oneof" json:"stock_in_count,omitempty"`
	StockOutCount        *int32                        `protobuf:"varint,28,opt,name=stock_out_count,json=stockOutCount,proto3,oneof" json:"stock_out_count,omitempty"`
}

func (x *RfidReturnInspectEntitiesResponse) Reset() {
	*x = RfidReturnInspectEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesResponse) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{49}
}

func (x *RfidReturnInspectEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetInspectTime() string {
	if x != nil && x.InspectTime != nil {
		return *x.InspectTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetIsWithdraw() bool {
	if x != nil && x.IsWithdraw != nil {
		return *x.IsWithdraw
	}
	return false
}

func (x *RfidReturnInspectEntitiesResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *RfidReturnInspectEntitiesResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsEpc() string {
	if x != nil && x.GoodsEpc != nil {
		return *x.GoodsEpc
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsTid() string {
	if x != nil && x.GoodsTid != nil {
		return *x.GoodsTid
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectEntitiesResponse) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetAntiFake() string {
	if x != nil && x.AntiFake != nil {
		return *x.AntiFake
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetResultReasons() []*RfidReasonEntitiesResponse {
	if x != nil {
		return x.ResultReasons
	}
	return nil
}

func (x *RfidReturnInspectEntitiesResponse) GetAggConsignStatusName() string {
	if x != nil && x.AggConsignStatusName != nil {
		return *x.AggConsignStatusName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetQualityResultName() string {
	if x != nil && x.QualityResultName != nil {
		return *x.QualityResultName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetStockInCount() int32 {
	if x != nil && x.StockInCount != nil {
		return *x.StockInCount
	}
	return 0
}

func (x *RfidReturnInspectEntitiesResponse) GetStockOutCount() int32 {
	if x != nil && x.StockOutCount != nil {
		return *x.StockOutCount
	}
	return 0
}

type RfidReturnInspectEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectEntitiesRetrieveRequest) Reset() {
	*x = RfidReturnInspectEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{50}
}

func (x *RfidReturnInspectEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	InspectTime          *string  `protobuf:"bytes,3,opt,name=inspect_time,json=inspectTime,proto3,oneof" json:"inspect_time,omitempty"`
	IsWithdraw           *bool    `protobuf:"varint,4,opt,name=is_withdraw,json=isWithdraw,proto3,oneof" json:"is_withdraw,omitempty"`
	AggConsignStatus     *int32   `protobuf:"varint,5,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo                *string  `protobuf:"bytes,6,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName              *string  `protobuf:"bytes,7,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,8,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,9,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,10,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsEpc             *string  `protobuf:"bytes,11,opt,name=goods_epc,json=goodsEpc,proto3,oneof" json:"goods_epc,omitempty"`
	GoodsTid             *string  `protobuf:"bytes,12,opt,name=goods_tid,json=goodsTid,proto3,oneof" json:"goods_tid,omitempty"`
	FromWarehouseNo      *string  `protobuf:"bytes,13,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string  `protobuf:"bytes,14,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo    *string  `protobuf:"bytes,15,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName  *string  `protobuf:"bytes,16,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo           *string  `protobuf:"bytes,17,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName         *string  `protobuf:"bytes,18,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResult        *int32   `protobuf:"varint,19,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	QualityRemark        *string  `protobuf:"bytes,21,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	AntiFake             *string  `protobuf:"bytes,22,opt,name=anti_fake,json=antiFake,proto3,oneof" json:"anti_fake,omitempty"`
	UpdateIds            []string `protobuf:"bytes,23,rep,name=update_ids,json=updateIds,proto3" json:"update_ids,omitempty"`
	StockInCount         *int32   `protobuf:"varint,24,opt,name=stock_in_count,json=stockInCount,proto3,oneof" json:"stock_in_count,omitempty"`
	StockOutCount        *int32   `protobuf:"varint,25,opt,name=stock_out_count,json=stockOutCount,proto3,oneof" json:"stock_out_count,omitempty"`
}

func (x *RfidReturnInspectEntitiesUpdateRequest) Reset() {
	*x = RfidReturnInspectEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{51}
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetInspectTime() string {
	if x != nil && x.InspectTime != nil {
		return *x.InspectTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetIsWithdraw() bool {
	if x != nil && x.IsWithdraw != nil {
		return *x.IsWithdraw
	}
	return false
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsEpc() string {
	if x != nil && x.GoodsEpc != nil {
		return *x.GoodsEpc
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsTid() string {
	if x != nil && x.GoodsTid != nil {
		return *x.GoodsTid
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAntiFake() string {
	if x != nil && x.AntiFake != nil {
		return *x.AntiFake
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetUpdateIds() []string {
	if x != nil {
		return x.UpdateIds
	}
	return nil
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetStockInCount() int32 {
	if x != nil && x.StockInCount != nil {
		return *x.StockInCount
	}
	return 0
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetStockOutCount() int32 {
	if x != nil && x.StockOutCount != nil {
		return *x.StockOutCount
	}
	return 0
}

type RfidStockInOutApplyEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ApplyTime           *string `protobuf:"bytes,2,opt,name=apply_time,json=applyTime,proto3,oneof" json:"apply_time,omitempty"`
	ApplyType           string  `protobuf:"bytes,3,opt,name=apply_type,json=applyType,proto3" json:"apply_type,omitempty"`
	OmsWmsRelatedNo     *string `protobuf:"bytes,4,opt,name=oms_wms_related_no,json=omsWmsRelatedNo,proto3,oneof" json:"oms_wms_related_no,omitempty"`
	KingdeeNo           *string `protobuf:"bytes,5,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	OmsNo               *string `protobuf:"bytes,6,opt,name=oms_no,json=omsNo,proto3,oneof" json:"oms_no,omitempty"`
	WmsNo               *string `protobuf:"bytes,7,opt,name=wms_no,json=wmsNo,proto3,oneof" json:"wms_no,omitempty"`
	FromWarehouseNo     *string `protobuf:"bytes,8,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string `protobuf:"bytes,9,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	ToWarehouseNo       *string `protobuf:"bytes,10,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName     *string `protobuf:"bytes,11,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	OmsOutNoList        *string `protobuf:"bytes,12,opt,name=oms_out_no_list,json=omsOutNoList,proto3,oneof" json:"oms_out_no_list,omitempty"`
	OmsInNoList         *string `protobuf:"bytes,13,opt,name=oms_in_no_list,json=omsInNoList,proto3,oneof" json:"oms_in_no_list,omitempty"`
	ProviderNo          *string `protobuf:"bytes,16,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName        *string `protobuf:"bytes,17,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	CustomerNo          *string `protobuf:"bytes,18,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName        *string `protobuf:"bytes,19,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	Epc                 *string `protobuf:"bytes,20,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	Tid                 *string `protobuf:"bytes,21,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode        *string `protobuf:"bytes,22,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo             *string `protobuf:"bytes,23,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string `protobuf:"bytes,24,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName           *string `protobuf:"bytes,25,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	OperatorId          *int32  `protobuf:"varint,26,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo          *string `protobuf:"bytes,27,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName        *string `protobuf:"bytes,28,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	SrcTids             *string `protobuf:"bytes,29,opt,name=src_tids,json=srcTids,proto3,oneof" json:"src_tids,omitempty"`
	ShopNo              *string `protobuf:"bytes,30,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName            *string `protobuf:"bytes,31,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	LogisticsNo         *string `protobuf:"bytes,32,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsCode       *string `protobuf:"bytes,33,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsName       *string `protobuf:"bytes,34,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	ReceiverName        *string `protobuf:"bytes,35,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverMobile      *string `protobuf:"bytes,36,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverAddress     *string `protobuf:"bytes,37,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverProvince    *string `protobuf:"bytes,38,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverDtb         *string `protobuf:"bytes,39,opt,name=receiver_dtb,json=receiverDtb,proto3,oneof" json:"receiver_dtb,omitempty"`
	ReceiverCity        *string `protobuf:"bytes,40,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict    *string `protobuf:"bytes,41,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ResultOmsNo         *string `protobuf:"bytes,42,opt,name=result_oms_no,json=resultOmsNo,proto3,oneof" json:"result_oms_no,omitempty"`
	ResultWmsNo         *string `protobuf:"bytes,43,opt,name=result_wms_no,json=resultWmsNo,proto3,oneof" json:"result_wms_no,omitempty"`
	SrcOmsNo            *string `protobuf:"bytes,44,opt,name=src_oms_no,json=srcOmsNo,proto3,oneof" json:"src_oms_no,omitempty"`
	SrcWmsNo            *string `protobuf:"bytes,45,opt,name=src_wms_no,json=srcWmsNo,proto3,oneof" json:"src_wms_no,omitempty"`
	ReturnLogisticsNo   *string `protobuf:"bytes,46,opt,name=return_logistics_no,json=returnLogisticsNo,proto3,oneof" json:"return_logistics_no,omitempty"`
	ReturnLogisticsCode *string `protobuf:"bytes,47,opt,name=return_logistics_code,json=returnLogisticsCode,proto3,oneof" json:"return_logistics_code,omitempty"`
	ReturnLogisticsName *string `protobuf:"bytes,48,opt,name=return_logistics_name,json=returnLogisticsName,proto3,oneof" json:"return_logistics_name,omitempty"`
	RefundReason        *string `protobuf:"bytes,49,opt,name=refund_reason,json=refundReason,proto3,oneof" json:"refund_reason,omitempty"`
	WmsOutNoList        *string `protobuf:"bytes,50,opt,name=wms_out_no_list,json=wmsOutNoList,proto3,oneof" json:"wms_out_no_list,omitempty"`
	WmsInNoList         *string `protobuf:"bytes,51,opt,name=wms_in_no_list,json=wmsInNoList,proto3,oneof" json:"wms_in_no_list,omitempty"`
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) Reset() {
	*x = RfidStockInOutApplyEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutApplyEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidStockInOutApplyEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutApplyEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutApplyEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{52}
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetApplyTime() string {
	if x != nil && x.ApplyTime != nil {
		return *x.ApplyTime
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetApplyType() string {
	if x != nil {
		return x.ApplyType
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetOmsWmsRelatedNo() string {
	if x != nil && x.OmsWmsRelatedNo != nil {
		return *x.OmsWmsRelatedNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetOmsNo() string {
	if x != nil && x.OmsNo != nil {
		return *x.OmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetWmsNo() string {
	if x != nil && x.WmsNo != nil {
		return *x.WmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetOmsOutNoList() string {
	if x != nil && x.OmsOutNoList != nil {
		return *x.OmsOutNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetOmsInNoList() string {
	if x != nil && x.OmsInNoList != nil {
		return *x.OmsInNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetSrcTids() string {
	if x != nil && x.SrcTids != nil {
		return *x.SrcTids
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReceiverDtb() string {
	if x != nil && x.ReceiverDtb != nil {
		return *x.ReceiverDtb
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetResultOmsNo() string {
	if x != nil && x.ResultOmsNo != nil {
		return *x.ResultOmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetResultWmsNo() string {
	if x != nil && x.ResultWmsNo != nil {
		return *x.ResultWmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetSrcOmsNo() string {
	if x != nil && x.SrcOmsNo != nil {
		return *x.SrcOmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetSrcWmsNo() string {
	if x != nil && x.SrcWmsNo != nil {
		return *x.SrcWmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReturnLogisticsNo() string {
	if x != nil && x.ReturnLogisticsNo != nil {
		return *x.ReturnLogisticsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReturnLogisticsCode() string {
	if x != nil && x.ReturnLogisticsCode != nil {
		return *x.ReturnLogisticsCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetReturnLogisticsName() string {
	if x != nil && x.ReturnLogisticsName != nil {
		return *x.ReturnLogisticsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetRefundReason() string {
	if x != nil && x.RefundReason != nil {
		return *x.RefundReason
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetWmsOutNoList() string {
	if x != nil && x.WmsOutNoList != nil {
		return *x.WmsOutNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesCreateRequest) GetWmsInNoList() string {
	if x != nil && x.WmsInNoList != nil {
		return *x.WmsInNoList
	}
	return ""
}

type RfidStockInOutApplyEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidStockInOutApplyEntitiesDestroyRequest) Reset() {
	*x = RfidStockInOutApplyEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutApplyEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutApplyEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidStockInOutApplyEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutApplyEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutApplyEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{53}
}

func (x *RfidStockInOutApplyEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidStockInOutApplyEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidStockInOutApplyEntitiesListRequest) Reset() {
	*x = RfidStockInOutApplyEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutApplyEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutApplyEntitiesListRequest) ProtoMessage() {}

func (x *RfidStockInOutApplyEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutApplyEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutApplyEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{54}
}

func (x *RfidStockInOutApplyEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidStockInOutApplyEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidStockInOutApplyEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidStockInOutApplyEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidStockInOutApplyEntitiesListResponse) Reset() {
	*x = RfidStockInOutApplyEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutApplyEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutApplyEntitiesListResponse) ProtoMessage() {}

func (x *RfidStockInOutApplyEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutApplyEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidStockInOutApplyEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{55}
}

func (x *RfidStockInOutApplyEntitiesListResponse) GetResults() []*RfidStockInOutApplyEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidStockInOutApplyEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidStockInOutApplyEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ResultEntities      []*RfidStockInOutResultEntitiesResponse `protobuf:"bytes,2,rep,name=result_entities,json=resultEntities,proto3" json:"result_entities,omitempty"`
	ApplyTypeName       *string                                 `protobuf:"bytes,3,opt,name=apply_type_name,json=applyTypeName,proto3,oneof" json:"apply_type_name,omitempty"`
	ApplyTime           *string                                 `protobuf:"bytes,4,opt,name=apply_time,json=applyTime,proto3,oneof" json:"apply_time,omitempty"`
	CreateTime          *string                                 `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                                 `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ApplyType           string                                  `protobuf:"bytes,7,opt,name=apply_type,json=applyType,proto3" json:"apply_type,omitempty"`
	OmsWmsRelatedNo     *string                                 `protobuf:"bytes,8,opt,name=oms_wms_related_no,json=omsWmsRelatedNo,proto3,oneof" json:"oms_wms_related_no,omitempty"`
	KingdeeNo           *string                                 `protobuf:"bytes,9,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	OmsNo               *string                                 `protobuf:"bytes,10,opt,name=oms_no,json=omsNo,proto3,oneof" json:"oms_no,omitempty"`
	WmsNo               *string                                 `protobuf:"bytes,11,opt,name=wms_no,json=wmsNo,proto3,oneof" json:"wms_no,omitempty"`
	FromWarehouseNo     *string                                 `protobuf:"bytes,12,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string                                 `protobuf:"bytes,13,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	ToWarehouseNo       *string                                 `protobuf:"bytes,14,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName     *string                                 `protobuf:"bytes,15,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	OmsOutNoList        *string                                 `protobuf:"bytes,16,opt,name=oms_out_no_list,json=omsOutNoList,proto3,oneof" json:"oms_out_no_list,omitempty"`
	OmsInNoList         *string                                 `protobuf:"bytes,17,opt,name=oms_in_no_list,json=omsInNoList,proto3,oneof" json:"oms_in_no_list,omitempty"`
	ProviderNo          *string                                 `protobuf:"bytes,20,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName        *string                                 `protobuf:"bytes,21,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	CustomerNo          *string                                 `protobuf:"bytes,22,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName        *string                                 `protobuf:"bytes,23,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	Epc                 *string                                 `protobuf:"bytes,24,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	Tid                 *string                                 `protobuf:"bytes,25,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode        *string                                 `protobuf:"bytes,26,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo             *string                                 `protobuf:"bytes,27,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string                                 `protobuf:"bytes,28,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName           *string                                 `protobuf:"bytes,29,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	OperatorId          *int32                                  `protobuf:"varint,30,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo          *string                                 `protobuf:"bytes,31,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName        *string                                 `protobuf:"bytes,32,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	SrcTids             *string                                 `protobuf:"bytes,33,opt,name=src_tids,json=srcTids,proto3,oneof" json:"src_tids,omitempty"`
	ShopNo              *string                                 `protobuf:"bytes,34,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName            *string                                 `protobuf:"bytes,35,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	LogisticsNo         *string                                 `protobuf:"bytes,36,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsCode       *string                                 `protobuf:"bytes,37,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsName       *string                                 `protobuf:"bytes,38,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	ReceiverName        *string                                 `protobuf:"bytes,39,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverMobile      *string                                 `protobuf:"bytes,40,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverAddress     *string                                 `protobuf:"bytes,41,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverProvince    *string                                 `protobuf:"bytes,42,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverDtb         *string                                 `protobuf:"bytes,43,opt,name=receiver_dtb,json=receiverDtb,proto3,oneof" json:"receiver_dtb,omitempty"`
	ReceiverCity        *string                                 `protobuf:"bytes,44,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict    *string                                 `protobuf:"bytes,45,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ResultOmsNo         *string                                 `protobuf:"bytes,46,opt,name=result_oms_no,json=resultOmsNo,proto3,oneof" json:"result_oms_no,omitempty"`
	ResultWmsNo         *string                                 `protobuf:"bytes,47,opt,name=result_wms_no,json=resultWmsNo,proto3,oneof" json:"result_wms_no,omitempty"`
	SrcOmsNo            *string                                 `protobuf:"bytes,48,opt,name=src_oms_no,json=srcOmsNo,proto3,oneof" json:"src_oms_no,omitempty"`
	SrcWmsNo            *string                                 `protobuf:"bytes,49,opt,name=src_wms_no,json=srcWmsNo,proto3,oneof" json:"src_wms_no,omitempty"`
	ReturnLogisticsNo   *string                                 `protobuf:"bytes,50,opt,name=return_logistics_no,json=returnLogisticsNo,proto3,oneof" json:"return_logistics_no,omitempty"`
	ReturnLogisticsCode *string                                 `protobuf:"bytes,51,opt,name=return_logistics_code,json=returnLogisticsCode,proto3,oneof" json:"return_logistics_code,omitempty"`
	ReturnLogisticsName *string                                 `protobuf:"bytes,52,opt,name=return_logistics_name,json=returnLogisticsName,proto3,oneof" json:"return_logistics_name,omitempty"`
	RefundReason        *string                                 `protobuf:"bytes,53,opt,name=refund_reason,json=refundReason,proto3,oneof" json:"refund_reason,omitempty"`
	WmsOutNoList        *string                                 `protobuf:"bytes,54,opt,name=wms_out_no_list,json=wmsOutNoList,proto3,oneof" json:"wms_out_no_list,omitempty"`
	WmsInNoList         *string                                 `protobuf:"bytes,55,opt,name=wms_in_no_list,json=wmsInNoList,proto3,oneof" json:"wms_in_no_list,omitempty"`
}

func (x *RfidStockInOutApplyEntitiesResponse) Reset() {
	*x = RfidStockInOutApplyEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutApplyEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutApplyEntitiesResponse) ProtoMessage() {}

func (x *RfidStockInOutApplyEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutApplyEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidStockInOutApplyEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{56}
}

func (x *RfidStockInOutApplyEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetResultEntities() []*RfidStockInOutResultEntitiesResponse {
	if x != nil {
		return x.ResultEntities
	}
	return nil
}

func (x *RfidStockInOutApplyEntitiesResponse) GetApplyTypeName() string {
	if x != nil && x.ApplyTypeName != nil {
		return *x.ApplyTypeName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetApplyTime() string {
	if x != nil && x.ApplyTime != nil {
		return *x.ApplyTime
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetApplyType() string {
	if x != nil {
		return x.ApplyType
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetOmsWmsRelatedNo() string {
	if x != nil && x.OmsWmsRelatedNo != nil {
		return *x.OmsWmsRelatedNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetOmsNo() string {
	if x != nil && x.OmsNo != nil {
		return *x.OmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetWmsNo() string {
	if x != nil && x.WmsNo != nil {
		return *x.WmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetOmsOutNoList() string {
	if x != nil && x.OmsOutNoList != nil {
		return *x.OmsOutNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetOmsInNoList() string {
	if x != nil && x.OmsInNoList != nil {
		return *x.OmsInNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidStockInOutApplyEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetSrcTids() string {
	if x != nil && x.SrcTids != nil {
		return *x.SrcTids
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReceiverDtb() string {
	if x != nil && x.ReceiverDtb != nil {
		return *x.ReceiverDtb
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetResultOmsNo() string {
	if x != nil && x.ResultOmsNo != nil {
		return *x.ResultOmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetResultWmsNo() string {
	if x != nil && x.ResultWmsNo != nil {
		return *x.ResultWmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetSrcOmsNo() string {
	if x != nil && x.SrcOmsNo != nil {
		return *x.SrcOmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetSrcWmsNo() string {
	if x != nil && x.SrcWmsNo != nil {
		return *x.SrcWmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReturnLogisticsNo() string {
	if x != nil && x.ReturnLogisticsNo != nil {
		return *x.ReturnLogisticsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReturnLogisticsCode() string {
	if x != nil && x.ReturnLogisticsCode != nil {
		return *x.ReturnLogisticsCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetReturnLogisticsName() string {
	if x != nil && x.ReturnLogisticsName != nil {
		return *x.ReturnLogisticsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetRefundReason() string {
	if x != nil && x.RefundReason != nil {
		return *x.RefundReason
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetWmsOutNoList() string {
	if x != nil && x.WmsOutNoList != nil {
		return *x.WmsOutNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesResponse) GetWmsInNoList() string {
	if x != nil && x.WmsInNoList != nil {
		return *x.WmsInNoList
	}
	return ""
}

type RfidStockInOutApplyEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidStockInOutApplyEntitiesRetrieveRequest) Reset() {
	*x = RfidStockInOutApplyEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutApplyEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutApplyEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidStockInOutApplyEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutApplyEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutApplyEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{57}
}

func (x *RfidStockInOutApplyEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidStockInOutApplyEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ApplyTime            *string  `protobuf:"bytes,3,opt,name=apply_time,json=applyTime,proto3,oneof" json:"apply_time,omitempty"`
	ApplyType            string   `protobuf:"bytes,4,opt,name=apply_type,json=applyType,proto3" json:"apply_type,omitempty"`
	OmsWmsRelatedNo      *string  `protobuf:"bytes,5,opt,name=oms_wms_related_no,json=omsWmsRelatedNo,proto3,oneof" json:"oms_wms_related_no,omitempty"`
	KingdeeNo            *string  `protobuf:"bytes,6,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	OmsNo                *string  `protobuf:"bytes,7,opt,name=oms_no,json=omsNo,proto3,oneof" json:"oms_no,omitempty"`
	WmsNo                *string  `protobuf:"bytes,8,opt,name=wms_no,json=wmsNo,proto3,oneof" json:"wms_no,omitempty"`
	FromWarehouseNo      *string  `protobuf:"bytes,9,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string  `protobuf:"bytes,10,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	ToWarehouseNo        *string  `protobuf:"bytes,11,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName      *string  `protobuf:"bytes,12,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	OmsOutNoList         *string  `protobuf:"bytes,13,opt,name=oms_out_no_list,json=omsOutNoList,proto3,oneof" json:"oms_out_no_list,omitempty"`
	OmsInNoList          *string  `protobuf:"bytes,14,opt,name=oms_in_no_list,json=omsInNoList,proto3,oneof" json:"oms_in_no_list,omitempty"`
	ProviderNo           *string  `protobuf:"bytes,17,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName         *string  `protobuf:"bytes,18,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	CustomerNo           *string  `protobuf:"bytes,19,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName         *string  `protobuf:"bytes,20,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	Epc                  *string  `protobuf:"bytes,21,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	Tid                  *string  `protobuf:"bytes,22,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,23,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,24,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,25,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,26,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	OperatorId           *int32   `protobuf:"varint,27,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo           *string  `protobuf:"bytes,28,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName         *string  `protobuf:"bytes,29,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	SrcTids              *string  `protobuf:"bytes,30,opt,name=src_tids,json=srcTids,proto3,oneof" json:"src_tids,omitempty"`
	ShopNo               *string  `protobuf:"bytes,31,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *string  `protobuf:"bytes,32,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	LogisticsNo          *string  `protobuf:"bytes,33,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsCode        *string  `protobuf:"bytes,34,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsName        *string  `protobuf:"bytes,35,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	ReceiverName         *string  `protobuf:"bytes,36,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverMobile       *string  `protobuf:"bytes,37,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverAddress      *string  `protobuf:"bytes,38,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverProvince     *string  `protobuf:"bytes,39,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverDtb          *string  `protobuf:"bytes,40,opt,name=receiver_dtb,json=receiverDtb,proto3,oneof" json:"receiver_dtb,omitempty"`
	ReceiverCity         *string  `protobuf:"bytes,41,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *string  `protobuf:"bytes,42,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ResultOmsNo          *string  `protobuf:"bytes,43,opt,name=result_oms_no,json=resultOmsNo,proto3,oneof" json:"result_oms_no,omitempty"`
	ResultWmsNo          *string  `protobuf:"bytes,44,opt,name=result_wms_no,json=resultWmsNo,proto3,oneof" json:"result_wms_no,omitempty"`
	SrcOmsNo             *string  `protobuf:"bytes,45,opt,name=src_oms_no,json=srcOmsNo,proto3,oneof" json:"src_oms_no,omitempty"`
	SrcWmsNo             *string  `protobuf:"bytes,46,opt,name=src_wms_no,json=srcWmsNo,proto3,oneof" json:"src_wms_no,omitempty"`
	ReturnLogisticsNo    *string  `protobuf:"bytes,47,opt,name=return_logistics_no,json=returnLogisticsNo,proto3,oneof" json:"return_logistics_no,omitempty"`
	ReturnLogisticsCode  *string  `protobuf:"bytes,48,opt,name=return_logistics_code,json=returnLogisticsCode,proto3,oneof" json:"return_logistics_code,omitempty"`
	ReturnLogisticsName  *string  `protobuf:"bytes,49,opt,name=return_logistics_name,json=returnLogisticsName,proto3,oneof" json:"return_logistics_name,omitempty"`
	RefundReason         *string  `protobuf:"bytes,50,opt,name=refund_reason,json=refundReason,proto3,oneof" json:"refund_reason,omitempty"`
	WmsOutNoList         *string  `protobuf:"bytes,51,opt,name=wms_out_no_list,json=wmsOutNoList,proto3,oneof" json:"wms_out_no_list,omitempty"`
	WmsInNoList          *string  `protobuf:"bytes,52,opt,name=wms_in_no_list,json=wmsInNoList,proto3,oneof" json:"wms_in_no_list,omitempty"`
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) Reset() {
	*x = RfidStockInOutApplyEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutApplyEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutApplyEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutApplyEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{58}
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetApplyTime() string {
	if x != nil && x.ApplyTime != nil {
		return *x.ApplyTime
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetApplyType() string {
	if x != nil {
		return x.ApplyType
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetOmsWmsRelatedNo() string {
	if x != nil && x.OmsWmsRelatedNo != nil {
		return *x.OmsWmsRelatedNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetOmsNo() string {
	if x != nil && x.OmsNo != nil {
		return *x.OmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetWmsNo() string {
	if x != nil && x.WmsNo != nil {
		return *x.WmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetOmsOutNoList() string {
	if x != nil && x.OmsOutNoList != nil {
		return *x.OmsOutNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetOmsInNoList() string {
	if x != nil && x.OmsInNoList != nil {
		return *x.OmsInNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetSrcTids() string {
	if x != nil && x.SrcTids != nil {
		return *x.SrcTids
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReceiverDtb() string {
	if x != nil && x.ReceiverDtb != nil {
		return *x.ReceiverDtb
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetResultOmsNo() string {
	if x != nil && x.ResultOmsNo != nil {
		return *x.ResultOmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetResultWmsNo() string {
	if x != nil && x.ResultWmsNo != nil {
		return *x.ResultWmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetSrcOmsNo() string {
	if x != nil && x.SrcOmsNo != nil {
		return *x.SrcOmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetSrcWmsNo() string {
	if x != nil && x.SrcWmsNo != nil {
		return *x.SrcWmsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReturnLogisticsNo() string {
	if x != nil && x.ReturnLogisticsNo != nil {
		return *x.ReturnLogisticsNo
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReturnLogisticsCode() string {
	if x != nil && x.ReturnLogisticsCode != nil {
		return *x.ReturnLogisticsCode
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetReturnLogisticsName() string {
	if x != nil && x.ReturnLogisticsName != nil {
		return *x.ReturnLogisticsName
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetRefundReason() string {
	if x != nil && x.RefundReason != nil {
		return *x.RefundReason
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetWmsOutNoList() string {
	if x != nil && x.WmsOutNoList != nil {
		return *x.WmsOutNoList
	}
	return ""
}

func (x *RfidStockInOutApplyEntitiesUpdateRequest) GetWmsInNoList() string {
	if x != nil && x.WmsInNoList != nil {
		return *x.WmsInNoList
	}
	return ""
}

type RfidStockInOutResultEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ResultTime        *string `protobuf:"bytes,2,opt,name=result_time,json=resultTime,proto3,oneof" json:"result_time,omitempty"`
	StockInOutType    string  `protobuf:"bytes,3,opt,name=stock_in_out_type,json=stockInOutType,proto3" json:"stock_in_out_type,omitempty"`
	OmsNo             *string `protobuf:"bytes,5,opt,name=oms_no,json=omsNo,proto3,oneof" json:"oms_no,omitempty"`
	WmsNo             *string `protobuf:"bytes,6,opt,name=wms_no,json=wmsNo,proto3,oneof" json:"wms_no,omitempty"`
	FromWarehouseNo   *string `protobuf:"bytes,7,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName *string `protobuf:"bytes,8,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	FromPositionNo    *string `protobuf:"bytes,9,opt,name=from_position_no,json=fromPositionNo,proto3,oneof" json:"from_position_no,omitempty"`
	ToWarehouseNo     *string `protobuf:"bytes,10,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName   *string `protobuf:"bytes,11,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	ToPositionNo      *string `protobuf:"bytes,12,opt,name=to_position_no,json=toPositionNo,proto3,oneof" json:"to_position_no,omitempty"`
	Epc               *string `protobuf:"bytes,13,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	Tid               *string `protobuf:"bytes,14,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode      *string `protobuf:"bytes,15,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo           *string `protobuf:"bytes,16,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo            *string `protobuf:"bytes,17,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName         *string `protobuf:"bytes,18,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	OperatorId        *int32  `protobuf:"varint,19,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo        *string `protobuf:"bytes,20,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName      *string `protobuf:"bytes,21,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	SrcOmsNo          *string `protobuf:"bytes,22,opt,name=src_oms_no,json=srcOmsNo,proto3,oneof" json:"src_oms_no,omitempty"`
	SrcWmsNo          *string `protobuf:"bytes,23,opt,name=src_wms_no,json=srcWmsNo,proto3,oneof" json:"src_wms_no,omitempty"`
}

func (x *RfidStockInOutResultEntitiesCreateRequest) Reset() {
	*x = RfidStockInOutResultEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutResultEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutResultEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidStockInOutResultEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutResultEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutResultEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{59}
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetResultTime() string {
	if x != nil && x.ResultTime != nil {
		return *x.ResultTime
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetStockInOutType() string {
	if x != nil {
		return x.StockInOutType
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetOmsNo() string {
	if x != nil && x.OmsNo != nil {
		return *x.OmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetWmsNo() string {
	if x != nil && x.WmsNo != nil {
		return *x.WmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetFromPositionNo() string {
	if x != nil && x.FromPositionNo != nil {
		return *x.FromPositionNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetToPositionNo() string {
	if x != nil && x.ToPositionNo != nil {
		return *x.ToPositionNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetSrcOmsNo() string {
	if x != nil && x.SrcOmsNo != nil {
		return *x.SrcOmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesCreateRequest) GetSrcWmsNo() string {
	if x != nil && x.SrcWmsNo != nil {
		return *x.SrcWmsNo
	}
	return ""
}

type RfidStockInOutResultEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidStockInOutResultEntitiesDestroyRequest) Reset() {
	*x = RfidStockInOutResultEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutResultEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutResultEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidStockInOutResultEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutResultEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutResultEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{60}
}

func (x *RfidStockInOutResultEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidStockInOutResultEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidStockInOutResultEntitiesListRequest) Reset() {
	*x = RfidStockInOutResultEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutResultEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutResultEntitiesListRequest) ProtoMessage() {}

func (x *RfidStockInOutResultEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutResultEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutResultEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{61}
}

func (x *RfidStockInOutResultEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidStockInOutResultEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidStockInOutResultEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidStockInOutResultEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidStockInOutResultEntitiesListResponse) Reset() {
	*x = RfidStockInOutResultEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutResultEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutResultEntitiesListResponse) ProtoMessage() {}

func (x *RfidStockInOutResultEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutResultEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidStockInOutResultEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{62}
}

func (x *RfidStockInOutResultEntitiesListResponse) GetResults() []*RfidStockInOutResultEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidStockInOutResultEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidStockInOutResultEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ResultTime         *string `protobuf:"bytes,3,opt,name=result_time,json=resultTime,proto3,oneof" json:"result_time,omitempty"`
	CreateTime         *string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime         *string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	StockInOutType     string  `protobuf:"bytes,6,opt,name=stock_in_out_type,json=stockInOutType,proto3" json:"stock_in_out_type,omitempty"`
	OmsNo              *string `protobuf:"bytes,8,opt,name=oms_no,json=omsNo,proto3,oneof" json:"oms_no,omitempty"`
	WmsNo              *string `protobuf:"bytes,9,opt,name=wms_no,json=wmsNo,proto3,oneof" json:"wms_no,omitempty"`
	FromWarehouseNo    *string `protobuf:"bytes,10,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName  *string `protobuf:"bytes,11,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	FromPositionNo     *string `protobuf:"bytes,12,opt,name=from_position_no,json=fromPositionNo,proto3,oneof" json:"from_position_no,omitempty"`
	ToWarehouseNo      *string `protobuf:"bytes,13,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName    *string `protobuf:"bytes,14,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	ToPositionNo       *string `protobuf:"bytes,15,opt,name=to_position_no,json=toPositionNo,proto3,oneof" json:"to_position_no,omitempty"`
	Epc                *string `protobuf:"bytes,16,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	Tid                *string `protobuf:"bytes,17,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode       *string `protobuf:"bytes,18,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo            *string `protobuf:"bytes,19,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo             *string `protobuf:"bytes,20,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName          *string `protobuf:"bytes,21,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	OperatorId         *int32  `protobuf:"varint,22,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo         *string `protobuf:"bytes,23,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName       *string `protobuf:"bytes,24,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	StockInOutTypeName *string `protobuf:"bytes,25,opt,name=stock_in_out_type_name,json=stockInOutTypeName,proto3,oneof" json:"stock_in_out_type_name,omitempty"`
	SrcOmsNo           *string `protobuf:"bytes,26,opt,name=src_oms_no,json=srcOmsNo,proto3,oneof" json:"src_oms_no,omitempty"`
	SrcWmsNo           *string `protobuf:"bytes,27,opt,name=src_wms_no,json=srcWmsNo,proto3,oneof" json:"src_wms_no,omitempty"`
}

func (x *RfidStockInOutResultEntitiesResponse) Reset() {
	*x = RfidStockInOutResultEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutResultEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutResultEntitiesResponse) ProtoMessage() {}

func (x *RfidStockInOutResultEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutResultEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidStockInOutResultEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{63}
}

func (x *RfidStockInOutResultEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetResultTime() string {
	if x != nil && x.ResultTime != nil {
		return *x.ResultTime
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetStockInOutType() string {
	if x != nil {
		return x.StockInOutType
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetOmsNo() string {
	if x != nil && x.OmsNo != nil {
		return *x.OmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetWmsNo() string {
	if x != nil && x.WmsNo != nil {
		return *x.WmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetFromPositionNo() string {
	if x != nil && x.FromPositionNo != nil {
		return *x.FromPositionNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetToPositionNo() string {
	if x != nil && x.ToPositionNo != nil {
		return *x.ToPositionNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidStockInOutResultEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetStockInOutTypeName() string {
	if x != nil && x.StockInOutTypeName != nil {
		return *x.StockInOutTypeName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetSrcOmsNo() string {
	if x != nil && x.SrcOmsNo != nil {
		return *x.SrcOmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesResponse) GetSrcWmsNo() string {
	if x != nil && x.SrcWmsNo != nil {
		return *x.SrcWmsNo
	}
	return ""
}

type RfidStockInOutResultEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidStockInOutResultEntitiesRetrieveRequest) Reset() {
	*x = RfidStockInOutResultEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutResultEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutResultEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidStockInOutResultEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutResultEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutResultEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{64}
}

func (x *RfidStockInOutResultEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidStockInOutResultEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ResultTime           *string  `protobuf:"bytes,3,opt,name=result_time,json=resultTime,proto3,oneof" json:"result_time,omitempty"`
	StockInOutType       string   `protobuf:"bytes,4,opt,name=stock_in_out_type,json=stockInOutType,proto3" json:"stock_in_out_type,omitempty"`
	OmsNo                *string  `protobuf:"bytes,6,opt,name=oms_no,json=omsNo,proto3,oneof" json:"oms_no,omitempty"`
	WmsNo                *string  `protobuf:"bytes,7,opt,name=wms_no,json=wmsNo,proto3,oneof" json:"wms_no,omitempty"`
	FromWarehouseNo      *string  `protobuf:"bytes,8,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string  `protobuf:"bytes,9,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	FromPositionNo       *string  `protobuf:"bytes,10,opt,name=from_position_no,json=fromPositionNo,proto3,oneof" json:"from_position_no,omitempty"`
	ToWarehouseNo        *string  `protobuf:"bytes,11,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName      *string  `protobuf:"bytes,12,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	ToPositionNo         *string  `protobuf:"bytes,13,opt,name=to_position_no,json=toPositionNo,proto3,oneof" json:"to_position_no,omitempty"`
	Epc                  *string  `protobuf:"bytes,14,opt,name=epc,proto3,oneof" json:"epc,omitempty"`
	Tid                  *string  `protobuf:"bytes,15,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,16,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,17,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,19,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	OperatorId           *int32   `protobuf:"varint,20,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorNo           *string  `protobuf:"bytes,21,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName         *string  `protobuf:"bytes,22,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	SrcOmsNo             *string  `protobuf:"bytes,23,opt,name=src_oms_no,json=srcOmsNo,proto3,oneof" json:"src_oms_no,omitempty"`
	SrcWmsNo             *string  `protobuf:"bytes,24,opt,name=src_wms_no,json=srcWmsNo,proto3,oneof" json:"src_wms_no,omitempty"`
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) Reset() {
	*x = RfidStockInOutResultEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidStockInOutResultEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidStockInOutResultEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidStockInOutResultEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidStockInOutResultEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{65}
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetResultTime() string {
	if x != nil && x.ResultTime != nil {
		return *x.ResultTime
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetStockInOutType() string {
	if x != nil {
		return x.StockInOutType
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetOmsNo() string {
	if x != nil && x.OmsNo != nil {
		return *x.OmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetWmsNo() string {
	if x != nil && x.WmsNo != nil {
		return *x.WmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetFromPositionNo() string {
	if x != nil && x.FromPositionNo != nil {
		return *x.FromPositionNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetToPositionNo() string {
	if x != nil && x.ToPositionNo != nil {
		return *x.ToPositionNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetEpc() string {
	if x != nil && x.Epc != nil {
		return *x.Epc
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetSrcOmsNo() string {
	if x != nil && x.SrcOmsNo != nil {
		return *x.SrcOmsNo
	}
	return ""
}

func (x *RfidStockInOutResultEntitiesUpdateRequest) GetSrcWmsNo() string {
	if x != nil && x.SrcWmsNo != nil {
		return *x.SrcWmsNo
	}
	return ""
}

type RfidTagIndexDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidTagIndexDestroyRequest) Reset() {
	*x = RfidTagIndexDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRequest) ProtoMessage() {}

func (x *RfidTagIndexDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{66}
}

func (x *RfidTagIndexDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidTagIndexDestroyRfidPublishEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidPublishEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidPublishEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidPublishEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidPublishEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidPublishEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidPublishEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidPublishEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{67}
}

func (x *RfidTagIndexDestroyRfidPublishEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidPublishEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidPublishEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidQualityEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidQualityEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidQualityEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidQualityEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidQualityEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidQualityEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidQualityEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidQualityEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{68}
}

func (x *RfidTagIndexDestroyRfidQualityEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidQualityEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidQualityEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidReasonEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidReasonEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidReasonEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidReasonEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidReasonEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{69}
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidReturnInspectConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) Reset() {
	*x = RfidTagIndexDestroyRfidReturnInspectConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidReturnInspectConfigResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidReturnInspectConfigResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidReturnInspectConfigResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{70}
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidReturnInspectEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidReturnInspectEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidReturnInspectEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{71}
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{72}
}

func (x *RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{73}
}

func (x *RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidTagIndexListRequest) Reset() {
	*x = RfidTagIndexListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexListRequest) ProtoMessage() {}

func (x *RfidTagIndexListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexListRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{74}
}

func (x *RfidTagIndexListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidTagIndexListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidTagIndexListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidTagIndexResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexListResponse) Reset() {
	*x = RfidTagIndexListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexListResponse) ProtoMessage() {}

func (x *RfidTagIndexListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexListResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{75}
}

func (x *RfidTagIndexListResponse) GetResults() []*RfidTagIndexResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidTagIndexListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	TagStatus            *int32   `protobuf:"varint,7,opt,name=tag_status,json=tagStatus,proto3,oneof" json:"tag_status,omitempty"`
	ProdCondition        *int32   `protobuf:"varint,8,opt,name=prod_condition,json=prodCondition,proto3,oneof" json:"prod_condition,omitempty"`
	Epc                  string   `protobuf:"bytes,11,opt,name=epc,proto3" json:"epc,omitempty"`
	Tid                  *string  `protobuf:"bytes,12,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,13,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,15,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	PublishCount         *int32   `protobuf:"varint,17,opt,name=publish_count,json=publishCount,proto3,oneof" json:"publish_count,omitempty"`
	QualityCount         *int32   `protobuf:"varint,18,opt,name=quality_count,json=qualityCount,proto3,oneof" json:"quality_count,omitempty"`
	ImgUrl               *string  `protobuf:"bytes,20,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
	ManufactureDate      *string  `protobuf:"bytes,21,opt,name=manufacture_date,json=manufactureDate,proto3,oneof" json:"manufacture_date,omitempty"`
	GoodsName            *string  `protobuf:"bytes,22,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	ReturnInspectCount   *int32   `protobuf:"varint,23,opt,name=return_inspect_count,json=returnInspectCount,proto3,oneof" json:"return_inspect_count,omitempty"`
	StockInCount         *int32   `protobuf:"varint,24,opt,name=stock_in_count,json=stockInCount,proto3,oneof" json:"stock_in_count,omitempty"`
	StockOutCount        *int32   `protobuf:"varint,25,opt,name=stock_out_count,json=stockOutCount,proto3,oneof" json:"stock_out_count,omitempty"`
}

func (x *RfidTagIndexPartialUpdateRequest) Reset() {
	*x = RfidTagIndexPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexPartialUpdateRequest) ProtoMessage() {}

func (x *RfidTagIndexPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{76}
}

func (x *RfidTagIndexPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidTagIndexPartialUpdateRequest) GetTagStatus() int32 {
	if x != nil && x.TagStatus != nil {
		return *x.TagStatus
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetProdCondition() int32 {
	if x != nil && x.ProdCondition != nil {
		return *x.ProdCondition
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetPublishCount() int32 {
	if x != nil && x.PublishCount != nil {
		return *x.PublishCount
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetQualityCount() int32 {
	if x != nil && x.QualityCount != nil {
		return *x.QualityCount
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetManufactureDate() string {
	if x != nil && x.ManufactureDate != nil {
		return *x.ManufactureDate
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetReturnInspectCount() int32 {
	if x != nil && x.ReturnInspectCount != nil {
		return *x.ReturnInspectCount
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetStockInCount() int32 {
	if x != nil && x.StockInCount != nil {
		return *x.StockInCount
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetStockOutCount() int32 {
	if x != nil && x.StockOutCount != nil {
		return *x.StockOutCount
	}
	return 0
}

type RfidTagIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	TagStatus          *int32  `protobuf:"varint,6,opt,name=tag_status,json=tagStatus,proto3,oneof" json:"tag_status,omitempty"`
	ProdCondition      *int32  `protobuf:"varint,7,opt,name=prod_condition,json=prodCondition,proto3,oneof" json:"prod_condition,omitempty"`
	Epc                string  `protobuf:"bytes,10,opt,name=epc,proto3" json:"epc,omitempty"`
	Tid                *string `protobuf:"bytes,11,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode       *string `protobuf:"bytes,12,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo            *string `protobuf:"bytes,13,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo             *string `protobuf:"bytes,14,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	PublishCount       *int32  `protobuf:"varint,16,opt,name=publish_count,json=publishCount,proto3,oneof" json:"publish_count,omitempty"`
	QualityCount       *int32  `protobuf:"varint,17,opt,name=quality_count,json=qualityCount,proto3,oneof" json:"quality_count,omitempty"`
	ImgUrl             *string `protobuf:"bytes,19,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
	ManufactureDate    *string `protobuf:"bytes,20,opt,name=manufacture_date,json=manufactureDate,proto3,oneof" json:"manufacture_date,omitempty"`
	GoodsName          *string `protobuf:"bytes,21,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	ReturnInspectCount *int32  `protobuf:"varint,22,opt,name=return_inspect_count,json=returnInspectCount,proto3,oneof" json:"return_inspect_count,omitempty"`
	StockInCount       *int32  `protobuf:"varint,23,opt,name=stock_in_count,json=stockInCount,proto3,oneof" json:"stock_in_count,omitempty"`
	StockOutCount      *int32  `protobuf:"varint,24,opt,name=stock_out_count,json=stockOutCount,proto3,oneof" json:"stock_out_count,omitempty"`
}

func (x *RfidTagIndexRequest) Reset() {
	*x = RfidTagIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexRequest) ProtoMessage() {}

func (x *RfidTagIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{77}
}

func (x *RfidTagIndexRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidTagIndexRequest) GetTagStatus() int32 {
	if x != nil && x.TagStatus != nil {
		return *x.TagStatus
	}
	return 0
}

func (x *RfidTagIndexRequest) GetProdCondition() int32 {
	if x != nil && x.ProdCondition != nil {
		return *x.ProdCondition
	}
	return 0
}

func (x *RfidTagIndexRequest) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *RfidTagIndexRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidTagIndexRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidTagIndexRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidTagIndexRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidTagIndexRequest) GetPublishCount() int32 {
	if x != nil && x.PublishCount != nil {
		return *x.PublishCount
	}
	return 0
}

func (x *RfidTagIndexRequest) GetQualityCount() int32 {
	if x != nil && x.QualityCount != nil {
		return *x.QualityCount
	}
	return 0
}

func (x *RfidTagIndexRequest) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

func (x *RfidTagIndexRequest) GetManufactureDate() string {
	if x != nil && x.ManufactureDate != nil {
		return *x.ManufactureDate
	}
	return ""
}

func (x *RfidTagIndexRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidTagIndexRequest) GetReturnInspectCount() int32 {
	if x != nil && x.ReturnInspectCount != nil {
		return *x.ReturnInspectCount
	}
	return 0
}

func (x *RfidTagIndexRequest) GetStockInCount() int32 {
	if x != nil && x.StockInCount != nil {
		return *x.StockInCount
	}
	return 0
}

func (x *RfidTagIndexRequest) GetStockOutCount() int32 {
	if x != nil && x.StockOutCount != nil {
		return *x.StockOutCount
	}
	return 0
}

type RfidTagIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                                `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	TagStatusName         *string                                `protobuf:"bytes,2,opt,name=tag_status_name,json=tagStatusName,proto3,oneof" json:"tag_status_name,omitempty"`
	ProdConditionName     *string                                `protobuf:"bytes,3,opt,name=prod_condition_name,json=prodConditionName,proto3,oneof" json:"prod_condition_name,omitempty"`
	ReturnInspectEntities []*RfidReturnInspectEntitiesResponse   `protobuf:"bytes,4,rep,name=return_inspect_entities,json=returnInspectEntities,proto3" json:"return_inspect_entities,omitempty"`
	CreateTime            *string                                `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string                                `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	TagStatus             *int32                                 `protobuf:"varint,8,opt,name=tag_status,json=tagStatus,proto3,oneof" json:"tag_status,omitempty"`
	ProdCondition         *int32                                 `protobuf:"varint,9,opt,name=prod_condition,json=prodCondition,proto3,oneof" json:"prod_condition,omitempty"`
	Epc                   string                                 `protobuf:"bytes,13,opt,name=epc,proto3" json:"epc,omitempty"`
	Tid                   *string                                `protobuf:"bytes,14,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SecurityCode          *string                                `protobuf:"bytes,15,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	GoodsNo               *string                                `protobuf:"bytes,16,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo                *string                                `protobuf:"bytes,17,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	PublishCount          *int32                                 `protobuf:"varint,19,opt,name=publish_count,json=publishCount,proto3,oneof" json:"publish_count,omitempty"`
	QualityCount          *int32                                 `protobuf:"varint,20,opt,name=quality_count,json=qualityCount,proto3,oneof" json:"quality_count,omitempty"`
	PublishEntities       []*RfidPublishEntitiesResponse         `protobuf:"bytes,21,rep,name=publish_entities,json=publishEntities,proto3" json:"publish_entities,omitempty"`
	QualityEntities       []*RfidQualityEntitiesResponse         `protobuf:"bytes,22,rep,name=quality_entities,json=qualityEntities,proto3" json:"quality_entities,omitempty"`
	ImgUrl                *string                                `protobuf:"bytes,24,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
	ManufactureDate       *string                                `protobuf:"bytes,25,opt,name=manufacture_date,json=manufactureDate,proto3,oneof" json:"manufacture_date,omitempty"`
	GoodsName             *string                                `protobuf:"bytes,26,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	ReturnInspectCount    *int32                                 `protobuf:"varint,27,opt,name=return_inspect_count,json=returnInspectCount,proto3,oneof" json:"return_inspect_count,omitempty"`
	StockInCount          *int32                                 `protobuf:"varint,28,opt,name=stock_in_count,json=stockInCount,proto3,oneof" json:"stock_in_count,omitempty"`
	StockOutCount         *int32                                 `protobuf:"varint,29,opt,name=stock_out_count,json=stockOutCount,proto3,oneof" json:"stock_out_count,omitempty"`
	StockInoutEntities    []*RfidStockInOutApplyEntitiesResponse `protobuf:"bytes,30,rep,name=stock_inout_entities,json=stockInoutEntities,proto3" json:"stock_inout_entities,omitempty"`
}

func (x *RfidTagIndexResponse) Reset() {
	*x = RfidTagIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexResponse) ProtoMessage() {}

func (x *RfidTagIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{78}
}

func (x *RfidTagIndexResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidTagIndexResponse) GetTagStatusName() string {
	if x != nil && x.TagStatusName != nil {
		return *x.TagStatusName
	}
	return ""
}

func (x *RfidTagIndexResponse) GetProdConditionName() string {
	if x != nil && x.ProdConditionName != nil {
		return *x.ProdConditionName
	}
	return ""
}

func (x *RfidTagIndexResponse) GetReturnInspectEntities() []*RfidReturnInspectEntitiesResponse {
	if x != nil {
		return x.ReturnInspectEntities
	}
	return nil
}

func (x *RfidTagIndexResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidTagIndexResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidTagIndexResponse) GetTagStatus() int32 {
	if x != nil && x.TagStatus != nil {
		return *x.TagStatus
	}
	return 0
}

func (x *RfidTagIndexResponse) GetProdCondition() int32 {
	if x != nil && x.ProdCondition != nil {
		return *x.ProdCondition
	}
	return 0
}

func (x *RfidTagIndexResponse) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *RfidTagIndexResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *RfidTagIndexResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RfidTagIndexResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidTagIndexResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidTagIndexResponse) GetPublishCount() int32 {
	if x != nil && x.PublishCount != nil {
		return *x.PublishCount
	}
	return 0
}

func (x *RfidTagIndexResponse) GetQualityCount() int32 {
	if x != nil && x.QualityCount != nil {
		return *x.QualityCount
	}
	return 0
}

func (x *RfidTagIndexResponse) GetPublishEntities() []*RfidPublishEntitiesResponse {
	if x != nil {
		return x.PublishEntities
	}
	return nil
}

func (x *RfidTagIndexResponse) GetQualityEntities() []*RfidQualityEntitiesResponse {
	if x != nil {
		return x.QualityEntities
	}
	return nil
}

func (x *RfidTagIndexResponse) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

func (x *RfidTagIndexResponse) GetManufactureDate() string {
	if x != nil && x.ManufactureDate != nil {
		return *x.ManufactureDate
	}
	return ""
}

func (x *RfidTagIndexResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidTagIndexResponse) GetReturnInspectCount() int32 {
	if x != nil && x.ReturnInspectCount != nil {
		return *x.ReturnInspectCount
	}
	return 0
}

func (x *RfidTagIndexResponse) GetStockInCount() int32 {
	if x != nil && x.StockInCount != nil {
		return *x.StockInCount
	}
	return 0
}

func (x *RfidTagIndexResponse) GetStockOutCount() int32 {
	if x != nil && x.StockOutCount != nil {
		return *x.StockOutCount
	}
	return 0
}

func (x *RfidTagIndexResponse) GetStockInoutEntities() []*RfidStockInOutApplyEntitiesResponse {
	if x != nil {
		return x.StockInoutEntities
	}
	return nil
}

type RfidTagIndexRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidTagIndexRetrieveRequest) Reset() {
	*x = RfidTagIndexRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexRetrieveRequest) ProtoMessage() {}

func (x *RfidTagIndexRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{79}
}

func (x *RfidTagIndexRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

var File_tag_manager_proto protoreflect.FileDescriptor

var file_tag_manager_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x1f, 0x42,
	0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5e,
	0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22, 0x5d, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41,
	0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x0e, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x63, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x70, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0f, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xe6, 0x06, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x56, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x71, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x71, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x71, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x74, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x12, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x32, 0x0a, 0x1f,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x85, 0x0d, 0x0a, 0x20, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0c, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x13, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x65, 0x70, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x03, 0x65, 0x70,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x19, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1a, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65,
	0x70, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x34, 0x0a, 0x21, 0x52, 0x66, 0x69, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb5,
	0x01, 0x0a, 0x1e, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb3, 0x0e, 0x0a, 0x1b, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x0b, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1c, 0x52, 0x0d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x1d, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1e, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x20, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x70, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x35, 0x0a, 0x22, 0x52, 0x66,
	0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x22, 0xba, 0x0d, 0x0a, 0x20, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1a, 0x52,
	0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x1b, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xf3,
	0x05, 0x0a, 0x20, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65,
	0x70, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x65, 0x70, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x71, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x06, 0x71, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x09, 0x52, 0x08, 0x71, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0e, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x71, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x71, 0x61,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x08, 0x71, 0x61, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0c, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x21, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1e, 0x52,
	0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x8e, 0x08, 0x0a, 0x1b, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x71, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x71, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x08, 0x71, 0x61, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x61, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0c, 0x71, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x71, 0x61, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x71,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x0a, 0x71, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x71, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0c, 0x71, 0x61, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x63,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x71, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x71, 0x61,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x61, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x71,
	0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x35, 0x0a, 0x22, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xa8, 0x06, 0x0a, 0x20, 0x52, 0x66, 0x69,
	0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x71, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x08, 0x52, 0x06, 0x71, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x09, 0x52, 0x08, 0x71, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x71, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x71, 0x61, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08,
	0x71, 0x61, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70,
	0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x71, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xae, 0x04, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x08, 0x52, 0x07, 0x62, 0x65, 0x43, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65, 0x5f, 0x63,
	0x69, 0x74, 0x65, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x77,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x07, 0x62, 0x65, 0x43, 0x69, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x20, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb4,
	0x01, 0x0a, 0x1d, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x92, 0x05, 0x0a, 0x1a, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x67, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x08, 0x52, 0x07, 0x62, 0x65, 0x43, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65,
	0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x21, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xf7, 0x03, 0x0a,
	0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x06, 0x52, 0x07, 0x62, 0x65, 0x43, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65,
	0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x22, 0x91, 0x08, 0x0a, 0x24, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x70, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x07, 0x65, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x65, 0x70, 0x63,
	0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1f, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x20, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe7, 0x09, 0x0a, 0x1c, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x67,
	0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x67,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x64, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0d, 0x77, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x77, 0x64, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52,
	0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x64, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x11, 0x77, 0x64, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77,
	0x64, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77,
	0x64, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a,
	0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5e, 0x0a, 0x20, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb2, 0x04, 0x0a, 0x24, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x25, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22,
	0xb9, 0x01, 0x0a, 0x22, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x23,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa7, 0x06, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12,
	0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x11,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x26, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xe5, 0x04, 0x0a, 0x24, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x72, 0x63,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd3,
	0x0a, 0x0a, 0x26, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a,
	0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x10, 0x61, 0x67, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x70, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x13,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11,
	0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x13, 0x52, 0x08, 0x61, 0x6e, 0x74, 0x69, 0x46, 0x61, 0x6b, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f,
	0x66, 0x61, 0x6b, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x27, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x22, 0xbb, 0x01, 0x0a, 0x24, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97,
	0x01, 0x0a, 0x25, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x0c, 0x0a, 0x21, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x0a, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x10, 0x61, 0x67,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x70, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x13, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0d, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x15, 0x52, 0x08, 0x61, 0x6e, 0x74, 0x69, 0x46, 0x61, 0x6b, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x5e, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x14, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x11, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0c, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x28, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x22, 0xe4, 0x0a, 0x0a, 0x26, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x69, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x61,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x66,
	0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x6e, 0x74,
	0x69, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x08,
	0x61, 0x6e, 0x74, 0x69, 0x46, 0x61, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x14, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f,
	0x66, 0x61, 0x6b, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x16, 0x0a, 0x28,
	0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6d, 0x73, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0f, 0x6f, 0x6d, 0x73, 0x57, 0x6d, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x6d, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x6f, 0x6d, 0x73, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x77, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x66, 0x72,
	0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0f, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c,
	0x6f, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x6f, 0x6d, 0x73, 0x49, 0x6e,
	0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x14, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63,
	0x5f, 0x74, 0x69, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x07, 0x73,
	0x72, 0x63, 0x54, 0x69, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1c, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1f, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x74, 0x62, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x74, 0x62, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x24, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x25, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x57, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63,
	0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52,
	0x08, 0x73, 0x72, 0x63, 0x4f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a,
	0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x29, 0x52, 0x08, 0x73, 0x72, 0x63, 0x57, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x11,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0c, 0x77, 0x6d, 0x73,
	0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e,
	0x77, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0b, 0x77, 0x6d, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x70, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x74, 0x69, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x62, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6d, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x29, 0x52, 0x66, 0x69, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x26, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x27, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xad, 0x18, 0x0a, 0x23, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x6a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6d, 0x73,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x6f, 0x6d, 0x73, 0x57, 0x6d, 0x73, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x05, 0x6f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x77,
	0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x77,
	0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x6f,
	0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x6f, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x4e, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6d, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x0b, 0x6f, 0x6d, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x19, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x69, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1d, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x20, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x62, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x26, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x74, 0x62,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2a, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x08, 0x73, 0x72, 0x63, 0x4f, 0x6d, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x08, 0x73, 0x72, 0x63, 0x57,
	0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x77, 0x6d, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x31, 0x52, 0x0c, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x77, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x0b,
	0x77, 0x6d, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6d,
	0x73, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x63,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x74, 0x62, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x2a, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x22, 0xce, 0x16, 0x0a, 0x28, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x12, 0x6f, 0x6d, 0x73, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x6f, 0x6d, 0x73,
	0x57, 0x6d, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x6f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x05, 0x77, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x74, 0x6f,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x6d, 0x73, 0x4f,
	0x75, 0x74, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x6f, 0x6d, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x13, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x15, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x69,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x62, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x74, 0x62, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6d,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x6d, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x08, 0x73, 0x72, 0x63,
	0x4f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f,
	0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x08,
	0x73, 0x72, 0x63, 0x57, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2b, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f,
	0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0c, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x4e,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x77, 0x6d, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2f, 0x52, 0x0b, 0x77, 0x6d, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6d,
	0x73, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x63,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x74, 0x62, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xa6, 0x09, 0x0a, 0x29, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x6d, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6f, 0x6d, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x77, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x66,
	0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0f, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x03, 0x65,
	0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x13, 0x52, 0x08, 0x73, 0x72, 0x63, 0x4f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x08, 0x73, 0x72, 0x63, 0x57, 0x6d, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74,
	0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x22, 0x3d, 0x0a, 0x2a,
	0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x27,
	0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a,
	0x28, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x0a, 0x0a,
	0x24, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x6d, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x6f, 0x6d, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x77, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x66,
	0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0f, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0c, 0x74,
	0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x03, 0x65,
	0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x16, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x08, 0x73,
	0x72, 0x63, 0x4f, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72,
	0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17,
	0x52, 0x08, 0x73, 0x72, 0x63, 0x57, 0x6d, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x65, 0x70, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f,
	0x22, 0x3e, 0x0a, 0x2b, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x22, 0xdb, 0x09, 0x0a, 0x29, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x6d,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6f, 0x6d,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x77, 0x6d, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0f, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0c, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x03, 0x65, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x08, 0x73, 0x72, 0x63, 0x4f, 0x6d, 0x73, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x08, 0x73, 0x72, 0x63, 0x57, 0x6d,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x63, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x22, 0x2d,
	0x0a, 0x1a, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x6c, 0x0a,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x2d, 0x52, 0x66, 0x69,
	0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x32, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x34, 0x52, 0x66, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x36,
	0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x75, 0x0a, 0x37, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x52, 0x66,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x18, 0x52, 0x66,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x07, 0x0a, 0x20, 0x52, 0x66,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x09, 0x74, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0c, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c,
	0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0d, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd2, 0x06, 0x0a, 0x13, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x74, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0f, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0e, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x0c, 0x0a, 0x14, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x74, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x09, 0x74, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70,
	0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0b, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0c,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x63, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69,
	0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x12, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0c, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x14, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x1b, 0x52,
	0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x32, 0xf1, 0x3b, 0x0a, 0x16,
	0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x67, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69,
	0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x66,
	0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xa8, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x46, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x37, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x96,
	0x01, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x12, 0x3b, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb7,
	0x01, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x42, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbd, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x44, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f,
	0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x46, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66,
	0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc6,
	0x01, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x47, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x54, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x34, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x93, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x67, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x66, 0x69, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x66, 0x69, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x44, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a,
	0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9a, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01,
	0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69,
	0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x1a, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01,
	0x0a, 0x21, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb2, 0x01, 0x0a,
	0x23, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x47, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xb5, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66,
	0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x52, 0x66, 0x69,
	0x64, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66,
	0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66,
	0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66,
	0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa8, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x4f, 0x75, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x22,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x46, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x72, 0x66, 0x69, 0x64, 0x50, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tag_manager_proto_rawDescOnce sync.Once
	file_tag_manager_proto_rawDescData = file_tag_manager_proto_rawDesc
)

func file_tag_manager_proto_rawDescGZIP() []byte {
	file_tag_manager_proto_rawDescOnce.Do(func() {
		file_tag_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_tag_manager_proto_rawDescData)
	})
	return file_tag_manager_proto_rawDescData
}

var file_tag_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_tag_manager_proto_goTypes = []interface{}{
	(*BulkPushReturnInspectAggRequest)(nil),                         // 0: rfid_tag_manage.tag_service.BulkPushReturnInspectAggRequest
	(*BulkPushReturnInspectAggResponse)(nil),                        // 1: rfid_tag_manage.tag_service.BulkPushReturnInspectAggResponse
	(*DestroyReturnInspectAggRequest)(nil),                          // 2: rfid_tag_manage.tag_service.DestroyReturnInspectAggRequest
	(*DestroyReturnInspectAggResponse)(nil),                         // 3: rfid_tag_manage.tag_service.DestroyReturnInspectAggResponse
	(*EpcSyncRequest)(nil),                                          // 4: rfid_tag_manage.tag_service.EpcSyncRequest
	(*EpcSyncResponse)(nil),                                         // 5: rfid_tag_manage.tag_service.EpcSyncResponse
	(*InspectConfigOptionsRequest)(nil),                             // 6: rfid_tag_manage.tag_service.InspectConfigOptionsRequest
	(*InspectConfigOptionsResponse)(nil),                            // 7: rfid_tag_manage.tag_service.InspectConfigOptionsResponse
	(*LabelValueResponse)(nil),                                      // 8: rfid_tag_manage.tag_service.LabelValueResponse
	(*RetrieveReturnInspectAggRequest)(nil),                         // 9: rfid_tag_manage.tag_service.RetrieveReturnInspectAggRequest
	(*RfidPublishEntitiesCreateRequest)(nil),                        // 10: rfid_tag_manage.tag_service.RfidPublishEntitiesCreateRequest
	(*RfidPublishEntitiesDestroyRequest)(nil),                       // 11: rfid_tag_manage.tag_service.RfidPublishEntitiesDestroyRequest
	(*RfidPublishEntitiesListRequest)(nil),                          // 12: rfid_tag_manage.tag_service.RfidPublishEntitiesListRequest
	(*RfidPublishEntitiesListResponse)(nil),                         // 13: rfid_tag_manage.tag_service.RfidPublishEntitiesListResponse
	(*RfidPublishEntitiesResponse)(nil),                             // 14: rfid_tag_manage.tag_service.RfidPublishEntitiesResponse
	(*RfidPublishEntitiesRetrieveRequest)(nil),                      // 15: rfid_tag_manage.tag_service.RfidPublishEntitiesRetrieveRequest
	(*RfidPublishEntitiesUpdateRequest)(nil),                        // 16: rfid_tag_manage.tag_service.RfidPublishEntitiesUpdateRequest
	(*RfidQualityEntitiesCreateRequest)(nil),                        // 17: rfid_tag_manage.tag_service.RfidQualityEntitiesCreateRequest
	(*RfidQualityEntitiesDestroyRequest)(nil),                       // 18: rfid_tag_manage.tag_service.RfidQualityEntitiesDestroyRequest
	(*RfidQualityEntitiesListRequest)(nil),                          // 19: rfid_tag_manage.tag_service.RfidQualityEntitiesListRequest
	(*RfidQualityEntitiesListResponse)(nil),                         // 20: rfid_tag_manage.tag_service.RfidQualityEntitiesListResponse
	(*RfidQualityEntitiesResponse)(nil),                             // 21: rfid_tag_manage.tag_service.RfidQualityEntitiesResponse
	(*RfidQualityEntitiesRetrieveRequest)(nil),                      // 22: rfid_tag_manage.tag_service.RfidQualityEntitiesRetrieveRequest
	(*RfidQualityEntitiesUpdateRequest)(nil),                        // 23: rfid_tag_manage.tag_service.RfidQualityEntitiesUpdateRequest
	(*RfidReasonEntitiesChildResponse)(nil),                         // 24: rfid_tag_manage.tag_service.RfidReasonEntitiesChildResponse
	(*RfidReasonEntitiesCreateRequest)(nil),                         // 25: rfid_tag_manage.tag_service.RfidReasonEntitiesCreateRequest
	(*RfidReasonEntitiesDestroyRequest)(nil),                        // 26: rfid_tag_manage.tag_service.RfidReasonEntitiesDestroyRequest
	(*RfidReasonEntitiesListRequest)(nil),                           // 27: rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest
	(*RfidReasonEntitiesListResponse)(nil),                          // 28: rfid_tag_manage.tag_service.RfidReasonEntitiesListResponse
	(*RfidReasonEntitiesResponse)(nil),                              // 29: rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	(*RfidReasonEntitiesRetrieveRequest)(nil),                       // 30: rfid_tag_manage.tag_service.RfidReasonEntitiesRetrieveRequest
	(*RfidReasonEntitiesUpdateRequest)(nil),                         // 31: rfid_tag_manage.tag_service.RfidReasonEntitiesUpdateRequest
	(*RfidReturnInspectAggEntitiesResponse)(nil),                    // 32: rfid_tag_manage.tag_service.RfidReturnInspectAggEntitiesResponse
	(*RfidReturnInspectAggListRequest)(nil),                         // 33: rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest
	(*RfidReturnInspectAggListResponse)(nil),                        // 34: rfid_tag_manage.tag_service.RfidReturnInspectAggListResponse
	(*RfidReturnInspectAggResponse)(nil),                            // 35: rfid_tag_manage.tag_service.RfidReturnInspectAggResponse
	(*RfidReturnInspectAggSyncRequest)(nil),                         // 36: rfid_tag_manage.tag_service.RfidReturnInspectAggSyncRequest
	(*RfidReturnInspectAggSyncResponse)(nil),                        // 37: rfid_tag_manage.tag_service.RfidReturnInspectAggSyncResponse
	(*RfidReturnInspectConfigCreateRequest)(nil),                    // 38: rfid_tag_manage.tag_service.RfidReturnInspectConfigCreateRequest
	(*RfidReturnInspectConfigDestroyRequest)(nil),                   // 39: rfid_tag_manage.tag_service.RfidReturnInspectConfigDestroyRequest
	(*RfidReturnInspectConfigListRequest)(nil),                      // 40: rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest
	(*RfidReturnInspectConfigListResponse)(nil),                     // 41: rfid_tag_manage.tag_service.RfidReturnInspectConfigListResponse
	(*RfidReturnInspectConfigResponse)(nil),                         // 42: rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	(*RfidReturnInspectConfigRetrieveRequest)(nil),                  // 43: rfid_tag_manage.tag_service.RfidReturnInspectConfigRetrieveRequest
	(*RfidReturnInspectConfigUpdateRequest)(nil),                    // 44: rfid_tag_manage.tag_service.RfidReturnInspectConfigUpdateRequest
	(*RfidReturnInspectEntitiesCreateRequest)(nil),                  // 45: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesCreateRequest
	(*RfidReturnInspectEntitiesDestroyRequest)(nil),                 // 46: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesDestroyRequest
	(*RfidReturnInspectEntitiesListRequest)(nil),                    // 47: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest
	(*RfidReturnInspectEntitiesListResponse)(nil),                   // 48: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListResponse
	(*RfidReturnInspectEntitiesResponse)(nil),                       // 49: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	(*RfidReturnInspectEntitiesRetrieveRequest)(nil),                // 50: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesRetrieveRequest
	(*RfidReturnInspectEntitiesUpdateRequest)(nil),                  // 51: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesUpdateRequest
	(*RfidStockInOutApplyEntitiesCreateRequest)(nil),                // 52: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesCreateRequest
	(*RfidStockInOutApplyEntitiesDestroyRequest)(nil),               // 53: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesDestroyRequest
	(*RfidStockInOutApplyEntitiesListRequest)(nil),                  // 54: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesListRequest
	(*RfidStockInOutApplyEntitiesListResponse)(nil),                 // 55: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesListResponse
	(*RfidStockInOutApplyEntitiesResponse)(nil),                     // 56: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesResponse
	(*RfidStockInOutApplyEntitiesRetrieveRequest)(nil),              // 57: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesRetrieveRequest
	(*RfidStockInOutApplyEntitiesUpdateRequest)(nil),                // 58: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesUpdateRequest
	(*RfidStockInOutResultEntitiesCreateRequest)(nil),               // 59: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesCreateRequest
	(*RfidStockInOutResultEntitiesDestroyRequest)(nil),              // 60: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesDestroyRequest
	(*RfidStockInOutResultEntitiesListRequest)(nil),                 // 61: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesListRequest
	(*RfidStockInOutResultEntitiesListResponse)(nil),                // 62: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesListResponse
	(*RfidStockInOutResultEntitiesResponse)(nil),                    // 63: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesResponse
	(*RfidStockInOutResultEntitiesRetrieveRequest)(nil),             // 64: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesRetrieveRequest
	(*RfidStockInOutResultEntitiesUpdateRequest)(nil),               // 65: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesUpdateRequest
	(*RfidTagIndexDestroyRequest)(nil),                              // 66: rfid_tag_manage.tag_service.RfidTagIndexDestroyRequest
	(*RfidTagIndexDestroyRfidPublishEntitiesResponse)(nil),          // 67: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidPublishEntitiesResponse
	(*RfidTagIndexDestroyRfidQualityEntitiesResponse)(nil),          // 68: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidQualityEntitiesResponse
	(*RfidTagIndexDestroyRfidReasonEntitiesResponse)(nil),           // 69: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReasonEntitiesResponse
	(*RfidTagIndexDestroyRfidReturnInspectConfigResponse)(nil),      // 70: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectConfigResponse
	(*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse)(nil),    // 71: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectEntitiesResponse
	(*RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse)(nil),  // 72: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse
	(*RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse)(nil), // 73: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse
	(*RfidTagIndexListRequest)(nil),                                 // 74: rfid_tag_manage.tag_service.RfidTagIndexListRequest
	(*RfidTagIndexListResponse)(nil),                                // 75: rfid_tag_manage.tag_service.RfidTagIndexListResponse
	(*RfidTagIndexPartialUpdateRequest)(nil),                        // 76: rfid_tag_manage.tag_service.RfidTagIndexPartialUpdateRequest
	(*RfidTagIndexRequest)(nil),                                     // 77: rfid_tag_manage.tag_service.RfidTagIndexRequest
	(*RfidTagIndexResponse)(nil),                                    // 78: rfid_tag_manage.tag_service.RfidTagIndexResponse
	(*RfidTagIndexRetrieveRequest)(nil),                             // 79: rfid_tag_manage.tag_service.RfidTagIndexRetrieveRequest
	(*structpb.Struct)(nil),                                         // 80: google.protobuf.Struct
	(*emptypb.Empty)(nil),                                           // 81: google.protobuf.Empty
}
var file_tag_manager_proto_depIdxs = []int32{
	8,  // 0: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.agg_consign_status:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 1: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.quality_result:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 2: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.push_wdt_status:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 3: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.agg_type:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 4: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.warehouse_info:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 5: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.publish_type:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 6: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.qa_type:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 7: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.qa_result:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 8: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.tag_status:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 9: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.prod_condition:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	80, // 10: rfid_tag_manage.tag_service.RfidPublishEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	80, // 11: rfid_tag_manage.tag_service.RfidPublishEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	14, // 12: rfid_tag_manage.tag_service.RfidPublishEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidPublishEntitiesResponse
	80, // 13: rfid_tag_manage.tag_service.RfidQualityEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	80, // 14: rfid_tag_manage.tag_service.RfidQualityEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	21, // 15: rfid_tag_manage.tag_service.RfidQualityEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidQualityEntitiesResponse
	80, // 16: rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	80, // 17: rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	29, // 18: rfid_tag_manage.tag_service.RfidReasonEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	24, // 19: rfid_tag_manage.tag_service.RfidReasonEntitiesResponse.children_reasons:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesChildResponse
	49, // 20: rfid_tag_manage.tag_service.RfidReturnInspectAggEntitiesResponse.epc_ids:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	80, // 21: rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest._filters:type_name -> google.protobuf.Struct
	80, // 22: rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest._pagination:type_name -> google.protobuf.Struct
	35, // 23: rfid_tag_manage.tag_service.RfidReturnInspectAggListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectAggResponse
	32, // 24: rfid_tag_manage.tag_service.RfidReturnInspectAggResponse.agg_entities:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectAggEntitiesResponse
	80, // 25: rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest._filters:type_name -> google.protobuf.Struct
	80, // 26: rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest._pagination:type_name -> google.protobuf.Struct
	42, // 27: rfid_tag_manage.tag_service.RfidReturnInspectConfigListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	29, // 28: rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse.inspect_reasons:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	80, // 29: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	80, // 30: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	49, // 31: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	29, // 32: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse.result_reasons:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	80, // 33: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	80, // 34: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	56, // 35: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesResponse
	63, // 36: rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesResponse.result_entities:type_name -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesResponse
	80, // 37: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	80, // 38: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	63, // 39: rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesResponse
	80, // 40: rfid_tag_manage.tag_service.RfidTagIndexListRequest._filters:type_name -> google.protobuf.Struct
	80, // 41: rfid_tag_manage.tag_service.RfidTagIndexListRequest._pagination:type_name -> google.protobuf.Struct
	78, // 42: rfid_tag_manage.tag_service.RfidTagIndexListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	49, // 43: rfid_tag_manage.tag_service.RfidTagIndexResponse.return_inspect_entities:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	14, // 44: rfid_tag_manage.tag_service.RfidTagIndexResponse.publish_entities:type_name -> rfid_tag_manage.tag_service.RfidPublishEntitiesResponse
	21, // 45: rfid_tag_manage.tag_service.RfidTagIndexResponse.quality_entities:type_name -> rfid_tag_manage.tag_service.RfidQualityEntitiesResponse
	56, // 46: rfid_tag_manage.tag_service.RfidTagIndexResponse.stock_inout_entities:type_name -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesResponse
	0,  // 47: rfid_tag_manage.tag_service.RfidTagIndexController.BulkPushReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.BulkPushReturnInspectAggRequest
	77, // 48: rfid_tag_manage.tag_service.RfidTagIndexController.Create:input_type -> rfid_tag_manage.tag_service.RfidTagIndexRequest
	10, // 49: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidPublishEntities:input_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesCreateRequest
	17, // 50: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidQualityEntities:input_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesCreateRequest
	25, // 51: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesCreateRequest
	38, // 52: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigCreateRequest
	45, // 53: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesCreateRequest
	52, // 54: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidStockInOutApplyEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesCreateRequest
	59, // 55: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidStockInOutResultEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesCreateRequest
	66, // 56: rfid_tag_manage.tag_service.RfidTagIndexController.Destroy:input_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRequest
	2,  // 57: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.DestroyReturnInspectAggRequest
	11, // 58: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidPublishEntities:input_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesDestroyRequest
	18, // 59: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidQualityEntities:input_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesDestroyRequest
	26, // 60: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesDestroyRequest
	39, // 61: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigDestroyRequest
	46, // 62: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesDestroyRequest
	53, // 63: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidStockInOutApplyEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesDestroyRequest
	60, // 64: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidStockInOutResultEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesDestroyRequest
	6,  // 65: rfid_tag_manage.tag_service.RfidTagIndexController.InspectConfigOptions:input_type -> rfid_tag_manage.tag_service.InspectConfigOptionsRequest
	74, // 66: rfid_tag_manage.tag_service.RfidTagIndexController.List:input_type -> rfid_tag_manage.tag_service.RfidTagIndexListRequest
	12, // 67: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidPublishEntities:input_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesListRequest
	19, // 68: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidQualityEntities:input_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesListRequest
	27, // 69: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest
	33, // 70: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest
	40, // 71: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest
	47, // 72: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest
	54, // 73: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidStockInOutApplyEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesListRequest
	61, // 74: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidStockInOutResultEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesListRequest
	76, // 75: rfid_tag_manage.tag_service.RfidTagIndexController.PartialUpdate:input_type -> rfid_tag_manage.tag_service.RfidTagIndexPartialUpdateRequest
	79, // 76: rfid_tag_manage.tag_service.RfidTagIndexController.Retrieve:input_type -> rfid_tag_manage.tag_service.RfidTagIndexRetrieveRequest
	9,  // 77: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.RetrieveReturnInspectAggRequest
	15, // 78: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidPublishEntities:input_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesRetrieveRequest
	22, // 79: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidQualityEntities:input_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesRetrieveRequest
	30, // 80: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesRetrieveRequest
	43, // 81: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigRetrieveRequest
	50, // 82: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesRetrieveRequest
	57, // 83: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidStockInOutApplyEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesRetrieveRequest
	64, // 84: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidStockInOutResultEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesRetrieveRequest
	4,  // 85: rfid_tag_manage.tag_service.RfidTagIndexController.RfidEpcSync:input_type -> rfid_tag_manage.tag_service.EpcSyncRequest
	36, // 86: rfid_tag_manage.tag_service.RfidTagIndexController.RfidReturnInspectAggSync:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggSyncRequest
	77, // 87: rfid_tag_manage.tag_service.RfidTagIndexController.Update:input_type -> rfid_tag_manage.tag_service.RfidTagIndexRequest
	16, // 88: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidPublishEntities:input_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesUpdateRequest
	23, // 89: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidQualityEntities:input_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesUpdateRequest
	31, // 90: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesUpdateRequest
	44, // 91: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigUpdateRequest
	51, // 92: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesUpdateRequest
	58, // 93: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidStockInOutApplyEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesUpdateRequest
	65, // 94: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidStockInOutResultEntities:input_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesUpdateRequest
	1,  // 95: rfid_tag_manage.tag_service.RfidTagIndexController.BulkPushReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.BulkPushReturnInspectAggResponse
	78, // 96: rfid_tag_manage.tag_service.RfidTagIndexController.Create:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	14, // 97: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidPublishEntities:output_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesResponse
	21, // 98: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidQualityEntities:output_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesResponse
	29, // 99: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	42, // 100: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	49, // 101: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	56, // 102: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidStockInOutApplyEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesResponse
	63, // 103: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidStockInOutResultEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesResponse
	81, // 104: rfid_tag_manage.tag_service.RfidTagIndexController.Destroy:output_type -> google.protobuf.Empty
	3,  // 105: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.DestroyReturnInspectAggResponse
	67, // 106: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidPublishEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidPublishEntitiesResponse
	68, // 107: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidQualityEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidQualityEntitiesResponse
	69, // 108: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReasonEntitiesResponse
	70, // 109: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectConfigResponse
	71, // 110: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectEntitiesResponse
	72, // 111: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidStockInOutApplyEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse
	73, // 112: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidStockInOutResultEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse
	7,  // 113: rfid_tag_manage.tag_service.RfidTagIndexController.InspectConfigOptions:output_type -> rfid_tag_manage.tag_service.InspectConfigOptionsResponse
	75, // 114: rfid_tag_manage.tag_service.RfidTagIndexController.List:output_type -> rfid_tag_manage.tag_service.RfidTagIndexListResponse
	13, // 115: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidPublishEntities:output_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesListResponse
	20, // 116: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidQualityEntities:output_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesListResponse
	28, // 117: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesListResponse
	34, // 118: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggListResponse
	41, // 119: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigListResponse
	48, // 120: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListResponse
	55, // 121: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidStockInOutApplyEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesListResponse
	62, // 122: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidStockInOutResultEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesListResponse
	78, // 123: rfid_tag_manage.tag_service.RfidTagIndexController.PartialUpdate:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	78, // 124: rfid_tag_manage.tag_service.RfidTagIndexController.Retrieve:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	35, // 125: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggResponse
	14, // 126: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidPublishEntities:output_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesResponse
	21, // 127: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidQualityEntities:output_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesResponse
	29, // 128: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	42, // 129: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	49, // 130: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	56, // 131: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidStockInOutApplyEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesResponse
	63, // 132: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidStockInOutResultEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesResponse
	5,  // 133: rfid_tag_manage.tag_service.RfidTagIndexController.RfidEpcSync:output_type -> rfid_tag_manage.tag_service.EpcSyncResponse
	37, // 134: rfid_tag_manage.tag_service.RfidTagIndexController.RfidReturnInspectAggSync:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggSyncResponse
	78, // 135: rfid_tag_manage.tag_service.RfidTagIndexController.Update:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	14, // 136: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidPublishEntities:output_type -> rfid_tag_manage.tag_service.RfidPublishEntitiesResponse
	21, // 137: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidQualityEntities:output_type -> rfid_tag_manage.tag_service.RfidQualityEntitiesResponse
	29, // 138: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	42, // 139: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	49, // 140: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	56, // 141: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidStockInOutApplyEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutApplyEntitiesResponse
	63, // 142: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidStockInOutResultEntities:output_type -> rfid_tag_manage.tag_service.RfidStockInOutResultEntitiesResponse
	95, // [95:143] is the sub-list for method output_type
	47, // [47:95] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_tag_manager_proto_init() }
func file_tag_manager_proto_init() {
	if File_tag_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tag_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPushReturnInspectAggRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPushReturnInspectAggResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReturnInspectAggRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReturnInspectAggResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpcSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpcSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectConfigOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectConfigOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveReturnInspectAggRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidPublishEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidPublishEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidPublishEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidPublishEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidPublishEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidPublishEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidPublishEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidQualityEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidQualityEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidQualityEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidQualityEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidQualityEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidQualityEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidQualityEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesChildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutApplyEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutApplyEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutApplyEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutApplyEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutApplyEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutApplyEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutApplyEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutResultEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutResultEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutResultEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutResultEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutResultEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutResultEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidStockInOutResultEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidPublishEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidQualityEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidReasonEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidReturnInspectConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidStockInOutApplyEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidStockInOutResultEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tag_manager_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[78].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tag_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tag_manager_proto_goTypes,
		DependencyIndexes: file_tag_manager_proto_depIdxs,
		MessageInfos:      file_tag_manager_proto_msgTypes,
	}.Build()
	File_tag_manager_proto = out.File
	file_tag_manager_proto_rawDesc = nil
	file_tag_manager_proto_goTypes = nil
	file_tag_manager_proto_depIdxs = nil
}
