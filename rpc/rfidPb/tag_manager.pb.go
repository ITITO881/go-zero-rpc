// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: tag_manager.proto

package rfidPb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BulkPushReturnInspectAggRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *BulkPushReturnInspectAggRequest) Reset() {
	*x = BulkPushReturnInspectAggRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPushReturnInspectAggRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPushReturnInspectAggRequest) ProtoMessage() {}

func (x *BulkPushReturnInspectAggRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPushReturnInspectAggRequest.ProtoReflect.Descriptor instead.
func (*BulkPushReturnInspectAggRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{0}
}

func (x *BulkPushReturnInspectAggRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type BulkPushReturnInspectAggResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BulkPushReturnInspectAggResponse) Reset() {
	*x = BulkPushReturnInspectAggResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPushReturnInspectAggResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPushReturnInspectAggResponse) ProtoMessage() {}

func (x *BulkPushReturnInspectAggResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPushReturnInspectAggResponse.ProtoReflect.Descriptor instead.
func (*BulkPushReturnInspectAggResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{1}
}

func (x *BulkPushReturnInspectAggResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkPushReturnInspectAggResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkPushReturnInspectAggResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DestroyReturnInspectAggRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *DestroyReturnInspectAggRequest) Reset() {
	*x = DestroyReturnInspectAggRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReturnInspectAggRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReturnInspectAggRequest) ProtoMessage() {}

func (x *DestroyReturnInspectAggRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReturnInspectAggRequest.ProtoReflect.Descriptor instead.
func (*DestroyReturnInspectAggRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{2}
}

func (x *DestroyReturnInspectAggRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type DestroyReturnInspectAggResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DestroyReturnInspectAggResponse) Reset() {
	*x = DestroyReturnInspectAggResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReturnInspectAggResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReturnInspectAggResponse) ProtoMessage() {}

func (x *DestroyReturnInspectAggResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReturnInspectAggResponse.ProtoReflect.Descriptor instead.
func (*DestroyReturnInspectAggResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{3}
}

func (x *DestroyReturnInspectAggResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyReturnInspectAggResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyReturnInspectAggResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type EpcSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcList []string `protobuf:"bytes,1,rep,name=epc_list,json=epcList,proto3" json:"epc_list,omitempty"`
}

func (x *EpcSyncRequest) Reset() {
	*x = EpcSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpcSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpcSyncRequest) ProtoMessage() {}

func (x *EpcSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpcSyncRequest.ProtoReflect.Descriptor instead.
func (*EpcSyncRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{4}
}

func (x *EpcSyncRequest) GetEpcList() []string {
	if x != nil {
		return x.EpcList
	}
	return nil
}

type EpcSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EpcSyncResponse) Reset() {
	*x = EpcSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpcSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpcSyncResponse) ProtoMessage() {}

func (x *EpcSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpcSyncResponse.ProtoReflect.Descriptor instead.
func (*EpcSyncResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{5}
}

func (x *EpcSyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EpcSyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EpcSyncResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InspectConfigOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InspectConfigOptionsRequest) Reset() {
	*x = InspectConfigOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectConfigOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectConfigOptionsRequest) ProtoMessage() {}

func (x *InspectConfigOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectConfigOptionsRequest.ProtoReflect.Descriptor instead.
func (*InspectConfigOptionsRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{6}
}

type InspectConfigOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggConsignStatus []*LabelValueResponse `protobuf:"bytes,1,rep,name=agg_consign_status,json=aggConsignStatus,proto3" json:"agg_consign_status,omitempty"`
	QualityResult    []*LabelValueResponse `protobuf:"bytes,2,rep,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	PushWdtStatus    []*LabelValueResponse `protobuf:"bytes,3,rep,name=push_wdt_status,json=pushWdtStatus,proto3" json:"push_wdt_status,omitempty"`
	AggType          []*LabelValueResponse `protobuf:"bytes,4,rep,name=agg_type,json=aggType,proto3" json:"agg_type,omitempty"`
	WarehouseInfo    []*LabelValueResponse `protobuf:"bytes,5,rep,name=warehouse_info,json=warehouseInfo,proto3" json:"warehouse_info,omitempty"`
}

func (x *InspectConfigOptionsResponse) Reset() {
	*x = InspectConfigOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectConfigOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectConfigOptionsResponse) ProtoMessage() {}

func (x *InspectConfigOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectConfigOptionsResponse.ProtoReflect.Descriptor instead.
func (*InspectConfigOptionsResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{7}
}

func (x *InspectConfigOptionsResponse) GetAggConsignStatus() []*LabelValueResponse {
	if x != nil {
		return x.AggConsignStatus
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetQualityResult() []*LabelValueResponse {
	if x != nil {
		return x.QualityResult
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetPushWdtStatus() []*LabelValueResponse {
	if x != nil {
		return x.PushWdtStatus
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetAggType() []*LabelValueResponse {
	if x != nil {
		return x.AggType
	}
	return nil
}

func (x *InspectConfigOptionsResponse) GetWarehouseInfo() []*LabelValueResponse {
	if x != nil {
		return x.WarehouseInfo
	}
	return nil
}

type LabelValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelValueResponse) Reset() {
	*x = LabelValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValueResponse) ProtoMessage() {}

func (x *LabelValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValueResponse.ProtoReflect.Descriptor instead.
func (*LabelValueResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{8}
}

func (x *LabelValueResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LabelValueResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type RetrieveReturnInspectAggRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RetrieveReturnInspectAggRequest) Reset() {
	*x = RetrieveReturnInspectAggRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveReturnInspectAggRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveReturnInspectAggRequest) ProtoMessage() {}

func (x *RetrieveReturnInspectAggRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveReturnInspectAggRequest.ProtoReflect.Descriptor instead.
func (*RetrieveReturnInspectAggRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{9}
}

func (x *RetrieveReturnInspectAggRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReasonEntitiesChildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime   *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime   *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ReasonCode   int32   `protobuf:"varint,4,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName   string  `protobuf:"bytes,5,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	WithRemark   *bool   `protobuf:"varint,6,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved   *bool   `protobuf:"varint,7,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId   *int32  `protobuf:"varint,8,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName *string `protobuf:"bytes,9,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	ParentCode   *int32  `protobuf:"varint,10,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	BeCited      *bool   `protobuf:"varint,11,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesChildResponse) Reset() {
	*x = RfidReasonEntitiesChildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesChildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesChildResponse) ProtoMessage() {}

func (x *RfidReasonEntitiesChildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesChildResponse.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesChildResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{10}
}

func (x *RfidReasonEntitiesChildResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesChildResponse) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesChildResponse) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesChildResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesChildResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesChildResponse) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesChildResponse) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReasonEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ReasonCode   int32   `protobuf:"varint,2,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName   string  `protobuf:"bytes,3,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ParentCode   *int32  `protobuf:"varint,4,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	WithRemark   *bool   `protobuf:"varint,5,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved   *bool   `protobuf:"varint,6,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId   *int32  `protobuf:"varint,7,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName *string `protobuf:"bytes,8,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	BeCited      *bool   `protobuf:"varint,9,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesCreateRequest) Reset() {
	*x = RfidReasonEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{11}
}

func (x *RfidReasonEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesCreateRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesCreateRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesCreateRequest) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesCreateRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesCreateRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesCreateRequest) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReasonEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReasonEntitiesDestroyRequest) Reset() {
	*x = RfidReasonEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{12}
}

func (x *RfidReasonEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReasonEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReasonEntitiesListRequest) Reset() {
	*x = RfidReasonEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesListRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{13}
}

func (x *RfidReasonEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReasonEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReasonEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReasonEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReasonEntitiesListResponse) Reset() {
	*x = RfidReasonEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesListResponse) ProtoMessage() {}

func (x *RfidReasonEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{14}
}

func (x *RfidReasonEntitiesListResponse) GetResults() []*RfidReasonEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReasonEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReasonEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId             *string                            `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime      *string                            `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime      *string                            `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ReasonCode      int32                              `protobuf:"varint,4,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName      string                             `protobuf:"bytes,5,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	WithRemark      *bool                              `protobuf:"varint,6,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved      *bool                              `protobuf:"varint,7,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId      *int32                             `protobuf:"varint,8,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName    *string                            `protobuf:"bytes,9,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	ChildrenReasons []*RfidReasonEntitiesChildResponse `protobuf:"bytes,10,rep,name=children_reasons,json=childrenReasons,proto3" json:"children_reasons,omitempty"`
	ParentCode      *int32                             `protobuf:"varint,11,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	BeCited         *bool                              `protobuf:"varint,12,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesResponse) Reset() {
	*x = RfidReasonEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesResponse) ProtoMessage() {}

func (x *RfidReasonEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{15}
}

func (x *RfidReasonEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesResponse) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesResponse) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesResponse) GetChildrenReasons() []*RfidReasonEntitiesChildResponse {
	if x != nil {
		return x.ChildrenReasons
	}
	return nil
}

func (x *RfidReasonEntitiesResponse) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesResponse) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReasonEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReasonEntitiesRetrieveRequest) Reset() {
	*x = RfidReasonEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{16}
}

func (x *RfidReasonEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReasonEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ReasonCode           int32    `protobuf:"varint,3,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName           string   `protobuf:"bytes,4,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ParentCode           *int32   `protobuf:"varint,5,opt,name=parent_code,json=parentCode,proto3,oneof" json:"parent_code,omitempty"`
	WithRemark           *bool    `protobuf:"varint,6,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsReserved           *bool    `protobuf:"varint,7,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	OperatorId           *int32   `protobuf:"varint,8,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName         *string  `protobuf:"bytes,9,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	BeCited              *bool    `protobuf:"varint,10,opt,name=be_cited,json=beCited,proto3,oneof" json:"be_cited,omitempty"`
}

func (x *RfidReasonEntitiesUpdateRequest) Reset() {
	*x = RfidReasonEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReasonEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReasonEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidReasonEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReasonEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidReasonEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{17}
}

func (x *RfidReasonEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReasonEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidReasonEntitiesUpdateRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RfidReasonEntitiesUpdateRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RfidReasonEntitiesUpdateRequest) GetParentCode() int32 {
	if x != nil && x.ParentCode != nil {
		return *x.ParentCode
	}
	return 0
}

func (x *RfidReasonEntitiesUpdateRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RfidReasonEntitiesUpdateRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RfidReasonEntitiesUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReasonEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReasonEntitiesUpdateRequest) GetBeCited() bool {
	if x != nil && x.BeCited != nil {
		return *x.BeCited
	}
	return false
}

type RfidReturnInspectAggEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                              `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	EpcList             *string                              `protobuf:"bytes,2,opt,name=epc_list,json=epcList,proto3,oneof" json:"epc_list,omitempty"`
	CreateTime          *string                              `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                              `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	QualityResult       *int32                               `protobuf:"varint,5,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	GoodsNo             *string                              `protobuf:"bytes,6,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string                              `protobuf:"bytes,7,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName           *string                              `protobuf:"bytes,8,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	Num                 *int32                               `protobuf:"varint,9,opt,name=num,proto3,oneof" json:"num,omitempty"`
	FromWarehouseNo     *string                              `protobuf:"bytes,10,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string                              `protobuf:"bytes,11,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo   *string                              `protobuf:"bytes,12,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string                              `protobuf:"bytes,13,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo          *string                              `protobuf:"bytes,14,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName        *string                              `protobuf:"bytes,15,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	EpcIds              []*RfidReturnInspectEntitiesResponse `protobuf:"bytes,16,rep,name=epc_ids,json=epcIds,proto3" json:"epc_ids,omitempty"`
	QualityResultName   *string                              `protobuf:"bytes,17,opt,name=quality_result_name,json=qualityResultName,proto3,oneof" json:"quality_result_name,omitempty"`
}

func (x *RfidReturnInspectAggEntitiesResponse) Reset() {
	*x = RfidReturnInspectAggEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggEntitiesResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{18}
}

func (x *RfidReturnInspectAggEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetEpcList() string {
	if x != nil && x.EpcList != nil {
		return *x.EpcList
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectAggEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *RfidReturnInspectAggEntitiesResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectAggEntitiesResponse) GetEpcIds() []*RfidReturnInspectEntitiesResponse {
	if x != nil {
		return x.EpcIds
	}
	return nil
}

func (x *RfidReturnInspectAggEntitiesResponse) GetQualityResultName() string {
	if x != nil && x.QualityResultName != nil {
		return *x.QualityResultName
	}
	return ""
}

type RfidReturnInspectAggListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReturnInspectAggListRequest) Reset() {
	*x = RfidReturnInspectAggListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggListRequest) ProtoMessage() {}

func (x *RfidReturnInspectAggListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggListRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{19}
}

func (x *RfidReturnInspectAggListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReturnInspectAggListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReturnInspectAggListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReturnInspectAggResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectAggListResponse) Reset() {
	*x = RfidReturnInspectAggListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggListResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggListResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{20}
}

func (x *RfidReturnInspectAggListResponse) GetResults() []*RfidReturnInspectAggResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReturnInspectAggListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectAggResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggEntities         []*RfidReturnInspectAggEntitiesResponse `protobuf:"bytes,2,rep,name=agg_entities,json=aggEntities,proto3" json:"agg_entities,omitempty"`
	CreateTime          *string                                 `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                                 `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	AggNo               *string                                 `protobuf:"bytes,5,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                                 `protobuf:"bytes,6,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	PushWdtStatus       *int32                                  `protobuf:"varint,7,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	WdtTransferNo       *string                                 `protobuf:"bytes,8,opt,name=wdt_transfer_no,json=wdtTransferNo,proto3,oneof" json:"wdt_transfer_no,omitempty"`
	WdtPushTime         *string                                 `protobuf:"bytes,9,opt,name=wdt_push_time,json=wdtPushTime,proto3,oneof" json:"wdt_push_time,omitempty"`
	AggType             *int32                                  `protobuf:"varint,10,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	FromWarehouseNo     *string                                 `protobuf:"bytes,11,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string                                 `protobuf:"bytes,12,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo   *string                                 `protobuf:"bytes,13,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string                                 `protobuf:"bytes,14,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	AggGoodsTypeCount   *int32                                  `protobuf:"varint,15,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *float64                                `protobuf:"fixed64,16,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	WdtFailureReasons   *string                                 `protobuf:"bytes,17,opt,name=wdt_failure_reasons,json=wdtFailureReasons,proto3,oneof" json:"wdt_failure_reasons,omitempty"`
	PushWdtStatusName   *string                                 `protobuf:"bytes,18,opt,name=push_wdt_status_name,json=pushWdtStatusName,proto3,oneof" json:"push_wdt_status_name,omitempty"`
	AggTypeName         *string                                 `protobuf:"bytes,19,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
}

func (x *RfidReturnInspectAggResponse) Reset() {
	*x = RfidReturnInspectAggResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{21}
}

func (x *RfidReturnInspectAggResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggEntities() []*RfidReturnInspectAggEntitiesResponse {
	if x != nil {
		return x.AggEntities
	}
	return nil
}

func (x *RfidReturnInspectAggResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetWdtTransferNo() string {
	if x != nil && x.WdtTransferNo != nil {
		return *x.WdtTransferNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetWdtPushTime() string {
	if x != nil && x.WdtPushTime != nil {
		return *x.WdtPushTime
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *RfidReturnInspectAggResponse) GetWdtFailureReasons() string {
	if x != nil && x.WdtFailureReasons != nil {
		return *x.WdtFailureReasons
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetPushWdtStatusName() string {
	if x != nil && x.PushWdtStatusName != nil {
		return *x.PushWdtStatusName
	}
	return ""
}

func (x *RfidReturnInspectAggResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

type RfidReturnInspectAggSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RfidReturnInspectAggSyncRequest) Reset() {
	*x = RfidReturnInspectAggSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggSyncRequest) ProtoMessage() {}

func (x *RfidReturnInspectAggSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggSyncRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggSyncRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{22}
}

type RfidReturnInspectAggSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectAggSyncResponse) Reset() {
	*x = RfidReturnInspectAggSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectAggSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectAggSyncResponse) ProtoMessage() {}

func (x *RfidReturnInspectAggSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectAggSyncResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectAggSyncResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{23}
}

func (x *RfidReturnInspectAggSyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidReturnInspectAggSyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidReturnInspectAggSyncResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectConfigCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ConfigNo         string   `protobuf:"bytes,2,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	ConfigName       string   `protobuf:"bytes,3,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	ConfigRemark     *string  `protobuf:"bytes,4,opt,name=config_remark,json=configRemark,proto3,oneof" json:"config_remark,omitempty"`
	QualityResult    *int32   `protobuf:"varint,5,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	SrcWarehouseName string   `protobuf:"bytes,6,opt,name=src_warehouse_name,json=srcWarehouseName,proto3" json:"src_warehouse_name,omitempty"`
	SrcWarehouseNo   string   `protobuf:"bytes,7,opt,name=src_warehouse_no,json=srcWarehouseNo,proto3" json:"src_warehouse_no,omitempty"`
	WarehouseName    string   `protobuf:"bytes,8,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	WarehouseNo      string   `protobuf:"bytes,9,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	OperatorId       *int32   `protobuf:"varint,10,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName     *string  `protobuf:"bytes,11,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	RelatedIds       []string `protobuf:"bytes,12,rep,name=related_ids,json=relatedIds,proto3" json:"related_ids,omitempty"`
}

func (x *RfidReturnInspectConfigCreateRequest) Reset() {
	*x = RfidReturnInspectConfigCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigCreateRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{24}
}

func (x *RfidReturnInspectConfigCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetConfigRemark() string {
	if x != nil && x.ConfigRemark != nil {
		return *x.ConfigRemark
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectConfigCreateRequest) GetSrcWarehouseName() string {
	if x != nil {
		return x.SrcWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetSrcWarehouseNo() string {
	if x != nil {
		return x.SrcWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReturnInspectConfigCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectConfigCreateRequest) GetRelatedIds() []string {
	if x != nil {
		return x.RelatedIds
	}
	return nil
}

type RfidReturnInspectConfigDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectConfigDestroyRequest) Reset() {
	*x = RfidReturnInspectConfigDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigDestroyRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{25}
}

func (x *RfidReturnInspectConfigDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectConfigListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReturnInspectConfigListRequest) Reset() {
	*x = RfidReturnInspectConfigListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigListRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigListRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{26}
}

func (x *RfidReturnInspectConfigListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReturnInspectConfigListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReturnInspectConfigListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReturnInspectConfigResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectConfigListResponse) Reset() {
	*x = RfidReturnInspectConfigListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigListResponse) ProtoMessage() {}

func (x *RfidReturnInspectConfigListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigListResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{27}
}

func (x *RfidReturnInspectConfigListResponse) GetResults() []*RfidReturnInspectConfigResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReturnInspectConfigListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string                       `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	InspectReasons    []*RfidReasonEntitiesResponse `protobuf:"bytes,2,rep,name=inspect_reasons,json=inspectReasons,proto3" json:"inspect_reasons,omitempty"`
	CreateTime        *string                       `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime        *string                       `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ConfigNo          string                        `protobuf:"bytes,5,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	ConfigName        string                        `protobuf:"bytes,6,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	ConfigRemark      *string                       `protobuf:"bytes,7,opt,name=config_remark,json=configRemark,proto3,oneof" json:"config_remark,omitempty"`
	QualityResult     *int32                        `protobuf:"varint,8,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	SrcWarehouseName  string                        `protobuf:"bytes,9,opt,name=src_warehouse_name,json=srcWarehouseName,proto3" json:"src_warehouse_name,omitempty"`
	SrcWarehouseNo    string                        `protobuf:"bytes,10,opt,name=src_warehouse_no,json=srcWarehouseNo,proto3" json:"src_warehouse_no,omitempty"`
	WarehouseName     string                        `protobuf:"bytes,11,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	WarehouseNo       string                        `protobuf:"bytes,12,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	OperatorId        *int32                        `protobuf:"varint,13,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName      *string                       `protobuf:"bytes,14,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResultName *string                       `protobuf:"bytes,15,opt,name=quality_result_name,json=qualityResultName,proto3,oneof" json:"quality_result_name,omitempty"`
}

func (x *RfidReturnInspectConfigResponse) Reset() {
	*x = RfidReturnInspectConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigResponse) ProtoMessage() {}

func (x *RfidReturnInspectConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{28}
}

func (x *RfidReturnInspectConfigResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetInspectReasons() []*RfidReasonEntitiesResponse {
	if x != nil {
		return x.InspectReasons
	}
	return nil
}

func (x *RfidReturnInspectConfigResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetConfigRemark() string {
	if x != nil && x.ConfigRemark != nil {
		return *x.ConfigRemark
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectConfigResponse) GetSrcWarehouseName() string {
	if x != nil {
		return x.SrcWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetSrcWarehouseNo() string {
	if x != nil {
		return x.SrcWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReturnInspectConfigResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectConfigResponse) GetQualityResultName() string {
	if x != nil && x.QualityResultName != nil {
		return *x.QualityResultName
	}
	return ""
}

type RfidReturnInspectConfigRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectConfigRetrieveRequest) Reset() {
	*x = RfidReturnInspectConfigRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigRetrieveRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{29}
}

func (x *RfidReturnInspectConfigRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	ConfigNo             string   `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	ConfigName           string   `protobuf:"bytes,4,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	ConfigRemark         *string  `protobuf:"bytes,5,opt,name=config_remark,json=configRemark,proto3,oneof" json:"config_remark,omitempty"`
	QualityResult        *int32   `protobuf:"varint,6,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	SrcWarehouseName     string   `protobuf:"bytes,7,opt,name=src_warehouse_name,json=srcWarehouseName,proto3" json:"src_warehouse_name,omitempty"`
	SrcWarehouseNo       string   `protobuf:"bytes,8,opt,name=src_warehouse_no,json=srcWarehouseNo,proto3" json:"src_warehouse_no,omitempty"`
	WarehouseName        string   `protobuf:"bytes,9,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	WarehouseNo          string   `protobuf:"bytes,10,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	OperatorId           *int32   `protobuf:"varint,11,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName         *string  `protobuf:"bytes,12,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,13,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	UpdateIds            []string `protobuf:"bytes,14,rep,name=update_ids,json=updateIds,proto3" json:"update_ids,omitempty"`
}

func (x *RfidReturnInspectConfigUpdateRequest) Reset() {
	*x = RfidReturnInspectConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectConfigUpdateRequest) ProtoMessage() {}

func (x *RfidReturnInspectConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{30}
}

func (x *RfidReturnInspectConfigUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetConfigRemark() string {
	if x != nil && x.ConfigRemark != nil {
		return *x.ConfigRemark
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectConfigUpdateRequest) GetSrcWarehouseName() string {
	if x != nil {
		return x.SrcWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetSrcWarehouseNo() string {
	if x != nil {
		return x.SrcWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RfidReturnInspectConfigUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectConfigUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidReturnInspectConfigUpdateRequest) GetUpdateIds() []string {
	if x != nil {
		return x.UpdateIds
	}
	return nil
}

type RfidReturnInspectEntitiesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	InspectTime         *string  `protobuf:"bytes,2,opt,name=inspect_time,json=inspectTime,proto3,oneof" json:"inspect_time,omitempty"`
	IsWithdraw          *bool    `protobuf:"varint,3,opt,name=is_withdraw,json=isWithdraw,proto3,oneof" json:"is_withdraw,omitempty"`
	AggConsignStatus    *int32   `protobuf:"varint,4,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo               *string  `protobuf:"bytes,5,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string  `protobuf:"bytes,6,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	GoodsNo             *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName           *string  `protobuf:"bytes,9,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsEpc            *string  `protobuf:"bytes,10,opt,name=goods_epc,json=goodsEpc,proto3,oneof" json:"goods_epc,omitempty"`
	GoodsTid            *string  `protobuf:"bytes,11,opt,name=goods_tid,json=goodsTid,proto3,oneof" json:"goods_tid,omitempty"`
	FromWarehouseNo     *string  `protobuf:"bytes,12,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string  `protobuf:"bytes,13,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo   *string  `protobuf:"bytes,14,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string  `protobuf:"bytes,15,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo          *string  `protobuf:"bytes,16,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName        *string  `protobuf:"bytes,17,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResult       *int32   `protobuf:"varint,18,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	QualityRemark       *string  `protobuf:"bytes,20,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	AntiFake            *string  `protobuf:"bytes,21,opt,name=anti_fake,json=antiFake,proto3,oneof" json:"anti_fake,omitempty"`
	RelatedIds          []string `protobuf:"bytes,22,rep,name=related_ids,json=relatedIds,proto3" json:"related_ids,omitempty"`
}

func (x *RfidReturnInspectEntitiesCreateRequest) Reset() {
	*x = RfidReturnInspectEntitiesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesCreateRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesCreateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesCreateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{31}
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetInspectTime() string {
	if x != nil && x.InspectTime != nil {
		return *x.InspectTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetIsWithdraw() bool {
	if x != nil && x.IsWithdraw != nil {
		return *x.IsWithdraw
	}
	return false
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsEpc() string {
	if x != nil && x.GoodsEpc != nil {
		return *x.GoodsEpc
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetGoodsTid() string {
	if x != nil && x.GoodsTid != nil {
		return *x.GoodsTid
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetAntiFake() string {
	if x != nil && x.AntiFake != nil {
		return *x.AntiFake
	}
	return ""
}

func (x *RfidReturnInspectEntitiesCreateRequest) GetRelatedIds() []string {
	if x != nil {
		return x.RelatedIds
	}
	return nil
}

type RfidReturnInspectEntitiesDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectEntitiesDestroyRequest) Reset() {
	*x = RfidReturnInspectEntitiesDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesDestroyRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{32}
}

func (x *RfidReturnInspectEntitiesDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidReturnInspectEntitiesListRequest) Reset() {
	*x = RfidReturnInspectEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesListRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{33}
}

func (x *RfidReturnInspectEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidReturnInspectEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidReturnInspectEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidReturnInspectEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidReturnInspectEntitiesListResponse) Reset() {
	*x = RfidReturnInspectEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesListResponse) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{34}
}

func (x *RfidReturnInspectEntitiesListResponse) GetResults() []*RfidReturnInspectEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidReturnInspectEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidReturnInspectEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string                       `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	InspectTime          *string                       `protobuf:"bytes,2,opt,name=inspect_time,json=inspectTime,proto3,oneof" json:"inspect_time,omitempty"`
	CreateTime           *string                       `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime           *string                       `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	IsWithdraw           *bool                         `protobuf:"varint,5,opt,name=is_withdraw,json=isWithdraw,proto3,oneof" json:"is_withdraw,omitempty"`
	AggConsignStatus     *int32                        `protobuf:"varint,6,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo                *string                       `protobuf:"bytes,7,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName              *string                       `protobuf:"bytes,8,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	GoodsNo              *string                       `protobuf:"bytes,9,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string                       `protobuf:"bytes,10,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string                       `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsEpc             *string                       `protobuf:"bytes,12,opt,name=goods_epc,json=goodsEpc,proto3,oneof" json:"goods_epc,omitempty"`
	GoodsTid             *string                       `protobuf:"bytes,13,opt,name=goods_tid,json=goodsTid,proto3,oneof" json:"goods_tid,omitempty"`
	FromWarehouseNo      *string                       `protobuf:"bytes,14,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string                       `protobuf:"bytes,15,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo    *string                       `protobuf:"bytes,16,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName  *string                       `protobuf:"bytes,17,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo           *string                       `protobuf:"bytes,18,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName         *string                       `protobuf:"bytes,19,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResult        *int32                        `protobuf:"varint,20,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	QualityRemark        *string                       `protobuf:"bytes,22,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	AntiFake             *string                       `protobuf:"bytes,23,opt,name=anti_fake,json=antiFake,proto3,oneof" json:"anti_fake,omitempty"`
	ResultReasons        []*RfidReasonEntitiesResponse `protobuf:"bytes,24,rep,name=result_reasons,json=resultReasons,proto3" json:"result_reasons,omitempty"`
	AggConsignStatusName *string                       `protobuf:"bytes,25,opt,name=agg_consign_status_name,json=aggConsignStatusName,proto3,oneof" json:"agg_consign_status_name,omitempty"`
	QualityResultName    *string                       `protobuf:"bytes,26,opt,name=quality_result_name,json=qualityResultName,proto3,oneof" json:"quality_result_name,omitempty"`
}

func (x *RfidReturnInspectEntitiesResponse) Reset() {
	*x = RfidReturnInspectEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesResponse) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{35}
}

func (x *RfidReturnInspectEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetInspectTime() string {
	if x != nil && x.InspectTime != nil {
		return *x.InspectTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetIsWithdraw() bool {
	if x != nil && x.IsWithdraw != nil {
		return *x.IsWithdraw
	}
	return false
}

func (x *RfidReturnInspectEntitiesResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *RfidReturnInspectEntitiesResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsEpc() string {
	if x != nil && x.GoodsEpc != nil {
		return *x.GoodsEpc
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetGoodsTid() string {
	if x != nil && x.GoodsTid != nil {
		return *x.GoodsTid
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectEntitiesResponse) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetAntiFake() string {
	if x != nil && x.AntiFake != nil {
		return *x.AntiFake
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetResultReasons() []*RfidReasonEntitiesResponse {
	if x != nil {
		return x.ResultReasons
	}
	return nil
}

func (x *RfidReturnInspectEntitiesResponse) GetAggConsignStatusName() string {
	if x != nil && x.AggConsignStatusName != nil {
		return *x.AggConsignStatusName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesResponse) GetQualityResultName() string {
	if x != nil && x.QualityResultName != nil {
		return *x.QualityResultName
	}
	return ""
}

type RfidReturnInspectEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidReturnInspectEntitiesRetrieveRequest) Reset() {
	*x = RfidReturnInspectEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesRetrieveRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{36}
}

func (x *RfidReturnInspectEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidReturnInspectEntitiesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	InspectTime          *string  `protobuf:"bytes,3,opt,name=inspect_time,json=inspectTime,proto3,oneof" json:"inspect_time,omitempty"`
	IsWithdraw           *bool    `protobuf:"varint,4,opt,name=is_withdraw,json=isWithdraw,proto3,oneof" json:"is_withdraw,omitempty"`
	AggConsignStatus     *int32   `protobuf:"varint,5,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo                *string  `protobuf:"bytes,6,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName              *string  `protobuf:"bytes,7,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,8,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,9,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,10,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsEpc             *string  `protobuf:"bytes,11,opt,name=goods_epc,json=goodsEpc,proto3,oneof" json:"goods_epc,omitempty"`
	GoodsTid             *string  `protobuf:"bytes,12,opt,name=goods_tid,json=goodsTid,proto3,oneof" json:"goods_tid,omitempty"`
	FromWarehouseNo      *string  `protobuf:"bytes,13,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string  `protobuf:"bytes,14,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	TargetWarehouseNo    *string  `protobuf:"bytes,15,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName  *string  `protobuf:"bytes,16,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	OperatorNo           *string  `protobuf:"bytes,17,opt,name=operator_no,json=operatorNo,proto3,oneof" json:"operator_no,omitempty"`
	OperatorName         *string  `protobuf:"bytes,18,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	QualityResult        *int32   `protobuf:"varint,19,opt,name=quality_result,json=qualityResult,proto3,oneof" json:"quality_result,omitempty"`
	QualityRemark        *string  `protobuf:"bytes,21,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	AntiFake             *string  `protobuf:"bytes,22,opt,name=anti_fake,json=antiFake,proto3,oneof" json:"anti_fake,omitempty"`
	UpdateIds            []string `protobuf:"bytes,23,rep,name=update_ids,json=updateIds,proto3" json:"update_ids,omitempty"`
}

func (x *RfidReturnInspectEntitiesUpdateRequest) Reset() {
	*x = RfidReturnInspectEntitiesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidReturnInspectEntitiesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidReturnInspectEntitiesUpdateRequest) ProtoMessage() {}

func (x *RfidReturnInspectEntitiesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidReturnInspectEntitiesUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidReturnInspectEntitiesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{37}
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetInspectTime() string {
	if x != nil && x.InspectTime != nil {
		return *x.InspectTime
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetIsWithdraw() bool {
	if x != nil && x.IsWithdraw != nil {
		return *x.IsWithdraw
	}
	return false
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsEpc() string {
	if x != nil && x.GoodsEpc != nil {
		return *x.GoodsEpc
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetGoodsTid() string {
	if x != nil && x.GoodsTid != nil {
		return *x.GoodsTid
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetOperatorNo() string {
	if x != nil && x.OperatorNo != nil {
		return *x.OperatorNo
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetQualityResult() int32 {
	if x != nil && x.QualityResult != nil {
		return *x.QualityResult
	}
	return 0
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetAntiFake() string {
	if x != nil && x.AntiFake != nil {
		return *x.AntiFake
	}
	return ""
}

func (x *RfidReturnInspectEntitiesUpdateRequest) GetUpdateIds() []string {
	if x != nil {
		return x.UpdateIds
	}
	return nil
}

type RfidTagIndexDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidTagIndexDestroyRequest) Reset() {
	*x = RfidTagIndexDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRequest) ProtoMessage() {}

func (x *RfidTagIndexDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{38}
}

func (x *RfidTagIndexDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type RfidTagIndexDestroyRfidReasonEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidReasonEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidReasonEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidReasonEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidReasonEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{39}
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidReasonEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidReturnInspectConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) Reset() {
	*x = RfidTagIndexDestroyRfidReturnInspectConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidReturnInspectConfigResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidReturnInspectConfigResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidReturnInspectConfigResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{40}
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidReturnInspectConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexDestroyRfidReturnInspectEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) Reset() {
	*x = RfidTagIndexDestroyRfidReturnInspectEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) ProtoMessage() {}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexDestroyRfidReturnInspectEntitiesResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{41}
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RfidTagIndexDestroyRfidReturnInspectEntitiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *RfidTagIndexListRequest) Reset() {
	*x = RfidTagIndexListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexListRequest) ProtoMessage() {}

func (x *RfidTagIndexListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexListRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexListRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{42}
}

func (x *RfidTagIndexListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *RfidTagIndexListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type RfidTagIndexListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RfidTagIndexResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RfidTagIndexListResponse) Reset() {
	*x = RfidTagIndexListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexListResponse) ProtoMessage() {}

func (x *RfidTagIndexListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexListResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexListResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{43}
}

func (x *RfidTagIndexListResponse) GetResults() []*RfidTagIndexResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RfidTagIndexListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RfidTagIndexPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	TagEpc               string   `protobuf:"bytes,4,opt,name=tag_epc,json=tagEpc,proto3" json:"tag_epc,omitempty"`
	TagStatus            *int32   `protobuf:"varint,7,opt,name=tag_status,json=tagStatus,proto3,oneof" json:"tag_status,omitempty"`
	ProdCondition        *int32   `protobuf:"varint,8,opt,name=prod_condition,json=prodCondition,proto3,oneof" json:"prod_condition,omitempty"`
	StockinCounter       *int32   `protobuf:"varint,9,opt,name=stockin_counter,json=stockinCounter,proto3,oneof" json:"stockin_counter,omitempty"`
	StockoutCounter      *int32   `protobuf:"varint,10,opt,name=stockout_counter,json=stockoutCounter,proto3,oneof" json:"stockout_counter,omitempty"`
	PublishDetail        *string  `protobuf:"bytes,11,opt,name=publish_detail,json=publishDetail,proto3,oneof" json:"publish_detail,omitempty"`
}

func (x *RfidTagIndexPartialUpdateRequest) Reset() {
	*x = RfidTagIndexPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexPartialUpdateRequest) ProtoMessage() {}

func (x *RfidTagIndexPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{44}
}

func (x *RfidTagIndexPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RfidTagIndexPartialUpdateRequest) GetTagEpc() string {
	if x != nil {
		return x.TagEpc
	}
	return ""
}

func (x *RfidTagIndexPartialUpdateRequest) GetTagStatus() int32 {
	if x != nil && x.TagStatus != nil {
		return *x.TagStatus
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetProdCondition() int32 {
	if x != nil && x.ProdCondition != nil {
		return *x.ProdCondition
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetStockinCounter() int32 {
	if x != nil && x.StockinCounter != nil {
		return *x.StockinCounter
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetStockoutCounter() int32 {
	if x != nil && x.StockoutCounter != nil {
		return *x.StockoutCounter
	}
	return 0
}

func (x *RfidTagIndexPartialUpdateRequest) GetPublishDetail() string {
	if x != nil && x.PublishDetail != nil {
		return *x.PublishDetail
	}
	return ""
}

type RfidTagIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId             *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	TagEpc          string  `protobuf:"bytes,3,opt,name=tag_epc,json=tagEpc,proto3" json:"tag_epc,omitempty"`
	TagStatus       *int32  `protobuf:"varint,6,opt,name=tag_status,json=tagStatus,proto3,oneof" json:"tag_status,omitempty"`
	ProdCondition   *int32  `protobuf:"varint,7,opt,name=prod_condition,json=prodCondition,proto3,oneof" json:"prod_condition,omitempty"`
	StockinCounter  *int32  `protobuf:"varint,8,opt,name=stockin_counter,json=stockinCounter,proto3,oneof" json:"stockin_counter,omitempty"`
	StockoutCounter *int32  `protobuf:"varint,9,opt,name=stockout_counter,json=stockoutCounter,proto3,oneof" json:"stockout_counter,omitempty"`
	PublishDetail   *string `protobuf:"bytes,10,opt,name=publish_detail,json=publishDetail,proto3,oneof" json:"publish_detail,omitempty"`
}

func (x *RfidTagIndexRequest) Reset() {
	*x = RfidTagIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexRequest) ProtoMessage() {}

func (x *RfidTagIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{45}
}

func (x *RfidTagIndexRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidTagIndexRequest) GetTagEpc() string {
	if x != nil {
		return x.TagEpc
	}
	return ""
}

func (x *RfidTagIndexRequest) GetTagStatus() int32 {
	if x != nil && x.TagStatus != nil {
		return *x.TagStatus
	}
	return 0
}

func (x *RfidTagIndexRequest) GetProdCondition() int32 {
	if x != nil && x.ProdCondition != nil {
		return *x.ProdCondition
	}
	return 0
}

func (x *RfidTagIndexRequest) GetStockinCounter() int32 {
	if x != nil && x.StockinCounter != nil {
		return *x.StockinCounter
	}
	return 0
}

func (x *RfidTagIndexRequest) GetStockoutCounter() int32 {
	if x != nil && x.StockoutCounter != nil {
		return *x.StockoutCounter
	}
	return 0
}

func (x *RfidTagIndexRequest) GetPublishDetail() string {
	if x != nil && x.PublishDetail != nil {
		return *x.PublishDetail
	}
	return ""
}

type RfidTagIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                              `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	TagStatusName         *string                              `protobuf:"bytes,2,opt,name=tag_status_name,json=tagStatusName,proto3,oneof" json:"tag_status_name,omitempty"`
	ProdConditionName     *string                              `protobuf:"bytes,3,opt,name=prod_condition_name,json=prodConditionName,proto3,oneof" json:"prod_condition_name,omitempty"`
	ReturnInspectEntities []*RfidReturnInspectEntitiesResponse `protobuf:"bytes,4,rep,name=return_inspect_entities,json=returnInspectEntities,proto3" json:"return_inspect_entities,omitempty"`
	TagEpc                string                               `protobuf:"bytes,5,opt,name=tag_epc,json=tagEpc,proto3" json:"tag_epc,omitempty"`
	CreateTime            *string                              `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string                              `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	TagStatus             *int32                               `protobuf:"varint,8,opt,name=tag_status,json=tagStatus,proto3,oneof" json:"tag_status,omitempty"`
	ProdCondition         *int32                               `protobuf:"varint,9,opt,name=prod_condition,json=prodCondition,proto3,oneof" json:"prod_condition,omitempty"`
	StockinCounter        *int32                               `protobuf:"varint,10,opt,name=stockin_counter,json=stockinCounter,proto3,oneof" json:"stockin_counter,omitempty"`
	StockoutCounter       *int32                               `protobuf:"varint,11,opt,name=stockout_counter,json=stockoutCounter,proto3,oneof" json:"stockout_counter,omitempty"`
	PublishDetail         *string                              `protobuf:"bytes,12,opt,name=publish_detail,json=publishDetail,proto3,oneof" json:"publish_detail,omitempty"`
}

func (x *RfidTagIndexResponse) Reset() {
	*x = RfidTagIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexResponse) ProtoMessage() {}

func (x *RfidTagIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexResponse.ProtoReflect.Descriptor instead.
func (*RfidTagIndexResponse) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{46}
}

func (x *RfidTagIndexResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *RfidTagIndexResponse) GetTagStatusName() string {
	if x != nil && x.TagStatusName != nil {
		return *x.TagStatusName
	}
	return ""
}

func (x *RfidTagIndexResponse) GetProdConditionName() string {
	if x != nil && x.ProdConditionName != nil {
		return *x.ProdConditionName
	}
	return ""
}

func (x *RfidTagIndexResponse) GetReturnInspectEntities() []*RfidReturnInspectEntitiesResponse {
	if x != nil {
		return x.ReturnInspectEntities
	}
	return nil
}

func (x *RfidTagIndexResponse) GetTagEpc() string {
	if x != nil {
		return x.TagEpc
	}
	return ""
}

func (x *RfidTagIndexResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RfidTagIndexResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RfidTagIndexResponse) GetTagStatus() int32 {
	if x != nil && x.TagStatus != nil {
		return *x.TagStatus
	}
	return 0
}

func (x *RfidTagIndexResponse) GetProdCondition() int32 {
	if x != nil && x.ProdCondition != nil {
		return *x.ProdCondition
	}
	return 0
}

func (x *RfidTagIndexResponse) GetStockinCounter() int32 {
	if x != nil && x.StockinCounter != nil {
		return *x.StockinCounter
	}
	return 0
}

func (x *RfidTagIndexResponse) GetStockoutCounter() int32 {
	if x != nil && x.StockoutCounter != nil {
		return *x.StockoutCounter
	}
	return 0
}

func (x *RfidTagIndexResponse) GetPublishDetail() string {
	if x != nil && x.PublishDetail != nil {
		return *x.PublishDetail
	}
	return ""
}

type RfidTagIndexRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *RfidTagIndexRetrieveRequest) Reset() {
	*x = RfidTagIndexRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfidTagIndexRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfidTagIndexRetrieveRequest) ProtoMessage() {}

func (x *RfidTagIndexRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfidTagIndexRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RfidTagIndexRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_tag_manager_proto_rawDescGZIP(), []int{47}
}

func (x *RfidTagIndexRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

var File_tag_manager_proto protoreflect.FileDescriptor

var file_tag_manager_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x1f, 0x42,
	0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5e,
	0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22, 0x5d, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41,
	0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x0e, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x63, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x70, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0f, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xd2, 0x03, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x56, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x12, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x32, 0x0a, 0x1f, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xae, 0x04, 0x0a,
	0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x07, 0x62, 0x65, 0x43, 0x69,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x22, 0xc2, 0x03,
	0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62,
	0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x07, 0x62, 0x65, 0x43, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74,
	0x65, 0x64, 0x22, 0x33, 0x0a, 0x20, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89,
	0x01, 0x0a, 0x1e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x05, 0x0a, 0x1a, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x10, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x5f, 0x63,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x07, 0x62, 0x65,
	0x43, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x22,
	0x34, 0x0a, 0x21, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xf7, 0x03, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x5f, 0x63,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x07, 0x62, 0x65,
	0x43, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x22,
	0x91, 0x08, 0x0a, 0x24, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x65, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x66, 0x72,
	0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x13, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x07, 0x65, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x65, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x13,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x11, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x70,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a,
	0x20, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe7, 0x09, 0x0a,
	0x1c, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x67,
	0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x75,
	0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x77, 0x64, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x77, 0x64, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x77,
	0x64, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x77, 0x64, 0x74, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x77,
	0x64, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x11, 0x77, 0x64, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x14, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x20, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67,
	0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb2, 0x04, 0x0a, 0x24, 0x52, 0x66,
	0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x72,
	0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x24,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38,
	0x0a, 0x25, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x22, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x23, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7, 0x06, 0x0a, 0x1f, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x26, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22,
	0xe5, 0x04, 0x0a, 0x24, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x72, 0x63, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x09, 0x0a, 0x26, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x03, 0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x61, 0x67, 0x67,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x65, 0x70, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x45, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x5f,
	0x66, 0x61, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x08, 0x61, 0x6e,
	0x74, 0x69, 0x46, 0x61, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x22, 0x3a, 0x0a, 0x27,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x24, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x25, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xfd, 0x0b, 0x0a, 0x21, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x61, 0x67, 0x67,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x65, 0x70, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x45, 0x70, 0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x5f,
	0x66, 0x61, 0x6b, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x08, 0x61, 0x6e,
	0x74, 0x69, 0x46, 0x61, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x67, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x14, 0x61, 0x67,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3b, 0x0a, 0x28, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xe5, 0x09,
	0x0a, 0x26, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x0a, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52,
	0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x70,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x11, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x08, 0x61, 0x6e, 0x74, 0x69, 0x46, 0x61, 0x6b,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x70,
	0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x74, 0x69,
	0x5f, 0x66, 0x61, 0x6b, 0x65, 0x22, 0x2d, 0x0a, 0x1a, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x2d, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x70, 0x0a, 0x32, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x34, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x52, 0x66, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x18, 0x52, 0x66, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x03, 0x0a, 0x20, 0x52, 0x66, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x65,
	0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x45, 0x70, 0x63,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x74, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x84, 0x03, 0x0a, 0x13, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x67, 0x45, 0x70, 0x63, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x74,
	0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xf7, 0x05, 0x0a, 0x14, 0x52, 0x66, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0d, 0x74, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x45, 0x70, 0x63, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x74, 0x61, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x2e, 0x0a, 0x1b, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x32, 0x9a, 0x21, 0x0a, 0x16, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a,
	0x18, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa2, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x37, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x96, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x12, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xb7, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbd, 0x01, 0x0a, 0x20,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x44, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x41, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x08, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41,
	0x67, 0x67, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01,
	0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xac, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x0b, 0x52, 0x66, 0x69, 0x64, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2b,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x63,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x63, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18,
	0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2,
	0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x66,
	0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x66, 0x69, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b,
	0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x72, 0x66, 0x69, 0x64, 0x50, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tag_manager_proto_rawDescOnce sync.Once
	file_tag_manager_proto_rawDescData = file_tag_manager_proto_rawDesc
)

func file_tag_manager_proto_rawDescGZIP() []byte {
	file_tag_manager_proto_rawDescOnce.Do(func() {
		file_tag_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_tag_manager_proto_rawDescData)
	})
	return file_tag_manager_proto_rawDescData
}

var file_tag_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_tag_manager_proto_goTypes = []interface{}{
	(*BulkPushReturnInspectAggRequest)(nil),                      // 0: rfid_tag_manage.tag_service.BulkPushReturnInspectAggRequest
	(*BulkPushReturnInspectAggResponse)(nil),                     // 1: rfid_tag_manage.tag_service.BulkPushReturnInspectAggResponse
	(*DestroyReturnInspectAggRequest)(nil),                       // 2: rfid_tag_manage.tag_service.DestroyReturnInspectAggRequest
	(*DestroyReturnInspectAggResponse)(nil),                      // 3: rfid_tag_manage.tag_service.DestroyReturnInspectAggResponse
	(*EpcSyncRequest)(nil),                                       // 4: rfid_tag_manage.tag_service.EpcSyncRequest
	(*EpcSyncResponse)(nil),                                      // 5: rfid_tag_manage.tag_service.EpcSyncResponse
	(*InspectConfigOptionsRequest)(nil),                          // 6: rfid_tag_manage.tag_service.InspectConfigOptionsRequest
	(*InspectConfigOptionsResponse)(nil),                         // 7: rfid_tag_manage.tag_service.InspectConfigOptionsResponse
	(*LabelValueResponse)(nil),                                   // 8: rfid_tag_manage.tag_service.LabelValueResponse
	(*RetrieveReturnInspectAggRequest)(nil),                      // 9: rfid_tag_manage.tag_service.RetrieveReturnInspectAggRequest
	(*RfidReasonEntitiesChildResponse)(nil),                      // 10: rfid_tag_manage.tag_service.RfidReasonEntitiesChildResponse
	(*RfidReasonEntitiesCreateRequest)(nil),                      // 11: rfid_tag_manage.tag_service.RfidReasonEntitiesCreateRequest
	(*RfidReasonEntitiesDestroyRequest)(nil),                     // 12: rfid_tag_manage.tag_service.RfidReasonEntitiesDestroyRequest
	(*RfidReasonEntitiesListRequest)(nil),                        // 13: rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest
	(*RfidReasonEntitiesListResponse)(nil),                       // 14: rfid_tag_manage.tag_service.RfidReasonEntitiesListResponse
	(*RfidReasonEntitiesResponse)(nil),                           // 15: rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	(*RfidReasonEntitiesRetrieveRequest)(nil),                    // 16: rfid_tag_manage.tag_service.RfidReasonEntitiesRetrieveRequest
	(*RfidReasonEntitiesUpdateRequest)(nil),                      // 17: rfid_tag_manage.tag_service.RfidReasonEntitiesUpdateRequest
	(*RfidReturnInspectAggEntitiesResponse)(nil),                 // 18: rfid_tag_manage.tag_service.RfidReturnInspectAggEntitiesResponse
	(*RfidReturnInspectAggListRequest)(nil),                      // 19: rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest
	(*RfidReturnInspectAggListResponse)(nil),                     // 20: rfid_tag_manage.tag_service.RfidReturnInspectAggListResponse
	(*RfidReturnInspectAggResponse)(nil),                         // 21: rfid_tag_manage.tag_service.RfidReturnInspectAggResponse
	(*RfidReturnInspectAggSyncRequest)(nil),                      // 22: rfid_tag_manage.tag_service.RfidReturnInspectAggSyncRequest
	(*RfidReturnInspectAggSyncResponse)(nil),                     // 23: rfid_tag_manage.tag_service.RfidReturnInspectAggSyncResponse
	(*RfidReturnInspectConfigCreateRequest)(nil),                 // 24: rfid_tag_manage.tag_service.RfidReturnInspectConfigCreateRequest
	(*RfidReturnInspectConfigDestroyRequest)(nil),                // 25: rfid_tag_manage.tag_service.RfidReturnInspectConfigDestroyRequest
	(*RfidReturnInspectConfigListRequest)(nil),                   // 26: rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest
	(*RfidReturnInspectConfigListResponse)(nil),                  // 27: rfid_tag_manage.tag_service.RfidReturnInspectConfigListResponse
	(*RfidReturnInspectConfigResponse)(nil),                      // 28: rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	(*RfidReturnInspectConfigRetrieveRequest)(nil),               // 29: rfid_tag_manage.tag_service.RfidReturnInspectConfigRetrieveRequest
	(*RfidReturnInspectConfigUpdateRequest)(nil),                 // 30: rfid_tag_manage.tag_service.RfidReturnInspectConfigUpdateRequest
	(*RfidReturnInspectEntitiesCreateRequest)(nil),               // 31: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesCreateRequest
	(*RfidReturnInspectEntitiesDestroyRequest)(nil),              // 32: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesDestroyRequest
	(*RfidReturnInspectEntitiesListRequest)(nil),                 // 33: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest
	(*RfidReturnInspectEntitiesListResponse)(nil),                // 34: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListResponse
	(*RfidReturnInspectEntitiesResponse)(nil),                    // 35: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	(*RfidReturnInspectEntitiesRetrieveRequest)(nil),             // 36: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesRetrieveRequest
	(*RfidReturnInspectEntitiesUpdateRequest)(nil),               // 37: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesUpdateRequest
	(*RfidTagIndexDestroyRequest)(nil),                           // 38: rfid_tag_manage.tag_service.RfidTagIndexDestroyRequest
	(*RfidTagIndexDestroyRfidReasonEntitiesResponse)(nil),        // 39: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReasonEntitiesResponse
	(*RfidTagIndexDestroyRfidReturnInspectConfigResponse)(nil),   // 40: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectConfigResponse
	(*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse)(nil), // 41: rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectEntitiesResponse
	(*RfidTagIndexListRequest)(nil),                              // 42: rfid_tag_manage.tag_service.RfidTagIndexListRequest
	(*RfidTagIndexListResponse)(nil),                             // 43: rfid_tag_manage.tag_service.RfidTagIndexListResponse
	(*RfidTagIndexPartialUpdateRequest)(nil),                     // 44: rfid_tag_manage.tag_service.RfidTagIndexPartialUpdateRequest
	(*RfidTagIndexRequest)(nil),                                  // 45: rfid_tag_manage.tag_service.RfidTagIndexRequest
	(*RfidTagIndexResponse)(nil),                                 // 46: rfid_tag_manage.tag_service.RfidTagIndexResponse
	(*RfidTagIndexRetrieveRequest)(nil),                          // 47: rfid_tag_manage.tag_service.RfidTagIndexRetrieveRequest
	(*structpb.Struct)(nil),                                      // 48: google.protobuf.Struct
	(*emptypb.Empty)(nil),                                        // 49: google.protobuf.Empty
}
var file_tag_manager_proto_depIdxs = []int32{
	8,  // 0: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.agg_consign_status:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 1: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.quality_result:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 2: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.push_wdt_status:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 3: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.agg_type:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	8,  // 4: rfid_tag_manage.tag_service.InspectConfigOptionsResponse.warehouse_info:type_name -> rfid_tag_manage.tag_service.LabelValueResponse
	48, // 5: rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	48, // 6: rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	15, // 7: rfid_tag_manage.tag_service.RfidReasonEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	10, // 8: rfid_tag_manage.tag_service.RfidReasonEntitiesResponse.children_reasons:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesChildResponse
	35, // 9: rfid_tag_manage.tag_service.RfidReturnInspectAggEntitiesResponse.epc_ids:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	48, // 10: rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest._filters:type_name -> google.protobuf.Struct
	48, // 11: rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest._pagination:type_name -> google.protobuf.Struct
	21, // 12: rfid_tag_manage.tag_service.RfidReturnInspectAggListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectAggResponse
	18, // 13: rfid_tag_manage.tag_service.RfidReturnInspectAggResponse.agg_entities:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectAggEntitiesResponse
	48, // 14: rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest._filters:type_name -> google.protobuf.Struct
	48, // 15: rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest._pagination:type_name -> google.protobuf.Struct
	28, // 16: rfid_tag_manage.tag_service.RfidReturnInspectConfigListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	15, // 17: rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse.inspect_reasons:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	48, // 18: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	48, // 19: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	35, // 20: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	15, // 21: rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse.result_reasons:type_name -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	48, // 22: rfid_tag_manage.tag_service.RfidTagIndexListRequest._filters:type_name -> google.protobuf.Struct
	48, // 23: rfid_tag_manage.tag_service.RfidTagIndexListRequest._pagination:type_name -> google.protobuf.Struct
	46, // 24: rfid_tag_manage.tag_service.RfidTagIndexListResponse.results:type_name -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	35, // 25: rfid_tag_manage.tag_service.RfidTagIndexResponse.return_inspect_entities:type_name -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	0,  // 26: rfid_tag_manage.tag_service.RfidTagIndexController.BulkPushReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.BulkPushReturnInspectAggRequest
	45, // 27: rfid_tag_manage.tag_service.RfidTagIndexController.Create:input_type -> rfid_tag_manage.tag_service.RfidTagIndexRequest
	11, // 28: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesCreateRequest
	24, // 29: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigCreateRequest
	31, // 30: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesCreateRequest
	38, // 31: rfid_tag_manage.tag_service.RfidTagIndexController.Destroy:input_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRequest
	2,  // 32: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.DestroyReturnInspectAggRequest
	12, // 33: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesDestroyRequest
	25, // 34: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigDestroyRequest
	32, // 35: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesDestroyRequest
	6,  // 36: rfid_tag_manage.tag_service.RfidTagIndexController.InspectConfigOptions:input_type -> rfid_tag_manage.tag_service.InspectConfigOptionsRequest
	42, // 37: rfid_tag_manage.tag_service.RfidTagIndexController.List:input_type -> rfid_tag_manage.tag_service.RfidTagIndexListRequest
	13, // 38: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesListRequest
	19, // 39: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggListRequest
	26, // 40: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigListRequest
	33, // 41: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListRequest
	44, // 42: rfid_tag_manage.tag_service.RfidTagIndexController.PartialUpdate:input_type -> rfid_tag_manage.tag_service.RfidTagIndexPartialUpdateRequest
	47, // 43: rfid_tag_manage.tag_service.RfidTagIndexController.Retrieve:input_type -> rfid_tag_manage.tag_service.RfidTagIndexRetrieveRequest
	9,  // 44: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveReturnInspectAgg:input_type -> rfid_tag_manage.tag_service.RetrieveReturnInspectAggRequest
	16, // 45: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesRetrieveRequest
	29, // 46: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigRetrieveRequest
	36, // 47: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesRetrieveRequest
	4,  // 48: rfid_tag_manage.tag_service.RfidTagIndexController.RfidEpcSync:input_type -> rfid_tag_manage.tag_service.EpcSyncRequest
	22, // 49: rfid_tag_manage.tag_service.RfidTagIndexController.RfidReturnInspectAggSync:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggSyncRequest
	45, // 50: rfid_tag_manage.tag_service.RfidTagIndexController.Update:input_type -> rfid_tag_manage.tag_service.RfidTagIndexRequest
	17, // 51: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReasonEntities:input_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesUpdateRequest
	30, // 52: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectConfig:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigUpdateRequest
	37, // 53: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectEntities:input_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesUpdateRequest
	1,  // 54: rfid_tag_manage.tag_service.RfidTagIndexController.BulkPushReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.BulkPushReturnInspectAggResponse
	46, // 55: rfid_tag_manage.tag_service.RfidTagIndexController.Create:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	15, // 56: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	28, // 57: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	35, // 58: rfid_tag_manage.tag_service.RfidTagIndexController.CreateRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	49, // 59: rfid_tag_manage.tag_service.RfidTagIndexController.Destroy:output_type -> google.protobuf.Empty
	3,  // 60: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.DestroyReturnInspectAggResponse
	39, // 61: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReasonEntitiesResponse
	40, // 62: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectConfigResponse
	41, // 63: rfid_tag_manage.tag_service.RfidTagIndexController.DestroyRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidTagIndexDestroyRfidReturnInspectEntitiesResponse
	7,  // 64: rfid_tag_manage.tag_service.RfidTagIndexController.InspectConfigOptions:output_type -> rfid_tag_manage.tag_service.InspectConfigOptionsResponse
	43, // 65: rfid_tag_manage.tag_service.RfidTagIndexController.List:output_type -> rfid_tag_manage.tag_service.RfidTagIndexListResponse
	14, // 66: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesListResponse
	20, // 67: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggListResponse
	27, // 68: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigListResponse
	34, // 69: rfid_tag_manage.tag_service.RfidTagIndexController.ListRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesListResponse
	46, // 70: rfid_tag_manage.tag_service.RfidTagIndexController.PartialUpdate:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	46, // 71: rfid_tag_manage.tag_service.RfidTagIndexController.Retrieve:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	21, // 72: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveReturnInspectAgg:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggResponse
	15, // 73: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	28, // 74: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	35, // 75: rfid_tag_manage.tag_service.RfidTagIndexController.RetrieveRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	5,  // 76: rfid_tag_manage.tag_service.RfidTagIndexController.RfidEpcSync:output_type -> rfid_tag_manage.tag_service.EpcSyncResponse
	23, // 77: rfid_tag_manage.tag_service.RfidTagIndexController.RfidReturnInspectAggSync:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectAggSyncResponse
	46, // 78: rfid_tag_manage.tag_service.RfidTagIndexController.Update:output_type -> rfid_tag_manage.tag_service.RfidTagIndexResponse
	15, // 79: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReasonEntities:output_type -> rfid_tag_manage.tag_service.RfidReasonEntitiesResponse
	28, // 80: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectConfig:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectConfigResponse
	35, // 81: rfid_tag_manage.tag_service.RfidTagIndexController.UpdateRfidReturnInspectEntities:output_type -> rfid_tag_manage.tag_service.RfidReturnInspectEntitiesResponse
	54, // [54:82] is the sub-list for method output_type
	26, // [26:54] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_tag_manager_proto_init() }
func file_tag_manager_proto_init() {
	if File_tag_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tag_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPushReturnInspectAggRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPushReturnInspectAggResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReturnInspectAggRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReturnInspectAggResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpcSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpcSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectConfigOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectConfigOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveReturnInspectAggRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesChildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReasonEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectAggSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidReturnInspectEntitiesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidReasonEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidReturnInspectConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexDestroyRfidReturnInspectEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfidTagIndexRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tag_manager_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_tag_manager_proto_msgTypes[46].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tag_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tag_manager_proto_goTypes,
		DependencyIndexes: file_tag_manager_proto_depIdxs,
		MessageInfos:      file_tag_manager_proto_msgTypes,
	}.Build()
	File_tag_manager_proto = out.File
	file_tag_manager_proto_rawDesc = nil
	file_tag_manager_proto_goTypes = nil
	file_tag_manager_proto_depIdxs = nil
}
