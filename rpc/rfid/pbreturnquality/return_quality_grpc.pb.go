// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: return_quality.proto

package pbreturnquality

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoodsQualityController_Create_FullMethodName                   = "/rfid_quality_transfer.return_quality.GoodsQualityController/Create"
	GoodsQualityController_CreateQualityReturnGoods_FullMethodName = "/rfid_quality_transfer.return_quality.GoodsQualityController/CreateQualityReturnGoods"
	GoodsQualityController_Destroy_FullMethodName                  = "/rfid_quality_transfer.return_quality.GoodsQualityController/Destroy"
	GoodsQualityController_List_FullMethodName                     = "/rfid_quality_transfer.return_quality.GoodsQualityController/List"
	GoodsQualityController_ListQualityReturnGoods_FullMethodName   = "/rfid_quality_transfer.return_quality.GoodsQualityController/ListQualityReturnGoods"
	GoodsQualityController_PartialUpdate_FullMethodName            = "/rfid_quality_transfer.return_quality.GoodsQualityController/PartialUpdate"
	GoodsQualityController_Retrieve_FullMethodName                 = "/rfid_quality_transfer.return_quality.GoodsQualityController/Retrieve"
	GoodsQualityController_Update_FullMethodName                   = "/rfid_quality_transfer.return_quality.GoodsQualityController/Update"
	GoodsQualityController_UpdateQualityReturnGoods_FullMethodName = "/rfid_quality_transfer.return_quality.GoodsQualityController/UpdateQualityReturnGoods"
)

// GoodsQualityControllerClient is the client API for GoodsQualityController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsQualityControllerClient interface {
	Create(ctx context.Context, in *QualityReturnGoodsModelRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error)
	CreateQualityReturnGoods(ctx context.Context, in *QualityReturnGoodsCreateRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error)
	Destroy(ctx context.Context, in *QualityReturnGoodsModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *QualityReturnGoodsModelListRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelListResponse, error)
	ListQualityReturnGoods(ctx context.Context, in *QualityReturnGoodsListRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelListResponse, error)
	PartialUpdate(ctx context.Context, in *QualityReturnGoodsModelPartialUpdateRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error)
	Retrieve(ctx context.Context, in *QualityReturnGoodsModelRetrieveRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error)
	Update(ctx context.Context, in *QualityReturnGoodsModelRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error)
	UpdateQualityReturnGoods(ctx context.Context, in *QualityReturnGoodsUpdateRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error)
}

type goodsQualityControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsQualityControllerClient(cc grpc.ClientConnInterface) GoodsQualityControllerClient {
	return &goodsQualityControllerClient{cc}
}

func (c *goodsQualityControllerClient) Create(ctx context.Context, in *QualityReturnGoodsModelRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error) {
	out := new(QualityReturnGoodsModelResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) CreateQualityReturnGoods(ctx context.Context, in *QualityReturnGoodsCreateRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error) {
	out := new(QualityReturnGoodsModelResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_CreateQualityReturnGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) Destroy(ctx context.Context, in *QualityReturnGoodsModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GoodsQualityController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) List(ctx context.Context, in *QualityReturnGoodsModelListRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelListResponse, error) {
	out := new(QualityReturnGoodsModelListResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) ListQualityReturnGoods(ctx context.Context, in *QualityReturnGoodsListRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelListResponse, error) {
	out := new(QualityReturnGoodsModelListResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_ListQualityReturnGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) PartialUpdate(ctx context.Context, in *QualityReturnGoodsModelPartialUpdateRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error) {
	out := new(QualityReturnGoodsModelResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) Retrieve(ctx context.Context, in *QualityReturnGoodsModelRetrieveRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error) {
	out := new(QualityReturnGoodsModelResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) Update(ctx context.Context, in *QualityReturnGoodsModelRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error) {
	out := new(QualityReturnGoodsModelResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsQualityControllerClient) UpdateQualityReturnGoods(ctx context.Context, in *QualityReturnGoodsUpdateRequest, opts ...grpc.CallOption) (*QualityReturnGoodsModelResponse, error) {
	out := new(QualityReturnGoodsModelResponse)
	err := c.cc.Invoke(ctx, GoodsQualityController_UpdateQualityReturnGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsQualityControllerServer is the server API for GoodsQualityController service.
// All implementations must embed UnimplementedGoodsQualityControllerServer
// for forward compatibility
type GoodsQualityControllerServer interface {
	Create(context.Context, *QualityReturnGoodsModelRequest) (*QualityReturnGoodsModelResponse, error)
	CreateQualityReturnGoods(context.Context, *QualityReturnGoodsCreateRequest) (*QualityReturnGoodsModelResponse, error)
	Destroy(context.Context, *QualityReturnGoodsModelDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *QualityReturnGoodsModelListRequest) (*QualityReturnGoodsModelListResponse, error)
	ListQualityReturnGoods(context.Context, *QualityReturnGoodsListRequest) (*QualityReturnGoodsModelListResponse, error)
	PartialUpdate(context.Context, *QualityReturnGoodsModelPartialUpdateRequest) (*QualityReturnGoodsModelResponse, error)
	Retrieve(context.Context, *QualityReturnGoodsModelRetrieveRequest) (*QualityReturnGoodsModelResponse, error)
	Update(context.Context, *QualityReturnGoodsModelRequest) (*QualityReturnGoodsModelResponse, error)
	UpdateQualityReturnGoods(context.Context, *QualityReturnGoodsUpdateRequest) (*QualityReturnGoodsModelResponse, error)
	mustEmbedUnimplementedGoodsQualityControllerServer()
}

// UnimplementedGoodsQualityControllerServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsQualityControllerServer struct {
}

func (UnimplementedGoodsQualityControllerServer) Create(context.Context, *QualityReturnGoodsModelRequest) (*QualityReturnGoodsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGoodsQualityControllerServer) CreateQualityReturnGoods(context.Context, *QualityReturnGoodsCreateRequest) (*QualityReturnGoodsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQualityReturnGoods not implemented")
}
func (UnimplementedGoodsQualityControllerServer) Destroy(context.Context, *QualityReturnGoodsModelDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedGoodsQualityControllerServer) List(context.Context, *QualityReturnGoodsModelListRequest) (*QualityReturnGoodsModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGoodsQualityControllerServer) ListQualityReturnGoods(context.Context, *QualityReturnGoodsListRequest) (*QualityReturnGoodsModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQualityReturnGoods not implemented")
}
func (UnimplementedGoodsQualityControllerServer) PartialUpdate(context.Context, *QualityReturnGoodsModelPartialUpdateRequest) (*QualityReturnGoodsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedGoodsQualityControllerServer) Retrieve(context.Context, *QualityReturnGoodsModelRetrieveRequest) (*QualityReturnGoodsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedGoodsQualityControllerServer) Update(context.Context, *QualityReturnGoodsModelRequest) (*QualityReturnGoodsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGoodsQualityControllerServer) UpdateQualityReturnGoods(context.Context, *QualityReturnGoodsUpdateRequest) (*QualityReturnGoodsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQualityReturnGoods not implemented")
}
func (UnimplementedGoodsQualityControllerServer) mustEmbedUnimplementedGoodsQualityControllerServer() {
}

// UnsafeGoodsQualityControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsQualityControllerServer will
// result in compilation errors.
type UnsafeGoodsQualityControllerServer interface {
	mustEmbedUnimplementedGoodsQualityControllerServer()
}

func RegisterGoodsQualityControllerServer(s grpc.ServiceRegistrar, srv GoodsQualityControllerServer) {
	s.RegisterService(&GoodsQualityController_ServiceDesc, srv)
}

func _GoodsQualityController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).Create(ctx, req.(*QualityReturnGoodsModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_CreateQualityReturnGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).CreateQualityReturnGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_CreateQualityReturnGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).CreateQualityReturnGoods(ctx, req.(*QualityReturnGoodsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsModelDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).Destroy(ctx, req.(*QualityReturnGoodsModelDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).List(ctx, req.(*QualityReturnGoodsModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_ListQualityReturnGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).ListQualityReturnGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_ListQualityReturnGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).ListQualityReturnGoods(ctx, req.(*QualityReturnGoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsModelPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).PartialUpdate(ctx, req.(*QualityReturnGoodsModelPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsModelRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).Retrieve(ctx, req.(*QualityReturnGoodsModelRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).Update(ctx, req.(*QualityReturnGoodsModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsQualityController_UpdateQualityReturnGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualityReturnGoodsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsQualityControllerServer).UpdateQualityReturnGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsQualityController_UpdateQualityReturnGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsQualityControllerServer).UpdateQualityReturnGoods(ctx, req.(*QualityReturnGoodsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsQualityController_ServiceDesc is the grpc.ServiceDesc for GoodsQualityController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsQualityController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfid_quality_transfer.return_quality.GoodsQualityController",
	HandlerType: (*GoodsQualityControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GoodsQualityController_Create_Handler,
		},
		{
			MethodName: "CreateQualityReturnGoods",
			Handler:    _GoodsQualityController_CreateQualityReturnGoods_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _GoodsQualityController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GoodsQualityController_List_Handler,
		},
		{
			MethodName: "ListQualityReturnGoods",
			Handler:    _GoodsQualityController_ListQualityReturnGoods_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _GoodsQualityController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _GoodsQualityController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GoodsQualityController_Update_Handler,
		},
		{
			MethodName: "UpdateQualityReturnGoods",
			Handler:    _GoodsQualityController_UpdateQualityReturnGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "return_quality.proto",
}
