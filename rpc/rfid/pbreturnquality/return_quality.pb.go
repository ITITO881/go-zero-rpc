// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: return_quality.proto

package pbreturnquality

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QualityReturnGoodsCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	QualityGoods        string  `protobuf:"bytes,3,opt,name=quality_goods,json=qualityGoods,proto3" json:"quality_goods,omitempty"`
	QualitySpec         string  `protobuf:"bytes,4,opt,name=quality_spec,json=qualitySpec,proto3" json:"quality_spec,omitempty"`
	GoodsName           string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	QualityEpc          string  `protobuf:"bytes,6,opt,name=quality_epc,json=qualityEpc,proto3" json:"quality_epc,omitempty"`
	FromWarehouseNo     string  `protobuf:"bytes,7,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string `protobuf:"bytes,8,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	QualityTime         *string `protobuf:"bytes,9,opt,name=quality_time,json=qualityTime,proto3,oneof" json:"quality_time,omitempty"`
	QualityUser         string  `protobuf:"bytes,10,opt,name=quality_user,json=qualityUser,proto3" json:"quality_user,omitempty"`
	QualityResult       int32   `protobuf:"varint,11,opt,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	QualityResultDesc   *string `protobuf:"bytes,12,opt,name=quality_result_desc,json=qualityResultDesc,proto3,oneof" json:"quality_result_desc,omitempty"`
	QualityRemark       *string `protobuf:"bytes,13,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	TargetWarehouseNo   *string `protobuf:"bytes,14,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string `protobuf:"bytes,15,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	IsRevoked           bool    `protobuf:"varint,16,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	RevokeTime          *string `protobuf:"bytes,17,opt,name=revoke_time,json=revokeTime,proto3,oneof" json:"revoke_time,omitempty"`
	IsAggregate         bool    `protobuf:"varint,18,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,19,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	PushTime            *string `protobuf:"bytes,20,opt,name=push_time,json=pushTime,proto3,oneof" json:"push_time,omitempty"`
	PushUser            *string `protobuf:"bytes,21,opt,name=push_user,json=pushUser,proto3,oneof" json:"push_user,omitempty"`
	PushStatus          int32   `protobuf:"varint,22,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
}

func (x *QualityReturnGoodsCreateRequest) Reset() {
	*x = QualityReturnGoodsCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsCreateRequest) ProtoMessage() {}

func (x *QualityReturnGoodsCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsCreateRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsCreateRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{0}
}

func (x *QualityReturnGoodsCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QualityReturnGoodsCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetQualityGoods() string {
	if x != nil {
		return x.QualityGoods
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetQualitySpec() string {
	if x != nil {
		return x.QualitySpec
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetQualityEpc() string {
	if x != nil {
		return x.QualityEpc
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetQualityTime() string {
	if x != nil && x.QualityTime != nil {
		return *x.QualityTime
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetQualityUser() string {
	if x != nil {
		return x.QualityUser
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetQualityResult() int32 {
	if x != nil {
		return x.QualityResult
	}
	return 0
}

func (x *QualityReturnGoodsCreateRequest) GetQualityResultDesc() string {
	if x != nil && x.QualityResultDesc != nil {
		return *x.QualityResultDesc
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

func (x *QualityReturnGoodsCreateRequest) GetRevokeTime() string {
	if x != nil && x.RevokeTime != nil {
		return *x.RevokeTime
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetIsAggregate() bool {
	if x != nil {
		return x.IsAggregate
	}
	return false
}

func (x *QualityReturnGoodsCreateRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetPushTime() string {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetPushUser() string {
	if x != nil && x.PushUser != nil {
		return *x.PushUser
	}
	return ""
}

func (x *QualityReturnGoodsCreateRequest) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

type QualityReturnGoodsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	QualityGoods        string  `protobuf:"bytes,3,opt,name=quality_goods,json=qualityGoods,proto3" json:"quality_goods,omitempty"`
	QualitySpec         string  `protobuf:"bytes,4,opt,name=quality_spec,json=qualitySpec,proto3" json:"quality_spec,omitempty"`
	GoodsName           string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	QualityEpc          string  `protobuf:"bytes,6,opt,name=quality_epc,json=qualityEpc,proto3" json:"quality_epc,omitempty"`
	FromWarehouseNo     string  `protobuf:"bytes,7,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string `protobuf:"bytes,8,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	QualityTime         *string `protobuf:"bytes,9,opt,name=quality_time,json=qualityTime,proto3,oneof" json:"quality_time,omitempty"`
	QualityUser         string  `protobuf:"bytes,10,opt,name=quality_user,json=qualityUser,proto3" json:"quality_user,omitempty"`
	QualityResult       int32   `protobuf:"varint,11,opt,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	QualityResultDesc   *string `protobuf:"bytes,12,opt,name=quality_result_desc,json=qualityResultDesc,proto3,oneof" json:"quality_result_desc,omitempty"`
	QualityRemark       *string `protobuf:"bytes,13,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	TargetWarehouseNo   *string `protobuf:"bytes,14,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string `protobuf:"bytes,15,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	IsRevoked           bool    `protobuf:"varint,16,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	RevokeTime          *string `protobuf:"bytes,17,opt,name=revoke_time,json=revokeTime,proto3,oneof" json:"revoke_time,omitempty"`
	IsAggregate         bool    `protobuf:"varint,18,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,19,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	PushTime            *string `protobuf:"bytes,20,opt,name=push_time,json=pushTime,proto3,oneof" json:"push_time,omitempty"`
	PushUser            *string `protobuf:"bytes,21,opt,name=push_user,json=pushUser,proto3,oneof" json:"push_user,omitempty"`
	PushStatus          int32   `protobuf:"varint,22,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
}

func (x *QualityReturnGoodsListRequest) Reset() {
	*x = QualityReturnGoodsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsListRequest) ProtoMessage() {}

func (x *QualityReturnGoodsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsListRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsListRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{1}
}

func (x *QualityReturnGoodsListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QualityReturnGoodsListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetQualityGoods() string {
	if x != nil {
		return x.QualityGoods
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetQualitySpec() string {
	if x != nil {
		return x.QualitySpec
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetQualityEpc() string {
	if x != nil {
		return x.QualityEpc
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetQualityTime() string {
	if x != nil && x.QualityTime != nil {
		return *x.QualityTime
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetQualityUser() string {
	if x != nil {
		return x.QualityUser
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetQualityResult() int32 {
	if x != nil {
		return x.QualityResult
	}
	return 0
}

func (x *QualityReturnGoodsListRequest) GetQualityResultDesc() string {
	if x != nil && x.QualityResultDesc != nil {
		return *x.QualityResultDesc
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

func (x *QualityReturnGoodsListRequest) GetRevokeTime() string {
	if x != nil && x.RevokeTime != nil {
		return *x.RevokeTime
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetIsAggregate() bool {
	if x != nil {
		return x.IsAggregate
	}
	return false
}

func (x *QualityReturnGoodsListRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetPushTime() string {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetPushUser() string {
	if x != nil && x.PushUser != nil {
		return *x.PushUser
	}
	return ""
}

func (x *QualityReturnGoodsListRequest) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

type QualityReturnGoodsModelDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QualityReturnGoodsModelDestroyRequest) Reset() {
	*x = QualityReturnGoodsModelDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsModelDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsModelDestroyRequest) ProtoMessage() {}

func (x *QualityReturnGoodsModelDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsModelDestroyRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsModelDestroyRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{2}
}

func (x *QualityReturnGoodsModelDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QualityReturnGoodsModelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	QualityGoods        string  `protobuf:"bytes,3,opt,name=quality_goods,json=qualityGoods,proto3" json:"quality_goods,omitempty"`
	QualitySpec         string  `protobuf:"bytes,4,opt,name=quality_spec,json=qualitySpec,proto3" json:"quality_spec,omitempty"`
	GoodsName           string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	QualityEpc          string  `protobuf:"bytes,6,opt,name=quality_epc,json=qualityEpc,proto3" json:"quality_epc,omitempty"`
	FromWarehouseNo     string  `protobuf:"bytes,7,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string `protobuf:"bytes,8,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	QualityTime         *string `protobuf:"bytes,9,opt,name=quality_time,json=qualityTime,proto3,oneof" json:"quality_time,omitempty"`
	QualityUser         string  `protobuf:"bytes,10,opt,name=quality_user,json=qualityUser,proto3" json:"quality_user,omitempty"`
	QualityResult       int32   `protobuf:"varint,11,opt,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	QualityResultDesc   *string `protobuf:"bytes,12,opt,name=quality_result_desc,json=qualityResultDesc,proto3,oneof" json:"quality_result_desc,omitempty"`
	QualityRemark       *string `protobuf:"bytes,13,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	TargetWarehouseNo   *string `protobuf:"bytes,14,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string `protobuf:"bytes,15,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	IsRevoked           bool    `protobuf:"varint,16,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	RevokeTime          *string `protobuf:"bytes,17,opt,name=revoke_time,json=revokeTime,proto3,oneof" json:"revoke_time,omitempty"`
	IsAggregate         bool    `protobuf:"varint,18,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,19,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	PushTime            *string `protobuf:"bytes,20,opt,name=push_time,json=pushTime,proto3,oneof" json:"push_time,omitempty"`
	PushUser            *string `protobuf:"bytes,21,opt,name=push_user,json=pushUser,proto3,oneof" json:"push_user,omitempty"`
	PushStatus          int32   `protobuf:"varint,22,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
}

func (x *QualityReturnGoodsModelListRequest) Reset() {
	*x = QualityReturnGoodsModelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsModelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsModelListRequest) ProtoMessage() {}

func (x *QualityReturnGoodsModelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsModelListRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsModelListRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{3}
}

func (x *QualityReturnGoodsModelListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QualityReturnGoodsModelListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetQualityGoods() string {
	if x != nil {
		return x.QualityGoods
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetQualitySpec() string {
	if x != nil {
		return x.QualitySpec
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetQualityEpc() string {
	if x != nil {
		return x.QualityEpc
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetQualityTime() string {
	if x != nil && x.QualityTime != nil {
		return *x.QualityTime
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetQualityUser() string {
	if x != nil {
		return x.QualityUser
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetQualityResult() int32 {
	if x != nil {
		return x.QualityResult
	}
	return 0
}

func (x *QualityReturnGoodsModelListRequest) GetQualityResultDesc() string {
	if x != nil && x.QualityResultDesc != nil {
		return *x.QualityResultDesc
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

func (x *QualityReturnGoodsModelListRequest) GetRevokeTime() string {
	if x != nil && x.RevokeTime != nil {
		return *x.RevokeTime
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetIsAggregate() bool {
	if x != nil {
		return x.IsAggregate
	}
	return false
}

func (x *QualityReturnGoodsModelListRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetPushTime() string {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetPushUser() string {
	if x != nil && x.PushUser != nil {
		return *x.PushUser
	}
	return ""
}

func (x *QualityReturnGoodsModelListRequest) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

type QualityReturnGoodsModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*QualityReturnGoodsModelResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *QualityReturnGoodsModelListResponse) Reset() {
	*x = QualityReturnGoodsModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsModelListResponse) ProtoMessage() {}

func (x *QualityReturnGoodsModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsModelListResponse.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsModelListResponse) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{4}
}

func (x *QualityReturnGoodsModelListResponse) GetResults() []*QualityReturnGoodsModelResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QualityReturnGoodsModelListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QualityReturnGoodsModelPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	QualityGoods         string   `protobuf:"bytes,4,opt,name=quality_goods,json=qualityGoods,proto3" json:"quality_goods,omitempty"`
	QualitySpec          string   `protobuf:"bytes,5,opt,name=quality_spec,json=qualitySpec,proto3" json:"quality_spec,omitempty"`
	GoodsName            string   `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	QualityEpc           string   `protobuf:"bytes,7,opt,name=quality_epc,json=qualityEpc,proto3" json:"quality_epc,omitempty"`
	FromWarehouseNo      string   `protobuf:"bytes,8,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string  `protobuf:"bytes,9,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	QualityTime          *string  `protobuf:"bytes,10,opt,name=quality_time,json=qualityTime,proto3,oneof" json:"quality_time,omitempty"`
	QualityUser          string   `protobuf:"bytes,11,opt,name=quality_user,json=qualityUser,proto3" json:"quality_user,omitempty"`
	QualityResult        int32    `protobuf:"varint,12,opt,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	QualityResultDesc    *string  `protobuf:"bytes,13,opt,name=quality_result_desc,json=qualityResultDesc,proto3,oneof" json:"quality_result_desc,omitempty"`
	QualityRemark        *string  `protobuf:"bytes,14,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	TargetWarehouseNo    *string  `protobuf:"bytes,15,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName  *string  `protobuf:"bytes,16,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	IsRevoked            bool     `protobuf:"varint,17,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	RevokeTime           *string  `protobuf:"bytes,18,opt,name=revoke_time,json=revokeTime,proto3,oneof" json:"revoke_time,omitempty"`
	IsAggregate          bool     `protobuf:"varint,19,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
	AggTradeNo           *string  `protobuf:"bytes,20,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	PushTime             *string  `protobuf:"bytes,21,opt,name=push_time,json=pushTime,proto3,oneof" json:"push_time,omitempty"`
	PushUser             *string  `protobuf:"bytes,22,opt,name=push_user,json=pushUser,proto3,oneof" json:"push_user,omitempty"`
	PushStatus           int32    `protobuf:"varint,23,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) Reset() {
	*x = QualityReturnGoodsModelPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsModelPartialUpdateRequest) ProtoMessage() {}

func (x *QualityReturnGoodsModelPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsModelPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsModelPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{5}
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualityGoods() string {
	if x != nil {
		return x.QualityGoods
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualitySpec() string {
	if x != nil {
		return x.QualitySpec
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualityEpc() string {
	if x != nil {
		return x.QualityEpc
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualityTime() string {
	if x != nil && x.QualityTime != nil {
		return *x.QualityTime
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualityUser() string {
	if x != nil {
		return x.QualityUser
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualityResult() int32 {
	if x != nil {
		return x.QualityResult
	}
	return 0
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualityResultDesc() string {
	if x != nil && x.QualityResultDesc != nil {
		return *x.QualityResultDesc
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetRevokeTime() string {
	if x != nil && x.RevokeTime != nil {
		return *x.RevokeTime
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetIsAggregate() bool {
	if x != nil {
		return x.IsAggregate
	}
	return false
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetPushTime() string {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetPushUser() string {
	if x != nil && x.PushUser != nil {
		return *x.PushUser
	}
	return ""
}

func (x *QualityReturnGoodsModelPartialUpdateRequest) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

type QualityReturnGoodsModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	QualityGoods        string  `protobuf:"bytes,3,opt,name=quality_goods,json=qualityGoods,proto3" json:"quality_goods,omitempty"`
	QualitySpec         string  `protobuf:"bytes,4,opt,name=quality_spec,json=qualitySpec,proto3" json:"quality_spec,omitempty"`
	GoodsName           string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	QualityEpc          string  `protobuf:"bytes,6,opt,name=quality_epc,json=qualityEpc,proto3" json:"quality_epc,omitempty"`
	FromWarehouseNo     string  `protobuf:"bytes,7,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string `protobuf:"bytes,8,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	QualityTime         *string `protobuf:"bytes,9,opt,name=quality_time,json=qualityTime,proto3,oneof" json:"quality_time,omitempty"`
	QualityUser         string  `protobuf:"bytes,10,opt,name=quality_user,json=qualityUser,proto3" json:"quality_user,omitempty"`
	QualityResult       int32   `protobuf:"varint,11,opt,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	QualityResultDesc   *string `protobuf:"bytes,12,opt,name=quality_result_desc,json=qualityResultDesc,proto3,oneof" json:"quality_result_desc,omitempty"`
	QualityRemark       *string `protobuf:"bytes,13,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	TargetWarehouseNo   *string `protobuf:"bytes,14,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string `protobuf:"bytes,15,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	IsRevoked           bool    `protobuf:"varint,16,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	RevokeTime          *string `protobuf:"bytes,17,opt,name=revoke_time,json=revokeTime,proto3,oneof" json:"revoke_time,omitempty"`
	IsAggregate         bool    `protobuf:"varint,18,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,19,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	PushTime            *string `protobuf:"bytes,20,opt,name=push_time,json=pushTime,proto3,oneof" json:"push_time,omitempty"`
	PushUser            *string `protobuf:"bytes,21,opt,name=push_user,json=pushUser,proto3,oneof" json:"push_user,omitempty"`
	PushStatus          int32   `protobuf:"varint,22,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
}

func (x *QualityReturnGoodsModelRequest) Reset() {
	*x = QualityReturnGoodsModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsModelRequest) ProtoMessage() {}

func (x *QualityReturnGoodsModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsModelRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsModelRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{6}
}

func (x *QualityReturnGoodsModelRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QualityReturnGoodsModelRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetQualityGoods() string {
	if x != nil {
		return x.QualityGoods
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetQualitySpec() string {
	if x != nil {
		return x.QualitySpec
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetQualityEpc() string {
	if x != nil {
		return x.QualityEpc
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetQualityTime() string {
	if x != nil && x.QualityTime != nil {
		return *x.QualityTime
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetQualityUser() string {
	if x != nil {
		return x.QualityUser
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetQualityResult() int32 {
	if x != nil {
		return x.QualityResult
	}
	return 0
}

func (x *QualityReturnGoodsModelRequest) GetQualityResultDesc() string {
	if x != nil && x.QualityResultDesc != nil {
		return *x.QualityResultDesc
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

func (x *QualityReturnGoodsModelRequest) GetRevokeTime() string {
	if x != nil && x.RevokeTime != nil {
		return *x.RevokeTime
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetIsAggregate() bool {
	if x != nil {
		return x.IsAggregate
	}
	return false
}

func (x *QualityReturnGoodsModelRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetPushTime() string {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetPushUser() string {
	if x != nil && x.PushUser != nil {
		return *x.PushUser
	}
	return ""
}

func (x *QualityReturnGoodsModelRequest) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

type QualityReturnGoodsModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QualityGoods        string  `protobuf:"bytes,2,opt,name=quality_goods,json=qualityGoods,proto3" json:"quality_goods,omitempty"`
	QualitySpec         string  `protobuf:"bytes,3,opt,name=quality_spec,json=qualitySpec,proto3" json:"quality_spec,omitempty"`
	GoodsName           string  `protobuf:"bytes,4,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	QualityEpc          string  `protobuf:"bytes,5,opt,name=quality_epc,json=qualityEpc,proto3" json:"quality_epc,omitempty"`
	FromWarehouseNo     string  `protobuf:"bytes,6,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	FromWarehouseName   *string `protobuf:"bytes,7,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	QualityTime         *string `protobuf:"bytes,8,opt,name=quality_time,json=qualityTime,proto3,oneof" json:"quality_time,omitempty"`
	QualityUser         string  `protobuf:"bytes,9,opt,name=quality_user,json=qualityUser,proto3" json:"quality_user,omitempty"`
	QualityResult       int32   `protobuf:"varint,10,opt,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	QualityResultDesc   *string `protobuf:"bytes,11,opt,name=quality_result_desc,json=qualityResultDesc,proto3,oneof" json:"quality_result_desc,omitempty"`
	QualityRemark       *string `protobuf:"bytes,12,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	TargetWarehouseNo   *string `protobuf:"bytes,13,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName *string `protobuf:"bytes,14,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	IsRevoked           bool    `protobuf:"varint,15,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	RevokeTime          *string `protobuf:"bytes,16,opt,name=revoke_time,json=revokeTime,proto3,oneof" json:"revoke_time,omitempty"`
	IsAggregate         bool    `protobuf:"varint,17,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,18,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	PushTime            *string `protobuf:"bytes,19,opt,name=push_time,json=pushTime,proto3,oneof" json:"push_time,omitempty"`
	PushUser            *string `protobuf:"bytes,20,opt,name=push_user,json=pushUser,proto3,oneof" json:"push_user,omitempty"`
	PushStatus          int32   `protobuf:"varint,21,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
}

func (x *QualityReturnGoodsModelResponse) Reset() {
	*x = QualityReturnGoodsModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsModelResponse) ProtoMessage() {}

func (x *QualityReturnGoodsModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsModelResponse.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsModelResponse) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{7}
}

func (x *QualityReturnGoodsModelResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QualityReturnGoodsModelResponse) GetQualityGoods() string {
	if x != nil {
		return x.QualityGoods
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetQualitySpec() string {
	if x != nil {
		return x.QualitySpec
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetQualityEpc() string {
	if x != nil {
		return x.QualityEpc
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetQualityTime() string {
	if x != nil && x.QualityTime != nil {
		return *x.QualityTime
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetQualityUser() string {
	if x != nil {
		return x.QualityUser
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetQualityResult() int32 {
	if x != nil {
		return x.QualityResult
	}
	return 0
}

func (x *QualityReturnGoodsModelResponse) GetQualityResultDesc() string {
	if x != nil && x.QualityResultDesc != nil {
		return *x.QualityResultDesc
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

func (x *QualityReturnGoodsModelResponse) GetRevokeTime() string {
	if x != nil && x.RevokeTime != nil {
		return *x.RevokeTime
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetIsAggregate() bool {
	if x != nil {
		return x.IsAggregate
	}
	return false
}

func (x *QualityReturnGoodsModelResponse) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetPushTime() string {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetPushUser() string {
	if x != nil && x.PushUser != nil {
		return *x.PushUser
	}
	return ""
}

func (x *QualityReturnGoodsModelResponse) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

type QualityReturnGoodsModelRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QualityReturnGoodsModelRetrieveRequest) Reset() {
	*x = QualityReturnGoodsModelRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsModelRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsModelRetrieveRequest) ProtoMessage() {}

func (x *QualityReturnGoodsModelRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsModelRetrieveRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsModelRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{8}
}

func (x *QualityReturnGoodsModelRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QualityReturnGoodsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	QualityGoods         string   `protobuf:"bytes,4,opt,name=quality_goods,json=qualityGoods,proto3" json:"quality_goods,omitempty"`
	QualitySpec          string   `protobuf:"bytes,5,opt,name=quality_spec,json=qualitySpec,proto3" json:"quality_spec,omitempty"`
	GoodsName            string   `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	QualityEpc           string   `protobuf:"bytes,7,opt,name=quality_epc,json=qualityEpc,proto3" json:"quality_epc,omitempty"`
	FromWarehouseNo      string   `protobuf:"bytes,8,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	FromWarehouseName    *string  `protobuf:"bytes,9,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	QualityTime          *string  `protobuf:"bytes,10,opt,name=quality_time,json=qualityTime,proto3,oneof" json:"quality_time,omitempty"`
	QualityUser          string   `protobuf:"bytes,11,opt,name=quality_user,json=qualityUser,proto3" json:"quality_user,omitempty"`
	QualityResult        int32    `protobuf:"varint,12,opt,name=quality_result,json=qualityResult,proto3" json:"quality_result,omitempty"`
	QualityResultDesc    *string  `protobuf:"bytes,13,opt,name=quality_result_desc,json=qualityResultDesc,proto3,oneof" json:"quality_result_desc,omitempty"`
	QualityRemark        *string  `protobuf:"bytes,14,opt,name=quality_remark,json=qualityRemark,proto3,oneof" json:"quality_remark,omitempty"`
	TargetWarehouseNo    *string  `protobuf:"bytes,15,opt,name=target_warehouse_no,json=targetWarehouseNo,proto3,oneof" json:"target_warehouse_no,omitempty"`
	TargetWarehouseName  *string  `protobuf:"bytes,16,opt,name=target_warehouse_name,json=targetWarehouseName,proto3,oneof" json:"target_warehouse_name,omitempty"`
	IsRevoked            bool     `protobuf:"varint,17,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	RevokeTime           *string  `protobuf:"bytes,18,opt,name=revoke_time,json=revokeTime,proto3,oneof" json:"revoke_time,omitempty"`
	IsAggregate          bool     `protobuf:"varint,19,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
	AggTradeNo           *string  `protobuf:"bytes,20,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	PushTime             *string  `protobuf:"bytes,21,opt,name=push_time,json=pushTime,proto3,oneof" json:"push_time,omitempty"`
	PushUser             *string  `protobuf:"bytes,22,opt,name=push_user,json=pushUser,proto3,oneof" json:"push_user,omitempty"`
	PushStatus           int32    `protobuf:"varint,23,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
}

func (x *QualityReturnGoodsUpdateRequest) Reset() {
	*x = QualityReturnGoodsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_return_quality_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityReturnGoodsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityReturnGoodsUpdateRequest) ProtoMessage() {}

func (x *QualityReturnGoodsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_return_quality_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityReturnGoodsUpdateRequest.ProtoReflect.Descriptor instead.
func (*QualityReturnGoodsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_return_quality_proto_rawDescGZIP(), []int{9}
}

func (x *QualityReturnGoodsUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QualityReturnGoodsUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *QualityReturnGoodsUpdateRequest) GetQualityGoods() string {
	if x != nil {
		return x.QualityGoods
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetQualitySpec() string {
	if x != nil {
		return x.QualitySpec
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetQualityEpc() string {
	if x != nil {
		return x.QualityEpc
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetQualityTime() string {
	if x != nil && x.QualityTime != nil {
		return *x.QualityTime
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetQualityUser() string {
	if x != nil {
		return x.QualityUser
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetQualityResult() int32 {
	if x != nil {
		return x.QualityResult
	}
	return 0
}

func (x *QualityReturnGoodsUpdateRequest) GetQualityResultDesc() string {
	if x != nil && x.QualityResultDesc != nil {
		return *x.QualityResultDesc
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetQualityRemark() string {
	if x != nil && x.QualityRemark != nil {
		return *x.QualityRemark
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetTargetWarehouseNo() string {
	if x != nil && x.TargetWarehouseNo != nil {
		return *x.TargetWarehouseNo
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetTargetWarehouseName() string {
	if x != nil && x.TargetWarehouseName != nil {
		return *x.TargetWarehouseName
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

func (x *QualityReturnGoodsUpdateRequest) GetRevokeTime() string {
	if x != nil && x.RevokeTime != nil {
		return *x.RevokeTime
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetIsAggregate() bool {
	if x != nil {
		return x.IsAggregate
	}
	return false
}

func (x *QualityReturnGoodsUpdateRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetPushTime() string {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetPushUser() string {
	if x != nil && x.PushUser != nil {
		return *x.PushUser
	}
	return ""
}

func (x *QualityReturnGoodsUpdateRequest) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

var File_return_quality_proto protoreflect.FileDescriptor

var file_return_quality_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x08, 0x0a, 0x1f, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x70, 0x63, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0xaa, 0x08, 0x0a, 0x1d, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x33, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a,
	0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x25, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaf,
	0x08, 0x0a, 0x22, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x45, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x08, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x9c, 0x01, 0x0a, 0x23, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xed, 0x08, 0x0a, 0x2b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x70, 0x75,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22,
	0xab, 0x08, 0x0a, 0x1e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65,
	0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70, 0x75,
	0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x92, 0x08,
	0x0a, 0x1f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x13,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x67, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x08, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x38, 0x0a, 0x26, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe1, 0x08, 0x0a,
	0x1f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x45, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x08, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x32, 0xb7, 0x0b, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x44, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x12, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x4b, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x43, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa1, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x4c, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x45, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2e,
	0x2f, 0x70, 0x62, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_return_quality_proto_rawDescOnce sync.Once
	file_return_quality_proto_rawDescData = file_return_quality_proto_rawDesc
)

func file_return_quality_proto_rawDescGZIP() []byte {
	file_return_quality_proto_rawDescOnce.Do(func() {
		file_return_quality_proto_rawDescData = protoimpl.X.CompressGZIP(file_return_quality_proto_rawDescData)
	})
	return file_return_quality_proto_rawDescData
}

var file_return_quality_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_return_quality_proto_goTypes = []interface{}{
	(*QualityReturnGoodsCreateRequest)(nil),             // 0: rfid_quality_transfer.return_quality.QualityReturnGoodsCreateRequest
	(*QualityReturnGoodsListRequest)(nil),               // 1: rfid_quality_transfer.return_quality.QualityReturnGoodsListRequest
	(*QualityReturnGoodsModelDestroyRequest)(nil),       // 2: rfid_quality_transfer.return_quality.QualityReturnGoodsModelDestroyRequest
	(*QualityReturnGoodsModelListRequest)(nil),          // 3: rfid_quality_transfer.return_quality.QualityReturnGoodsModelListRequest
	(*QualityReturnGoodsModelListResponse)(nil),         // 4: rfid_quality_transfer.return_quality.QualityReturnGoodsModelListResponse
	(*QualityReturnGoodsModelPartialUpdateRequest)(nil), // 5: rfid_quality_transfer.return_quality.QualityReturnGoodsModelPartialUpdateRequest
	(*QualityReturnGoodsModelRequest)(nil),              // 6: rfid_quality_transfer.return_quality.QualityReturnGoodsModelRequest
	(*QualityReturnGoodsModelResponse)(nil),             // 7: rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	(*QualityReturnGoodsModelRetrieveRequest)(nil),      // 8: rfid_quality_transfer.return_quality.QualityReturnGoodsModelRetrieveRequest
	(*QualityReturnGoodsUpdateRequest)(nil),             // 9: rfid_quality_transfer.return_quality.QualityReturnGoodsUpdateRequest
	(*emptypb.Empty)(nil),                               // 10: google.protobuf.Empty
}
var file_return_quality_proto_depIdxs = []int32{
	7,  // 0: rfid_quality_transfer.return_quality.QualityReturnGoodsModelListResponse.results:type_name -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	6,  // 1: rfid_quality_transfer.return_quality.GoodsQualityController.Create:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelRequest
	0,  // 2: rfid_quality_transfer.return_quality.GoodsQualityController.CreateQualityReturnGoods:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsCreateRequest
	2,  // 3: rfid_quality_transfer.return_quality.GoodsQualityController.Destroy:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelDestroyRequest
	3,  // 4: rfid_quality_transfer.return_quality.GoodsQualityController.List:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelListRequest
	1,  // 5: rfid_quality_transfer.return_quality.GoodsQualityController.ListQualityReturnGoods:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsListRequest
	5,  // 6: rfid_quality_transfer.return_quality.GoodsQualityController.PartialUpdate:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelPartialUpdateRequest
	8,  // 7: rfid_quality_transfer.return_quality.GoodsQualityController.Retrieve:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelRetrieveRequest
	6,  // 8: rfid_quality_transfer.return_quality.GoodsQualityController.Update:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelRequest
	9,  // 9: rfid_quality_transfer.return_quality.GoodsQualityController.UpdateQualityReturnGoods:input_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsUpdateRequest
	7,  // 10: rfid_quality_transfer.return_quality.GoodsQualityController.Create:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	7,  // 11: rfid_quality_transfer.return_quality.GoodsQualityController.CreateQualityReturnGoods:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	10, // 12: rfid_quality_transfer.return_quality.GoodsQualityController.Destroy:output_type -> google.protobuf.Empty
	4,  // 13: rfid_quality_transfer.return_quality.GoodsQualityController.List:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelListResponse
	4,  // 14: rfid_quality_transfer.return_quality.GoodsQualityController.ListQualityReturnGoods:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelListResponse
	7,  // 15: rfid_quality_transfer.return_quality.GoodsQualityController.PartialUpdate:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	7,  // 16: rfid_quality_transfer.return_quality.GoodsQualityController.Retrieve:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	7,  // 17: rfid_quality_transfer.return_quality.GoodsQualityController.Update:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	7,  // 18: rfid_quality_transfer.return_quality.GoodsQualityController.UpdateQualityReturnGoods:output_type -> rfid_quality_transfer.return_quality.QualityReturnGoodsModelResponse
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_return_quality_proto_init() }
func file_return_quality_proto_init() {
	if File_return_quality_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_return_quality_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsModelDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsModelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsModelPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsModelRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_return_quality_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityReturnGoodsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_return_quality_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_return_quality_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_return_quality_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_return_quality_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_return_quality_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_return_quality_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_return_quality_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_return_quality_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_return_quality_proto_goTypes,
		DependencyIndexes: file_return_quality_proto_depIdxs,
		MessageInfos:      file_return_quality_proto_msgTypes,
	}.Build()
	File_return_quality_proto = out.File
	file_return_quality_proto_rawDesc = nil
	file_return_quality_proto_goTypes = nil
	file_return_quality_proto_depIdxs = nil
}
