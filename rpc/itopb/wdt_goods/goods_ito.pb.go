// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: goods_ito.proto

package wdt_goods

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodsModelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId       int32                  `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Filters       string                 `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	GoodsSpec     []*GoodsSpecTblRequest `protobuf:"bytes,3,rep,name=goods_spec,json=goodsSpec,proto3" json:"goods_spec,omitempty"`
	GoodsNo       *string                `protobuf:"bytes,4,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName     *string                `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	ShortName     *string                `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3,oneof" json:"short_name,omitempty"`
	Alias         *string                `protobuf:"bytes,7,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	GoodsType     *int32                 `protobuf:"varint,8,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	SpecCount     *int32                 `protobuf:"varint,9,opt,name=spec_count,json=specCount,proto3,oneof" json:"spec_count,omitempty"`
	Pinyin        *string                `protobuf:"bytes,10,opt,name=pinyin,proto3,oneof" json:"pinyin,omitempty"`
	BrandNo       *string                `protobuf:"bytes,11,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName     *string                `protobuf:"bytes,12,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	Remark        *string                `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Vein          *string                `protobuf:"bytes,14,opt,name=vein,proto3,oneof" json:"vein,omitempty"`
	Size          *string                `protobuf:"bytes,15,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Color         *string                `protobuf:"bytes,16,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Style         *string                `protobuf:"bytes,17,opt,name=style,proto3,oneof" json:"style,omitempty"`
	Lining        *string                `protobuf:"bytes,18,opt,name=lining,proto3,oneof" json:"lining,omitempty"`
	Ver           *string                `protobuf:"bytes,19,opt,name=ver,proto3,oneof" json:"ver,omitempty"`
	Origin        *string                `protobuf:"bytes,20,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	ClassId       *string                `protobuf:"bytes,21,opt,name=class_id,json=classId,proto3,oneof" json:"class_id,omitempty"`
	ClassName     *string                `protobuf:"bytes,22,opt,name=class_name,json=className,proto3,oneof" json:"class_name,omitempty"`
	BrandId       *string                `protobuf:"bytes,23,opt,name=brand_id,json=brandId,proto3,oneof" json:"brand_id,omitempty"`
	Unit          *string                `protobuf:"bytes,24,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	AuxUnit       *string                `protobuf:"bytes,25,opt,name=aux_unit,json=auxUnit,proto3,oneof" json:"aux_unit,omitempty"`
	FlagId        *string                `protobuf:"bytes,26,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Properties    *string                `protobuf:"bytes,27,opt,name=properties,proto3,oneof" json:"properties,omitempty"`
	VersionId     *string                `protobuf:"bytes,28,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	Modified      *string                `protobuf:"bytes,29,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created       *string                `protobuf:"bytes,30,opt,name=created,proto3,oneof" json:"created,omitempty"`
	UnitName      *string                `protobuf:"bytes,31,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	AuxUnitName   *string                `protobuf:"bytes,32,opt,name=aux_unit_name,json=auxUnitName,proto3,oneof" json:"aux_unit_name,omitempty"`
	FlagName      *string                `protobuf:"bytes,33,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	GoodsCreated  *string                `protobuf:"bytes,34,opt,name=goods_created,json=goodsCreated,proto3,oneof" json:"goods_created,omitempty"`
	GoodsModified *string                `protobuf:"bytes,35,opt,name=goods_modified,json=goodsModified,proto3,oneof" json:"goods_modified,omitempty"`
	Deleted       *int32                 `protobuf:"varint,36,opt,name=deleted,proto3,oneof" json:"deleted,omitempty"`
}

func (x *GoodsModelListRequest) Reset() {
	*x = GoodsModelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsModelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsModelListRequest) ProtoMessage() {}

func (x *GoodsModelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goods_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsModelListRequest.ProtoReflect.Descriptor instead.
func (*GoodsModelListRequest) Descriptor() ([]byte, []int) {
	return file_goods_ito_proto_rawDescGZIP(), []int{0}
}

func (x *GoodsModelListRequest) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *GoodsModelListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *GoodsModelListRequest) GetGoodsSpec() []*GoodsSpecTblRequest {
	if x != nil {
		return x.GoodsSpec
	}
	return nil
}

func (x *GoodsModelListRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *GoodsModelListRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *GoodsModelListRequest) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *GoodsModelListRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *GoodsModelListRequest) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *GoodsModelListRequest) GetSpecCount() int32 {
	if x != nil && x.SpecCount != nil {
		return *x.SpecCount
	}
	return 0
}

func (x *GoodsModelListRequest) GetPinyin() string {
	if x != nil && x.Pinyin != nil {
		return *x.Pinyin
	}
	return ""
}

func (x *GoodsModelListRequest) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *GoodsModelListRequest) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *GoodsModelListRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *GoodsModelListRequest) GetVein() string {
	if x != nil && x.Vein != nil {
		return *x.Vein
	}
	return ""
}

func (x *GoodsModelListRequest) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *GoodsModelListRequest) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *GoodsModelListRequest) GetStyle() string {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return ""
}

func (x *GoodsModelListRequest) GetLining() string {
	if x != nil && x.Lining != nil {
		return *x.Lining
	}
	return ""
}

func (x *GoodsModelListRequest) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *GoodsModelListRequest) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *GoodsModelListRequest) GetClassId() string {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return ""
}

func (x *GoodsModelListRequest) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *GoodsModelListRequest) GetBrandId() string {
	if x != nil && x.BrandId != nil {
		return *x.BrandId
	}
	return ""
}

func (x *GoodsModelListRequest) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *GoodsModelListRequest) GetAuxUnit() string {
	if x != nil && x.AuxUnit != nil {
		return *x.AuxUnit
	}
	return ""
}

func (x *GoodsModelListRequest) GetFlagId() string {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return ""
}

func (x *GoodsModelListRequest) GetProperties() string {
	if x != nil && x.Properties != nil {
		return *x.Properties
	}
	return ""
}

func (x *GoodsModelListRequest) GetVersionId() string {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return ""
}

func (x *GoodsModelListRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *GoodsModelListRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *GoodsModelListRequest) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *GoodsModelListRequest) GetAuxUnitName() string {
	if x != nil && x.AuxUnitName != nil {
		return *x.AuxUnitName
	}
	return ""
}

func (x *GoodsModelListRequest) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *GoodsModelListRequest) GetGoodsCreated() string {
	if x != nil && x.GoodsCreated != nil {
		return *x.GoodsCreated
	}
	return ""
}

func (x *GoodsModelListRequest) GetGoodsModified() string {
	if x != nil && x.GoodsModified != nil {
		return *x.GoodsModified
	}
	return ""
}

func (x *GoodsModelListRequest) GetDeleted() int32 {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return 0
}

type GoodsModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GoodsModelResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GoodsModelListResponse) Reset() {
	*x = GoodsModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsModelListResponse) ProtoMessage() {}

func (x *GoodsModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goods_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsModelListResponse.ProtoReflect.Descriptor instead.
func (*GoodsModelListResponse) Descriptor() ([]byte, []int) {
	return file_goods_ito_proto_rawDescGZIP(), []int{1}
}

func (x *GoodsModelListResponse) GetResults() []*GoodsModelResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GoodsModelListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GoodsModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId       int32                   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	GoodsSpec     []*GoodsSpecTblResponse `protobuf:"bytes,2,rep,name=goods_spec,json=goodsSpec,proto3" json:"goods_spec,omitempty"`
	GoodsNo       *string                 `protobuf:"bytes,3,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName     *string                 `protobuf:"bytes,4,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	ShortName     *string                 `protobuf:"bytes,5,opt,name=short_name,json=shortName,proto3,oneof" json:"short_name,omitempty"`
	Alias         *string                 `protobuf:"bytes,6,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	GoodsType     *int32                  `protobuf:"varint,7,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	SpecCount     *int32                  `protobuf:"varint,8,opt,name=spec_count,json=specCount,proto3,oneof" json:"spec_count,omitempty"`
	Pinyin        *string                 `protobuf:"bytes,9,opt,name=pinyin,proto3,oneof" json:"pinyin,omitempty"`
	BrandNo       *string                 `protobuf:"bytes,10,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName     *string                 `protobuf:"bytes,11,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	Remark        *string                 `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Vein          *string                 `protobuf:"bytes,13,opt,name=vein,proto3,oneof" json:"vein,omitempty"`
	Size          *string                 `protobuf:"bytes,14,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Color         *string                 `protobuf:"bytes,15,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Style         *string                 `protobuf:"bytes,16,opt,name=style,proto3,oneof" json:"style,omitempty"`
	Lining        *string                 `protobuf:"bytes,17,opt,name=lining,proto3,oneof" json:"lining,omitempty"`
	Ver           *string                 `protobuf:"bytes,18,opt,name=ver,proto3,oneof" json:"ver,omitempty"`
	Origin        *string                 `protobuf:"bytes,19,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	ClassId       *string                 `protobuf:"bytes,20,opt,name=class_id,json=classId,proto3,oneof" json:"class_id,omitempty"`
	ClassName     *string                 `protobuf:"bytes,21,opt,name=class_name,json=className,proto3,oneof" json:"class_name,omitempty"`
	BrandId       *string                 `protobuf:"bytes,22,opt,name=brand_id,json=brandId,proto3,oneof" json:"brand_id,omitempty"`
	Unit          *string                 `protobuf:"bytes,23,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	AuxUnit       *string                 `protobuf:"bytes,24,opt,name=aux_unit,json=auxUnit,proto3,oneof" json:"aux_unit,omitempty"`
	FlagId        *string                 `protobuf:"bytes,25,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Properties    *string                 `protobuf:"bytes,26,opt,name=properties,proto3,oneof" json:"properties,omitempty"`
	VersionId     *string                 `protobuf:"bytes,27,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	Modified      *string                 `protobuf:"bytes,28,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created       *string                 `protobuf:"bytes,29,opt,name=created,proto3,oneof" json:"created,omitempty"`
	UnitName      *string                 `protobuf:"bytes,30,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	AuxUnitName   *string                 `protobuf:"bytes,31,opt,name=aux_unit_name,json=auxUnitName,proto3,oneof" json:"aux_unit_name,omitempty"`
	FlagName      *string                 `protobuf:"bytes,32,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	GoodsCreated  *string                 `protobuf:"bytes,33,opt,name=goods_created,json=goodsCreated,proto3,oneof" json:"goods_created,omitempty"`
	GoodsModified *string                 `protobuf:"bytes,34,opt,name=goods_modified,json=goodsModified,proto3,oneof" json:"goods_modified,omitempty"`
	Deleted       *int32                  `protobuf:"varint,35,opt,name=deleted,proto3,oneof" json:"deleted,omitempty"`
}

func (x *GoodsModelResponse) Reset() {
	*x = GoodsModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsModelResponse) ProtoMessage() {}

func (x *GoodsModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goods_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsModelResponse.ProtoReflect.Descriptor instead.
func (*GoodsModelResponse) Descriptor() ([]byte, []int) {
	return file_goods_ito_proto_rawDescGZIP(), []int{2}
}

func (x *GoodsModelResponse) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *GoodsModelResponse) GetGoodsSpec() []*GoodsSpecTblResponse {
	if x != nil {
		return x.GoodsSpec
	}
	return nil
}

func (x *GoodsModelResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *GoodsModelResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *GoodsModelResponse) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *GoodsModelResponse) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *GoodsModelResponse) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *GoodsModelResponse) GetSpecCount() int32 {
	if x != nil && x.SpecCount != nil {
		return *x.SpecCount
	}
	return 0
}

func (x *GoodsModelResponse) GetPinyin() string {
	if x != nil && x.Pinyin != nil {
		return *x.Pinyin
	}
	return ""
}

func (x *GoodsModelResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *GoodsModelResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *GoodsModelResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *GoodsModelResponse) GetVein() string {
	if x != nil && x.Vein != nil {
		return *x.Vein
	}
	return ""
}

func (x *GoodsModelResponse) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *GoodsModelResponse) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *GoodsModelResponse) GetStyle() string {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return ""
}

func (x *GoodsModelResponse) GetLining() string {
	if x != nil && x.Lining != nil {
		return *x.Lining
	}
	return ""
}

func (x *GoodsModelResponse) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *GoodsModelResponse) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *GoodsModelResponse) GetClassId() string {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return ""
}

func (x *GoodsModelResponse) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *GoodsModelResponse) GetBrandId() string {
	if x != nil && x.BrandId != nil {
		return *x.BrandId
	}
	return ""
}

func (x *GoodsModelResponse) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *GoodsModelResponse) GetAuxUnit() string {
	if x != nil && x.AuxUnit != nil {
		return *x.AuxUnit
	}
	return ""
}

func (x *GoodsModelResponse) GetFlagId() string {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return ""
}

func (x *GoodsModelResponse) GetProperties() string {
	if x != nil && x.Properties != nil {
		return *x.Properties
	}
	return ""
}

func (x *GoodsModelResponse) GetVersionId() string {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return ""
}

func (x *GoodsModelResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *GoodsModelResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *GoodsModelResponse) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *GoodsModelResponse) GetAuxUnitName() string {
	if x != nil && x.AuxUnitName != nil {
		return *x.AuxUnitName
	}
	return ""
}

func (x *GoodsModelResponse) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *GoodsModelResponse) GetGoodsCreated() string {
	if x != nil && x.GoodsCreated != nil {
		return *x.GoodsCreated
	}
	return ""
}

func (x *GoodsModelResponse) GetGoodsModified() string {
	if x != nil && x.GoodsModified != nil {
		return *x.GoodsModified
	}
	return ""
}

func (x *GoodsModelResponse) GetDeleted() int32 {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return 0
}

type GoodsModelRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId int32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (x *GoodsModelRetrieveRequest) Reset() {
	*x = GoodsModelRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsModelRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsModelRetrieveRequest) ProtoMessage() {}

func (x *GoodsModelRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goods_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsModelRetrieveRequest.ProtoReflect.Descriptor instead.
func (*GoodsModelRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_goods_ito_proto_rawDescGZIP(), []int{3}
}

func (x *GoodsModelRetrieveRequest) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type GoodsSpecTblRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecId            string   `protobuf:"bytes,1,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	SpecNo            *string  `protobuf:"bytes,2,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode          *string  `protobuf:"bytes,3,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Barcode           *string  `protobuf:"bytes,4,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	SpecName          *string  `protobuf:"bytes,5,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	LowestPrice       *float64 `protobuf:"fixed64,6,opt,name=lowest_price,json=lowestPrice,proto3,oneof" json:"lowest_price,omitempty"`
	RetailPrice       *float64 `protobuf:"fixed64,7,opt,name=retail_price,json=retailPrice,proto3,oneof" json:"retail_price,omitempty"`
	WholesalePrice    *float64 `protobuf:"fixed64,8,opt,name=wholesale_price,json=wholesalePrice,proto3,oneof" json:"wholesale_price,omitempty"`
	MemberPrice       *float64 `protobuf:"fixed64,9,opt,name=member_price,json=memberPrice,proto3,oneof" json:"member_price,omitempty"`
	MarketPrice       *float64 `protobuf:"fixed64,10,opt,name=market_price,json=marketPrice,proto3,oneof" json:"market_price,omitempty"`
	CustomPrice1      *float64 `protobuf:"fixed64,11,opt,name=custom_price1,json=customPrice1,proto3,oneof" json:"custom_price1,omitempty"`
	CustomPrice2      *float64 `protobuf:"fixed64,12,opt,name=custom_price2,json=customPrice2,proto3,oneof" json:"custom_price2,omitempty"`
	SaleScore         *int32   `protobuf:"varint,13,opt,name=sale_score,json=saleScore,proto3,oneof" json:"sale_score,omitempty"`
	PackScore         *int32   `protobuf:"varint,14,opt,name=pack_score,json=packScore,proto3,oneof" json:"pack_score,omitempty"`
	PickScore         *int32   `protobuf:"varint,15,opt,name=pick_score,json=pickScore,proto3,oneof" json:"pick_score,omitempty"`
	ValidityDays      *int32   `protobuf:"varint,16,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	SalesDays         *int32   `protobuf:"varint,17,opt,name=sales_days,json=salesDays,proto3,oneof" json:"sales_days,omitempty"`
	ReceiveDays       *int32   `protobuf:"varint,18,opt,name=receive_days,json=receiveDays,proto3,oneof" json:"receive_days,omitempty"`
	Weight            *float64 `protobuf:"fixed64,19,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Length            *float64 `protobuf:"fixed64,20,opt,name=length,proto3,oneof" json:"length,omitempty"`
	Width             *float64 `protobuf:"fixed64,21,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Height            *float64 `protobuf:"fixed64,22,opt,name=height,proto3,oneof" json:"height,omitempty"`
	IsSnEnable        *int32   `protobuf:"varint,23,opt,name=is_sn_enable,json=isSnEnable,proto3,oneof" json:"is_sn_enable,omitempty"`
	IsAllowNegStock   *int32   `protobuf:"varint,24,opt,name=is_allow_neg_stock,json=isAllowNegStock,proto3,oneof" json:"is_allow_neg_stock,omitempty"`
	IsNotNeedExamine  *int32   `protobuf:"varint,25,opt,name=is_not_need_examine,json=isNotNeedExamine,proto3,oneof" json:"is_not_need_examine,omitempty"`
	IsZeroCost        *int32   `protobuf:"varint,26,opt,name=is_zero_cost,json=isZeroCost,proto3,oneof" json:"is_zero_cost,omitempty"`
	IsLowerCost       *int32   `protobuf:"varint,27,opt,name=is_lower_cost,json=isLowerCost,proto3,oneof" json:"is_lower_cost,omitempty"`
	IsNotUseAir       *int32   `protobuf:"varint,28,opt,name=is_not_use_air,json=isNotUseAir,proto3,oneof" json:"is_not_use_air,omitempty"`
	TaxRate           *float64 `protobuf:"fixed64,29,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	LargeType         *int32   `protobuf:"varint,30,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	Remark            *string  `protobuf:"bytes,31,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	SpecCreated       *string  `protobuf:"bytes,32,opt,name=spec_created,json=specCreated,proto3,oneof" json:"spec_created,omitempty"`
	SpecModified      *string  `protobuf:"bytes,33,opt,name=spec_modified,json=specModified,proto3,oneof" json:"spec_modified,omitempty"`
	Prop1             *string  `protobuf:"bytes,34,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2             *string  `protobuf:"bytes,35,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Prop3             *string  `protobuf:"bytes,36,opt,name=prop3,proto3,oneof" json:"prop3,omitempty"`
	Prop4             *string  `protobuf:"bytes,37,opt,name=prop4,proto3,oneof" json:"prop4,omitempty"`
	Prop5             *string  `protobuf:"bytes,38,opt,name=prop5,proto3,oneof" json:"prop5,omitempty"`
	Prop6             *string  `protobuf:"bytes,39,opt,name=prop6,proto3,oneof" json:"prop6,omitempty"`
	ImgUrl            *string  `protobuf:"bytes,40,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
	TaxCodeId         *string  `protobuf:"bytes,41,opt,name=tax_code_id,json=taxCodeId,proto3,oneof" json:"tax_code_id,omitempty"`
	IsSingleBatch     *int32   `protobuf:"varint,42,opt,name=is_single_batch,json=isSingleBatch,proto3,oneof" json:"is_single_batch,omitempty"`
	WashingLabel      *string  `protobuf:"bytes,43,opt,name=washing_label,json=washingLabel,proto3,oneof" json:"washing_label,omitempty"`
	Unit              *string  `protobuf:"bytes,44,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	AuxUnit           *string  `protobuf:"bytes,45,opt,name=aux_unit,json=auxUnit,proto3,oneof" json:"aux_unit,omitempty"`
	FlagId            *string  `protobuf:"bytes,46,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	ImgKey            *string  `protobuf:"bytes,47,opt,name=img_key,json=imgKey,proto3,oneof" json:"img_key,omitempty"`
	BarcodeCount      *int32   `protobuf:"varint,48,opt,name=barcode_count,json=barcodeCount,proto3,oneof" json:"barcode_count,omitempty"`
	PlatSpecCount     *int32   `protobuf:"varint,49,opt,name=plat_spec_count,json=platSpecCount,proto3,oneof" json:"plat_spec_count,omitempty"`
	PostfixVal        *string  `protobuf:"bytes,50,opt,name=postfix_val,json=postfixVal,proto3,oneof" json:"postfix_val,omitempty"`
	LastDate          *string  `protobuf:"bytes,51,opt,name=last_date,json=lastDate,proto3,oneof" json:"last_date,omitempty"`
	ReplenishType     *string  `protobuf:"bytes,52,opt,name=replenish_type,json=replenishType,proto3,oneof" json:"replenish_type,omitempty"`
	IsPopular         *string  `protobuf:"bytes,53,opt,name=is_popular,json=isPopular,proto3,oneof" json:"is_popular,omitempty"`
	ReplaceNo         *string  `protobuf:"bytes,54,opt,name=replace_no,json=replaceNo,proto3,oneof" json:"replace_no,omitempty"`
	SpecMask          *string  `protobuf:"bytes,55,opt,name=spec_mask,json=specMask,proto3,oneof" json:"spec_mask,omitempty"`
	ReplaceProportion *string  `protobuf:"bytes,56,opt,name=replace_proportion,json=replaceProportion,proto3,oneof" json:"replace_proportion,omitempty"`
	Extra_3           *string  `protobuf:"bytes,57,opt,name=extra_3,json=extra3,proto3,oneof" json:"extra_3,omitempty"`
	TaxCode           *string  `protobuf:"bytes,58,opt,name=tax_code,json=taxCode,proto3,oneof" json:"tax_code,omitempty"`
	Modified          *string  `protobuf:"bytes,59,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created           *string  `protobuf:"bytes,60,opt,name=created,proto3,oneof" json:"created,omitempty"`
	SpecUnitName      *string  `protobuf:"bytes,61,opt,name=spec_unit_name,json=specUnitName,proto3,oneof" json:"spec_unit_name,omitempty"`
	SpecAuxUnitName   *string  `protobuf:"bytes,62,opt,name=spec_aux_unit_name,json=specAuxUnitName,proto3,oneof" json:"spec_aux_unit_name,omitempty"`
	Deleted           *int32   `protobuf:"varint,63,opt,name=deleted,proto3,oneof" json:"deleted,omitempty"`
}

func (x *GoodsSpecTblRequest) Reset() {
	*x = GoodsSpecTblRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsSpecTblRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsSpecTblRequest) ProtoMessage() {}

func (x *GoodsSpecTblRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goods_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsSpecTblRequest.ProtoReflect.Descriptor instead.
func (*GoodsSpecTblRequest) Descriptor() ([]byte, []int) {
	return file_goods_ito_proto_rawDescGZIP(), []int{4}
}

func (x *GoodsSpecTblRequest) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetLowestPrice() float64 {
	if x != nil && x.LowestPrice != nil {
		return *x.LowestPrice
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetRetailPrice() float64 {
	if x != nil && x.RetailPrice != nil {
		return *x.RetailPrice
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetWholesalePrice() float64 {
	if x != nil && x.WholesalePrice != nil {
		return *x.WholesalePrice
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetMemberPrice() float64 {
	if x != nil && x.MemberPrice != nil {
		return *x.MemberPrice
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetMarketPrice() float64 {
	if x != nil && x.MarketPrice != nil {
		return *x.MarketPrice
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetCustomPrice1() float64 {
	if x != nil && x.CustomPrice1 != nil {
		return *x.CustomPrice1
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetCustomPrice2() float64 {
	if x != nil && x.CustomPrice2 != nil {
		return *x.CustomPrice2
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetSaleScore() int32 {
	if x != nil && x.SaleScore != nil {
		return *x.SaleScore
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetPackScore() int32 {
	if x != nil && x.PackScore != nil {
		return *x.PackScore
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetPickScore() int32 {
	if x != nil && x.PickScore != nil {
		return *x.PickScore
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetValidityDays() int32 {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetSalesDays() int32 {
	if x != nil && x.SalesDays != nil {
		return *x.SalesDays
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetReceiveDays() int32 {
	if x != nil && x.ReceiveDays != nil {
		return *x.ReceiveDays
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetLength() float64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetWidth() float64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetHeight() float64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetIsSnEnable() int32 {
	if x != nil && x.IsSnEnable != nil {
		return *x.IsSnEnable
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetIsAllowNegStock() int32 {
	if x != nil && x.IsAllowNegStock != nil {
		return *x.IsAllowNegStock
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetIsNotNeedExamine() int32 {
	if x != nil && x.IsNotNeedExamine != nil {
		return *x.IsNotNeedExamine
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetIsZeroCost() int32 {
	if x != nil && x.IsZeroCost != nil {
		return *x.IsZeroCost
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetIsLowerCost() int32 {
	if x != nil && x.IsLowerCost != nil {
		return *x.IsLowerCost
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetIsNotUseAir() int32 {
	if x != nil && x.IsNotUseAir != nil {
		return *x.IsNotUseAir
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecCreated() string {
	if x != nil && x.SpecCreated != nil {
		return *x.SpecCreated
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecModified() string {
	if x != nil && x.SpecModified != nil {
		return *x.SpecModified
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetProp3() string {
	if x != nil && x.Prop3 != nil {
		return *x.Prop3
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetProp4() string {
	if x != nil && x.Prop4 != nil {
		return *x.Prop4
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetProp5() string {
	if x != nil && x.Prop5 != nil {
		return *x.Prop5
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetProp6() string {
	if x != nil && x.Prop6 != nil {
		return *x.Prop6
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetTaxCodeId() string {
	if x != nil && x.TaxCodeId != nil {
		return *x.TaxCodeId
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetIsSingleBatch() int32 {
	if x != nil && x.IsSingleBatch != nil {
		return *x.IsSingleBatch
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetWashingLabel() string {
	if x != nil && x.WashingLabel != nil {
		return *x.WashingLabel
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetAuxUnit() string {
	if x != nil && x.AuxUnit != nil {
		return *x.AuxUnit
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetFlagId() string {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetImgKey() string {
	if x != nil && x.ImgKey != nil {
		return *x.ImgKey
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetBarcodeCount() int32 {
	if x != nil && x.BarcodeCount != nil {
		return *x.BarcodeCount
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetPlatSpecCount() int32 {
	if x != nil && x.PlatSpecCount != nil {
		return *x.PlatSpecCount
	}
	return 0
}

func (x *GoodsSpecTblRequest) GetPostfixVal() string {
	if x != nil && x.PostfixVal != nil {
		return *x.PostfixVal
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetLastDate() string {
	if x != nil && x.LastDate != nil {
		return *x.LastDate
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetReplenishType() string {
	if x != nil && x.ReplenishType != nil {
		return *x.ReplenishType
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetIsPopular() string {
	if x != nil && x.IsPopular != nil {
		return *x.IsPopular
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetReplaceNo() string {
	if x != nil && x.ReplaceNo != nil {
		return *x.ReplaceNo
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecMask() string {
	if x != nil && x.SpecMask != nil {
		return *x.SpecMask
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetReplaceProportion() string {
	if x != nil && x.ReplaceProportion != nil {
		return *x.ReplaceProportion
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetExtra_3() string {
	if x != nil && x.Extra_3 != nil {
		return *x.Extra_3
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetTaxCode() string {
	if x != nil && x.TaxCode != nil {
		return *x.TaxCode
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecUnitName() string {
	if x != nil && x.SpecUnitName != nil {
		return *x.SpecUnitName
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetSpecAuxUnitName() string {
	if x != nil && x.SpecAuxUnitName != nil {
		return *x.SpecAuxUnitName
	}
	return ""
}

func (x *GoodsSpecTblRequest) GetDeleted() int32 {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return 0
}

type GoodsSpecTblResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecId            string   `protobuf:"bytes,1,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	SpecNo            *string  `protobuf:"bytes,2,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode          *string  `protobuf:"bytes,3,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Barcode           *string  `protobuf:"bytes,4,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	SpecName          *string  `protobuf:"bytes,5,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	LowestPrice       *float64 `protobuf:"fixed64,6,opt,name=lowest_price,json=lowestPrice,proto3,oneof" json:"lowest_price,omitempty"`
	RetailPrice       *float64 `protobuf:"fixed64,7,opt,name=retail_price,json=retailPrice,proto3,oneof" json:"retail_price,omitempty"`
	WholesalePrice    *float64 `protobuf:"fixed64,8,opt,name=wholesale_price,json=wholesalePrice,proto3,oneof" json:"wholesale_price,omitempty"`
	MemberPrice       *float64 `protobuf:"fixed64,9,opt,name=member_price,json=memberPrice,proto3,oneof" json:"member_price,omitempty"`
	MarketPrice       *float64 `protobuf:"fixed64,10,opt,name=market_price,json=marketPrice,proto3,oneof" json:"market_price,omitempty"`
	CustomPrice1      *float64 `protobuf:"fixed64,11,opt,name=custom_price1,json=customPrice1,proto3,oneof" json:"custom_price1,omitempty"`
	CustomPrice2      *float64 `protobuf:"fixed64,12,opt,name=custom_price2,json=customPrice2,proto3,oneof" json:"custom_price2,omitempty"`
	SaleScore         *int32   `protobuf:"varint,13,opt,name=sale_score,json=saleScore,proto3,oneof" json:"sale_score,omitempty"`
	PackScore         *int32   `protobuf:"varint,14,opt,name=pack_score,json=packScore,proto3,oneof" json:"pack_score,omitempty"`
	PickScore         *int32   `protobuf:"varint,15,opt,name=pick_score,json=pickScore,proto3,oneof" json:"pick_score,omitempty"`
	ValidityDays      *int32   `protobuf:"varint,16,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	SalesDays         *int32   `protobuf:"varint,17,opt,name=sales_days,json=salesDays,proto3,oneof" json:"sales_days,omitempty"`
	ReceiveDays       *int32   `protobuf:"varint,18,opt,name=receive_days,json=receiveDays,proto3,oneof" json:"receive_days,omitempty"`
	Weight            *float64 `protobuf:"fixed64,19,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Length            *float64 `protobuf:"fixed64,20,opt,name=length,proto3,oneof" json:"length,omitempty"`
	Width             *float64 `protobuf:"fixed64,21,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Height            *float64 `protobuf:"fixed64,22,opt,name=height,proto3,oneof" json:"height,omitempty"`
	IsSnEnable        *int32   `protobuf:"varint,23,opt,name=is_sn_enable,json=isSnEnable,proto3,oneof" json:"is_sn_enable,omitempty"`
	IsAllowNegStock   *int32   `protobuf:"varint,24,opt,name=is_allow_neg_stock,json=isAllowNegStock,proto3,oneof" json:"is_allow_neg_stock,omitempty"`
	IsNotNeedExamine  *int32   `protobuf:"varint,25,opt,name=is_not_need_examine,json=isNotNeedExamine,proto3,oneof" json:"is_not_need_examine,omitempty"`
	IsZeroCost        *int32   `protobuf:"varint,26,opt,name=is_zero_cost,json=isZeroCost,proto3,oneof" json:"is_zero_cost,omitempty"`
	IsLowerCost       *int32   `protobuf:"varint,27,opt,name=is_lower_cost,json=isLowerCost,proto3,oneof" json:"is_lower_cost,omitempty"`
	IsNotUseAir       *int32   `protobuf:"varint,28,opt,name=is_not_use_air,json=isNotUseAir,proto3,oneof" json:"is_not_use_air,omitempty"`
	TaxRate           *float64 `protobuf:"fixed64,29,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	LargeType         *int32   `protobuf:"varint,30,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	Remark            *string  `protobuf:"bytes,31,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	SpecCreated       *string  `protobuf:"bytes,32,opt,name=spec_created,json=specCreated,proto3,oneof" json:"spec_created,omitempty"`
	SpecModified      *string  `protobuf:"bytes,33,opt,name=spec_modified,json=specModified,proto3,oneof" json:"spec_modified,omitempty"`
	Prop1             *string  `protobuf:"bytes,34,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2             *string  `protobuf:"bytes,35,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Prop3             *string  `protobuf:"bytes,36,opt,name=prop3,proto3,oneof" json:"prop3,omitempty"`
	Prop4             *string  `protobuf:"bytes,37,opt,name=prop4,proto3,oneof" json:"prop4,omitempty"`
	Prop5             *string  `protobuf:"bytes,38,opt,name=prop5,proto3,oneof" json:"prop5,omitempty"`
	Prop6             *string  `protobuf:"bytes,39,opt,name=prop6,proto3,oneof" json:"prop6,omitempty"`
	ImgUrl            *string  `protobuf:"bytes,40,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
	TaxCodeId         *string  `protobuf:"bytes,41,opt,name=tax_code_id,json=taxCodeId,proto3,oneof" json:"tax_code_id,omitempty"`
	IsSingleBatch     *int32   `protobuf:"varint,42,opt,name=is_single_batch,json=isSingleBatch,proto3,oneof" json:"is_single_batch,omitempty"`
	WashingLabel      *string  `protobuf:"bytes,43,opt,name=washing_label,json=washingLabel,proto3,oneof" json:"washing_label,omitempty"`
	Unit              *string  `protobuf:"bytes,44,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	AuxUnit           *string  `protobuf:"bytes,45,opt,name=aux_unit,json=auxUnit,proto3,oneof" json:"aux_unit,omitempty"`
	FlagId            *string  `protobuf:"bytes,46,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	ImgKey            *string  `protobuf:"bytes,47,opt,name=img_key,json=imgKey,proto3,oneof" json:"img_key,omitempty"`
	BarcodeCount      *int32   `protobuf:"varint,48,opt,name=barcode_count,json=barcodeCount,proto3,oneof" json:"barcode_count,omitempty"`
	PlatSpecCount     *int32   `protobuf:"varint,49,opt,name=plat_spec_count,json=platSpecCount,proto3,oneof" json:"plat_spec_count,omitempty"`
	PostfixVal        *string  `protobuf:"bytes,50,opt,name=postfix_val,json=postfixVal,proto3,oneof" json:"postfix_val,omitempty"`
	LastDate          *string  `protobuf:"bytes,51,opt,name=last_date,json=lastDate,proto3,oneof" json:"last_date,omitempty"`
	ReplenishType     *string  `protobuf:"bytes,52,opt,name=replenish_type,json=replenishType,proto3,oneof" json:"replenish_type,omitempty"`
	IsPopular         *string  `protobuf:"bytes,53,opt,name=is_popular,json=isPopular,proto3,oneof" json:"is_popular,omitempty"`
	ReplaceNo         *string  `protobuf:"bytes,54,opt,name=replace_no,json=replaceNo,proto3,oneof" json:"replace_no,omitempty"`
	SpecMask          *string  `protobuf:"bytes,55,opt,name=spec_mask,json=specMask,proto3,oneof" json:"spec_mask,omitempty"`
	ReplaceProportion *string  `protobuf:"bytes,56,opt,name=replace_proportion,json=replaceProportion,proto3,oneof" json:"replace_proportion,omitempty"`
	Extra_3           *string  `protobuf:"bytes,57,opt,name=extra_3,json=extra3,proto3,oneof" json:"extra_3,omitempty"`
	TaxCode           *string  `protobuf:"bytes,58,opt,name=tax_code,json=taxCode,proto3,oneof" json:"tax_code,omitempty"`
	Modified          *string  `protobuf:"bytes,59,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created           *string  `protobuf:"bytes,60,opt,name=created,proto3,oneof" json:"created,omitempty"`
	SpecUnitName      *string  `protobuf:"bytes,61,opt,name=spec_unit_name,json=specUnitName,proto3,oneof" json:"spec_unit_name,omitempty"`
	SpecAuxUnitName   *string  `protobuf:"bytes,62,opt,name=spec_aux_unit_name,json=specAuxUnitName,proto3,oneof" json:"spec_aux_unit_name,omitempty"`
	Deleted           *int32   `protobuf:"varint,63,opt,name=deleted,proto3,oneof" json:"deleted,omitempty"`
}

func (x *GoodsSpecTblResponse) Reset() {
	*x = GoodsSpecTblResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsSpecTblResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsSpecTblResponse) ProtoMessage() {}

func (x *GoodsSpecTblResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goods_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsSpecTblResponse.ProtoReflect.Descriptor instead.
func (*GoodsSpecTblResponse) Descriptor() ([]byte, []int) {
	return file_goods_ito_proto_rawDescGZIP(), []int{5}
}

func (x *GoodsSpecTblResponse) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetLowestPrice() float64 {
	if x != nil && x.LowestPrice != nil {
		return *x.LowestPrice
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetRetailPrice() float64 {
	if x != nil && x.RetailPrice != nil {
		return *x.RetailPrice
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetWholesalePrice() float64 {
	if x != nil && x.WholesalePrice != nil {
		return *x.WholesalePrice
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetMemberPrice() float64 {
	if x != nil && x.MemberPrice != nil {
		return *x.MemberPrice
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetMarketPrice() float64 {
	if x != nil && x.MarketPrice != nil {
		return *x.MarketPrice
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetCustomPrice1() float64 {
	if x != nil && x.CustomPrice1 != nil {
		return *x.CustomPrice1
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetCustomPrice2() float64 {
	if x != nil && x.CustomPrice2 != nil {
		return *x.CustomPrice2
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetSaleScore() int32 {
	if x != nil && x.SaleScore != nil {
		return *x.SaleScore
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetPackScore() int32 {
	if x != nil && x.PackScore != nil {
		return *x.PackScore
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetPickScore() int32 {
	if x != nil && x.PickScore != nil {
		return *x.PickScore
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetValidityDays() int32 {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetSalesDays() int32 {
	if x != nil && x.SalesDays != nil {
		return *x.SalesDays
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetReceiveDays() int32 {
	if x != nil && x.ReceiveDays != nil {
		return *x.ReceiveDays
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetLength() float64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetWidth() float64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetHeight() float64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetIsSnEnable() int32 {
	if x != nil && x.IsSnEnable != nil {
		return *x.IsSnEnable
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetIsAllowNegStock() int32 {
	if x != nil && x.IsAllowNegStock != nil {
		return *x.IsAllowNegStock
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetIsNotNeedExamine() int32 {
	if x != nil && x.IsNotNeedExamine != nil {
		return *x.IsNotNeedExamine
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetIsZeroCost() int32 {
	if x != nil && x.IsZeroCost != nil {
		return *x.IsZeroCost
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetIsLowerCost() int32 {
	if x != nil && x.IsLowerCost != nil {
		return *x.IsLowerCost
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetIsNotUseAir() int32 {
	if x != nil && x.IsNotUseAir != nil {
		return *x.IsNotUseAir
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecCreated() string {
	if x != nil && x.SpecCreated != nil {
		return *x.SpecCreated
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecModified() string {
	if x != nil && x.SpecModified != nil {
		return *x.SpecModified
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetProp3() string {
	if x != nil && x.Prop3 != nil {
		return *x.Prop3
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetProp4() string {
	if x != nil && x.Prop4 != nil {
		return *x.Prop4
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetProp5() string {
	if x != nil && x.Prop5 != nil {
		return *x.Prop5
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetProp6() string {
	if x != nil && x.Prop6 != nil {
		return *x.Prop6
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetTaxCodeId() string {
	if x != nil && x.TaxCodeId != nil {
		return *x.TaxCodeId
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetIsSingleBatch() int32 {
	if x != nil && x.IsSingleBatch != nil {
		return *x.IsSingleBatch
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetWashingLabel() string {
	if x != nil && x.WashingLabel != nil {
		return *x.WashingLabel
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetAuxUnit() string {
	if x != nil && x.AuxUnit != nil {
		return *x.AuxUnit
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetFlagId() string {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetImgKey() string {
	if x != nil && x.ImgKey != nil {
		return *x.ImgKey
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetBarcodeCount() int32 {
	if x != nil && x.BarcodeCount != nil {
		return *x.BarcodeCount
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetPlatSpecCount() int32 {
	if x != nil && x.PlatSpecCount != nil {
		return *x.PlatSpecCount
	}
	return 0
}

func (x *GoodsSpecTblResponse) GetPostfixVal() string {
	if x != nil && x.PostfixVal != nil {
		return *x.PostfixVal
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetLastDate() string {
	if x != nil && x.LastDate != nil {
		return *x.LastDate
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetReplenishType() string {
	if x != nil && x.ReplenishType != nil {
		return *x.ReplenishType
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetIsPopular() string {
	if x != nil && x.IsPopular != nil {
		return *x.IsPopular
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetReplaceNo() string {
	if x != nil && x.ReplaceNo != nil {
		return *x.ReplaceNo
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecMask() string {
	if x != nil && x.SpecMask != nil {
		return *x.SpecMask
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetReplaceProportion() string {
	if x != nil && x.ReplaceProportion != nil {
		return *x.ReplaceProportion
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetExtra_3() string {
	if x != nil && x.Extra_3 != nil {
		return *x.Extra_3
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetTaxCode() string {
	if x != nil && x.TaxCode != nil {
		return *x.TaxCode
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecUnitName() string {
	if x != nil && x.SpecUnitName != nil {
		return *x.SpecUnitName
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetSpecAuxUnitName() string {
	if x != nil && x.SpecAuxUnitName != nil {
		return *x.SpecAuxUnitName
	}
	return ""
}

func (x *GoodsSpecTblResponse) GetDeleted() int32 {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return 0
}

var File_goods_ito_proto protoreflect.FileDescriptor

var file_goods_ito_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x22, 0xed, 0x0c, 0x0a,
	0x15, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x54, 0x62, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x65, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x04, 0x76, 0x65, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x6c,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x03, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x78,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x61,
	0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x06, 0x66, 0x6c,
	0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x18, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x19, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1a, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x61, 0x75, 0x78,
	0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d,
	0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1f, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x65, 0x69, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x65, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x16,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x0c, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x54, 0x62, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04,
	0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x76, 0x65, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x04, 0x76, 0x65, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x03, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x13, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x61, 0x75, 0x78, 0x55,
	0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x19, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1a, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1b, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x61, 0x75, 0x78, 0x55, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x08, 0x66,
	0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0d,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x20, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x65, 0x69, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x65, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x78,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x19, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x22, 0x9b, 0x19, 0x0a, 0x13, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x65, 0x63, 0x54,
	0x62, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0e,
	0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x08, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0a, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x61, 0x6c,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0f, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x13, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x15, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x65, 0x67,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0f,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x17, 0x52, 0x10, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72,
	0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0a,
	0x69, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x69, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a,
	0x52, 0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x41, 0x69, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1b, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1f, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x20, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x33, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x33, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x36, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x36, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x09, 0x74, 0x61, 0x78, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x28, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0c,
	0x77, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x07, 0x61, 0x75,
	0x78, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x06, 0x66, 0x6c, 0x61,
	0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0c, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x30, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x09, 0x69, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x33, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37,
	0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52,
	0x07, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x39, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3a, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61,
	0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x65, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x61, 0x69, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x35, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x77, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x78,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x33, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x9c, 0x19, 0x0a, 0x14, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x65, 0x63, 0x54, 0x62, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0e, 0x77,
	0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08,
	0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0a, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f,
	0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x13, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15,
	0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x65, 0x67, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0f, 0x69,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17,
	0x52, 0x10, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0a, 0x69,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x61, 0x69, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52,
	0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x41, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x1b, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1f, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x20, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x33, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x33,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x23, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x36, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x36, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x09, 0x74, 0x61, 0x78, 0x43, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x28, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0c, 0x77,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x07, 0x61, 0x75, 0x78,
	0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0c, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x30, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x33, 0x52, 0x09, 0x69, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x33, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52,
	0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x07,
	0x74, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x39, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3a, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x3b, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61, 0x75,
	0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x3c, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e,
	0x65, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x61, 0x69, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x35, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x77, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x78, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x33, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x32, 0xf6,
	0x01, 0x0a, 0x12, 0x57, 0x64, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2e, 0x2f, 0x77, 0x64,
	0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goods_ito_proto_rawDescOnce sync.Once
	file_goods_ito_proto_rawDescData = file_goods_ito_proto_rawDesc
)

func file_goods_ito_proto_rawDescGZIP() []byte {
	file_goods_ito_proto_rawDescOnce.Do(func() {
		file_goods_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_goods_ito_proto_rawDescData)
	})
	return file_goods_ito_proto_rawDescData
}

var file_goods_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_goods_ito_proto_goTypes = []interface{}{
	(*GoodsModelListRequest)(nil),     // 0: product_service.goods_ito.GoodsModelListRequest
	(*GoodsModelListResponse)(nil),    // 1: product_service.goods_ito.GoodsModelListResponse
	(*GoodsModelResponse)(nil),        // 2: product_service.goods_ito.GoodsModelResponse
	(*GoodsModelRetrieveRequest)(nil), // 3: product_service.goods_ito.GoodsModelRetrieveRequest
	(*GoodsSpecTblRequest)(nil),       // 4: product_service.goods_ito.GoodsSpecTblRequest
	(*GoodsSpecTblResponse)(nil),      // 5: product_service.goods_ito.GoodsSpecTblResponse
}
var file_goods_ito_proto_depIdxs = []int32{
	4, // 0: product_service.goods_ito.GoodsModelListRequest.goods_spec:type_name -> product_service.goods_ito.GoodsSpecTblRequest
	2, // 1: product_service.goods_ito.GoodsModelListResponse.results:type_name -> product_service.goods_ito.GoodsModelResponse
	5, // 2: product_service.goods_ito.GoodsModelResponse.goods_spec:type_name -> product_service.goods_ito.GoodsSpecTblResponse
	0, // 3: product_service.goods_ito.WdtGoodsController.List:input_type -> product_service.goods_ito.GoodsModelListRequest
	3, // 4: product_service.goods_ito.WdtGoodsController.Retrieve:input_type -> product_service.goods_ito.GoodsModelRetrieveRequest
	1, // 5: product_service.goods_ito.WdtGoodsController.List:output_type -> product_service.goods_ito.GoodsModelListResponse
	2, // 6: product_service.goods_ito.WdtGoodsController.Retrieve:output_type -> product_service.goods_ito.GoodsModelResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_goods_ito_proto_init() }
func file_goods_ito_proto_init() {
	if File_goods_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goods_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsModelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsModelRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsSpecTblRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsSpecTblResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_goods_ito_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_goods_ito_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_goods_ito_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_goods_ito_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goods_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goods_ito_proto_goTypes,
		DependencyIndexes: file_goods_ito_proto_depIdxs,
		MessageInfos:      file_goods_ito_proto_msgTypes,
	}.Build()
	File_goods_ito_proto = out.File
	file_goods_ito_proto_rawDesc = nil
	file_goods_ito_proto_goTypes = nil
	file_goods_ito_proto_depIdxs = nil
}
