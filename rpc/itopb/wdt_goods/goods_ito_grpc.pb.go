// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: goods_ito.proto

package wdt_goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WdtGoodsController_List_FullMethodName     = "/product_service.goods_ito.WdtGoodsController/List"
	WdtGoodsController_Retrieve_FullMethodName = "/product_service.goods_ito.WdtGoodsController/Retrieve"
)

// WdtGoodsControllerClient is the client API for WdtGoodsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WdtGoodsControllerClient interface {
	List(ctx context.Context, in *GoodsModelListRequest, opts ...grpc.CallOption) (*GoodsModelListResponse, error)
	Retrieve(ctx context.Context, in *GoodsModelRetrieveRequest, opts ...grpc.CallOption) (*GoodsModelResponse, error)
}

type wdtGoodsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewWdtGoodsControllerClient(cc grpc.ClientConnInterface) WdtGoodsControllerClient {
	return &wdtGoodsControllerClient{cc}
}

func (c *wdtGoodsControllerClient) List(ctx context.Context, in *GoodsModelListRequest, opts ...grpc.CallOption) (*GoodsModelListResponse, error) {
	out := new(GoodsModelListResponse)
	err := c.cc.Invoke(ctx, WdtGoodsController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wdtGoodsControllerClient) Retrieve(ctx context.Context, in *GoodsModelRetrieveRequest, opts ...grpc.CallOption) (*GoodsModelResponse, error) {
	out := new(GoodsModelResponse)
	err := c.cc.Invoke(ctx, WdtGoodsController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WdtGoodsControllerServer is the server API for WdtGoodsController service.
// All implementations must embed UnimplementedWdtGoodsControllerServer
// for forward compatibility
type WdtGoodsControllerServer interface {
	List(context.Context, *GoodsModelListRequest) (*GoodsModelListResponse, error)
	Retrieve(context.Context, *GoodsModelRetrieveRequest) (*GoodsModelResponse, error)
	mustEmbedUnimplementedWdtGoodsControllerServer()
}

// UnimplementedWdtGoodsControllerServer must be embedded to have forward compatible implementations.
type UnimplementedWdtGoodsControllerServer struct {
}

func (UnimplementedWdtGoodsControllerServer) List(context.Context, *GoodsModelListRequest) (*GoodsModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWdtGoodsControllerServer) Retrieve(context.Context, *GoodsModelRetrieveRequest) (*GoodsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedWdtGoodsControllerServer) mustEmbedUnimplementedWdtGoodsControllerServer() {}

// UnsafeWdtGoodsControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WdtGoodsControllerServer will
// result in compilation errors.
type UnsafeWdtGoodsControllerServer interface {
	mustEmbedUnimplementedWdtGoodsControllerServer()
}

func RegisterWdtGoodsControllerServer(s grpc.ServiceRegistrar, srv WdtGoodsControllerServer) {
	s.RegisterService(&WdtGoodsController_ServiceDesc, srv)
}

func _WdtGoodsController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WdtGoodsControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WdtGoodsController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WdtGoodsControllerServer).List(ctx, req.(*GoodsModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WdtGoodsController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsModelRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WdtGoodsControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WdtGoodsController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WdtGoodsControllerServer).Retrieve(ctx, req.(*GoodsModelRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WdtGoodsController_ServiceDesc is the grpc.ServiceDesc for WdtGoodsController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WdtGoodsController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.goods_ito.WdtGoodsController",
	HandlerType: (*WdtGoodsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _WdtGoodsController_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _WdtGoodsController_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods_ito.proto",
}
