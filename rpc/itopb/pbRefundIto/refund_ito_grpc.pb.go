// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: refund_ito.proto

package pbRefundIto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CtmItoRefundController_Create_FullMethodName                   = "/customer_service.customer_ito.CtmItoRefundController/Create"
	CtmItoRefundController_CreateObjectAfterSales_FullMethodName   = "/customer_service.customer_ito.CtmItoRefundController/CreateObjectAfterSales"
	CtmItoRefundController_CreateRefundDeliver_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/CreateRefundDeliver"
	CtmItoRefundController_CreateRefundInvoice_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/CreateRefundInvoice"
	CtmItoRefundController_CreateRefundRefund_FullMethodName       = "/customer_service.customer_ito.CtmItoRefundController/CreateRefundRefund"
	CtmItoRefundController_CreateRefundReturn_FullMethodName       = "/customer_service.customer_ito.CtmItoRefundController/CreateRefundReturn"
	CtmItoRefundController_CreateRefundStockIn_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/CreateRefundStockIn"
	CtmItoRefundController_CreateRefundStockOut_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/CreateRefundStockOut"
	CtmItoRefundController_Destroy_FullMethodName                  = "/customer_service.customer_ito.CtmItoRefundController/Destroy"
	CtmItoRefundController_DestroyObjectAfterSales_FullMethodName  = "/customer_service.customer_ito.CtmItoRefundController/DestroyObjectAfterSales"
	CtmItoRefundController_DestroyRefundDeliver_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/DestroyRefundDeliver"
	CtmItoRefundController_DestroyRefundInvoice_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/DestroyRefundInvoice"
	CtmItoRefundController_DestroyRefundRefund_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/DestroyRefundRefund"
	CtmItoRefundController_DestroyRefundReturn_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/DestroyRefundReturn"
	CtmItoRefundController_DestroyRefundStockIn_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/DestroyRefundStockIn"
	CtmItoRefundController_DestroyRefundStockOut_FullMethodName    = "/customer_service.customer_ito.CtmItoRefundController/DestroyRefundStockOut"
	CtmItoRefundController_List_FullMethodName                     = "/customer_service.customer_ito.CtmItoRefundController/List"
	CtmItoRefundController_ListObjectAfterSales_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/ListObjectAfterSales"
	CtmItoRefundController_ListRefundDeliver_FullMethodName        = "/customer_service.customer_ito.CtmItoRefundController/ListRefundDeliver"
	CtmItoRefundController_ListRefundInvoice_FullMethodName        = "/customer_service.customer_ito.CtmItoRefundController/ListRefundInvoice"
	CtmItoRefundController_ListRefundRefund_FullMethodName         = "/customer_service.customer_ito.CtmItoRefundController/ListRefundRefund"
	CtmItoRefundController_ListRefundReturn_FullMethodName         = "/customer_service.customer_ito.CtmItoRefundController/ListRefundReturn"
	CtmItoRefundController_ListRefundStockIn_FullMethodName        = "/customer_service.customer_ito.CtmItoRefundController/ListRefundStockIn"
	CtmItoRefundController_ListRefundStockOut_FullMethodName       = "/customer_service.customer_ito.CtmItoRefundController/ListRefundStockOut"
	CtmItoRefundController_NextNoRefundRefund_FullMethodName       = "/customer_service.customer_ito.CtmItoRefundController/NextNoRefundRefund"
	CtmItoRefundController_PartialUpdate_FullMethodName            = "/customer_service.customer_ito.CtmItoRefundController/PartialUpdate"
	CtmItoRefundController_RefundNextRid_FullMethodName            = "/customer_service.customer_ito.CtmItoRefundController/RefundNextRid"
	CtmItoRefundController_RefundOptions_FullMethodName            = "/customer_service.customer_ito.CtmItoRefundController/RefundOptions"
	CtmItoRefundController_RefundStatusCount_FullMethodName        = "/customer_service.customer_ito.CtmItoRefundController/RefundStatusCount"
	CtmItoRefundController_Retrieve_FullMethodName                 = "/customer_service.customer_ito.CtmItoRefundController/Retrieve"
	CtmItoRefundController_RetrieveObjectAfterSales_FullMethodName = "/customer_service.customer_ito.CtmItoRefundController/RetrieveObjectAfterSales"
	CtmItoRefundController_RetrieveRefundDeliver_FullMethodName    = "/customer_service.customer_ito.CtmItoRefundController/RetrieveRefundDeliver"
	CtmItoRefundController_RetrieveRefundInvoice_FullMethodName    = "/customer_service.customer_ito.CtmItoRefundController/RetrieveRefundInvoice"
	CtmItoRefundController_RetrieveRefundRefund_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/RetrieveRefundRefund"
	CtmItoRefundController_RetrieveRefundReturn_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/RetrieveRefundReturn"
	CtmItoRefundController_RetrieveRefundStockIn_FullMethodName    = "/customer_service.customer_ito.CtmItoRefundController/RetrieveRefundStockIn"
	CtmItoRefundController_RetrieveRefundStockOut_FullMethodName   = "/customer_service.customer_ito.CtmItoRefundController/RetrieveRefundStockOut"
	CtmItoRefundController_Update_FullMethodName                   = "/customer_service.customer_ito.CtmItoRefundController/Update"
	CtmItoRefundController_UpdateObjectAfterSales_FullMethodName   = "/customer_service.customer_ito.CtmItoRefundController/UpdateObjectAfterSales"
	CtmItoRefundController_UpdateRefundDeliver_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/UpdateRefundDeliver"
	CtmItoRefundController_UpdateRefundInvoice_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/UpdateRefundInvoice"
	CtmItoRefundController_UpdateRefundRefund_FullMethodName       = "/customer_service.customer_ito.CtmItoRefundController/UpdateRefundRefund"
	CtmItoRefundController_UpdateRefundReturn_FullMethodName       = "/customer_service.customer_ito.CtmItoRefundController/UpdateRefundReturn"
	CtmItoRefundController_UpdateRefundStockIn_FullMethodName      = "/customer_service.customer_ito.CtmItoRefundController/UpdateRefundStockIn"
	CtmItoRefundController_UpdateRefundStockOut_FullMethodName     = "/customer_service.customer_ito.CtmItoRefundController/UpdateRefundStockOut"
)

// CtmItoRefundControllerClient is the client API for CtmItoRefundController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CtmItoRefundControllerClient interface {
	Create(ctx context.Context, in *CtmRefundRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error)
	CreateObjectAfterSales(ctx context.Context, in *CreateObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesResponse, error)
	CreateRefundDeliver(ctx context.Context, in *CreateRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverResponse, error)
	CreateRefundInvoice(ctx context.Context, in *CreateRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error)
	CreateRefundRefund(ctx context.Context, in *CreateRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundResponse, error)
	CreateRefundReturn(ctx context.Context, in *CreateRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnResponse, error)
	CreateRefundStockIn(ctx context.Context, in *CreateRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInResponse, error)
	CreateRefundStockOut(ctx context.Context, in *CreateRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutResponse, error)
	Destroy(ctx context.Context, in *CtmRefundDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyObjectAfterSales(ctx context.Context, in *DestroyObjectAfterSalesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyRefundDeliver(ctx context.Context, in *DestroyRefundDeliverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyRefundInvoice(ctx context.Context, in *DestroyRefundInvoiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyRefundRefund(ctx context.Context, in *DestroyRefundRefundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyRefundReturn(ctx context.Context, in *DestroyRefundReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyRefundStockIn(ctx context.Context, in *DestroyRefundStockInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyRefundStockOut(ctx context.Context, in *DestroyRefundStockOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *CtmRefundListRequest, opts ...grpc.CallOption) (*CtmRefundListResponse, error)
	ListObjectAfterSales(ctx context.Context, in *ListObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesListResponse, error)
	ListRefundDeliver(ctx context.Context, in *ListRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverListResponse, error)
	ListRefundInvoice(ctx context.Context, in *ListRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceListResponse, error)
	ListRefundRefund(ctx context.Context, in *ListRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundListResponse, error)
	ListRefundReturn(ctx context.Context, in *ListRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnListResponse, error)
	ListRefundStockIn(ctx context.Context, in *ListRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInListResponse, error)
	ListRefundStockOut(ctx context.Context, in *ListRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutListResponse, error)
	NextNoRefundRefund(ctx context.Context, in *NextNoRefundRefundRequest, opts ...grpc.CallOption) (*NextNoRefundRefundResponse, error)
	PartialUpdate(ctx context.Context, in *CtmRefundPartialUpdateRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error)
	RefundNextRid(ctx context.Context, in *RefundNextRidRequest, opts ...grpc.CallOption) (*RefundNextRidResponse, error)
	RefundOptions(ctx context.Context, in *RefundOptionsRequest, opts ...grpc.CallOption) (*RefundOptionsResponse, error)
	RefundStatusCount(ctx context.Context, in *RefundStatusCountRequest, opts ...grpc.CallOption) (*RefundStatusCountListResponse, error)
	Retrieve(ctx context.Context, in *CtmRefundRetrieveRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error)
	RetrieveObjectAfterSales(ctx context.Context, in *RetrieveObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesResponse, error)
	RetrieveRefundDeliver(ctx context.Context, in *RetrieveRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverResponse, error)
	RetrieveRefundInvoice(ctx context.Context, in *RetrieveRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error)
	RetrieveRefundRefund(ctx context.Context, in *RetrieveRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundResponse, error)
	RetrieveRefundReturn(ctx context.Context, in *RetrieveRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnResponse, error)
	RetrieveRefundStockIn(ctx context.Context, in *RetrieveRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInResponse, error)
	RetrieveRefundStockOut(ctx context.Context, in *RetrieveRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutResponse, error)
	Update(ctx context.Context, in *CtmRefundRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error)
	UpdateObjectAfterSales(ctx context.Context, in *UpdateObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesResponse, error)
	UpdateRefundDeliver(ctx context.Context, in *UpdateRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverResponse, error)
	UpdateRefundInvoice(ctx context.Context, in *UpdateRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error)
	UpdateRefundRefund(ctx context.Context, in *UpdateRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundResponse, error)
	UpdateRefundReturn(ctx context.Context, in *UpdateRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnResponse, error)
	UpdateRefundStockIn(ctx context.Context, in *UpdateRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInResponse, error)
	UpdateRefundStockOut(ctx context.Context, in *UpdateRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutResponse, error)
}

type ctmItoRefundControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCtmItoRefundControllerClient(cc grpc.ClientConnInterface) CtmItoRefundControllerClient {
	return &ctmItoRefundControllerClient{cc}
}

func (c *ctmItoRefundControllerClient) Create(ctx context.Context, in *CtmRefundRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error) {
	out := new(CtmRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) CreateObjectAfterSales(ctx context.Context, in *CreateObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesResponse, error) {
	out := new(ObjectAfterSalesResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_CreateObjectAfterSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) CreateRefundDeliver(ctx context.Context, in *CreateRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverResponse, error) {
	out := new(RefundDeliverResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_CreateRefundDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) CreateRefundInvoice(ctx context.Context, in *CreateRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error) {
	out := new(RefundInvoiceResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_CreateRefundInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) CreateRefundRefund(ctx context.Context, in *CreateRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundResponse, error) {
	out := new(RefundRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_CreateRefundRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) CreateRefundReturn(ctx context.Context, in *CreateRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnResponse, error) {
	out := new(RefundReturnResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_CreateRefundReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) CreateRefundStockIn(ctx context.Context, in *CreateRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInResponse, error) {
	out := new(RefundStockInResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_CreateRefundStockIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) CreateRefundStockOut(ctx context.Context, in *CreateRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutResponse, error) {
	out := new(RefundStockOutResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_CreateRefundStockOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) Destroy(ctx context.Context, in *CtmRefundDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) DestroyObjectAfterSales(ctx context.Context, in *DestroyObjectAfterSalesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_DestroyObjectAfterSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) DestroyRefundDeliver(ctx context.Context, in *DestroyRefundDeliverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_DestroyRefundDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) DestroyRefundInvoice(ctx context.Context, in *DestroyRefundInvoiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_DestroyRefundInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) DestroyRefundRefund(ctx context.Context, in *DestroyRefundRefundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_DestroyRefundRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) DestroyRefundReturn(ctx context.Context, in *DestroyRefundReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_DestroyRefundReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) DestroyRefundStockIn(ctx context.Context, in *DestroyRefundStockInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_DestroyRefundStockIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) DestroyRefundStockOut(ctx context.Context, in *DestroyRefundStockOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CtmItoRefundController_DestroyRefundStockOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) List(ctx context.Context, in *CtmRefundListRequest, opts ...grpc.CallOption) (*CtmRefundListResponse, error) {
	out := new(CtmRefundListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) ListObjectAfterSales(ctx context.Context, in *ListObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesListResponse, error) {
	out := new(ObjectAfterSalesListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_ListObjectAfterSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) ListRefundDeliver(ctx context.Context, in *ListRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverListResponse, error) {
	out := new(RefundDeliverListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_ListRefundDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) ListRefundInvoice(ctx context.Context, in *ListRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceListResponse, error) {
	out := new(RefundInvoiceListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_ListRefundInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) ListRefundRefund(ctx context.Context, in *ListRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundListResponse, error) {
	out := new(RefundRefundListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_ListRefundRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) ListRefundReturn(ctx context.Context, in *ListRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnListResponse, error) {
	out := new(RefundReturnListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_ListRefundReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) ListRefundStockIn(ctx context.Context, in *ListRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInListResponse, error) {
	out := new(RefundStockInListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_ListRefundStockIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) ListRefundStockOut(ctx context.Context, in *ListRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutListResponse, error) {
	out := new(RefundStockOutListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_ListRefundStockOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) NextNoRefundRefund(ctx context.Context, in *NextNoRefundRefundRequest, opts ...grpc.CallOption) (*NextNoRefundRefundResponse, error) {
	out := new(NextNoRefundRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_NextNoRefundRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) PartialUpdate(ctx context.Context, in *CtmRefundPartialUpdateRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error) {
	out := new(CtmRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RefundNextRid(ctx context.Context, in *RefundNextRidRequest, opts ...grpc.CallOption) (*RefundNextRidResponse, error) {
	out := new(RefundNextRidResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RefundNextRid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RefundOptions(ctx context.Context, in *RefundOptionsRequest, opts ...grpc.CallOption) (*RefundOptionsResponse, error) {
	out := new(RefundOptionsResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RefundOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RefundStatusCount(ctx context.Context, in *RefundStatusCountRequest, opts ...grpc.CallOption) (*RefundStatusCountListResponse, error) {
	out := new(RefundStatusCountListResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RefundStatusCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) Retrieve(ctx context.Context, in *CtmRefundRetrieveRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error) {
	out := new(CtmRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RetrieveObjectAfterSales(ctx context.Context, in *RetrieveObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesResponse, error) {
	out := new(ObjectAfterSalesResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RetrieveObjectAfterSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RetrieveRefundDeliver(ctx context.Context, in *RetrieveRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverResponse, error) {
	out := new(RefundDeliverResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RetrieveRefundDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RetrieveRefundInvoice(ctx context.Context, in *RetrieveRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error) {
	out := new(RefundInvoiceResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RetrieveRefundInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RetrieveRefundRefund(ctx context.Context, in *RetrieveRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundResponse, error) {
	out := new(RefundRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RetrieveRefundRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RetrieveRefundReturn(ctx context.Context, in *RetrieveRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnResponse, error) {
	out := new(RefundReturnResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RetrieveRefundReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RetrieveRefundStockIn(ctx context.Context, in *RetrieveRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInResponse, error) {
	out := new(RefundStockInResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RetrieveRefundStockIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) RetrieveRefundStockOut(ctx context.Context, in *RetrieveRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutResponse, error) {
	out := new(RefundStockOutResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_RetrieveRefundStockOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) Update(ctx context.Context, in *CtmRefundRequest, opts ...grpc.CallOption) (*CtmRefundResponse, error) {
	out := new(CtmRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) UpdateObjectAfterSales(ctx context.Context, in *UpdateObjectAfterSalesRequest, opts ...grpc.CallOption) (*ObjectAfterSalesResponse, error) {
	out := new(ObjectAfterSalesResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_UpdateObjectAfterSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) UpdateRefundDeliver(ctx context.Context, in *UpdateRefundDeliverRequest, opts ...grpc.CallOption) (*RefundDeliverResponse, error) {
	out := new(RefundDeliverResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_UpdateRefundDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) UpdateRefundInvoice(ctx context.Context, in *UpdateRefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error) {
	out := new(RefundInvoiceResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_UpdateRefundInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) UpdateRefundRefund(ctx context.Context, in *UpdateRefundRefundRequest, opts ...grpc.CallOption) (*RefundRefundResponse, error) {
	out := new(RefundRefundResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_UpdateRefundRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) UpdateRefundReturn(ctx context.Context, in *UpdateRefundReturnRequest, opts ...grpc.CallOption) (*RefundReturnResponse, error) {
	out := new(RefundReturnResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_UpdateRefundReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) UpdateRefundStockIn(ctx context.Context, in *UpdateRefundStockInRequest, opts ...grpc.CallOption) (*RefundStockInResponse, error) {
	out := new(RefundStockInResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_UpdateRefundStockIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoRefundControllerClient) UpdateRefundStockOut(ctx context.Context, in *UpdateRefundStockOutRequest, opts ...grpc.CallOption) (*RefundStockOutResponse, error) {
	out := new(RefundStockOutResponse)
	err := c.cc.Invoke(ctx, CtmItoRefundController_UpdateRefundStockOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CtmItoRefundControllerServer is the server API for CtmItoRefundController service.
// All implementations must embed UnimplementedCtmItoRefundControllerServer
// for forward compatibility
type CtmItoRefundControllerServer interface {
	Create(context.Context, *CtmRefundRequest) (*CtmRefundResponse, error)
	CreateObjectAfterSales(context.Context, *CreateObjectAfterSalesRequest) (*ObjectAfterSalesResponse, error)
	CreateRefundDeliver(context.Context, *CreateRefundDeliverRequest) (*RefundDeliverResponse, error)
	CreateRefundInvoice(context.Context, *CreateRefundInvoiceRequest) (*RefundInvoiceResponse, error)
	CreateRefundRefund(context.Context, *CreateRefundRefundRequest) (*RefundRefundResponse, error)
	CreateRefundReturn(context.Context, *CreateRefundReturnRequest) (*RefundReturnResponse, error)
	CreateRefundStockIn(context.Context, *CreateRefundStockInRequest) (*RefundStockInResponse, error)
	CreateRefundStockOut(context.Context, *CreateRefundStockOutRequest) (*RefundStockOutResponse, error)
	Destroy(context.Context, *CtmRefundDestroyRequest) (*emptypb.Empty, error)
	DestroyObjectAfterSales(context.Context, *DestroyObjectAfterSalesRequest) (*emptypb.Empty, error)
	DestroyRefundDeliver(context.Context, *DestroyRefundDeliverRequest) (*emptypb.Empty, error)
	DestroyRefundInvoice(context.Context, *DestroyRefundInvoiceRequest) (*emptypb.Empty, error)
	DestroyRefundRefund(context.Context, *DestroyRefundRefundRequest) (*emptypb.Empty, error)
	DestroyRefundReturn(context.Context, *DestroyRefundReturnRequest) (*emptypb.Empty, error)
	DestroyRefundStockIn(context.Context, *DestroyRefundStockInRequest) (*emptypb.Empty, error)
	DestroyRefundStockOut(context.Context, *DestroyRefundStockOutRequest) (*emptypb.Empty, error)
	List(context.Context, *CtmRefundListRequest) (*CtmRefundListResponse, error)
	ListObjectAfterSales(context.Context, *ListObjectAfterSalesRequest) (*ObjectAfterSalesListResponse, error)
	ListRefundDeliver(context.Context, *ListRefundDeliverRequest) (*RefundDeliverListResponse, error)
	ListRefundInvoice(context.Context, *ListRefundInvoiceRequest) (*RefundInvoiceListResponse, error)
	ListRefundRefund(context.Context, *ListRefundRefundRequest) (*RefundRefundListResponse, error)
	ListRefundReturn(context.Context, *ListRefundReturnRequest) (*RefundReturnListResponse, error)
	ListRefundStockIn(context.Context, *ListRefundStockInRequest) (*RefundStockInListResponse, error)
	ListRefundStockOut(context.Context, *ListRefundStockOutRequest) (*RefundStockOutListResponse, error)
	NextNoRefundRefund(context.Context, *NextNoRefundRefundRequest) (*NextNoRefundRefundResponse, error)
	PartialUpdate(context.Context, *CtmRefundPartialUpdateRequest) (*CtmRefundResponse, error)
	RefundNextRid(context.Context, *RefundNextRidRequest) (*RefundNextRidResponse, error)
	RefundOptions(context.Context, *RefundOptionsRequest) (*RefundOptionsResponse, error)
	RefundStatusCount(context.Context, *RefundStatusCountRequest) (*RefundStatusCountListResponse, error)
	Retrieve(context.Context, *CtmRefundRetrieveRequest) (*CtmRefundResponse, error)
	RetrieveObjectAfterSales(context.Context, *RetrieveObjectAfterSalesRequest) (*ObjectAfterSalesResponse, error)
	RetrieveRefundDeliver(context.Context, *RetrieveRefundDeliverRequest) (*RefundDeliverResponse, error)
	RetrieveRefundInvoice(context.Context, *RetrieveRefundInvoiceRequest) (*RefundInvoiceResponse, error)
	RetrieveRefundRefund(context.Context, *RetrieveRefundRefundRequest) (*RefundRefundResponse, error)
	RetrieveRefundReturn(context.Context, *RetrieveRefundReturnRequest) (*RefundReturnResponse, error)
	RetrieveRefundStockIn(context.Context, *RetrieveRefundStockInRequest) (*RefundStockInResponse, error)
	RetrieveRefundStockOut(context.Context, *RetrieveRefundStockOutRequest) (*RefundStockOutResponse, error)
	Update(context.Context, *CtmRefundRequest) (*CtmRefundResponse, error)
	UpdateObjectAfterSales(context.Context, *UpdateObjectAfterSalesRequest) (*ObjectAfterSalesResponse, error)
	UpdateRefundDeliver(context.Context, *UpdateRefundDeliverRequest) (*RefundDeliverResponse, error)
	UpdateRefundInvoice(context.Context, *UpdateRefundInvoiceRequest) (*RefundInvoiceResponse, error)
	UpdateRefundRefund(context.Context, *UpdateRefundRefundRequest) (*RefundRefundResponse, error)
	UpdateRefundReturn(context.Context, *UpdateRefundReturnRequest) (*RefundReturnResponse, error)
	UpdateRefundStockIn(context.Context, *UpdateRefundStockInRequest) (*RefundStockInResponse, error)
	UpdateRefundStockOut(context.Context, *UpdateRefundStockOutRequest) (*RefundStockOutResponse, error)
	mustEmbedUnimplementedCtmItoRefundControllerServer()
}

// UnimplementedCtmItoRefundControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCtmItoRefundControllerServer struct {
}

func (UnimplementedCtmItoRefundControllerServer) Create(context.Context, *CtmRefundRequest) (*CtmRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) CreateObjectAfterSales(context.Context, *CreateObjectAfterSalesRequest) (*ObjectAfterSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectAfterSales not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) CreateRefundDeliver(context.Context, *CreateRefundDeliverRequest) (*RefundDeliverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundDeliver not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) CreateRefundInvoice(context.Context, *CreateRefundInvoiceRequest) (*RefundInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundInvoice not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) CreateRefundRefund(context.Context, *CreateRefundRefundRequest) (*RefundRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundRefund not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) CreateRefundReturn(context.Context, *CreateRefundReturnRequest) (*RefundReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundReturn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) CreateRefundStockIn(context.Context, *CreateRefundStockInRequest) (*RefundStockInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundStockIn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) CreateRefundStockOut(context.Context, *CreateRefundStockOutRequest) (*RefundStockOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundStockOut not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) Destroy(context.Context, *CtmRefundDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) DestroyObjectAfterSales(context.Context, *DestroyObjectAfterSalesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyObjectAfterSales not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) DestroyRefundDeliver(context.Context, *DestroyRefundDeliverRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefundDeliver not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) DestroyRefundInvoice(context.Context, *DestroyRefundInvoiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefundInvoice not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) DestroyRefundRefund(context.Context, *DestroyRefundRefundRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefundRefund not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) DestroyRefundReturn(context.Context, *DestroyRefundReturnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefundReturn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) DestroyRefundStockIn(context.Context, *DestroyRefundStockInRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefundStockIn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) DestroyRefundStockOut(context.Context, *DestroyRefundStockOutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefundStockOut not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) List(context.Context, *CtmRefundListRequest) (*CtmRefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) ListObjectAfterSales(context.Context, *ListObjectAfterSalesRequest) (*ObjectAfterSalesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectAfterSales not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) ListRefundDeliver(context.Context, *ListRefundDeliverRequest) (*RefundDeliverListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundDeliver not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) ListRefundInvoice(context.Context, *ListRefundInvoiceRequest) (*RefundInvoiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundInvoice not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) ListRefundRefund(context.Context, *ListRefundRefundRequest) (*RefundRefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundRefund not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) ListRefundReturn(context.Context, *ListRefundReturnRequest) (*RefundReturnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundReturn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) ListRefundStockIn(context.Context, *ListRefundStockInRequest) (*RefundStockInListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundStockIn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) ListRefundStockOut(context.Context, *ListRefundStockOutRequest) (*RefundStockOutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundStockOut not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) NextNoRefundRefund(context.Context, *NextNoRefundRefundRequest) (*NextNoRefundRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextNoRefundRefund not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) PartialUpdate(context.Context, *CtmRefundPartialUpdateRequest) (*CtmRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RefundNextRid(context.Context, *RefundNextRidRequest) (*RefundNextRidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundNextRid not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RefundOptions(context.Context, *RefundOptionsRequest) (*RefundOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundOptions not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RefundStatusCount(context.Context, *RefundStatusCountRequest) (*RefundStatusCountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundStatusCount not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) Retrieve(context.Context, *CtmRefundRetrieveRequest) (*CtmRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RetrieveObjectAfterSales(context.Context, *RetrieveObjectAfterSalesRequest) (*ObjectAfterSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveObjectAfterSales not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RetrieveRefundDeliver(context.Context, *RetrieveRefundDeliverRequest) (*RefundDeliverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefundDeliver not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RetrieveRefundInvoice(context.Context, *RetrieveRefundInvoiceRequest) (*RefundInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefundInvoice not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RetrieveRefundRefund(context.Context, *RetrieveRefundRefundRequest) (*RefundRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefundRefund not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RetrieveRefundReturn(context.Context, *RetrieveRefundReturnRequest) (*RefundReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefundReturn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RetrieveRefundStockIn(context.Context, *RetrieveRefundStockInRequest) (*RefundStockInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefundStockIn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) RetrieveRefundStockOut(context.Context, *RetrieveRefundStockOutRequest) (*RefundStockOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefundStockOut not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) Update(context.Context, *CtmRefundRequest) (*CtmRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) UpdateObjectAfterSales(context.Context, *UpdateObjectAfterSalesRequest) (*ObjectAfterSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectAfterSales not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) UpdateRefundDeliver(context.Context, *UpdateRefundDeliverRequest) (*RefundDeliverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundDeliver not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) UpdateRefundInvoice(context.Context, *UpdateRefundInvoiceRequest) (*RefundInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundInvoice not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) UpdateRefundRefund(context.Context, *UpdateRefundRefundRequest) (*RefundRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundRefund not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) UpdateRefundReturn(context.Context, *UpdateRefundReturnRequest) (*RefundReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundReturn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) UpdateRefundStockIn(context.Context, *UpdateRefundStockInRequest) (*RefundStockInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundStockIn not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) UpdateRefundStockOut(context.Context, *UpdateRefundStockOutRequest) (*RefundStockOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundStockOut not implemented")
}
func (UnimplementedCtmItoRefundControllerServer) mustEmbedUnimplementedCtmItoRefundControllerServer() {
}

// UnsafeCtmItoRefundControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CtmItoRefundControllerServer will
// result in compilation errors.
type UnsafeCtmItoRefundControllerServer interface {
	mustEmbedUnimplementedCtmItoRefundControllerServer()
}

func RegisterCtmItoRefundControllerServer(s grpc.ServiceRegistrar, srv CtmItoRefundControllerServer) {
	s.RegisterService(&CtmItoRefundController_ServiceDesc, srv)
}

func _CtmItoRefundController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).Create(ctx, req.(*CtmRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_CreateObjectAfterSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectAfterSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).CreateObjectAfterSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_CreateObjectAfterSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).CreateObjectAfterSales(ctx, req.(*CreateObjectAfterSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_CreateRefundDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).CreateRefundDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_CreateRefundDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).CreateRefundDeliver(ctx, req.(*CreateRefundDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_CreateRefundInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).CreateRefundInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_CreateRefundInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).CreateRefundInvoice(ctx, req.(*CreateRefundInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_CreateRefundRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).CreateRefundRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_CreateRefundRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).CreateRefundRefund(ctx, req.(*CreateRefundRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_CreateRefundReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).CreateRefundReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_CreateRefundReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).CreateRefundReturn(ctx, req.(*CreateRefundReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_CreateRefundStockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundStockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).CreateRefundStockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_CreateRefundStockIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).CreateRefundStockIn(ctx, req.(*CreateRefundStockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_CreateRefundStockOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundStockOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).CreateRefundStockOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_CreateRefundStockOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).CreateRefundStockOut(ctx, req.(*CreateRefundStockOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).Destroy(ctx, req.(*CtmRefundDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_DestroyObjectAfterSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyObjectAfterSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).DestroyObjectAfterSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_DestroyObjectAfterSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).DestroyObjectAfterSales(ctx, req.(*DestroyObjectAfterSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_DestroyRefundDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRefundDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).DestroyRefundDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_DestroyRefundDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).DestroyRefundDeliver(ctx, req.(*DestroyRefundDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_DestroyRefundInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRefundInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).DestroyRefundInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_DestroyRefundInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).DestroyRefundInvoice(ctx, req.(*DestroyRefundInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_DestroyRefundRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRefundRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).DestroyRefundRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_DestroyRefundRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).DestroyRefundRefund(ctx, req.(*DestroyRefundRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_DestroyRefundReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRefundReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).DestroyRefundReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_DestroyRefundReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).DestroyRefundReturn(ctx, req.(*DestroyRefundReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_DestroyRefundStockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRefundStockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).DestroyRefundStockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_DestroyRefundStockIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).DestroyRefundStockIn(ctx, req.(*DestroyRefundStockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_DestroyRefundStockOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRefundStockOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).DestroyRefundStockOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_DestroyRefundStockOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).DestroyRefundStockOut(ctx, req.(*DestroyRefundStockOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).List(ctx, req.(*CtmRefundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_ListObjectAfterSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectAfterSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).ListObjectAfterSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_ListObjectAfterSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).ListObjectAfterSales(ctx, req.(*ListObjectAfterSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_ListRefundDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).ListRefundDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_ListRefundDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).ListRefundDeliver(ctx, req.(*ListRefundDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_ListRefundInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).ListRefundInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_ListRefundInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).ListRefundInvoice(ctx, req.(*ListRefundInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_ListRefundRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).ListRefundRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_ListRefundRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).ListRefundRefund(ctx, req.(*ListRefundRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_ListRefundReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).ListRefundReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_ListRefundReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).ListRefundReturn(ctx, req.(*ListRefundReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_ListRefundStockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundStockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).ListRefundStockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_ListRefundStockIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).ListRefundStockIn(ctx, req.(*ListRefundStockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_ListRefundStockOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundStockOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).ListRefundStockOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_ListRefundStockOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).ListRefundStockOut(ctx, req.(*ListRefundStockOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_NextNoRefundRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextNoRefundRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).NextNoRefundRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_NextNoRefundRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).NextNoRefundRefund(ctx, req.(*NextNoRefundRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).PartialUpdate(ctx, req.(*CtmRefundPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RefundNextRid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundNextRidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RefundNextRid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RefundNextRid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RefundNextRid(ctx, req.(*RefundNextRidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RefundOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RefundOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RefundOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RefundOptions(ctx, req.(*RefundOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RefundStatusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundStatusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RefundStatusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RefundStatusCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RefundStatusCount(ctx, req.(*RefundStatusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).Retrieve(ctx, req.(*CtmRefundRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RetrieveObjectAfterSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveObjectAfterSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RetrieveObjectAfterSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RetrieveObjectAfterSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RetrieveObjectAfterSales(ctx, req.(*RetrieveObjectAfterSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RetrieveRefundDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRefundDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RetrieveRefundDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundDeliver(ctx, req.(*RetrieveRefundDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RetrieveRefundInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRefundInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RetrieveRefundInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundInvoice(ctx, req.(*RetrieveRefundInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RetrieveRefundRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRefundRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RetrieveRefundRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundRefund(ctx, req.(*RetrieveRefundRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RetrieveRefundReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRefundReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RetrieveRefundReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundReturn(ctx, req.(*RetrieveRefundReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RetrieveRefundStockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRefundStockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundStockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RetrieveRefundStockIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundStockIn(ctx, req.(*RetrieveRefundStockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_RetrieveRefundStockOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRefundStockOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundStockOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_RetrieveRefundStockOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).RetrieveRefundStockOut(ctx, req.(*RetrieveRefundStockOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).Update(ctx, req.(*CtmRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_UpdateObjectAfterSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectAfterSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).UpdateObjectAfterSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_UpdateObjectAfterSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).UpdateObjectAfterSales(ctx, req.(*UpdateObjectAfterSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_UpdateRefundDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).UpdateRefundDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_UpdateRefundDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).UpdateRefundDeliver(ctx, req.(*UpdateRefundDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_UpdateRefundInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).UpdateRefundInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_UpdateRefundInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).UpdateRefundInvoice(ctx, req.(*UpdateRefundInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_UpdateRefundRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).UpdateRefundRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_UpdateRefundRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).UpdateRefundRefund(ctx, req.(*UpdateRefundRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_UpdateRefundReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).UpdateRefundReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_UpdateRefundReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).UpdateRefundReturn(ctx, req.(*UpdateRefundReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_UpdateRefundStockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundStockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).UpdateRefundStockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_UpdateRefundStockIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).UpdateRefundStockIn(ctx, req.(*UpdateRefundStockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoRefundController_UpdateRefundStockOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundStockOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoRefundControllerServer).UpdateRefundStockOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoRefundController_UpdateRefundStockOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoRefundControllerServer).UpdateRefundStockOut(ctx, req.(*UpdateRefundStockOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CtmItoRefundController_ServiceDesc is the grpc.ServiceDesc for CtmItoRefundController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CtmItoRefundController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer_service.customer_ito.CtmItoRefundController",
	HandlerType: (*CtmItoRefundControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CtmItoRefundController_Create_Handler,
		},
		{
			MethodName: "CreateObjectAfterSales",
			Handler:    _CtmItoRefundController_CreateObjectAfterSales_Handler,
		},
		{
			MethodName: "CreateRefundDeliver",
			Handler:    _CtmItoRefundController_CreateRefundDeliver_Handler,
		},
		{
			MethodName: "CreateRefundInvoice",
			Handler:    _CtmItoRefundController_CreateRefundInvoice_Handler,
		},
		{
			MethodName: "CreateRefundRefund",
			Handler:    _CtmItoRefundController_CreateRefundRefund_Handler,
		},
		{
			MethodName: "CreateRefundReturn",
			Handler:    _CtmItoRefundController_CreateRefundReturn_Handler,
		},
		{
			MethodName: "CreateRefundStockIn",
			Handler:    _CtmItoRefundController_CreateRefundStockIn_Handler,
		},
		{
			MethodName: "CreateRefundStockOut",
			Handler:    _CtmItoRefundController_CreateRefundStockOut_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CtmItoRefundController_Destroy_Handler,
		},
		{
			MethodName: "DestroyObjectAfterSales",
			Handler:    _CtmItoRefundController_DestroyObjectAfterSales_Handler,
		},
		{
			MethodName: "DestroyRefundDeliver",
			Handler:    _CtmItoRefundController_DestroyRefundDeliver_Handler,
		},
		{
			MethodName: "DestroyRefundInvoice",
			Handler:    _CtmItoRefundController_DestroyRefundInvoice_Handler,
		},
		{
			MethodName: "DestroyRefundRefund",
			Handler:    _CtmItoRefundController_DestroyRefundRefund_Handler,
		},
		{
			MethodName: "DestroyRefundReturn",
			Handler:    _CtmItoRefundController_DestroyRefundReturn_Handler,
		},
		{
			MethodName: "DestroyRefundStockIn",
			Handler:    _CtmItoRefundController_DestroyRefundStockIn_Handler,
		},
		{
			MethodName: "DestroyRefundStockOut",
			Handler:    _CtmItoRefundController_DestroyRefundStockOut_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CtmItoRefundController_List_Handler,
		},
		{
			MethodName: "ListObjectAfterSales",
			Handler:    _CtmItoRefundController_ListObjectAfterSales_Handler,
		},
		{
			MethodName: "ListRefundDeliver",
			Handler:    _CtmItoRefundController_ListRefundDeliver_Handler,
		},
		{
			MethodName: "ListRefundInvoice",
			Handler:    _CtmItoRefundController_ListRefundInvoice_Handler,
		},
		{
			MethodName: "ListRefundRefund",
			Handler:    _CtmItoRefundController_ListRefundRefund_Handler,
		},
		{
			MethodName: "ListRefundReturn",
			Handler:    _CtmItoRefundController_ListRefundReturn_Handler,
		},
		{
			MethodName: "ListRefundStockIn",
			Handler:    _CtmItoRefundController_ListRefundStockIn_Handler,
		},
		{
			MethodName: "ListRefundStockOut",
			Handler:    _CtmItoRefundController_ListRefundStockOut_Handler,
		},
		{
			MethodName: "NextNoRefundRefund",
			Handler:    _CtmItoRefundController_NextNoRefundRefund_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CtmItoRefundController_PartialUpdate_Handler,
		},
		{
			MethodName: "RefundNextRid",
			Handler:    _CtmItoRefundController_RefundNextRid_Handler,
		},
		{
			MethodName: "RefundOptions",
			Handler:    _CtmItoRefundController_RefundOptions_Handler,
		},
		{
			MethodName: "RefundStatusCount",
			Handler:    _CtmItoRefundController_RefundStatusCount_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CtmItoRefundController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveObjectAfterSales",
			Handler:    _CtmItoRefundController_RetrieveObjectAfterSales_Handler,
		},
		{
			MethodName: "RetrieveRefundDeliver",
			Handler:    _CtmItoRefundController_RetrieveRefundDeliver_Handler,
		},
		{
			MethodName: "RetrieveRefundInvoice",
			Handler:    _CtmItoRefundController_RetrieveRefundInvoice_Handler,
		},
		{
			MethodName: "RetrieveRefundRefund",
			Handler:    _CtmItoRefundController_RetrieveRefundRefund_Handler,
		},
		{
			MethodName: "RetrieveRefundReturn",
			Handler:    _CtmItoRefundController_RetrieveRefundReturn_Handler,
		},
		{
			MethodName: "RetrieveRefundStockIn",
			Handler:    _CtmItoRefundController_RetrieveRefundStockIn_Handler,
		},
		{
			MethodName: "RetrieveRefundStockOut",
			Handler:    _CtmItoRefundController_RetrieveRefundStockOut_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CtmItoRefundController_Update_Handler,
		},
		{
			MethodName: "UpdateObjectAfterSales",
			Handler:    _CtmItoRefundController_UpdateObjectAfterSales_Handler,
		},
		{
			MethodName: "UpdateRefundDeliver",
			Handler:    _CtmItoRefundController_UpdateRefundDeliver_Handler,
		},
		{
			MethodName: "UpdateRefundInvoice",
			Handler:    _CtmItoRefundController_UpdateRefundInvoice_Handler,
		},
		{
			MethodName: "UpdateRefundRefund",
			Handler:    _CtmItoRefundController_UpdateRefundRefund_Handler,
		},
		{
			MethodName: "UpdateRefundReturn",
			Handler:    _CtmItoRefundController_UpdateRefundReturn_Handler,
		},
		{
			MethodName: "UpdateRefundStockIn",
			Handler:    _CtmItoRefundController_UpdateRefundStockIn_Handler,
		},
		{
			MethodName: "UpdateRefundStockOut",
			Handler:    _CtmItoRefundController_UpdateRefundStockOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "refund_ito.proto",
}
