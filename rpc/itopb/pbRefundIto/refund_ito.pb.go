// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: refund_ito.proto

package pbRefundIto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BulkCreateRefundCompensateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BulkCreateRefundCompensateRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BulkCreateRefundCompensateListRequest) Reset() {
	*x = BulkCreateRefundCompensateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRefundCompensateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRefundCompensateListRequest) ProtoMessage() {}

func (x *BulkCreateRefundCompensateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRefundCompensateListRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateRefundCompensateListRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{0}
}

func (x *BulkCreateRefundCompensateListRequest) GetResults() []*BulkCreateRefundCompensateRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BulkCreateRefundCompensateListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BulkCreateRefundCompensateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	PrepayId            *string `protobuf:"bytes,3,opt,name=prepay_id,json=prepayId,proto3,oneof" json:"prepay_id,omitempty"`
	PrepayExpired       *string `protobuf:"bytes,4,opt,name=prepay_expired,json=prepayExpired,proto3,oneof" json:"prepay_expired,omitempty"`
	TradeType           *string `protobuf:"bytes,5,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	TradeState          *string `protobuf:"bytes,6,opt,name=trade_state,json=tradeState,proto3,oneof" json:"trade_state,omitempty"`
	TradeStateDesc      *string `protobuf:"bytes,7,opt,name=trade_state_desc,json=tradeStateDesc,proto3,oneof" json:"trade_state_desc,omitempty"`
	TransactionId       *string `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	AppId               *string `protobuf:"bytes,9,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	MchId               *string `protobuf:"bytes,10,opt,name=mch_id,json=mchId,proto3,oneof" json:"mch_id,omitempty"`
	OpenId              string  `protobuf:"bytes,11,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutTradeNo          *string `protobuf:"bytes,12,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	Attach              *string `protobuf:"bytes,13,opt,name=attach,proto3,oneof" json:"attach,omitempty"`
	Total               *int32  `protobuf:"varint,14,opt,name=total,proto3,oneof" json:"total,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,15,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	Currency            *string `protobuf:"bytes,16,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	BankType            *string `protobuf:"bytes,17,opt,name=bank_type,json=bankType,proto3,oneof" json:"bank_type,omitempty"`
	SuccessTime         *string `protobuf:"bytes,18,opt,name=success_time,json=successTime,proto3,oneof" json:"success_time,omitempty"`
	OutRefundNo         *string `protobuf:"bytes,19,opt,name=out_refund_no,json=outRefundNo,proto3,oneof" json:"out_refund_no,omitempty"`
	Reason              *string `protobuf:"bytes,20,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Refund              *int32  `protobuf:"varint,21,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,22,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,23,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,24,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,25,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	RefundFee           *int32  `protobuf:"varint,26,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	RefundId            *string `protobuf:"bytes,27,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,28,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,29,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	Status              *string `protobuf:"bytes,30,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CancelReasons       *string `protobuf:"bytes,31,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmOrder            *int64  `protobuf:"varint,32,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund           *int64  `protobuf:"varint,33,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmService          *int64  `protobuf:"varint,34,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *BulkCreateRefundCompensateRequest) Reset() {
	*x = BulkCreateRefundCompensateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRefundCompensateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRefundCompensateRequest) ProtoMessage() {}

func (x *BulkCreateRefundCompensateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRefundCompensateRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateRefundCompensateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{1}
}

func (x *BulkCreateRefundCompensateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetPrepayId() string {
	if x != nil && x.PrepayId != nil {
		return *x.PrepayId
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetPrepayExpired() string {
	if x != nil && x.PrepayExpired != nil {
		return *x.PrepayExpired
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetTradeState() string {
	if x != nil && x.TradeState != nil {
		return *x.TradeState
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetTradeStateDesc() string {
	if x != nil && x.TradeStateDesc != nil {
		return *x.TradeStateDesc
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetMchId() string {
	if x != nil && x.MchId != nil {
		return *x.MchId
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetAttach() string {
	if x != nil && x.Attach != nil {
		return *x.Attach
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetSuccessTime() string {
	if x != nil && x.SuccessTime != nil {
		return *x.SuccessTime
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetOutRefundNo() string {
	if x != nil && x.OutRefundNo != nil {
		return *x.OutRefundNo
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *BulkCreateRefundCompensateRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *BulkCreateRefundCompensateRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type BulkCreateRefundDeliverListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BulkCreateRefundDeliverRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BulkCreateRefundDeliverListRequest) Reset() {
	*x = BulkCreateRefundDeliverListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRefundDeliverListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRefundDeliverListRequest) ProtoMessage() {}

func (x *BulkCreateRefundDeliverListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRefundDeliverListRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateRefundDeliverListRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{2}
}

func (x *BulkCreateRefundDeliverListRequest) GetResults() []*BulkCreateRefundDeliverRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BulkCreateRefundDeliverListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BulkCreateRefundDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmRefund     *int64   `protobuf:"varint,3,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CanEdit       bool     `protobuf:"varint,4,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num           int32    `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64  `protobuf:"fixed64,7,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64  `protobuf:"fixed64,8,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64  `protobuf:"fixed64,9,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64  `protobuf:"fixed64,10,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount   *float64 `protobuf:"fixed64,11,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut      *int32   `protobuf:"varint,12,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore    *int32   `protobuf:"varint,13,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge    *int32   `protobuf:"varint,14,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status        *int32   `protobuf:"varint,15,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32   `protobuf:"varint,16,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string  `protobuf:"bytes,17,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string  `protobuf:"bytes,18,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu      *string  `protobuf:"bytes,19,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo       *string  `protobuf:"bytes,20,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string   `protobuf:"bytes,21,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string  `protobuf:"bytes,22,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode      *string  `protobuf:"bytes,23,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode  *string  `protobuf:"bytes,24,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark        *string  `protobuf:"bytes,25,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo          *string  `protobuf:"bytes,26,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	CtmOrder      *int64   `protobuf:"varint,27,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService    *int64   `protobuf:"varint,28,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *BulkCreateRefundDeliverRequest) Reset() {
	*x = BulkCreateRefundDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRefundDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRefundDeliverRequest) ProtoMessage() {}

func (x *BulkCreateRefundDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRefundDeliverRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateRefundDeliverRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{3}
}

func (x *BulkCreateRefundDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *BulkCreateRefundDeliverRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *BulkCreateRefundDeliverRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *BulkCreateRefundDeliverRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type BulkCreateRefundReturnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BulkCreateRefundReturnRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BulkCreateRefundReturnListRequest) Reset() {
	*x = BulkCreateRefundReturnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRefundReturnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRefundReturnListRequest) ProtoMessage() {}

func (x *BulkCreateRefundReturnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRefundReturnListRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateRefundReturnListRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{4}
}

func (x *BulkCreateRefundReturnListRequest) GetResults() []*BulkCreateRefundReturnRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BulkCreateRefundReturnListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BulkCreateRefundReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters      string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Oid          string   `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	GoodsId      *string  `protobuf:"bytes,4,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName    *string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu     *string  `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo      *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo       *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName     *string  `protobuf:"bytes,9,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode     *string  `protobuf:"bytes,10,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode *string  `protobuf:"bytes,11,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	OutAmount    *float64 `protobuf:"fixed64,12,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	Num          int32    `protobuf:"varint,13,opt,name=num,proto3" json:"num,omitempty"`
	CtmRefund    *int64   `protobuf:"varint,14,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	OrderDetails *int64   `protobuf:"varint,15,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *BulkCreateRefundReturnRequest) Reset() {
	*x = BulkCreateRefundReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRefundReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRefundReturnRequest) ProtoMessage() {}

func (x *BulkCreateRefundReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRefundReturnRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateRefundReturnRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{5}
}

func (x *BulkCreateRefundReturnRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BulkCreateRefundReturnRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *BulkCreateRefundReturnRequest) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *BulkCreateRefundReturnRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BulkCreateRefundReturnRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *BulkCreateRefundReturnRequest) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type CreateObjectAfterSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Type            int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	GoodsId         *string  `protobuf:"bytes,4,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName       *string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu        *string  `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo          *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName        *string  `protobuf:"bytes,9,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode        *string  `protobuf:"bytes,10,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode    *string  `protobuf:"bytes,11,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	PlatformOrder   *string  `protobuf:"bytes,12,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	OmsOrder        *string  `protobuf:"bytes,13,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	Oid             *string  `protobuf:"bytes,14,opt,name=oid,proto3,oneof" json:"oid,omitempty"`
	OutAmount       *float64 `protobuf:"fixed64,15,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	RetailPrice     *float64 `protobuf:"fixed64,16,opt,name=retail_price,json=retailPrice,proto3,oneof" json:"retail_price,omitempty"`
	Num             int32    `protobuf:"varint,17,opt,name=num,proto3" json:"num,omitempty"`
	DamagePartsCode *string  `protobuf:"bytes,18,opt,name=damage_parts_code,json=damagePartsCode,proto3,oneof" json:"damage_parts_code,omitempty"`
	DamagePartsName *string  `protobuf:"bytes,19,opt,name=damage_parts_name,json=damagePartsName,proto3,oneof" json:"damage_parts_name,omitempty"`
	DamageReasons   *string  `protobuf:"bytes,20,opt,name=damage_reasons,json=damageReasons,proto3,oneof" json:"damage_reasons,omitempty"`
	DamageDesc      *string  `protobuf:"bytes,21,opt,name=damage_desc,json=damageDesc,proto3,oneof" json:"damage_desc,omitempty"`
	MediaPath       *string  `protobuf:"bytes,22,opt,name=media_path,json=mediaPath,proto3,oneof" json:"media_path,omitempty"`
	RefundObject    *int64   `protobuf:"varint,23,opt,name=refund_object,json=refundObject,proto3,oneof" json:"refund_object,omitempty"`
	OrderDetails    *int64   `protobuf:"varint,24,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *CreateObjectAfterSalesRequest) Reset() {
	*x = CreateObjectAfterSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObjectAfterSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectAfterSalesRequest) ProtoMessage() {}

func (x *CreateObjectAfterSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectAfterSalesRequest.ProtoReflect.Descriptor instead.
func (*CreateObjectAfterSalesRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{6}
}

func (x *CreateObjectAfterSalesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateObjectAfterSalesRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateObjectAfterSalesRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *CreateObjectAfterSalesRequest) GetRetailPrice() float64 {
	if x != nil && x.RetailPrice != nil {
		return *x.RetailPrice
	}
	return 0
}

func (x *CreateObjectAfterSalesRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CreateObjectAfterSalesRequest) GetDamagePartsCode() string {
	if x != nil && x.DamagePartsCode != nil {
		return *x.DamagePartsCode
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetDamagePartsName() string {
	if x != nil && x.DamagePartsName != nil {
		return *x.DamagePartsName
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetDamageReasons() string {
	if x != nil && x.DamageReasons != nil {
		return *x.DamageReasons
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetDamageDesc() string {
	if x != nil && x.DamageDesc != nil {
		return *x.DamageDesc
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetMediaPath() string {
	if x != nil && x.MediaPath != nil {
		return *x.MediaPath
	}
	return ""
}

func (x *CreateObjectAfterSalesRequest) GetRefundObject() int64 {
	if x != nil && x.RefundObject != nil {
		return *x.RefundObject
	}
	return 0
}

func (x *CreateObjectAfterSalesRequest) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type CreateRefundCompensateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	PrepayId            *string `protobuf:"bytes,3,opt,name=prepay_id,json=prepayId,proto3,oneof" json:"prepay_id,omitempty"`
	PrepayExpired       *string `protobuf:"bytes,4,opt,name=prepay_expired,json=prepayExpired,proto3,oneof" json:"prepay_expired,omitempty"`
	TradeType           *string `protobuf:"bytes,5,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	TradeState          *string `protobuf:"bytes,6,opt,name=trade_state,json=tradeState,proto3,oneof" json:"trade_state,omitempty"`
	TradeStateDesc      *string `protobuf:"bytes,7,opt,name=trade_state_desc,json=tradeStateDesc,proto3,oneof" json:"trade_state_desc,omitempty"`
	TransactionId       *string `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	AppId               *string `protobuf:"bytes,9,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	MchId               *string `protobuf:"bytes,10,opt,name=mch_id,json=mchId,proto3,oneof" json:"mch_id,omitempty"`
	OpenId              string  `protobuf:"bytes,11,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutTradeNo          *string `protobuf:"bytes,12,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	Attach              *string `protobuf:"bytes,13,opt,name=attach,proto3,oneof" json:"attach,omitempty"`
	Total               *int32  `protobuf:"varint,14,opt,name=total,proto3,oneof" json:"total,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,15,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	Currency            *string `protobuf:"bytes,16,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	BankType            *string `protobuf:"bytes,17,opt,name=bank_type,json=bankType,proto3,oneof" json:"bank_type,omitempty"`
	SuccessTime         *string `protobuf:"bytes,18,opt,name=success_time,json=successTime,proto3,oneof" json:"success_time,omitempty"`
	OutRefundNo         *string `protobuf:"bytes,19,opt,name=out_refund_no,json=outRefundNo,proto3,oneof" json:"out_refund_no,omitempty"`
	Reason              *string `protobuf:"bytes,20,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Refund              *int32  `protobuf:"varint,21,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,22,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,23,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,24,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,25,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	RefundFee           *int32  `protobuf:"varint,26,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	RefundId            *string `protobuf:"bytes,27,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,28,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,29,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	Status              *string `protobuf:"bytes,30,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CancelReasons       *string `protobuf:"bytes,31,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmOrder            *int64  `protobuf:"varint,32,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund           *int64  `protobuf:"varint,33,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmService          *int64  `protobuf:"varint,34,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *CreateRefundCompensateRequest) Reset() {
	*x = CreateRefundCompensateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundCompensateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundCompensateRequest) ProtoMessage() {}

func (x *CreateRefundCompensateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundCompensateRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundCompensateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRefundCompensateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetPrepayId() string {
	if x != nil && x.PrepayId != nil {
		return *x.PrepayId
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetPrepayExpired() string {
	if x != nil && x.PrepayExpired != nil {
		return *x.PrepayExpired
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetTradeState() string {
	if x != nil && x.TradeState != nil {
		return *x.TradeState
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetTradeStateDesc() string {
	if x != nil && x.TradeStateDesc != nil {
		return *x.TradeStateDesc
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetMchId() string {
	if x != nil && x.MchId != nil {
		return *x.MchId
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetAttach() string {
	if x != nil && x.Attach != nil {
		return *x.Attach
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetSuccessTime() string {
	if x != nil && x.SuccessTime != nil {
		return *x.SuccessTime
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetOutRefundNo() string {
	if x != nil && x.OutRefundNo != nil {
		return *x.OutRefundNo
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *CreateRefundCompensateRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *CreateRefundCompensateRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type CreateRefundDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmRefund     *int64   `protobuf:"varint,3,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CanEdit       bool     `protobuf:"varint,4,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num           int32    `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64  `protobuf:"fixed64,7,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64  `protobuf:"fixed64,8,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64  `protobuf:"fixed64,9,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64  `protobuf:"fixed64,10,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount   *float64 `protobuf:"fixed64,11,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut      *int32   `protobuf:"varint,12,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore    *int32   `protobuf:"varint,13,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge    *int32   `protobuf:"varint,14,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status        *int32   `protobuf:"varint,15,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32   `protobuf:"varint,16,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string  `protobuf:"bytes,17,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string  `protobuf:"bytes,18,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu      *string  `protobuf:"bytes,19,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo       *string  `protobuf:"bytes,20,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string   `protobuf:"bytes,21,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string  `protobuf:"bytes,22,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode      *string  `protobuf:"bytes,23,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode  *string  `protobuf:"bytes,24,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark        *string  `protobuf:"bytes,25,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo          *string  `protobuf:"bytes,26,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	CtmOrder      *int64   `protobuf:"varint,27,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService    *int64   `protobuf:"varint,28,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *CreateRefundDeliverRequest) Reset() {
	*x = CreateRefundDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundDeliverRequest) ProtoMessage() {}

func (x *CreateRefundDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundDeliverRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundDeliverRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRefundDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *CreateRefundDeliverRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *CreateRefundDeliverRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *CreateRefundDeliverRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type CreateRefundInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	InvoiceType     int32    `protobuf:"varint,3,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	PayerType       int32    `protobuf:"varint,4,opt,name=payer_type,json=payerType,proto3" json:"payer_type,omitempty"`
	PayerName       *string  `protobuf:"bytes,5,opt,name=payer_name,json=payerName,proto3,oneof" json:"payer_name,omitempty"`
	PayerRegisterNo *string  `protobuf:"bytes,6,opt,name=payer_register_no,json=payerRegisterNo,proto3,oneof" json:"payer_register_no,omitempty"`
	PayerPhone      *string  `protobuf:"bytes,7,opt,name=payer_phone,json=payerPhone,proto3,oneof" json:"payer_phone,omitempty"`
	PayerEmail      *string  `protobuf:"bytes,8,opt,name=payer_email,json=payerEmail,proto3,oneof" json:"payer_email,omitempty"`
	PayerAddress    *string  `protobuf:"bytes,9,opt,name=payer_address,json=payerAddress,proto3,oneof" json:"payer_address,omitempty"`
	PayerBank       *string  `protobuf:"bytes,10,opt,name=payer_bank,json=payerBank,proto3,oneof" json:"payer_bank,omitempty"`
	PayerAccount    *string  `protobuf:"bytes,11,opt,name=payer_account,json=payerAccount,proto3,oneof" json:"payer_account,omitempty"`
	InvoiceAmount   *float64 `protobuf:"fixed64,12,opt,name=invoice_amount,json=invoiceAmount,proto3,oneof" json:"invoice_amount,omitempty"`
	InvoiceRemark   *string  `protobuf:"bytes,13,opt,name=invoice_remark,json=invoiceRemark,proto3,oneof" json:"invoice_remark,omitempty"`
	InvoiceStatus   int32    `protobuf:"varint,14,opt,name=invoice_status,json=invoiceStatus,proto3" json:"invoice_status,omitempty"`
	ReasonType      *int32   `protobuf:"varint,15,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	InvoiceNo       *string  `protobuf:"bytes,16,opt,name=invoice_no,json=invoiceNo,proto3,oneof" json:"invoice_no,omitempty"`
	InvoiceCode     *string  `protobuf:"bytes,17,opt,name=invoice_code,json=invoiceCode,proto3,oneof" json:"invoice_code,omitempty"`
	Remark          *string  `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName       *string  `protobuf:"bytes,19,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CtmOrder        *int64   `protobuf:"varint,20,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService      *int64   `protobuf:"varint,21,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund       *int64   `protobuf:"varint,22,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	ParentInvoice   *int64   `protobuf:"varint,23,opt,name=parent_invoice,json=parentInvoice,proto3,oneof" json:"parent_invoice,omitempty"`
}

func (x *CreateRefundInvoiceRequest) Reset() {
	*x = CreateRefundInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundInvoiceRequest) ProtoMessage() {}

func (x *CreateRefundInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundInvoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRefundInvoiceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetInvoiceType() int32 {
	if x != nil {
		return x.InvoiceType
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetPayerType() int32 {
	if x != nil {
		return x.PayerType
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetPayerName() string {
	if x != nil && x.PayerName != nil {
		return *x.PayerName
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetPayerRegisterNo() string {
	if x != nil && x.PayerRegisterNo != nil {
		return *x.PayerRegisterNo
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetPayerPhone() string {
	if x != nil && x.PayerPhone != nil {
		return *x.PayerPhone
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetPayerEmail() string {
	if x != nil && x.PayerEmail != nil {
		return *x.PayerEmail
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetPayerAddress() string {
	if x != nil && x.PayerAddress != nil {
		return *x.PayerAddress
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetPayerBank() string {
	if x != nil && x.PayerBank != nil {
		return *x.PayerBank
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetPayerAccount() string {
	if x != nil && x.PayerAccount != nil {
		return *x.PayerAccount
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetInvoiceAmount() float64 {
	if x != nil && x.InvoiceAmount != nil {
		return *x.InvoiceAmount
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetInvoiceRemark() string {
	if x != nil && x.InvoiceRemark != nil {
		return *x.InvoiceRemark
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetInvoiceStatus() int32 {
	if x != nil {
		return x.InvoiceStatus
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetInvoiceNo() string {
	if x != nil && x.InvoiceNo != nil {
		return *x.InvoiceNo
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetInvoiceCode() string {
	if x != nil && x.InvoiceCode != nil {
		return *x.InvoiceCode
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *CreateRefundInvoiceRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *CreateRefundInvoiceRequest) GetParentInvoice() int64 {
	if x != nil && x.ParentInvoice != nil {
		return *x.ParentInvoice
	}
	return 0
}

type CreateRefundRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	RefundNo            *string `protobuf:"bytes,3,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	TransactionId       *string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	PlatformOrder       *string `protobuf:"bytes,5,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	RefundId            *string `protobuf:"bytes,6,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,7,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,8,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	RefundSuccessTime   *string `protobuf:"bytes,9,opt,name=refund_success_time,json=refundSuccessTime,proto3,oneof" json:"refund_success_time,omitempty"`
	RefundCreateTime    *string `protobuf:"bytes,10,opt,name=refund_create_time,json=refundCreateTime,proto3,oneof" json:"refund_create_time,omitempty"`
	Status              *string `protobuf:"bytes,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Total               *int32  `protobuf:"varint,12,opt,name=total,proto3,oneof" json:"total,omitempty"`
	Refund              *int32  `protobuf:"varint,13,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,14,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,15,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,16,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,17,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,18,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	Currency            *string `protobuf:"bytes,19,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	RefundFee           *int32  `protobuf:"varint,20,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	CancelReasons       *string `protobuf:"bytes,21,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmRefund           *int64  `protobuf:"varint,22,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmOrderPay         *int64  `protobuf:"varint,23,opt,name=ctm_order_pay,json=ctmOrderPay,proto3,oneof" json:"ctm_order_pay,omitempty"`
}

func (x *CreateRefundRefundRequest) Reset() {
	*x = CreateRefundRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundRefundRequest) ProtoMessage() {}

func (x *CreateRefundRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundRefundRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRefundRefundRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetRefundSuccessTime() string {
	if x != nil && x.RefundSuccessTime != nil {
		return *x.RefundSuccessTime
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetRefundCreateTime() string {
	if x != nil && x.RefundCreateTime != nil {
		return *x.RefundCreateTime
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *CreateRefundRefundRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *CreateRefundRefundRequest) GetCtmOrderPay() int64 {
	if x != nil && x.CtmOrderPay != nil {
		return *x.CtmOrderPay
	}
	return 0
}

type CreateRefundReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters      string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Oid          string   `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	GoodsId      *string  `protobuf:"bytes,4,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName    *string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu     *string  `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo      *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo       *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName     *string  `protobuf:"bytes,9,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode     *string  `protobuf:"bytes,10,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode *string  `protobuf:"bytes,11,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	OutAmount    *float64 `protobuf:"fixed64,12,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	Num          int32    `protobuf:"varint,13,opt,name=num,proto3" json:"num,omitempty"`
	CtmRefund    *int64   `protobuf:"varint,14,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	OrderDetails *int64   `protobuf:"varint,15,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *CreateRefundReturnRequest) Reset() {
	*x = CreateRefundReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundReturnRequest) ProtoMessage() {}

func (x *CreateRefundReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundReturnRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundReturnRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRefundReturnRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRefundReturnRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *CreateRefundReturnRequest) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *CreateRefundReturnRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CreateRefundReturnRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *CreateRefundReturnRequest) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type CreateRefundStockInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	SrcOrderNo    *string `protobuf:"bytes,3,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	SrcOrderType  *string `protobuf:"bytes,4,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	OrderNo       *string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	StockInNo     *string `protobuf:"bytes,6,opt,name=stock_in_no,json=stockInNo,proto3,oneof" json:"stock_in_no,omitempty"`
	Status        *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName *string `protobuf:"bytes,8,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode *string `protobuf:"bytes,9,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo   *string `protobuf:"bytes,10,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	StockinTime   *string `protobuf:"bytes,11,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CheckTime     *string `protobuf:"bytes,12,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	Modified      *string `protobuf:"bytes,13,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo       *string `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName     *string `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName      *string `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo        *string `protobuf:"bytes,17,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount    float64 `protobuf:"fixed64,18,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmService    *int64  `protobuf:"varint,19,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund     *int64  `protobuf:"varint,20,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
}

func (x *CreateRefundStockInRequest) Reset() {
	*x = CreateRefundStockInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundStockInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundStockInRequest) ProtoMessage() {}

func (x *CreateRefundStockInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundStockInRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundStockInRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{12}
}

func (x *CreateRefundStockInRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRefundStockInRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetSrcOrderType() string {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetStockInNo() string {
	if x != nil && x.StockInNo != nil {
		return *x.StockInNo
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *CreateRefundStockInRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *CreateRefundStockInRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *CreateRefundStockInRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

type CreateRefundStockOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters        string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	SrcOrderNo     *string `protobuf:"bytes,3,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo     *string `protobuf:"bytes,4,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo        *string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName  *string `protobuf:"bytes,6,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status         *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName  *string `protobuf:"bytes,8,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode  *string `protobuf:"bytes,9,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo    *string `protobuf:"bytes,10,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime    *string `protobuf:"bytes,11,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime *string `protobuf:"bytes,12,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified       *string `protobuf:"bytes,13,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo        *string `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName      *string `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName       *string `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo         *string `protobuf:"bytes,17,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount     float64 `protobuf:"fixed64,18,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmService     *int64  `protobuf:"varint,19,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmOrder       *int64  `protobuf:"varint,20,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund      *int64  `protobuf:"varint,21,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
}

func (x *CreateRefundStockOutRequest) Reset() {
	*x = CreateRefundStockOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundStockOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundStockOutRequest) ProtoMessage() {}

func (x *CreateRefundStockOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundStockOutRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundStockOutRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{13}
}

func (x *CreateRefundStockOutRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRefundStockOutRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *CreateRefundStockOutRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *CreateRefundStockOutRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *CreateRefundStockOutRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *CreateRefundStockOutRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

type CtmRefundDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CtmRefundDestroyRequest) Reset() {
	*x = CtmRefundDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmRefundDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmRefundDestroyRequest) ProtoMessage() {}

func (x *CtmRefundDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmRefundDestroyRequest.ProtoReflect.Descriptor instead.
func (*CtmRefundDestroyRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{14}
}

func (x *CtmRefundDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CtmRefundListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters                 string                     `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	AfterSalesContent       []*ObjectAfterSalesRequest `protobuf:"bytes,3,rep,name=after_sales_content,json=afterSalesContent,proto3" json:"after_sales_content,omitempty"`
	ReturnList              []*RefundReturnRequest     `protobuf:"bytes,4,rep,name=return_list,json=returnList,proto3" json:"return_list,omitempty"`
	SwapList                []*RefundDeliverRequest    `protobuf:"bytes,5,rep,name=swap_list,json=swapList,proto3" json:"swap_list,omitempty"`
	RefundCompensateContent *RefundCompensateRequest   `protobuf:"bytes,6,opt,name=refund_compensate_content,json=refundCompensateContent,proto3,oneof" json:"refund_compensate_content,omitempty"`
	PayContent              *RefundRefundRequest       `protobuf:"bytes,7,opt,name=pay_content,json=payContent,proto3,oneof" json:"pay_content,omitempty"`
	InvoiceContent          *RefundInvoiceRequest      `protobuf:"bytes,8,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	CreateName              *string                    `protobuf:"bytes,9,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType              *int32                     `protobuf:"varint,10,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	Rid                     string                     `protobuf:"bytes,11,opt,name=rid,proto3" json:"rid,omitempty"`
	TradeType               *int32                     `protobuf:"varint,12,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type                    int32                      `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
	RefundStatus            string                     `protobuf:"bytes,14,opt,name=refund_status,json=refundStatus,proto3" json:"refund_status,omitempty"`
	SellerName              *string                    `protobuf:"bytes,15,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo              *string                    `protobuf:"bytes,16,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo                  *string                    `protobuf:"bytes,17,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName                *string                    `protobuf:"bytes,18,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ReasonCode              *string                    `protobuf:"bytes,19,opt,name=reason_code,json=reasonCode,proto3,oneof" json:"reason_code,omitempty"`
	Reason                  *string                    `protobuf:"bytes,20,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Desc                    *string                    `protobuf:"bytes,21,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	ApproveTime             *string                    `protobuf:"bytes,22,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName             *string                    `protobuf:"bytes,23,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons          *string                    `protobuf:"bytes,24,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	CancelReasons           *string                    `protobuf:"bytes,25,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	RevertCode              *string                    `protobuf:"bytes,26,opt,name=revert_code,json=revertCode,proto3,oneof" json:"revert_code,omitempty"`
	RevertReason            *string                    `protobuf:"bytes,27,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	TradeStatus             *int32                     `protobuf:"varint,28,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus               *int32                     `protobuf:"varint,29,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime                 *string                    `protobuf:"bytes,30,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm            *int32                     `protobuf:"varint,31,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick               *string                    `protobuf:"bytes,32,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile             *string                    `protobuf:"bytes,33,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage            *string                    `protobuf:"bytes,34,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	WarehouseNo             *string                    `protobuf:"bytes,35,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName           *string                    `protobuf:"bytes,36,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName            *string                    `protobuf:"bytes,37,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince        *string                    `protobuf:"bytes,38,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity            *string                    `protobuf:"bytes,39,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict        *string                    `protobuf:"bytes,40,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress         *string                    `protobuf:"bytes,41,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile          *string                    `protobuf:"bytes,42,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount              *float64                   `protobuf:"fixed64,43,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount             *float64                   `protobuf:"fixed64,44,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee               *float64                   `protobuf:"fixed64,45,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                    *float64                   `protobuf:"fixed64,46,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount               *float64                   `protobuf:"fixed64,47,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable              *float64                   `protobuf:"fixed64,48,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount                *float64                   `protobuf:"fixed64,49,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus           *int32                     `protobuf:"varint,50,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Tid                     string                     `protobuf:"bytes,51,opt,name=tid,proto3" json:"tid,omitempty"`
	OmsOrder                *string                    `protobuf:"bytes,52,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	WarehouseInNo           *string                    `protobuf:"bytes,53,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName         *string                    `protobuf:"bytes,54,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OpenId                  *string                    `protobuf:"bytes,55,opt,name=open_id,json=openId,proto3,oneof" json:"open_id,omitempty"`
	RefundFee               float64                    `protobuf:"fixed64,56,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	RefundCardNo            *string                    `protobuf:"bytes,57,opt,name=refund_card_no,json=refundCardNo,proto3,oneof" json:"refund_card_no,omitempty"`
	RefundCardPoints        int32                      `protobuf:"varint,58,opt,name=refund_card_points,json=refundCardPoints,proto3" json:"refund_card_points,omitempty"`
	RefundNutNum            int32                      `protobuf:"varint,59,opt,name=refund_nut_num,json=refundNutNum,proto3" json:"refund_nut_num,omitempty"`
	RefundScoreNum          int32                      `protobuf:"varint,60,opt,name=refund_score_num,json=refundScoreNum,proto3" json:"refund_score_num,omitempty"`
	RefundBadgeNum          int32                      `protobuf:"varint,61,opt,name=refund_badge_num,json=refundBadgeNum,proto3" json:"refund_badge_num,omitempty"`
	LogisticsInName         *string                    `protobuf:"bytes,62,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode         *string                    `protobuf:"bytes,63,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsNo             *string                    `protobuf:"bytes,64,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	Remark                  *string                    `protobuf:"bytes,65,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	IsCheck                 *int32                     `protobuf:"varint,66,opt,name=is_check,json=isCheck,proto3,oneof" json:"is_check,omitempty"`
	OuterNo                 *string                    `protobuf:"bytes,67,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	RefundNo                *string                    `protobuf:"bytes,68,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	Ctm                     *int64                     `protobuf:"varint,69,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	CtmOrder                *int64                     `protobuf:"varint,70,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
}

func (x *CtmRefundListRequest) Reset() {
	*x = CtmRefundListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmRefundListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmRefundListRequest) ProtoMessage() {}

func (x *CtmRefundListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmRefundListRequest.ProtoReflect.Descriptor instead.
func (*CtmRefundListRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{15}
}

func (x *CtmRefundListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmRefundListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CtmRefundListRequest) GetAfterSalesContent() []*ObjectAfterSalesRequest {
	if x != nil {
		return x.AfterSalesContent
	}
	return nil
}

func (x *CtmRefundListRequest) GetReturnList() []*RefundReturnRequest {
	if x != nil {
		return x.ReturnList
	}
	return nil
}

func (x *CtmRefundListRequest) GetSwapList() []*RefundDeliverRequest {
	if x != nil {
		return x.SwapList
	}
	return nil
}

func (x *CtmRefundListRequest) GetRefundCompensateContent() *RefundCompensateRequest {
	if x != nil {
		return x.RefundCompensateContent
	}
	return nil
}

func (x *CtmRefundListRequest) GetPayContent() *RefundRefundRequest {
	if x != nil {
		return x.PayContent
	}
	return nil
}

func (x *CtmRefundListRequest) GetInvoiceContent() *RefundInvoiceRequest {
	if x != nil {
		return x.InvoiceContent
	}
	return nil
}

func (x *CtmRefundListRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *CtmRefundListRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *CtmRefundListRequest) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *CtmRefundListRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *CtmRefundListRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CtmRefundListRequest) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *CtmRefundListRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *CtmRefundListRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *CtmRefundListRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *CtmRefundListRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *CtmRefundListRequest) GetReasonCode() string {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return ""
}

func (x *CtmRefundListRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *CtmRefundListRequest) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CtmRefundListRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *CtmRefundListRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *CtmRefundListRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *CtmRefundListRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *CtmRefundListRequest) GetRevertCode() string {
	if x != nil && x.RevertCode != nil {
		return *x.RevertCode
	}
	return ""
}

func (x *CtmRefundListRequest) GetRevertReason() string {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return ""
}

func (x *CtmRefundListRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *CtmRefundListRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *CtmRefundListRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *CtmRefundListRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *CtmRefundListRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *CtmRefundListRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *CtmRefundListRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *CtmRefundListRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *CtmRefundListRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *CtmRefundListRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *CtmRefundListRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *CtmRefundListRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *CtmRefundListRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *CtmRefundListRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *CtmRefundListRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *CtmRefundListRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *CtmRefundListRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *CtmRefundListRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *CtmRefundListRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *CtmRefundListRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *CtmRefundListRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *CtmRefundListRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CtmRefundListRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *CtmRefundListRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CtmRefundListRequest) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *CtmRefundListRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *CtmRefundListRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *CtmRefundListRequest) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *CtmRefundListRequest) GetRefundFee() float64 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *CtmRefundListRequest) GetRefundCardNo() string {
	if x != nil && x.RefundCardNo != nil {
		return *x.RefundCardNo
	}
	return ""
}

func (x *CtmRefundListRequest) GetRefundCardPoints() int32 {
	if x != nil {
		return x.RefundCardPoints
	}
	return 0
}

func (x *CtmRefundListRequest) GetRefundNutNum() int32 {
	if x != nil {
		return x.RefundNutNum
	}
	return 0
}

func (x *CtmRefundListRequest) GetRefundScoreNum() int32 {
	if x != nil {
		return x.RefundScoreNum
	}
	return 0
}

func (x *CtmRefundListRequest) GetRefundBadgeNum() int32 {
	if x != nil {
		return x.RefundBadgeNum
	}
	return 0
}

func (x *CtmRefundListRequest) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *CtmRefundListRequest) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *CtmRefundListRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *CtmRefundListRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CtmRefundListRequest) GetIsCheck() int32 {
	if x != nil && x.IsCheck != nil {
		return *x.IsCheck
	}
	return 0
}

func (x *CtmRefundListRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *CtmRefundListRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *CtmRefundListRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmRefundListRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

type CtmRefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CtmRefundResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CtmRefundListResponse) Reset() {
	*x = CtmRefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmRefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmRefundListResponse) ProtoMessage() {}

func (x *CtmRefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmRefundListResponse.ProtoReflect.Descriptor instead.
func (*CtmRefundListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{16}
}

func (x *CtmRefundListResponse) GetResults() []*CtmRefundResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CtmRefundListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CtmRefundPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters                 string                     `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	AfterSalesContent       []*ObjectAfterSalesRequest `protobuf:"bytes,3,rep,name=after_sales_content,json=afterSalesContent,proto3" json:"after_sales_content,omitempty"`
	ReturnList              []*RefundReturnRequest     `protobuf:"bytes,4,rep,name=return_list,json=returnList,proto3" json:"return_list,omitempty"`
	SwapList                []*RefundDeliverRequest    `protobuf:"bytes,5,rep,name=swap_list,json=swapList,proto3" json:"swap_list,omitempty"`
	RefundCompensateContent *RefundCompensateRequest   `protobuf:"bytes,6,opt,name=refund_compensate_content,json=refundCompensateContent,proto3,oneof" json:"refund_compensate_content,omitempty"`
	PayContent              *RefundRefundRequest       `protobuf:"bytes,7,opt,name=pay_content,json=payContent,proto3,oneof" json:"pay_content,omitempty"`
	InvoiceContent          *RefundInvoiceRequest      `protobuf:"bytes,8,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	XPartialUpdateFields    []string                   `protobuf:"bytes,9,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateName              *string                    `protobuf:"bytes,10,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType              *int32                     `protobuf:"varint,11,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	Rid                     string                     `protobuf:"bytes,12,opt,name=rid,proto3" json:"rid,omitempty"`
	TradeType               *int32                     `protobuf:"varint,13,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type                    int32                      `protobuf:"varint,14,opt,name=type,proto3" json:"type,omitempty"`
	RefundStatus            string                     `protobuf:"bytes,15,opt,name=refund_status,json=refundStatus,proto3" json:"refund_status,omitempty"`
	SellerName              *string                    `protobuf:"bytes,16,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo              *string                    `protobuf:"bytes,17,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo                  *string                    `protobuf:"bytes,18,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName                *string                    `protobuf:"bytes,19,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ReasonCode              *string                    `protobuf:"bytes,20,opt,name=reason_code,json=reasonCode,proto3,oneof" json:"reason_code,omitempty"`
	Reason                  *string                    `protobuf:"bytes,21,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Desc                    *string                    `protobuf:"bytes,22,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	ApproveTime             *string                    `protobuf:"bytes,23,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName             *string                    `protobuf:"bytes,24,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons          *string                    `protobuf:"bytes,25,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	CancelReasons           *string                    `protobuf:"bytes,26,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	RevertCode              *string                    `protobuf:"bytes,27,opt,name=revert_code,json=revertCode,proto3,oneof" json:"revert_code,omitempty"`
	RevertReason            *string                    `protobuf:"bytes,28,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	TradeStatus             *int32                     `protobuf:"varint,29,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus               *int32                     `protobuf:"varint,30,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime                 *string                    `protobuf:"bytes,31,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm            *int32                     `protobuf:"varint,32,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick               *string                    `protobuf:"bytes,33,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile             *string                    `protobuf:"bytes,34,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage            *string                    `protobuf:"bytes,35,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	WarehouseNo             *string                    `protobuf:"bytes,36,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName           *string                    `protobuf:"bytes,37,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName            *string                    `protobuf:"bytes,38,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince        *string                    `protobuf:"bytes,39,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity            *string                    `protobuf:"bytes,40,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict        *string                    `protobuf:"bytes,41,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress         *string                    `protobuf:"bytes,42,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile          *string                    `protobuf:"bytes,43,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount              *float64                   `protobuf:"fixed64,44,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount             *float64                   `protobuf:"fixed64,45,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee               *float64                   `protobuf:"fixed64,46,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                    *float64                   `protobuf:"fixed64,47,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount               *float64                   `protobuf:"fixed64,48,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable              *float64                   `protobuf:"fixed64,49,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount                *float64                   `protobuf:"fixed64,50,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus           *int32                     `protobuf:"varint,51,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Tid                     string                     `protobuf:"bytes,52,opt,name=tid,proto3" json:"tid,omitempty"`
	OmsOrder                *string                    `protobuf:"bytes,53,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	WarehouseInNo           *string                    `protobuf:"bytes,54,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName         *string                    `protobuf:"bytes,55,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OpenId                  *string                    `protobuf:"bytes,56,opt,name=open_id,json=openId,proto3,oneof" json:"open_id,omitempty"`
	RefundFee               float64                    `protobuf:"fixed64,57,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	RefundCardNo            *string                    `protobuf:"bytes,58,opt,name=refund_card_no,json=refundCardNo,proto3,oneof" json:"refund_card_no,omitempty"`
	RefundCardPoints        int32                      `protobuf:"varint,59,opt,name=refund_card_points,json=refundCardPoints,proto3" json:"refund_card_points,omitempty"`
	RefundNutNum            int32                      `protobuf:"varint,60,opt,name=refund_nut_num,json=refundNutNum,proto3" json:"refund_nut_num,omitempty"`
	RefundScoreNum          int32                      `protobuf:"varint,61,opt,name=refund_score_num,json=refundScoreNum,proto3" json:"refund_score_num,omitempty"`
	RefundBadgeNum          int32                      `protobuf:"varint,62,opt,name=refund_badge_num,json=refundBadgeNum,proto3" json:"refund_badge_num,omitempty"`
	LogisticsInName         *string                    `protobuf:"bytes,63,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode         *string                    `protobuf:"bytes,64,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsNo             *string                    `protobuf:"bytes,65,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	Remark                  *string                    `protobuf:"bytes,66,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	IsCheck                 *int32                     `protobuf:"varint,67,opt,name=is_check,json=isCheck,proto3,oneof" json:"is_check,omitempty"`
	OuterNo                 *string                    `protobuf:"bytes,68,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	RefundNo                *string                    `protobuf:"bytes,69,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	Ctm                     *int64                     `protobuf:"varint,70,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	CtmOrder                *int64                     `protobuf:"varint,71,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
}

func (x *CtmRefundPartialUpdateRequest) Reset() {
	*x = CtmRefundPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmRefundPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmRefundPartialUpdateRequest) ProtoMessage() {}

func (x *CtmRefundPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmRefundPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*CtmRefundPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{17}
}

func (x *CtmRefundPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetAfterSalesContent() []*ObjectAfterSalesRequest {
	if x != nil {
		return x.AfterSalesContent
	}
	return nil
}

func (x *CtmRefundPartialUpdateRequest) GetReturnList() []*RefundReturnRequest {
	if x != nil {
		return x.ReturnList
	}
	return nil
}

func (x *CtmRefundPartialUpdateRequest) GetSwapList() []*RefundDeliverRequest {
	if x != nil {
		return x.SwapList
	}
	return nil
}

func (x *CtmRefundPartialUpdateRequest) GetRefundCompensateContent() *RefundCompensateRequest {
	if x != nil {
		return x.RefundCompensateContent
	}
	return nil
}

func (x *CtmRefundPartialUpdateRequest) GetPayContent() *RefundRefundRequest {
	if x != nil {
		return x.PayContent
	}
	return nil
}

func (x *CtmRefundPartialUpdateRequest) GetInvoiceContent() *RefundInvoiceRequest {
	if x != nil {
		return x.InvoiceContent
	}
	return nil
}

func (x *CtmRefundPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *CtmRefundPartialUpdateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReasonCode() string {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetRevertCode() string {
	if x != nil && x.RevertCode != nil {
		return *x.RevertCode
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetRevertReason() string {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetRefundFee() float64 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetRefundCardNo() string {
	if x != nil && x.RefundCardNo != nil {
		return *x.RefundCardNo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetRefundCardPoints() int32 {
	if x != nil {
		return x.RefundCardPoints
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetRefundNutNum() int32 {
	if x != nil {
		return x.RefundNutNum
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetRefundScoreNum() int32 {
	if x != nil {
		return x.RefundScoreNum
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetRefundBadgeNum() int32 {
	if x != nil {
		return x.RefundBadgeNum
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetIsCheck() int32 {
	if x != nil && x.IsCheck != nil {
		return *x.IsCheck
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *CtmRefundPartialUpdateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmRefundPartialUpdateRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

type CtmRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters                 string                     `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	AfterSalesContent       []*ObjectAfterSalesRequest `protobuf:"bytes,3,rep,name=after_sales_content,json=afterSalesContent,proto3" json:"after_sales_content,omitempty"`
	ReturnList              []*RefundReturnRequest     `protobuf:"bytes,4,rep,name=return_list,json=returnList,proto3" json:"return_list,omitempty"`
	SwapList                []*RefundDeliverRequest    `protobuf:"bytes,5,rep,name=swap_list,json=swapList,proto3" json:"swap_list,omitempty"`
	RefundCompensateContent *RefundCompensateRequest   `protobuf:"bytes,6,opt,name=refund_compensate_content,json=refundCompensateContent,proto3,oneof" json:"refund_compensate_content,omitempty"`
	PayContent              *RefundRefundRequest       `protobuf:"bytes,7,opt,name=pay_content,json=payContent,proto3,oneof" json:"pay_content,omitempty"`
	InvoiceContent          *RefundInvoiceRequest      `protobuf:"bytes,8,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	CreateName              *string                    `protobuf:"bytes,9,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType              *int32                     `protobuf:"varint,10,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	Rid                     string                     `protobuf:"bytes,11,opt,name=rid,proto3" json:"rid,omitempty"`
	TradeType               *int32                     `protobuf:"varint,12,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type                    int32                      `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
	RefundStatus            string                     `protobuf:"bytes,14,opt,name=refund_status,json=refundStatus,proto3" json:"refund_status,omitempty"`
	SellerName              *string                    `protobuf:"bytes,15,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo              *string                    `protobuf:"bytes,16,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo                  *string                    `protobuf:"bytes,17,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName                *string                    `protobuf:"bytes,18,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ReasonCode              *string                    `protobuf:"bytes,19,opt,name=reason_code,json=reasonCode,proto3,oneof" json:"reason_code,omitempty"`
	Reason                  *string                    `protobuf:"bytes,20,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Desc                    *string                    `protobuf:"bytes,21,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	ApproveTime             *string                    `protobuf:"bytes,22,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName             *string                    `protobuf:"bytes,23,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons          *string                    `protobuf:"bytes,24,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	CancelReasons           *string                    `protobuf:"bytes,25,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	RevertCode              *string                    `protobuf:"bytes,26,opt,name=revert_code,json=revertCode,proto3,oneof" json:"revert_code,omitempty"`
	RevertReason            *string                    `protobuf:"bytes,27,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	TradeStatus             *int32                     `protobuf:"varint,28,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus               *int32                     `protobuf:"varint,29,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime                 *string                    `protobuf:"bytes,30,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm            *int32                     `protobuf:"varint,31,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick               *string                    `protobuf:"bytes,32,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile             *string                    `protobuf:"bytes,33,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage            *string                    `protobuf:"bytes,34,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	WarehouseNo             *string                    `protobuf:"bytes,35,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName           *string                    `protobuf:"bytes,36,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName            *string                    `protobuf:"bytes,37,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince        *string                    `protobuf:"bytes,38,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity            *string                    `protobuf:"bytes,39,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict        *string                    `protobuf:"bytes,40,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress         *string                    `protobuf:"bytes,41,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile          *string                    `protobuf:"bytes,42,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount              *float64                   `protobuf:"fixed64,43,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount             *float64                   `protobuf:"fixed64,44,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee               *float64                   `protobuf:"fixed64,45,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                    *float64                   `protobuf:"fixed64,46,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount               *float64                   `protobuf:"fixed64,47,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable              *float64                   `protobuf:"fixed64,48,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount                *float64                   `protobuf:"fixed64,49,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus           *int32                     `protobuf:"varint,50,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Tid                     string                     `protobuf:"bytes,51,opt,name=tid,proto3" json:"tid,omitempty"`
	OmsOrder                *string                    `protobuf:"bytes,52,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	WarehouseInNo           *string                    `protobuf:"bytes,53,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName         *string                    `protobuf:"bytes,54,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OpenId                  *string                    `protobuf:"bytes,55,opt,name=open_id,json=openId,proto3,oneof" json:"open_id,omitempty"`
	RefundFee               float64                    `protobuf:"fixed64,56,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	RefundCardNo            *string                    `protobuf:"bytes,57,opt,name=refund_card_no,json=refundCardNo,proto3,oneof" json:"refund_card_no,omitempty"`
	RefundCardPoints        int32                      `protobuf:"varint,58,opt,name=refund_card_points,json=refundCardPoints,proto3" json:"refund_card_points,omitempty"`
	RefundNutNum            int32                      `protobuf:"varint,59,opt,name=refund_nut_num,json=refundNutNum,proto3" json:"refund_nut_num,omitempty"`
	RefundScoreNum          int32                      `protobuf:"varint,60,opt,name=refund_score_num,json=refundScoreNum,proto3" json:"refund_score_num,omitempty"`
	RefundBadgeNum          int32                      `protobuf:"varint,61,opt,name=refund_badge_num,json=refundBadgeNum,proto3" json:"refund_badge_num,omitempty"`
	LogisticsInName         *string                    `protobuf:"bytes,62,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode         *string                    `protobuf:"bytes,63,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsNo             *string                    `protobuf:"bytes,64,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	Remark                  *string                    `protobuf:"bytes,65,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	IsCheck                 *int32                     `protobuf:"varint,66,opt,name=is_check,json=isCheck,proto3,oneof" json:"is_check,omitempty"`
	OuterNo                 *string                    `protobuf:"bytes,67,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	RefundNo                *string                    `protobuf:"bytes,68,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	Ctm                     *int64                     `protobuf:"varint,69,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	CtmOrder                *int64                     `protobuf:"varint,70,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
}

func (x *CtmRefundRequest) Reset() {
	*x = CtmRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmRefundRequest) ProtoMessage() {}

func (x *CtmRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmRefundRequest.ProtoReflect.Descriptor instead.
func (*CtmRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{18}
}

func (x *CtmRefundRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmRefundRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CtmRefundRequest) GetAfterSalesContent() []*ObjectAfterSalesRequest {
	if x != nil {
		return x.AfterSalesContent
	}
	return nil
}

func (x *CtmRefundRequest) GetReturnList() []*RefundReturnRequest {
	if x != nil {
		return x.ReturnList
	}
	return nil
}

func (x *CtmRefundRequest) GetSwapList() []*RefundDeliverRequest {
	if x != nil {
		return x.SwapList
	}
	return nil
}

func (x *CtmRefundRequest) GetRefundCompensateContent() *RefundCompensateRequest {
	if x != nil {
		return x.RefundCompensateContent
	}
	return nil
}

func (x *CtmRefundRequest) GetPayContent() *RefundRefundRequest {
	if x != nil {
		return x.PayContent
	}
	return nil
}

func (x *CtmRefundRequest) GetInvoiceContent() *RefundInvoiceRequest {
	if x != nil {
		return x.InvoiceContent
	}
	return nil
}

func (x *CtmRefundRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *CtmRefundRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *CtmRefundRequest) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *CtmRefundRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *CtmRefundRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CtmRefundRequest) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *CtmRefundRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *CtmRefundRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *CtmRefundRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *CtmRefundRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *CtmRefundRequest) GetReasonCode() string {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return ""
}

func (x *CtmRefundRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *CtmRefundRequest) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CtmRefundRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *CtmRefundRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *CtmRefundRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *CtmRefundRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *CtmRefundRequest) GetRevertCode() string {
	if x != nil && x.RevertCode != nil {
		return *x.RevertCode
	}
	return ""
}

func (x *CtmRefundRequest) GetRevertReason() string {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return ""
}

func (x *CtmRefundRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *CtmRefundRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *CtmRefundRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *CtmRefundRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *CtmRefundRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *CtmRefundRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *CtmRefundRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *CtmRefundRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *CtmRefundRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *CtmRefundRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *CtmRefundRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *CtmRefundRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *CtmRefundRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *CtmRefundRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *CtmRefundRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *CtmRefundRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *CtmRefundRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *CtmRefundRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *CtmRefundRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *CtmRefundRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *CtmRefundRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *CtmRefundRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CtmRefundRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *CtmRefundRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CtmRefundRequest) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *CtmRefundRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *CtmRefundRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *CtmRefundRequest) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *CtmRefundRequest) GetRefundFee() float64 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *CtmRefundRequest) GetRefundCardNo() string {
	if x != nil && x.RefundCardNo != nil {
		return *x.RefundCardNo
	}
	return ""
}

func (x *CtmRefundRequest) GetRefundCardPoints() int32 {
	if x != nil {
		return x.RefundCardPoints
	}
	return 0
}

func (x *CtmRefundRequest) GetRefundNutNum() int32 {
	if x != nil {
		return x.RefundNutNum
	}
	return 0
}

func (x *CtmRefundRequest) GetRefundScoreNum() int32 {
	if x != nil {
		return x.RefundScoreNum
	}
	return 0
}

func (x *CtmRefundRequest) GetRefundBadgeNum() int32 {
	if x != nil {
		return x.RefundBadgeNum
	}
	return 0
}

func (x *CtmRefundRequest) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *CtmRefundRequest) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *CtmRefundRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *CtmRefundRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CtmRefundRequest) GetIsCheck() int32 {
	if x != nil && x.IsCheck != nil {
		return *x.IsCheck
	}
	return 0
}

func (x *CtmRefundRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *CtmRefundRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *CtmRefundRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmRefundRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

type CtmRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeTypeName           string                      `protobuf:"bytes,2,opt,name=trade_type_name,json=tradeTypeName,proto3" json:"trade_type_name,omitempty"`
	TypeName                string                      `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	TradeStatusName         string                      `protobuf:"bytes,4,opt,name=trade_status_name,json=tradeStatusName,proto3" json:"trade_status_name,omitempty"`
	CreateTypeName          string                      `protobuf:"bytes,5,opt,name=create_type_name,json=createTypeName,proto3" json:"create_type_name,omitempty"`
	RefundStatusName        string                      `protobuf:"bytes,6,opt,name=refund_status_name,json=refundStatusName,proto3" json:"refund_status_name,omitempty"`
	InvoiceStatusName       string                      `protobuf:"bytes,7,opt,name=invoice_status_name,json=invoiceStatusName,proto3" json:"invoice_status_name,omitempty"`
	PayStatusName           string                      `protobuf:"bytes,8,opt,name=pay_status_name,json=payStatusName,proto3" json:"pay_status_name,omitempty"`
	DeliveryTermName        string                      `protobuf:"bytes,9,opt,name=delivery_term_name,json=deliveryTermName,proto3" json:"delivery_term_name,omitempty"`
	CtmNickname             string                      `protobuf:"bytes,10,opt,name=ctm_nickname,json=ctmNickname,proto3" json:"ctm_nickname,omitempty"`
	CtmMobile               string                      `protobuf:"bytes,11,opt,name=ctm_mobile,json=ctmMobile,proto3" json:"ctm_mobile,omitempty"`
	CtmOpenId               string                      `protobuf:"bytes,12,opt,name=ctm_openId,json=ctmOpenId,proto3" json:"ctm_openId,omitempty"`
	AfterSalesDetails       []*ObjectAfterSalesResponse `protobuf:"bytes,13,rep,name=after_sales_details,json=afterSalesDetails,proto3" json:"after_sales_details,omitempty"`
	RefundGoodsDetails      []*RefundReturnResponse     `protobuf:"bytes,14,rep,name=refund_goods_details,json=refundGoodsDetails,proto3" json:"refund_goods_details,omitempty"`
	SwapGoodsDetails        []*RefundDeliverResponse    `protobuf:"bytes,15,rep,name=swap_goods_details,json=swapGoodsDetails,proto3" json:"swap_goods_details,omitempty"`
	RefundCompensateDetails []*RefundCompensateResponse `protobuf:"bytes,16,rep,name=refund_compensate_details,json=refundCompensateDetails,proto3" json:"refund_compensate_details,omitempty"`
	RefundPayDetails        []*RefundRefundResponse     `protobuf:"bytes,17,rep,name=refund_pay_details,json=refundPayDetails,proto3" json:"refund_pay_details,omitempty"`
	RefundInvoiceDetails    []*RefundInvoiceResponse    `protobuf:"bytes,18,rep,name=refund_invoice_details,json=refundInvoiceDetails,proto3" json:"refund_invoice_details,omitempty"`
	StockInDetails          []*RefundStockInResponse    `protobuf:"bytes,19,rep,name=stock_in_details,json=stockInDetails,proto3" json:"stock_in_details,omitempty"`
	StockOutDetails         []*RefundStockOutResponse   `protobuf:"bytes,20,rep,name=stock_out_details,json=stockOutDetails,proto3" json:"stock_out_details,omitempty"`
	CreateTime              string                      `protobuf:"bytes,21,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime              string                      `protobuf:"bytes,22,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CreateName              *string                     `protobuf:"bytes,23,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType              *int32                      `protobuf:"varint,24,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	Rid                     string                      `protobuf:"bytes,25,opt,name=rid,proto3" json:"rid,omitempty"`
	TradeType               *int32                      `protobuf:"varint,26,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type                    int32                       `protobuf:"varint,27,opt,name=type,proto3" json:"type,omitempty"`
	RefundStatus            string                      `protobuf:"bytes,28,opt,name=refund_status,json=refundStatus,proto3" json:"refund_status,omitempty"`
	SellerName              *string                     `protobuf:"bytes,29,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo              *string                     `protobuf:"bytes,30,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo                  *string                     `protobuf:"bytes,31,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName                *string                     `protobuf:"bytes,32,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ReasonCode              *string                     `protobuf:"bytes,33,opt,name=reason_code,json=reasonCode,proto3,oneof" json:"reason_code,omitempty"`
	Reason                  *string                     `protobuf:"bytes,34,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Desc                    *string                     `protobuf:"bytes,35,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	ApproveTime             *string                     `protobuf:"bytes,36,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName             *string                     `protobuf:"bytes,37,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons          *string                     `protobuf:"bytes,38,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	CancelReasons           *string                     `protobuf:"bytes,39,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	RevertCode              *string                     `protobuf:"bytes,40,opt,name=revert_code,json=revertCode,proto3,oneof" json:"revert_code,omitempty"`
	RevertReason            *string                     `protobuf:"bytes,41,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	TradeStatus             *int32                      `protobuf:"varint,42,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus               *int32                      `protobuf:"varint,43,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime                 *string                     `protobuf:"bytes,44,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm            *int32                      `protobuf:"varint,45,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick               *string                     `protobuf:"bytes,46,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile             *string                     `protobuf:"bytes,47,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage            *string                     `protobuf:"bytes,48,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	WarehouseNo             *string                     `protobuf:"bytes,49,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName           *string                     `protobuf:"bytes,50,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName            *string                     `protobuf:"bytes,51,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince        *string                     `protobuf:"bytes,52,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity            *string                     `protobuf:"bytes,53,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict        *string                     `protobuf:"bytes,54,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress         *string                     `protobuf:"bytes,55,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile          *string                     `protobuf:"bytes,56,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount              *float64                    `protobuf:"fixed64,57,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount             *float64                    `protobuf:"fixed64,58,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee               *float64                    `protobuf:"fixed64,59,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                    *float64                    `protobuf:"fixed64,60,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount               *float64                    `protobuf:"fixed64,61,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable              *float64                    `protobuf:"fixed64,62,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount                *float64                    `protobuf:"fixed64,63,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus           *int32                      `protobuf:"varint,64,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Tid                     string                      `protobuf:"bytes,65,opt,name=tid,proto3" json:"tid,omitempty"`
	OmsOrder                *string                     `protobuf:"bytes,66,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	WarehouseInNo           *string                     `protobuf:"bytes,67,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName         *string                     `protobuf:"bytes,68,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OpenId                  *string                     `protobuf:"bytes,69,opt,name=open_id,json=openId,proto3,oneof" json:"open_id,omitempty"`
	RefundFee               float64                     `protobuf:"fixed64,70,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	RefundCardNo            *string                     `protobuf:"bytes,71,opt,name=refund_card_no,json=refundCardNo,proto3,oneof" json:"refund_card_no,omitempty"`
	RefundCardPoints        int32                       `protobuf:"varint,72,opt,name=refund_card_points,json=refundCardPoints,proto3" json:"refund_card_points,omitempty"`
	RefundNutNum            int32                       `protobuf:"varint,73,opt,name=refund_nut_num,json=refundNutNum,proto3" json:"refund_nut_num,omitempty"`
	RefundScoreNum          int32                       `protobuf:"varint,74,opt,name=refund_score_num,json=refundScoreNum,proto3" json:"refund_score_num,omitempty"`
	RefundBadgeNum          int32                       `protobuf:"varint,75,opt,name=refund_badge_num,json=refundBadgeNum,proto3" json:"refund_badge_num,omitempty"`
	LogisticsInName         *string                     `protobuf:"bytes,76,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode         *string                     `protobuf:"bytes,77,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsNo             *string                     `protobuf:"bytes,78,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	Remark                  *string                     `protobuf:"bytes,79,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	IsCheck                 *int32                      `protobuf:"varint,80,opt,name=is_check,json=isCheck,proto3,oneof" json:"is_check,omitempty"`
	OuterNo                 *string                     `protobuf:"bytes,81,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	RefundNo                *string                     `protobuf:"bytes,82,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	Ctm                     *int64                      `protobuf:"varint,83,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	CtmOrder                *int64                      `protobuf:"varint,84,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
}

func (x *CtmRefundResponse) Reset() {
	*x = CtmRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmRefundResponse) ProtoMessage() {}

func (x *CtmRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmRefundResponse.ProtoReflect.Descriptor instead.
func (*CtmRefundResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{19}
}

func (x *CtmRefundResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmRefundResponse) GetTradeTypeName() string {
	if x != nil {
		return x.TradeTypeName
	}
	return ""
}

func (x *CtmRefundResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CtmRefundResponse) GetTradeStatusName() string {
	if x != nil {
		return x.TradeStatusName
	}
	return ""
}

func (x *CtmRefundResponse) GetCreateTypeName() string {
	if x != nil {
		return x.CreateTypeName
	}
	return ""
}

func (x *CtmRefundResponse) GetRefundStatusName() string {
	if x != nil {
		return x.RefundStatusName
	}
	return ""
}

func (x *CtmRefundResponse) GetInvoiceStatusName() string {
	if x != nil {
		return x.InvoiceStatusName
	}
	return ""
}

func (x *CtmRefundResponse) GetPayStatusName() string {
	if x != nil {
		return x.PayStatusName
	}
	return ""
}

func (x *CtmRefundResponse) GetDeliveryTermName() string {
	if x != nil {
		return x.DeliveryTermName
	}
	return ""
}

func (x *CtmRefundResponse) GetCtmNickname() string {
	if x != nil {
		return x.CtmNickname
	}
	return ""
}

func (x *CtmRefundResponse) GetCtmMobile() string {
	if x != nil {
		return x.CtmMobile
	}
	return ""
}

func (x *CtmRefundResponse) GetCtmOpenId() string {
	if x != nil {
		return x.CtmOpenId
	}
	return ""
}

func (x *CtmRefundResponse) GetAfterSalesDetails() []*ObjectAfterSalesResponse {
	if x != nil {
		return x.AfterSalesDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetRefundGoodsDetails() []*RefundReturnResponse {
	if x != nil {
		return x.RefundGoodsDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetSwapGoodsDetails() []*RefundDeliverResponse {
	if x != nil {
		return x.SwapGoodsDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetRefundCompensateDetails() []*RefundCompensateResponse {
	if x != nil {
		return x.RefundCompensateDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetRefundPayDetails() []*RefundRefundResponse {
	if x != nil {
		return x.RefundPayDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetRefundInvoiceDetails() []*RefundInvoiceResponse {
	if x != nil {
		return x.RefundInvoiceDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetStockInDetails() []*RefundStockInResponse {
	if x != nil {
		return x.StockInDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetStockOutDetails() []*RefundStockOutResponse {
	if x != nil {
		return x.StockOutDetails
	}
	return nil
}

func (x *CtmRefundResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CtmRefundResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CtmRefundResponse) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *CtmRefundResponse) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *CtmRefundResponse) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *CtmRefundResponse) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *CtmRefundResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CtmRefundResponse) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *CtmRefundResponse) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *CtmRefundResponse) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *CtmRefundResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *CtmRefundResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *CtmRefundResponse) GetReasonCode() string {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return ""
}

func (x *CtmRefundResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *CtmRefundResponse) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CtmRefundResponse) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *CtmRefundResponse) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *CtmRefundResponse) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *CtmRefundResponse) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *CtmRefundResponse) GetRevertCode() string {
	if x != nil && x.RevertCode != nil {
		return *x.RevertCode
	}
	return ""
}

func (x *CtmRefundResponse) GetRevertReason() string {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return ""
}

func (x *CtmRefundResponse) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *CtmRefundResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *CtmRefundResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *CtmRefundResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *CtmRefundResponse) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *CtmRefundResponse) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *CtmRefundResponse) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *CtmRefundResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *CtmRefundResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *CtmRefundResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *CtmRefundResponse) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *CtmRefundResponse) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *CtmRefundResponse) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *CtmRefundResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *CtmRefundResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *CtmRefundResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *CtmRefundResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *CtmRefundResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *CtmRefundResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *CtmRefundResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *CtmRefundResponse) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *CtmRefundResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CtmRefundResponse) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *CtmRefundResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CtmRefundResponse) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *CtmRefundResponse) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *CtmRefundResponse) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *CtmRefundResponse) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *CtmRefundResponse) GetRefundFee() float64 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *CtmRefundResponse) GetRefundCardNo() string {
	if x != nil && x.RefundCardNo != nil {
		return *x.RefundCardNo
	}
	return ""
}

func (x *CtmRefundResponse) GetRefundCardPoints() int32 {
	if x != nil {
		return x.RefundCardPoints
	}
	return 0
}

func (x *CtmRefundResponse) GetRefundNutNum() int32 {
	if x != nil {
		return x.RefundNutNum
	}
	return 0
}

func (x *CtmRefundResponse) GetRefundScoreNum() int32 {
	if x != nil {
		return x.RefundScoreNum
	}
	return 0
}

func (x *CtmRefundResponse) GetRefundBadgeNum() int32 {
	if x != nil {
		return x.RefundBadgeNum
	}
	return 0
}

func (x *CtmRefundResponse) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *CtmRefundResponse) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *CtmRefundResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *CtmRefundResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CtmRefundResponse) GetIsCheck() int32 {
	if x != nil && x.IsCheck != nil {
		return *x.IsCheck
	}
	return 0
}

func (x *CtmRefundResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *CtmRefundResponse) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *CtmRefundResponse) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmRefundResponse) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

type CtmRefundRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CtmRefundRetrieveRequest) Reset() {
	*x = CtmRefundRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmRefundRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmRefundRetrieveRequest) ProtoMessage() {}

func (x *CtmRefundRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmRefundRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CtmRefundRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{20}
}

func (x *CtmRefundRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyObjectAfterSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyObjectAfterSalesRequest) Reset() {
	*x = DestroyObjectAfterSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyObjectAfterSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyObjectAfterSalesRequest) ProtoMessage() {}

func (x *DestroyObjectAfterSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyObjectAfterSalesRequest.ProtoReflect.Descriptor instead.
func (*DestroyObjectAfterSalesRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{21}
}

func (x *DestroyObjectAfterSalesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyRefundCompensateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRefundCompensateRequest) Reset() {
	*x = DestroyRefundCompensateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRefundCompensateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRefundCompensateRequest) ProtoMessage() {}

func (x *DestroyRefundCompensateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRefundCompensateRequest.ProtoReflect.Descriptor instead.
func (*DestroyRefundCompensateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{22}
}

func (x *DestroyRefundCompensateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyRefundDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRefundDeliverRequest) Reset() {
	*x = DestroyRefundDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRefundDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRefundDeliverRequest) ProtoMessage() {}

func (x *DestroyRefundDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRefundDeliverRequest.ProtoReflect.Descriptor instead.
func (*DestroyRefundDeliverRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{23}
}

func (x *DestroyRefundDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyRefundInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRefundInvoiceRequest) Reset() {
	*x = DestroyRefundInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRefundInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRefundInvoiceRequest) ProtoMessage() {}

func (x *DestroyRefundInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRefundInvoiceRequest.ProtoReflect.Descriptor instead.
func (*DestroyRefundInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{24}
}

func (x *DestroyRefundInvoiceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyRefundRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRefundRefundRequest) Reset() {
	*x = DestroyRefundRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRefundRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRefundRefundRequest) ProtoMessage() {}

func (x *DestroyRefundRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRefundRefundRequest.ProtoReflect.Descriptor instead.
func (*DestroyRefundRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{25}
}

func (x *DestroyRefundRefundRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyRefundReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRefundReturnRequest) Reset() {
	*x = DestroyRefundReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRefundReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRefundReturnRequest) ProtoMessage() {}

func (x *DestroyRefundReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRefundReturnRequest.ProtoReflect.Descriptor instead.
func (*DestroyRefundReturnRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{26}
}

func (x *DestroyRefundReturnRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyRefundStockInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRefundStockInRequest) Reset() {
	*x = DestroyRefundStockInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRefundStockInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRefundStockInRequest) ProtoMessage() {}

func (x *DestroyRefundStockInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRefundStockInRequest.ProtoReflect.Descriptor instead.
func (*DestroyRefundStockInRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{27}
}

func (x *DestroyRefundStockInRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyRefundStockOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRefundStockOutRequest) Reset() {
	*x = DestroyRefundStockOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRefundStockOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRefundStockOutRequest) ProtoMessage() {}

func (x *DestroyRefundStockOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRefundStockOutRequest.ProtoReflect.Descriptor instead.
func (*DestroyRefundStockOutRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{28}
}

func (x *DestroyRefundStockOutRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListObjectAfterSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListObjectAfterSalesRequest) Reset() {
	*x = ListObjectAfterSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectAfterSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectAfterSalesRequest) ProtoMessage() {}

func (x *ListObjectAfterSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectAfterSalesRequest.ProtoReflect.Descriptor instead.
func (*ListObjectAfterSalesRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{29}
}

func (x *ListObjectAfterSalesRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListRefundCompensateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRefundCompensateRequest) Reset() {
	*x = ListRefundCompensateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundCompensateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundCompensateRequest) ProtoMessage() {}

func (x *ListRefundCompensateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundCompensateRequest.ProtoReflect.Descriptor instead.
func (*ListRefundCompensateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{30}
}

func (x *ListRefundCompensateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListRefundDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRefundDeliverRequest) Reset() {
	*x = ListRefundDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundDeliverRequest) ProtoMessage() {}

func (x *ListRefundDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundDeliverRequest.ProtoReflect.Descriptor instead.
func (*ListRefundDeliverRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{31}
}

func (x *ListRefundDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListRefundInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRefundInvoiceRequest) Reset() {
	*x = ListRefundInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundInvoiceRequest) ProtoMessage() {}

func (x *ListRefundInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundInvoiceRequest.ProtoReflect.Descriptor instead.
func (*ListRefundInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{32}
}

func (x *ListRefundInvoiceRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListRefundRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRefundRefundRequest) Reset() {
	*x = ListRefundRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundRefundRequest) ProtoMessage() {}

func (x *ListRefundRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundRefundRequest.ProtoReflect.Descriptor instead.
func (*ListRefundRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{33}
}

func (x *ListRefundRefundRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListRefundReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRefundReturnRequest) Reset() {
	*x = ListRefundReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundReturnRequest) ProtoMessage() {}

func (x *ListRefundReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundReturnRequest.ProtoReflect.Descriptor instead.
func (*ListRefundReturnRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{34}
}

func (x *ListRefundReturnRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListRefundStockInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRefundStockInRequest) Reset() {
	*x = ListRefundStockInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundStockInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundStockInRequest) ProtoMessage() {}

func (x *ListRefundStockInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundStockInRequest.ProtoReflect.Descriptor instead.
func (*ListRefundStockInRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{35}
}

func (x *ListRefundStockInRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListRefundStockOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRefundStockOutRequest) Reset() {
	*x = ListRefundStockOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundStockOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundStockOutRequest) ProtoMessage() {}

func (x *ListRefundStockOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundStockOutRequest.ProtoReflect.Descriptor instead.
func (*ListRefundStockOutRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{36}
}

func (x *ListRefundStockOutRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type NextNoRefundRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NextNoRefundRefundRequest) Reset() {
	*x = NextNoRefundRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextNoRefundRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextNoRefundRefundRequest) ProtoMessage() {}

func (x *NextNoRefundRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextNoRefundRefundRequest.ProtoReflect.Descriptor instead.
func (*NextNoRefundRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{37}
}

type NextNoRefundRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRefundNo string `protobuf:"bytes,1,opt,name=next_refund_no,json=nextRefundNo,proto3" json:"next_refund_no,omitempty"`
}

func (x *NextNoRefundRefundResponse) Reset() {
	*x = NextNoRefundRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextNoRefundRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextNoRefundRefundResponse) ProtoMessage() {}

func (x *NextNoRefundRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextNoRefundRefundResponse.ProtoReflect.Descriptor instead.
func (*NextNoRefundRefundResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{38}
}

func (x *NextNoRefundRefundResponse) GetNextRefundNo() string {
	if x != nil {
		return x.NextRefundNo
	}
	return ""
}

type ObjectAfterSalesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ObjectAfterSalesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ObjectAfterSalesListResponse) Reset() {
	*x = ObjectAfterSalesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAfterSalesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAfterSalesListResponse) ProtoMessage() {}

func (x *ObjectAfterSalesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAfterSalesListResponse.ProtoReflect.Descriptor instead.
func (*ObjectAfterSalesListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{39}
}

func (x *ObjectAfterSalesListResponse) GetResults() []*ObjectAfterSalesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ObjectAfterSalesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ObjectAfterSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Type            int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	GoodsId         *string  `protobuf:"bytes,4,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName       *string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu        *string  `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo          *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName        *string  `protobuf:"bytes,9,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode        *string  `protobuf:"bytes,10,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode    *string  `protobuf:"bytes,11,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	PlatformOrder   *string  `protobuf:"bytes,12,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	OmsOrder        *string  `protobuf:"bytes,13,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	Oid             *string  `protobuf:"bytes,14,opt,name=oid,proto3,oneof" json:"oid,omitempty"`
	OutAmount       *float64 `protobuf:"fixed64,15,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	RetailPrice     *float64 `protobuf:"fixed64,16,opt,name=retail_price,json=retailPrice,proto3,oneof" json:"retail_price,omitempty"`
	Num             int32    `protobuf:"varint,17,opt,name=num,proto3" json:"num,omitempty"`
	DamagePartsCode *string  `protobuf:"bytes,18,opt,name=damage_parts_code,json=damagePartsCode,proto3,oneof" json:"damage_parts_code,omitempty"`
	DamagePartsName *string  `protobuf:"bytes,19,opt,name=damage_parts_name,json=damagePartsName,proto3,oneof" json:"damage_parts_name,omitempty"`
	DamageReasons   *string  `protobuf:"bytes,20,opt,name=damage_reasons,json=damageReasons,proto3,oneof" json:"damage_reasons,omitempty"`
	DamageDesc      *string  `protobuf:"bytes,21,opt,name=damage_desc,json=damageDesc,proto3,oneof" json:"damage_desc,omitempty"`
	MediaPath       *string  `protobuf:"bytes,22,opt,name=media_path,json=mediaPath,proto3,oneof" json:"media_path,omitempty"`
	RefundObject    *int64   `protobuf:"varint,23,opt,name=refund_object,json=refundObject,proto3,oneof" json:"refund_object,omitempty"`
	OrderDetails    *int64   `protobuf:"varint,24,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *ObjectAfterSalesRequest) Reset() {
	*x = ObjectAfterSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAfterSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAfterSalesRequest) ProtoMessage() {}

func (x *ObjectAfterSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAfterSalesRequest.ProtoReflect.Descriptor instead.
func (*ObjectAfterSalesRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{40}
}

func (x *ObjectAfterSalesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ObjectAfterSalesRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ObjectAfterSalesRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *ObjectAfterSalesRequest) GetRetailPrice() float64 {
	if x != nil && x.RetailPrice != nil {
		return *x.RetailPrice
	}
	return 0
}

func (x *ObjectAfterSalesRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ObjectAfterSalesRequest) GetDamagePartsCode() string {
	if x != nil && x.DamagePartsCode != nil {
		return *x.DamagePartsCode
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetDamagePartsName() string {
	if x != nil && x.DamagePartsName != nil {
		return *x.DamagePartsName
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetDamageReasons() string {
	if x != nil && x.DamageReasons != nil {
		return *x.DamageReasons
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetDamageDesc() string {
	if x != nil && x.DamageDesc != nil {
		return *x.DamageDesc
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetMediaPath() string {
	if x != nil && x.MediaPath != nil {
		return *x.MediaPath
	}
	return ""
}

func (x *ObjectAfterSalesRequest) GetRefundObject() int64 {
	if x != nil && x.RefundObject != nil {
		return *x.RefundObject
	}
	return 0
}

func (x *ObjectAfterSalesRequest) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type ObjectAfterSalesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime      string   `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string   `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Type            int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	GoodsId         *string  `protobuf:"bytes,5,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName       *string  `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu        *string  `protobuf:"bytes,7,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,8,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo          *string  `protobuf:"bytes,9,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName        *string  `protobuf:"bytes,10,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode        *string  `protobuf:"bytes,11,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode    *string  `protobuf:"bytes,12,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	PlatformOrder   *string  `protobuf:"bytes,13,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	OmsOrder        *string  `protobuf:"bytes,14,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	Oid             *string  `protobuf:"bytes,15,opt,name=oid,proto3,oneof" json:"oid,omitempty"`
	OutAmount       *float64 `protobuf:"fixed64,16,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	RetailPrice     *float64 `protobuf:"fixed64,17,opt,name=retail_price,json=retailPrice,proto3,oneof" json:"retail_price,omitempty"`
	Num             int32    `protobuf:"varint,18,opt,name=num,proto3" json:"num,omitempty"`
	DamagePartsCode *string  `protobuf:"bytes,19,opt,name=damage_parts_code,json=damagePartsCode,proto3,oneof" json:"damage_parts_code,omitempty"`
	DamagePartsName *string  `protobuf:"bytes,20,opt,name=damage_parts_name,json=damagePartsName,proto3,oneof" json:"damage_parts_name,omitempty"`
	DamageReasons   *string  `protobuf:"bytes,21,opt,name=damage_reasons,json=damageReasons,proto3,oneof" json:"damage_reasons,omitempty"`
	DamageDesc      *string  `protobuf:"bytes,22,opt,name=damage_desc,json=damageDesc,proto3,oneof" json:"damage_desc,omitempty"`
	MediaPath       *string  `protobuf:"bytes,23,opt,name=media_path,json=mediaPath,proto3,oneof" json:"media_path,omitempty"`
	RefundObject    *int64   `protobuf:"varint,24,opt,name=refund_object,json=refundObject,proto3,oneof" json:"refund_object,omitempty"`
	OrderDetails    *int64   `protobuf:"varint,25,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *ObjectAfterSalesResponse) Reset() {
	*x = ObjectAfterSalesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAfterSalesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAfterSalesResponse) ProtoMessage() {}

func (x *ObjectAfterSalesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAfterSalesResponse.ProtoReflect.Descriptor instead.
func (*ObjectAfterSalesResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{41}
}

func (x *ObjectAfterSalesResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ObjectAfterSalesResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ObjectAfterSalesResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *ObjectAfterSalesResponse) GetRetailPrice() float64 {
	if x != nil && x.RetailPrice != nil {
		return *x.RetailPrice
	}
	return 0
}

func (x *ObjectAfterSalesResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ObjectAfterSalesResponse) GetDamagePartsCode() string {
	if x != nil && x.DamagePartsCode != nil {
		return *x.DamagePartsCode
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetDamagePartsName() string {
	if x != nil && x.DamagePartsName != nil {
		return *x.DamagePartsName
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetDamageReasons() string {
	if x != nil && x.DamageReasons != nil {
		return *x.DamageReasons
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetDamageDesc() string {
	if x != nil && x.DamageDesc != nil {
		return *x.DamageDesc
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetMediaPath() string {
	if x != nil && x.MediaPath != nil {
		return *x.MediaPath
	}
	return ""
}

func (x *ObjectAfterSalesResponse) GetRefundObject() int64 {
	if x != nil && x.RefundObject != nil {
		return *x.RefundObject
	}
	return 0
}

func (x *ObjectAfterSalesResponse) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type OptionValueIntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *OptionValueIntResponse) Reset() {
	*x = OptionValueIntResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionValueIntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionValueIntResponse) ProtoMessage() {}

func (x *OptionValueIntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionValueIntResponse.ProtoReflect.Descriptor instead.
func (*OptionValueIntResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{42}
}

func (x *OptionValueIntResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *OptionValueIntResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type OptionValueStringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *OptionValueStringResponse) Reset() {
	*x = OptionValueStringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionValueStringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionValueStringResponse) ProtoMessage() {}

func (x *OptionValueStringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionValueStringResponse.ProtoReflect.Descriptor instead.
func (*OptionValueStringResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{43}
}

func (x *OptionValueStringResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OptionValueStringResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type RefundCompensateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundCompensateResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundCompensateListResponse) Reset() {
	*x = RefundCompensateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundCompensateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundCompensateListResponse) ProtoMessage() {}

func (x *RefundCompensateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundCompensateListResponse.ProtoReflect.Descriptor instead.
func (*RefundCompensateListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{44}
}

func (x *RefundCompensateListResponse) GetResults() []*RefundCompensateResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundCompensateListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundCompensateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	PrepayId            *string `protobuf:"bytes,3,opt,name=prepay_id,json=prepayId,proto3,oneof" json:"prepay_id,omitempty"`
	PrepayExpired       *string `protobuf:"bytes,4,opt,name=prepay_expired,json=prepayExpired,proto3,oneof" json:"prepay_expired,omitempty"`
	TradeType           *string `protobuf:"bytes,5,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	TradeState          *string `protobuf:"bytes,6,opt,name=trade_state,json=tradeState,proto3,oneof" json:"trade_state,omitempty"`
	TradeStateDesc      *string `protobuf:"bytes,7,opt,name=trade_state_desc,json=tradeStateDesc,proto3,oneof" json:"trade_state_desc,omitempty"`
	TransactionId       *string `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	AppId               *string `protobuf:"bytes,9,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	MchId               *string `protobuf:"bytes,10,opt,name=mch_id,json=mchId,proto3,oneof" json:"mch_id,omitempty"`
	OpenId              string  `protobuf:"bytes,11,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutTradeNo          *string `protobuf:"bytes,12,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	Attach              *string `protobuf:"bytes,13,opt,name=attach,proto3,oneof" json:"attach,omitempty"`
	Total               *int32  `protobuf:"varint,14,opt,name=total,proto3,oneof" json:"total,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,15,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	Currency            *string `protobuf:"bytes,16,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	BankType            *string `protobuf:"bytes,17,opt,name=bank_type,json=bankType,proto3,oneof" json:"bank_type,omitempty"`
	SuccessTime         *string `protobuf:"bytes,18,opt,name=success_time,json=successTime,proto3,oneof" json:"success_time,omitempty"`
	OutRefundNo         *string `protobuf:"bytes,19,opt,name=out_refund_no,json=outRefundNo,proto3,oneof" json:"out_refund_no,omitempty"`
	Reason              *string `protobuf:"bytes,20,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Refund              *int32  `protobuf:"varint,21,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,22,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,23,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,24,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,25,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	RefundFee           *int32  `protobuf:"varint,26,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	RefundId            *string `protobuf:"bytes,27,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,28,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,29,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	Status              *string `protobuf:"bytes,30,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CancelReasons       *string `protobuf:"bytes,31,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmOrder            *int64  `protobuf:"varint,32,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund           *int64  `protobuf:"varint,33,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmService          *int64  `protobuf:"varint,34,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *RefundCompensateRequest) Reset() {
	*x = RefundCompensateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundCompensateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundCompensateRequest) ProtoMessage() {}

func (x *RefundCompensateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundCompensateRequest.ProtoReflect.Descriptor instead.
func (*RefundCompensateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{45}
}

func (x *RefundCompensateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundCompensateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundCompensateRequest) GetPrepayId() string {
	if x != nil && x.PrepayId != nil {
		return *x.PrepayId
	}
	return ""
}

func (x *RefundCompensateRequest) GetPrepayExpired() string {
	if x != nil && x.PrepayExpired != nil {
		return *x.PrepayExpired
	}
	return ""
}

func (x *RefundCompensateRequest) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *RefundCompensateRequest) GetTradeState() string {
	if x != nil && x.TradeState != nil {
		return *x.TradeState
	}
	return ""
}

func (x *RefundCompensateRequest) GetTradeStateDesc() string {
	if x != nil && x.TradeStateDesc != nil {
		return *x.TradeStateDesc
	}
	return ""
}

func (x *RefundCompensateRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *RefundCompensateRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *RefundCompensateRequest) GetMchId() string {
	if x != nil && x.MchId != nil {
		return *x.MchId
	}
	return ""
}

func (x *RefundCompensateRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *RefundCompensateRequest) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *RefundCompensateRequest) GetAttach() string {
	if x != nil && x.Attach != nil {
		return *x.Attach
	}
	return ""
}

func (x *RefundCompensateRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *RefundCompensateRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *RefundCompensateRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *RefundCompensateRequest) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *RefundCompensateRequest) GetSuccessTime() string {
	if x != nil && x.SuccessTime != nil {
		return *x.SuccessTime
	}
	return ""
}

func (x *RefundCompensateRequest) GetOutRefundNo() string {
	if x != nil && x.OutRefundNo != nil {
		return *x.OutRefundNo
	}
	return ""
}

func (x *RefundCompensateRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *RefundCompensateRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *RefundCompensateRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *RefundCompensateRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *RefundCompensateRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *RefundCompensateRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *RefundCompensateRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *RefundCompensateRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *RefundCompensateRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *RefundCompensateRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *RefundCompensateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *RefundCompensateRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *RefundCompensateRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundCompensateRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundCompensateRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type RefundCompensateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeTypeName       string  `protobuf:"bytes,2,opt,name=trade_type_name,json=tradeTypeName,proto3" json:"trade_type_name,omitempty"`
	TradeStatusName     string  `protobuf:"bytes,3,opt,name=trade_status_name,json=tradeStatusName,proto3" json:"trade_status_name,omitempty"`
	CreateTime          string  `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime          string  `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	PrepayId            *string `protobuf:"bytes,6,opt,name=prepay_id,json=prepayId,proto3,oneof" json:"prepay_id,omitempty"`
	PrepayExpired       *string `protobuf:"bytes,7,opt,name=prepay_expired,json=prepayExpired,proto3,oneof" json:"prepay_expired,omitempty"`
	TradeType           *string `protobuf:"bytes,8,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	TradeState          *string `protobuf:"bytes,9,opt,name=trade_state,json=tradeState,proto3,oneof" json:"trade_state,omitempty"`
	TradeStateDesc      *string `protobuf:"bytes,10,opt,name=trade_state_desc,json=tradeStateDesc,proto3,oneof" json:"trade_state_desc,omitempty"`
	TransactionId       *string `protobuf:"bytes,11,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	AppId               *string `protobuf:"bytes,12,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	MchId               *string `protobuf:"bytes,13,opt,name=mch_id,json=mchId,proto3,oneof" json:"mch_id,omitempty"`
	OpenId              string  `protobuf:"bytes,14,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutTradeNo          *string `protobuf:"bytes,15,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	Attach              *string `protobuf:"bytes,16,opt,name=attach,proto3,oneof" json:"attach,omitempty"`
	Total               *int32  `protobuf:"varint,17,opt,name=total,proto3,oneof" json:"total,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,18,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	Currency            *string `protobuf:"bytes,19,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	BankType            *string `protobuf:"bytes,20,opt,name=bank_type,json=bankType,proto3,oneof" json:"bank_type,omitempty"`
	SuccessTime         *string `protobuf:"bytes,21,opt,name=success_time,json=successTime,proto3,oneof" json:"success_time,omitempty"`
	OutRefundNo         *string `protobuf:"bytes,22,opt,name=out_refund_no,json=outRefundNo,proto3,oneof" json:"out_refund_no,omitempty"`
	Reason              *string `protobuf:"bytes,23,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Refund              *int32  `protobuf:"varint,24,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,25,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,26,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,27,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,28,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	RefundFee           *int32  `protobuf:"varint,29,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	RefundId            *string `protobuf:"bytes,30,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,31,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,32,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	Status              *string `protobuf:"bytes,33,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CancelReasons       *string `protobuf:"bytes,34,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmOrder            *int64  `protobuf:"varint,35,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund           *int64  `protobuf:"varint,36,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmService          *int64  `protobuf:"varint,37,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *RefundCompensateResponse) Reset() {
	*x = RefundCompensateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundCompensateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundCompensateResponse) ProtoMessage() {}

func (x *RefundCompensateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundCompensateResponse.ProtoReflect.Descriptor instead.
func (*RefundCompensateResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{46}
}

func (x *RefundCompensateResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundCompensateResponse) GetTradeTypeName() string {
	if x != nil {
		return x.TradeTypeName
	}
	return ""
}

func (x *RefundCompensateResponse) GetTradeStatusName() string {
	if x != nil {
		return x.TradeStatusName
	}
	return ""
}

func (x *RefundCompensateResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundCompensateResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundCompensateResponse) GetPrepayId() string {
	if x != nil && x.PrepayId != nil {
		return *x.PrepayId
	}
	return ""
}

func (x *RefundCompensateResponse) GetPrepayExpired() string {
	if x != nil && x.PrepayExpired != nil {
		return *x.PrepayExpired
	}
	return ""
}

func (x *RefundCompensateResponse) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *RefundCompensateResponse) GetTradeState() string {
	if x != nil && x.TradeState != nil {
		return *x.TradeState
	}
	return ""
}

func (x *RefundCompensateResponse) GetTradeStateDesc() string {
	if x != nil && x.TradeStateDesc != nil {
		return *x.TradeStateDesc
	}
	return ""
}

func (x *RefundCompensateResponse) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *RefundCompensateResponse) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *RefundCompensateResponse) GetMchId() string {
	if x != nil && x.MchId != nil {
		return *x.MchId
	}
	return ""
}

func (x *RefundCompensateResponse) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *RefundCompensateResponse) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *RefundCompensateResponse) GetAttach() string {
	if x != nil && x.Attach != nil {
		return *x.Attach
	}
	return ""
}

func (x *RefundCompensateResponse) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *RefundCompensateResponse) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *RefundCompensateResponse) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *RefundCompensateResponse) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *RefundCompensateResponse) GetSuccessTime() string {
	if x != nil && x.SuccessTime != nil {
		return *x.SuccessTime
	}
	return ""
}

func (x *RefundCompensateResponse) GetOutRefundNo() string {
	if x != nil && x.OutRefundNo != nil {
		return *x.OutRefundNo
	}
	return ""
}

func (x *RefundCompensateResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *RefundCompensateResponse) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *RefundCompensateResponse) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *RefundCompensateResponse) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *RefundCompensateResponse) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *RefundCompensateResponse) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *RefundCompensateResponse) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *RefundCompensateResponse) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *RefundCompensateResponse) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *RefundCompensateResponse) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *RefundCompensateResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *RefundCompensateResponse) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *RefundCompensateResponse) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundCompensateResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundCompensateResponse) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type RefundDeliverListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundDeliverResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundDeliverListResponse) Reset() {
	*x = RefundDeliverListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundDeliverListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundDeliverListResponse) ProtoMessage() {}

func (x *RefundDeliverListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundDeliverListResponse.ProtoReflect.Descriptor instead.
func (*RefundDeliverListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{47}
}

func (x *RefundDeliverListResponse) GetResults() []*RefundDeliverResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundDeliverListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmRefund     *int64   `protobuf:"varint,3,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CanEdit       bool     `protobuf:"varint,4,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num           int32    `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64  `protobuf:"fixed64,7,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64  `protobuf:"fixed64,8,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64  `protobuf:"fixed64,9,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64  `protobuf:"fixed64,10,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount   *float64 `protobuf:"fixed64,11,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut      *int32   `protobuf:"varint,12,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore    *int32   `protobuf:"varint,13,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge    *int32   `protobuf:"varint,14,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status        *int32   `protobuf:"varint,15,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32   `protobuf:"varint,16,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string  `protobuf:"bytes,17,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string  `protobuf:"bytes,18,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu      *string  `protobuf:"bytes,19,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo       *string  `protobuf:"bytes,20,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string   `protobuf:"bytes,21,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string  `protobuf:"bytes,22,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode      *string  `protobuf:"bytes,23,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode  *string  `protobuf:"bytes,24,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark        *string  `protobuf:"bytes,25,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo          *string  `protobuf:"bytes,26,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	CtmOrder      *int64   `protobuf:"varint,27,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService    *int64   `protobuf:"varint,28,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *RefundDeliverRequest) Reset() {
	*x = RefundDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundDeliverRequest) ProtoMessage() {}

func (x *RefundDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundDeliverRequest.ProtoReflect.Descriptor instead.
func (*RefundDeliverRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{48}
}

func (x *RefundDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundDeliverRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundDeliverRequest) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *RefundDeliverRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RefundDeliverRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RefundDeliverRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *RefundDeliverRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *RefundDeliverRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *RefundDeliverRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *RefundDeliverRequest) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *RefundDeliverRequest) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *RefundDeliverRequest) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *RefundDeliverRequest) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *RefundDeliverRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *RefundDeliverRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *RefundDeliverRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *RefundDeliverRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundDeliverRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *RefundDeliverRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RefundDeliverRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *RefundDeliverRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *RefundDeliverRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *RefundDeliverRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RefundDeliverRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundDeliverRequest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *RefundDeliverRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundDeliverRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type RefundDeliverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusName       string   `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	RefundStatusName string   `protobuf:"bytes,3,opt,name=refund_status_name,json=refundStatusName,proto3" json:"refund_status_name,omitempty"`
	CtmRefund        *int64   `protobuf:"varint,4,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CreateTime       string   `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       string   `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CanEdit          bool     `protobuf:"varint,7,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num              int32    `protobuf:"varint,8,opt,name=num,proto3" json:"num,omitempty"`
	Price            float64  `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount     float64  `protobuf:"fixed64,10,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount         float64  `protobuf:"fixed64,11,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount    float64  `protobuf:"fixed64,12,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount      float64  `protobuf:"fixed64,13,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount      *float64 `protobuf:"fixed64,14,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut         *int32   `protobuf:"varint,15,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore       *int32   `protobuf:"varint,16,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge       *int32   `protobuf:"varint,17,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status           *int32   `protobuf:"varint,18,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus     *int32   `protobuf:"varint,19,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId          *string  `protobuf:"bytes,20,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName        *string  `protobuf:"bytes,21,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu         *string  `protobuf:"bytes,22,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo          *string  `protobuf:"bytes,23,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo           string   `protobuf:"bytes,24,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName         *string  `protobuf:"bytes,25,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode         *string  `protobuf:"bytes,26,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode     *string  `protobuf:"bytes,27,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark           *string  `protobuf:"bytes,28,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo             *string  `protobuf:"bytes,29,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	CtmOrder         *int64   `protobuf:"varint,30,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService       *int64   `protobuf:"varint,31,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *RefundDeliverResponse) Reset() {
	*x = RefundDeliverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundDeliverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundDeliverResponse) ProtoMessage() {}

func (x *RefundDeliverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundDeliverResponse.ProtoReflect.Descriptor instead.
func (*RefundDeliverResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{49}
}

func (x *RefundDeliverResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundDeliverResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *RefundDeliverResponse) GetRefundStatusName() string {
	if x != nil {
		return x.RefundStatusName
	}
	return ""
}

func (x *RefundDeliverResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundDeliverResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundDeliverResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundDeliverResponse) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *RefundDeliverResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RefundDeliverResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RefundDeliverResponse) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *RefundDeliverResponse) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *RefundDeliverResponse) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *RefundDeliverResponse) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *RefundDeliverResponse) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *RefundDeliverResponse) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *RefundDeliverResponse) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *RefundDeliverResponse) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *RefundDeliverResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *RefundDeliverResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *RefundDeliverResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *RefundDeliverResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundDeliverResponse) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *RefundDeliverResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RefundDeliverResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *RefundDeliverResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *RefundDeliverResponse) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *RefundDeliverResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RefundDeliverResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundDeliverResponse) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *RefundDeliverResponse) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundDeliverResponse) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type RefundInvoiceChildrenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InvoiceTypeName string   `protobuf:"bytes,2,opt,name=invoice_type_name,json=invoiceTypeName,proto3" json:"invoice_type_name,omitempty"`
	PayerTypeName   string   `protobuf:"bytes,3,opt,name=payer_type_name,json=payerTypeName,proto3" json:"payer_type_name,omitempty"`
	ReasonTypeName  string   `protobuf:"bytes,4,opt,name=reason_type_name,json=reasonTypeName,proto3" json:"reason_type_name,omitempty"`
	CreateTime      string   `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string   `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	InvoiceType     int32    `protobuf:"varint,7,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	PayerType       int32    `protobuf:"varint,8,opt,name=payer_type,json=payerType,proto3" json:"payer_type,omitempty"`
	PayerName       *string  `protobuf:"bytes,9,opt,name=payer_name,json=payerName,proto3,oneof" json:"payer_name,omitempty"`
	PayerRegisterNo *string  `protobuf:"bytes,10,opt,name=payer_register_no,json=payerRegisterNo,proto3,oneof" json:"payer_register_no,omitempty"`
	PayerPhone      *string  `protobuf:"bytes,11,opt,name=payer_phone,json=payerPhone,proto3,oneof" json:"payer_phone,omitempty"`
	PayerEmail      *string  `protobuf:"bytes,12,opt,name=payer_email,json=payerEmail,proto3,oneof" json:"payer_email,omitempty"`
	PayerAddress    *string  `protobuf:"bytes,13,opt,name=payer_address,json=payerAddress,proto3,oneof" json:"payer_address,omitempty"`
	PayerBank       *string  `protobuf:"bytes,14,opt,name=payer_bank,json=payerBank,proto3,oneof" json:"payer_bank,omitempty"`
	PayerAccount    *string  `protobuf:"bytes,15,opt,name=payer_account,json=payerAccount,proto3,oneof" json:"payer_account,omitempty"`
	InvoiceAmount   *float64 `protobuf:"fixed64,16,opt,name=invoice_amount,json=invoiceAmount,proto3,oneof" json:"invoice_amount,omitempty"`
	InvoiceRemark   *string  `protobuf:"bytes,17,opt,name=invoice_remark,json=invoiceRemark,proto3,oneof" json:"invoice_remark,omitempty"`
	InvoiceStatus   int32    `protobuf:"varint,18,opt,name=invoice_status,json=invoiceStatus,proto3" json:"invoice_status,omitempty"`
	ReasonType      *int32   `protobuf:"varint,19,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	InvoiceNo       *string  `protobuf:"bytes,20,opt,name=invoice_no,json=invoiceNo,proto3,oneof" json:"invoice_no,omitempty"`
	InvoiceCode     *string  `protobuf:"bytes,21,opt,name=invoice_code,json=invoiceCode,proto3,oneof" json:"invoice_code,omitempty"`
	Remark          *string  `protobuf:"bytes,22,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName       *string  `protobuf:"bytes,23,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CtmOrder        *int64   `protobuf:"varint,24,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService      *int64   `protobuf:"varint,25,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund       *int64   `protobuf:"varint,26,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	ParentInvoice   *int64   `protobuf:"varint,27,opt,name=parent_invoice,json=parentInvoice,proto3,oneof" json:"parent_invoice,omitempty"`
}

func (x *RefundInvoiceChildrenResponse) Reset() {
	*x = RefundInvoiceChildrenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundInvoiceChildrenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundInvoiceChildrenResponse) ProtoMessage() {}

func (x *RefundInvoiceChildrenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundInvoiceChildrenResponse.ProtoReflect.Descriptor instead.
func (*RefundInvoiceChildrenResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{50}
}

func (x *RefundInvoiceChildrenResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetInvoiceTypeName() string {
	if x != nil {
		return x.InvoiceTypeName
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetPayerTypeName() string {
	if x != nil {
		return x.PayerTypeName
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetReasonTypeName() string {
	if x != nil {
		return x.ReasonTypeName
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetInvoiceType() int32 {
	if x != nil {
		return x.InvoiceType
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetPayerType() int32 {
	if x != nil {
		return x.PayerType
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetPayerName() string {
	if x != nil && x.PayerName != nil {
		return *x.PayerName
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetPayerRegisterNo() string {
	if x != nil && x.PayerRegisterNo != nil {
		return *x.PayerRegisterNo
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetPayerPhone() string {
	if x != nil && x.PayerPhone != nil {
		return *x.PayerPhone
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetPayerEmail() string {
	if x != nil && x.PayerEmail != nil {
		return *x.PayerEmail
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetPayerAddress() string {
	if x != nil && x.PayerAddress != nil {
		return *x.PayerAddress
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetPayerBank() string {
	if x != nil && x.PayerBank != nil {
		return *x.PayerBank
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetPayerAccount() string {
	if x != nil && x.PayerAccount != nil {
		return *x.PayerAccount
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetInvoiceAmount() float64 {
	if x != nil && x.InvoiceAmount != nil {
		return *x.InvoiceAmount
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetInvoiceRemark() string {
	if x != nil && x.InvoiceRemark != nil {
		return *x.InvoiceRemark
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetInvoiceStatus() int32 {
	if x != nil {
		return x.InvoiceStatus
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetInvoiceNo() string {
	if x != nil && x.InvoiceNo != nil {
		return *x.InvoiceNo
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetInvoiceCode() string {
	if x != nil && x.InvoiceCode != nil {
		return *x.InvoiceCode
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *RefundInvoiceChildrenResponse) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundInvoiceChildrenResponse) GetParentInvoice() int64 {
	if x != nil && x.ParentInvoice != nil {
		return *x.ParentInvoice
	}
	return 0
}

type RefundInvoiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundInvoiceResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundInvoiceListResponse) Reset() {
	*x = RefundInvoiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundInvoiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundInvoiceListResponse) ProtoMessage() {}

func (x *RefundInvoiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundInvoiceListResponse.ProtoReflect.Descriptor instead.
func (*RefundInvoiceListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{51}
}

func (x *RefundInvoiceListResponse) GetResults() []*RefundInvoiceResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundInvoiceListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	InvoiceType     int32    `protobuf:"varint,3,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	PayerType       int32    `protobuf:"varint,4,opt,name=payer_type,json=payerType,proto3" json:"payer_type,omitempty"`
	PayerName       *string  `protobuf:"bytes,5,opt,name=payer_name,json=payerName,proto3,oneof" json:"payer_name,omitempty"`
	PayerRegisterNo *string  `protobuf:"bytes,6,opt,name=payer_register_no,json=payerRegisterNo,proto3,oneof" json:"payer_register_no,omitempty"`
	PayerPhone      *string  `protobuf:"bytes,7,opt,name=payer_phone,json=payerPhone,proto3,oneof" json:"payer_phone,omitempty"`
	PayerEmail      *string  `protobuf:"bytes,8,opt,name=payer_email,json=payerEmail,proto3,oneof" json:"payer_email,omitempty"`
	PayerAddress    *string  `protobuf:"bytes,9,opt,name=payer_address,json=payerAddress,proto3,oneof" json:"payer_address,omitempty"`
	PayerBank       *string  `protobuf:"bytes,10,opt,name=payer_bank,json=payerBank,proto3,oneof" json:"payer_bank,omitempty"`
	PayerAccount    *string  `protobuf:"bytes,11,opt,name=payer_account,json=payerAccount,proto3,oneof" json:"payer_account,omitempty"`
	InvoiceAmount   *float64 `protobuf:"fixed64,12,opt,name=invoice_amount,json=invoiceAmount,proto3,oneof" json:"invoice_amount,omitempty"`
	InvoiceRemark   *string  `protobuf:"bytes,13,opt,name=invoice_remark,json=invoiceRemark,proto3,oneof" json:"invoice_remark,omitempty"`
	InvoiceStatus   int32    `protobuf:"varint,14,opt,name=invoice_status,json=invoiceStatus,proto3" json:"invoice_status,omitempty"`
	ReasonType      *int32   `protobuf:"varint,15,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	InvoiceNo       *string  `protobuf:"bytes,16,opt,name=invoice_no,json=invoiceNo,proto3,oneof" json:"invoice_no,omitempty"`
	InvoiceCode     *string  `protobuf:"bytes,17,opt,name=invoice_code,json=invoiceCode,proto3,oneof" json:"invoice_code,omitempty"`
	Remark          *string  `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName       *string  `protobuf:"bytes,19,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CtmOrder        *int64   `protobuf:"varint,20,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService      *int64   `protobuf:"varint,21,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund       *int64   `protobuf:"varint,22,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	ParentInvoice   *int64   `protobuf:"varint,23,opt,name=parent_invoice,json=parentInvoice,proto3,oneof" json:"parent_invoice,omitempty"`
}

func (x *RefundInvoiceRequest) Reset() {
	*x = RefundInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundInvoiceRequest) ProtoMessage() {}

func (x *RefundInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundInvoiceRequest.ProtoReflect.Descriptor instead.
func (*RefundInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{52}
}

func (x *RefundInvoiceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundInvoiceRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundInvoiceRequest) GetInvoiceType() int32 {
	if x != nil {
		return x.InvoiceType
	}
	return 0
}

func (x *RefundInvoiceRequest) GetPayerType() int32 {
	if x != nil {
		return x.PayerType
	}
	return 0
}

func (x *RefundInvoiceRequest) GetPayerName() string {
	if x != nil && x.PayerName != nil {
		return *x.PayerName
	}
	return ""
}

func (x *RefundInvoiceRequest) GetPayerRegisterNo() string {
	if x != nil && x.PayerRegisterNo != nil {
		return *x.PayerRegisterNo
	}
	return ""
}

func (x *RefundInvoiceRequest) GetPayerPhone() string {
	if x != nil && x.PayerPhone != nil {
		return *x.PayerPhone
	}
	return ""
}

func (x *RefundInvoiceRequest) GetPayerEmail() string {
	if x != nil && x.PayerEmail != nil {
		return *x.PayerEmail
	}
	return ""
}

func (x *RefundInvoiceRequest) GetPayerAddress() string {
	if x != nil && x.PayerAddress != nil {
		return *x.PayerAddress
	}
	return ""
}

func (x *RefundInvoiceRequest) GetPayerBank() string {
	if x != nil && x.PayerBank != nil {
		return *x.PayerBank
	}
	return ""
}

func (x *RefundInvoiceRequest) GetPayerAccount() string {
	if x != nil && x.PayerAccount != nil {
		return *x.PayerAccount
	}
	return ""
}

func (x *RefundInvoiceRequest) GetInvoiceAmount() float64 {
	if x != nil && x.InvoiceAmount != nil {
		return *x.InvoiceAmount
	}
	return 0
}

func (x *RefundInvoiceRequest) GetInvoiceRemark() string {
	if x != nil && x.InvoiceRemark != nil {
		return *x.InvoiceRemark
	}
	return ""
}

func (x *RefundInvoiceRequest) GetInvoiceStatus() int32 {
	if x != nil {
		return x.InvoiceStatus
	}
	return 0
}

func (x *RefundInvoiceRequest) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *RefundInvoiceRequest) GetInvoiceNo() string {
	if x != nil && x.InvoiceNo != nil {
		return *x.InvoiceNo
	}
	return ""
}

func (x *RefundInvoiceRequest) GetInvoiceCode() string {
	if x != nil && x.InvoiceCode != nil {
		return *x.InvoiceCode
	}
	return ""
}

func (x *RefundInvoiceRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundInvoiceRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *RefundInvoiceRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundInvoiceRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *RefundInvoiceRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundInvoiceRequest) GetParentInvoice() int64 {
	if x != nil && x.ParentInvoice != nil {
		return *x.ParentInvoice
	}
	return 0
}

type RefundInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InvoiceTypeName string                           `protobuf:"bytes,2,opt,name=invoice_type_name,json=invoiceTypeName,proto3" json:"invoice_type_name,omitempty"`
	PayerTypeName   string                           `protobuf:"bytes,3,opt,name=payer_type_name,json=payerTypeName,proto3" json:"payer_type_name,omitempty"`
	ReasonTypeName  string                           `protobuf:"bytes,4,opt,name=reason_type_name,json=reasonTypeName,proto3" json:"reason_type_name,omitempty"`
	Children        []*RefundInvoiceChildrenResponse `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	CreateTime      string                           `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string                           `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	InvoiceType     int32                            `protobuf:"varint,8,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	PayerType       int32                            `protobuf:"varint,9,opt,name=payer_type,json=payerType,proto3" json:"payer_type,omitempty"`
	PayerName       *string                          `protobuf:"bytes,10,opt,name=payer_name,json=payerName,proto3,oneof" json:"payer_name,omitempty"`
	PayerRegisterNo *string                          `protobuf:"bytes,11,opt,name=payer_register_no,json=payerRegisterNo,proto3,oneof" json:"payer_register_no,omitempty"`
	PayerPhone      *string                          `protobuf:"bytes,12,opt,name=payer_phone,json=payerPhone,proto3,oneof" json:"payer_phone,omitempty"`
	PayerEmail      *string                          `protobuf:"bytes,13,opt,name=payer_email,json=payerEmail,proto3,oneof" json:"payer_email,omitempty"`
	PayerAddress    *string                          `protobuf:"bytes,14,opt,name=payer_address,json=payerAddress,proto3,oneof" json:"payer_address,omitempty"`
	PayerBank       *string                          `protobuf:"bytes,15,opt,name=payer_bank,json=payerBank,proto3,oneof" json:"payer_bank,omitempty"`
	PayerAccount    *string                          `protobuf:"bytes,16,opt,name=payer_account,json=payerAccount,proto3,oneof" json:"payer_account,omitempty"`
	InvoiceAmount   *float64                         `protobuf:"fixed64,17,opt,name=invoice_amount,json=invoiceAmount,proto3,oneof" json:"invoice_amount,omitempty"`
	InvoiceRemark   *string                          `protobuf:"bytes,18,opt,name=invoice_remark,json=invoiceRemark,proto3,oneof" json:"invoice_remark,omitempty"`
	InvoiceStatus   int32                            `protobuf:"varint,19,opt,name=invoice_status,json=invoiceStatus,proto3" json:"invoice_status,omitempty"`
	ReasonType      *int32                           `protobuf:"varint,20,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	InvoiceNo       *string                          `protobuf:"bytes,21,opt,name=invoice_no,json=invoiceNo,proto3,oneof" json:"invoice_no,omitempty"`
	InvoiceCode     *string                          `protobuf:"bytes,22,opt,name=invoice_code,json=invoiceCode,proto3,oneof" json:"invoice_code,omitempty"`
	Remark          *string                          `protobuf:"bytes,23,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName       *string                          `protobuf:"bytes,24,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CtmOrder        *int64                           `protobuf:"varint,25,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService      *int64                           `protobuf:"varint,26,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund       *int64                           `protobuf:"varint,27,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	ParentInvoice   *int64                           `protobuf:"varint,28,opt,name=parent_invoice,json=parentInvoice,proto3,oneof" json:"parent_invoice,omitempty"`
}

func (x *RefundInvoiceResponse) Reset() {
	*x = RefundInvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundInvoiceResponse) ProtoMessage() {}

func (x *RefundInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundInvoiceResponse.ProtoReflect.Descriptor instead.
func (*RefundInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{53}
}

func (x *RefundInvoiceResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundInvoiceResponse) GetInvoiceTypeName() string {
	if x != nil {
		return x.InvoiceTypeName
	}
	return ""
}

func (x *RefundInvoiceResponse) GetPayerTypeName() string {
	if x != nil {
		return x.PayerTypeName
	}
	return ""
}

func (x *RefundInvoiceResponse) GetReasonTypeName() string {
	if x != nil {
		return x.ReasonTypeName
	}
	return ""
}

func (x *RefundInvoiceResponse) GetChildren() []*RefundInvoiceChildrenResponse {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *RefundInvoiceResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundInvoiceResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundInvoiceResponse) GetInvoiceType() int32 {
	if x != nil {
		return x.InvoiceType
	}
	return 0
}

func (x *RefundInvoiceResponse) GetPayerType() int32 {
	if x != nil {
		return x.PayerType
	}
	return 0
}

func (x *RefundInvoiceResponse) GetPayerName() string {
	if x != nil && x.PayerName != nil {
		return *x.PayerName
	}
	return ""
}

func (x *RefundInvoiceResponse) GetPayerRegisterNo() string {
	if x != nil && x.PayerRegisterNo != nil {
		return *x.PayerRegisterNo
	}
	return ""
}

func (x *RefundInvoiceResponse) GetPayerPhone() string {
	if x != nil && x.PayerPhone != nil {
		return *x.PayerPhone
	}
	return ""
}

func (x *RefundInvoiceResponse) GetPayerEmail() string {
	if x != nil && x.PayerEmail != nil {
		return *x.PayerEmail
	}
	return ""
}

func (x *RefundInvoiceResponse) GetPayerAddress() string {
	if x != nil && x.PayerAddress != nil {
		return *x.PayerAddress
	}
	return ""
}

func (x *RefundInvoiceResponse) GetPayerBank() string {
	if x != nil && x.PayerBank != nil {
		return *x.PayerBank
	}
	return ""
}

func (x *RefundInvoiceResponse) GetPayerAccount() string {
	if x != nil && x.PayerAccount != nil {
		return *x.PayerAccount
	}
	return ""
}

func (x *RefundInvoiceResponse) GetInvoiceAmount() float64 {
	if x != nil && x.InvoiceAmount != nil {
		return *x.InvoiceAmount
	}
	return 0
}

func (x *RefundInvoiceResponse) GetInvoiceRemark() string {
	if x != nil && x.InvoiceRemark != nil {
		return *x.InvoiceRemark
	}
	return ""
}

func (x *RefundInvoiceResponse) GetInvoiceStatus() int32 {
	if x != nil {
		return x.InvoiceStatus
	}
	return 0
}

func (x *RefundInvoiceResponse) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *RefundInvoiceResponse) GetInvoiceNo() string {
	if x != nil && x.InvoiceNo != nil {
		return *x.InvoiceNo
	}
	return ""
}

func (x *RefundInvoiceResponse) GetInvoiceCode() string {
	if x != nil && x.InvoiceCode != nil {
		return *x.InvoiceCode
	}
	return ""
}

func (x *RefundInvoiceResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundInvoiceResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *RefundInvoiceResponse) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundInvoiceResponse) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *RefundInvoiceResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundInvoiceResponse) GetParentInvoice() int64 {
	if x != nil && x.ParentInvoice != nil {
		return *x.ParentInvoice
	}
	return 0
}

type RefundNextRidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefundNextRidRequest) Reset() {
	*x = RefundNextRidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundNextRidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundNextRidRequest) ProtoMessage() {}

func (x *RefundNextRidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundNextRidRequest.ProtoReflect.Descriptor instead.
func (*RefundNextRidRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{54}
}

type RefundNextRidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRid string `protobuf:"bytes,1,opt,name=next_rid,json=nextRid,proto3" json:"next_rid,omitempty"`
}

func (x *RefundNextRidResponse) Reset() {
	*x = RefundNextRidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundNextRidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundNextRidResponse) ProtoMessage() {}

func (x *RefundNextRidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundNextRidResponse.ProtoReflect.Descriptor instead.
func (*RefundNextRidResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{55}
}

func (x *RefundNextRidResponse) GetNextRid() string {
	if x != nil {
		return x.NextRid
	}
	return ""
}

type RefundOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefundOptionsRequest) Reset() {
	*x = RefundOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOptionsRequest) ProtoMessage() {}

func (x *RefundOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOptionsRequest.ProtoReflect.Descriptor instead.
func (*RefundOptionsRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{56}
}

type RefundOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateType    []*OptionValueIntResponse    `protobuf:"bytes,1,rep,name=create_type,json=createType,proto3" json:"create_type,omitempty"`
	TradeType     []*OptionValueIntResponse    `protobuf:"bytes,2,rep,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Type          []*OptionValueIntResponse    `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	RefundStatus  []*OptionValueStringResponse `protobuf:"bytes,4,rep,name=refund_status,json=refundStatus,proto3" json:"refund_status,omitempty"`
	TradeStatus   []*OptionValueIntResponse    `protobuf:"bytes,5,rep,name=trade_status,json=tradeStatus,proto3" json:"trade_status,omitempty"`
	PayStatus     []*OptionValueIntResponse    `protobuf:"bytes,6,rep,name=pay_status,json=payStatus,proto3" json:"pay_status,omitempty"`
	InvoiceStatus []*OptionValueIntResponse    `protobuf:"bytes,7,rep,name=invoice_status,json=invoiceStatus,proto3" json:"invoice_status,omitempty"`
}

func (x *RefundOptionsResponse) Reset() {
	*x = RefundOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOptionsResponse) ProtoMessage() {}

func (x *RefundOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOptionsResponse.ProtoReflect.Descriptor instead.
func (*RefundOptionsResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{57}
}

func (x *RefundOptionsResponse) GetCreateType() []*OptionValueIntResponse {
	if x != nil {
		return x.CreateType
	}
	return nil
}

func (x *RefundOptionsResponse) GetTradeType() []*OptionValueIntResponse {
	if x != nil {
		return x.TradeType
	}
	return nil
}

func (x *RefundOptionsResponse) GetType() []*OptionValueIntResponse {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RefundOptionsResponse) GetRefundStatus() []*OptionValueStringResponse {
	if x != nil {
		return x.RefundStatus
	}
	return nil
}

func (x *RefundOptionsResponse) GetTradeStatus() []*OptionValueIntResponse {
	if x != nil {
		return x.TradeStatus
	}
	return nil
}

func (x *RefundOptionsResponse) GetPayStatus() []*OptionValueIntResponse {
	if x != nil {
		return x.PayStatus
	}
	return nil
}

func (x *RefundOptionsResponse) GetInvoiceStatus() []*OptionValueIntResponse {
	if x != nil {
		return x.InvoiceStatus
	}
	return nil
}

type RefundRefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundRefundResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundRefundListResponse) Reset() {
	*x = RefundRefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRefundListResponse) ProtoMessage() {}

func (x *RefundRefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRefundListResponse.ProtoReflect.Descriptor instead.
func (*RefundRefundListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{58}
}

func (x *RefundRefundListResponse) GetResults() []*RefundRefundResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundRefundListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	RefundNo            *string `protobuf:"bytes,3,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	TransactionId       *string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	PlatformOrder       *string `protobuf:"bytes,5,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	RefundId            *string `protobuf:"bytes,6,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,7,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,8,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	RefundSuccessTime   *string `protobuf:"bytes,9,opt,name=refund_success_time,json=refundSuccessTime,proto3,oneof" json:"refund_success_time,omitempty"`
	RefundCreateTime    *string `protobuf:"bytes,10,opt,name=refund_create_time,json=refundCreateTime,proto3,oneof" json:"refund_create_time,omitempty"`
	Status              *string `protobuf:"bytes,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Total               *int32  `protobuf:"varint,12,opt,name=total,proto3,oneof" json:"total,omitempty"`
	Refund              *int32  `protobuf:"varint,13,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,14,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,15,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,16,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,17,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,18,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	Currency            *string `protobuf:"bytes,19,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	RefundFee           *int32  `protobuf:"varint,20,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	CancelReasons       *string `protobuf:"bytes,21,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmRefund           *int64  `protobuf:"varint,22,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmOrderPay         *int64  `protobuf:"varint,23,opt,name=ctm_order_pay,json=ctmOrderPay,proto3,oneof" json:"ctm_order_pay,omitempty"`
}

func (x *RefundRefundRequest) Reset() {
	*x = RefundRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRefundRequest) ProtoMessage() {}

func (x *RefundRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRefundRequest.ProtoReflect.Descriptor instead.
func (*RefundRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{59}
}

func (x *RefundRefundRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundRefundRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundRefundRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *RefundRefundRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *RefundRefundRequest) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *RefundRefundRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *RefundRefundRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *RefundRefundRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *RefundRefundRequest) GetRefundSuccessTime() string {
	if x != nil && x.RefundSuccessTime != nil {
		return *x.RefundSuccessTime
	}
	return ""
}

func (x *RefundRefundRequest) GetRefundCreateTime() string {
	if x != nil && x.RefundCreateTime != nil {
		return *x.RefundCreateTime
	}
	return ""
}

func (x *RefundRefundRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *RefundRefundRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *RefundRefundRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *RefundRefundRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *RefundRefundRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *RefundRefundRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *RefundRefundRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *RefundRefundRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *RefundRefundRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *RefundRefundRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *RefundRefundRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *RefundRefundRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundRefundRequest) GetCtmOrderPay() int64 {
	if x != nil && x.CtmOrderPay != nil {
		return *x.CtmOrderPay
	}
	return 0
}

type RefundRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusName          string  `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	CreateTime          string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime          string  `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	RefundNo            *string `protobuf:"bytes,5,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	TransactionId       *string `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	PlatformOrder       *string `protobuf:"bytes,7,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	RefundId            *string `protobuf:"bytes,8,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,9,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,10,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	RefundSuccessTime   *string `protobuf:"bytes,11,opt,name=refund_success_time,json=refundSuccessTime,proto3,oneof" json:"refund_success_time,omitempty"`
	RefundCreateTime    *string `protobuf:"bytes,12,opt,name=refund_create_time,json=refundCreateTime,proto3,oneof" json:"refund_create_time,omitempty"`
	Status              *string `protobuf:"bytes,13,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Total               *int32  `protobuf:"varint,14,opt,name=total,proto3,oneof" json:"total,omitempty"`
	Refund              *int32  `protobuf:"varint,15,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,16,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,17,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,18,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,19,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,20,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	Currency            *string `protobuf:"bytes,21,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	RefundFee           *int32  `protobuf:"varint,22,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	CancelReasons       *string `protobuf:"bytes,23,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmRefund           *int64  `protobuf:"varint,24,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmOrderPay         *int64  `protobuf:"varint,25,opt,name=ctm_order_pay,json=ctmOrderPay,proto3,oneof" json:"ctm_order_pay,omitempty"`
}

func (x *RefundRefundResponse) Reset() {
	*x = RefundRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRefundResponse) ProtoMessage() {}

func (x *RefundRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRefundResponse.ProtoReflect.Descriptor instead.
func (*RefundRefundResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{60}
}

func (x *RefundRefundResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundRefundResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *RefundRefundResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundRefundResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundRefundResponse) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *RefundRefundResponse) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *RefundRefundResponse) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *RefundRefundResponse) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *RefundRefundResponse) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *RefundRefundResponse) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *RefundRefundResponse) GetRefundSuccessTime() string {
	if x != nil && x.RefundSuccessTime != nil {
		return *x.RefundSuccessTime
	}
	return ""
}

func (x *RefundRefundResponse) GetRefundCreateTime() string {
	if x != nil && x.RefundCreateTime != nil {
		return *x.RefundCreateTime
	}
	return ""
}

func (x *RefundRefundResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *RefundRefundResponse) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *RefundRefundResponse) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *RefundRefundResponse) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *RefundRefundResponse) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *RefundRefundResponse) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *RefundRefundResponse) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *RefundRefundResponse) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *RefundRefundResponse) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *RefundRefundResponse) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *RefundRefundResponse) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *RefundRefundResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundRefundResponse) GetCtmOrderPay() int64 {
	if x != nil && x.CtmOrderPay != nil {
		return *x.CtmOrderPay
	}
	return 0
}

type RefundReturnListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundReturnResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundReturnListResponse) Reset() {
	*x = RefundReturnListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundReturnListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundReturnListResponse) ProtoMessage() {}

func (x *RefundReturnListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundReturnListResponse.ProtoReflect.Descriptor instead.
func (*RefundReturnListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{61}
}

func (x *RefundReturnListResponse) GetResults() []*RefundReturnResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundReturnListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters      string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Oid          string   `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	GoodsId      *string  `protobuf:"bytes,4,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName    *string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu     *string  `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo      *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo       *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName     *string  `protobuf:"bytes,9,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode     *string  `protobuf:"bytes,10,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode *string  `protobuf:"bytes,11,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	OutAmount    *float64 `protobuf:"fixed64,12,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	Num          int32    `protobuf:"varint,13,opt,name=num,proto3" json:"num,omitempty"`
	CtmRefund    *int64   `protobuf:"varint,14,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	OrderDetails *int64   `protobuf:"varint,15,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *RefundReturnRequest) Reset() {
	*x = RefundReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundReturnRequest) ProtoMessage() {}

func (x *RefundReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundReturnRequest.ProtoReflect.Descriptor instead.
func (*RefundReturnRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{62}
}

func (x *RefundReturnRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundReturnRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundReturnRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *RefundReturnRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *RefundReturnRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundReturnRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *RefundReturnRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RefundReturnRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RefundReturnRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *RefundReturnRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *RefundReturnRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RefundReturnRequest) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *RefundReturnRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RefundReturnRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundReturnRequest) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type RefundReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime   string   `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string   `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Oid          string   `protobuf:"bytes,4,opt,name=oid,proto3" json:"oid,omitempty"`
	GoodsId      *string  `protobuf:"bytes,5,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName    *string  `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu     *string  `protobuf:"bytes,7,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo      *string  `protobuf:"bytes,8,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo       *string  `protobuf:"bytes,9,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName     *string  `protobuf:"bytes,10,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode     *string  `protobuf:"bytes,11,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode *string  `protobuf:"bytes,12,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	OutAmount    *float64 `protobuf:"fixed64,13,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	Num          int32    `protobuf:"varint,14,opt,name=num,proto3" json:"num,omitempty"`
	CtmRefund    *int64   `protobuf:"varint,15,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	OrderDetails *int64   `protobuf:"varint,16,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *RefundReturnResponse) Reset() {
	*x = RefundReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundReturnResponse) ProtoMessage() {}

func (x *RefundReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundReturnResponse.ProtoReflect.Descriptor instead.
func (*RefundReturnResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{63}
}

func (x *RefundReturnResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundReturnResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundReturnResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundReturnResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *RefundReturnResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *RefundReturnResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundReturnResponse) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *RefundReturnResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RefundReturnResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RefundReturnResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *RefundReturnResponse) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *RefundReturnResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *RefundReturnResponse) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *RefundReturnResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RefundReturnResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *RefundReturnResponse) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type RefundStatusCountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundStatusCountResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundStatusCountListResponse) Reset() {
	*x = RefundStatusCountListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundStatusCountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundStatusCountListResponse) ProtoMessage() {}

func (x *RefundStatusCountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundStatusCountListResponse.ProtoReflect.Descriptor instead.
func (*RefundStatusCountListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{64}
}

func (x *RefundStatusCountListResponse) GetResults() []*RefundStatusCountResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundStatusCountListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundStatusCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeType *int32 `protobuf:"varint,1,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	CtmId     *int64 `protobuf:"varint,2,opt,name=ctm_id,json=ctmId,proto3,oneof" json:"ctm_id,omitempty"`
}

func (x *RefundStatusCountRequest) Reset() {
	*x = RefundStatusCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundStatusCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundStatusCountRequest) ProtoMessage() {}

func (x *RefundStatusCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundStatusCountRequest.ProtoReflect.Descriptor instead.
func (*RefundStatusCountRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{65}
}

func (x *RefundStatusCountRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *RefundStatusCountRequest) GetCtmId() int64 {
	if x != nil && x.CtmId != nil {
		return *x.CtmId
	}
	return 0
}

type RefundStatusCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundStatus string `protobuf:"bytes,1,opt,name=refund_status,json=refundStatus,proto3" json:"refund_status,omitempty"`
	Count        int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundStatusCountResponse) Reset() {
	*x = RefundStatusCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundStatusCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundStatusCountResponse) ProtoMessage() {}

func (x *RefundStatusCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundStatusCountResponse.ProtoReflect.Descriptor instead.
func (*RefundStatusCountResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{66}
}

func (x *RefundStatusCountResponse) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *RefundStatusCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundStockInListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundStockInResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundStockInListResponse) Reset() {
	*x = RefundStockInListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundStockInListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundStockInListResponse) ProtoMessage() {}

func (x *RefundStockInListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundStockInListResponse.ProtoReflect.Descriptor instead.
func (*RefundStockInListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{67}
}

func (x *RefundStockInListResponse) GetResults() []*RefundStockInResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundStockInListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundStockInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime    string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SrcOrderNo    *string `protobuf:"bytes,4,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	SrcOrderType  *string `protobuf:"bytes,5,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	OrderNo       *string `protobuf:"bytes,6,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	StockInNo     *string `protobuf:"bytes,7,opt,name=stock_in_no,json=stockInNo,proto3,oneof" json:"stock_in_no,omitempty"`
	Status        *string `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName *string `protobuf:"bytes,9,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode *string `protobuf:"bytes,10,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo   *string `protobuf:"bytes,11,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	StockinTime   *string `protobuf:"bytes,12,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CheckTime     *string `protobuf:"bytes,13,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	Modified      *string `protobuf:"bytes,14,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo       *string `protobuf:"bytes,15,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName     *string `protobuf:"bytes,16,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName      *string `protobuf:"bytes,17,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo        *string `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount    float64 `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmService    *int64  `protobuf:"varint,20,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund     *int64  `protobuf:"varint,21,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
}

func (x *RefundStockInResponse) Reset() {
	*x = RefundStockInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundStockInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundStockInResponse) ProtoMessage() {}

func (x *RefundStockInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundStockInResponse.ProtoReflect.Descriptor instead.
func (*RefundStockInResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{68}
}

func (x *RefundStockInResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundStockInResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundStockInResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundStockInResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *RefundStockInResponse) GetSrcOrderType() string {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return ""
}

func (x *RefundStockInResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *RefundStockInResponse) GetStockInNo() string {
	if x != nil && x.StockInNo != nil {
		return *x.StockInNo
	}
	return ""
}

func (x *RefundStockInResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *RefundStockInResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RefundStockInResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *RefundStockInResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RefundStockInResponse) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *RefundStockInResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *RefundStockInResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *RefundStockInResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RefundStockInResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundStockInResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *RefundStockInResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RefundStockInResponse) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *RefundStockInResponse) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *RefundStockInResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

type RefundStockOutListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundStockOutResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundStockOutListResponse) Reset() {
	*x = RefundStockOutListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundStockOutListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundStockOutListResponse) ProtoMessage() {}

func (x *RefundStockOutListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundStockOutListResponse.ProtoReflect.Descriptor instead.
func (*RefundStockOutListResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{69}
}

func (x *RefundStockOutListResponse) GetResults() []*RefundStockOutResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundStockOutListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundStockOutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime     string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SrcOrderNo     *string `protobuf:"bytes,4,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo     *string `protobuf:"bytes,5,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo        *string `protobuf:"bytes,6,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName  *string `protobuf:"bytes,7,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status         *string `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName  *string `protobuf:"bytes,9,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode  *string `protobuf:"bytes,10,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo    *string `protobuf:"bytes,11,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime    *string `protobuf:"bytes,12,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime *string `protobuf:"bytes,13,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified       *string `protobuf:"bytes,14,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo        *string `protobuf:"bytes,15,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName      *string `protobuf:"bytes,16,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName       *string `protobuf:"bytes,17,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo         *string `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount     float64 `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmService     *int64  `protobuf:"varint,20,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmOrder       *int64  `protobuf:"varint,21,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund      *int64  `protobuf:"varint,22,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
}

func (x *RefundStockOutResponse) Reset() {
	*x = RefundStockOutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundStockOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundStockOutResponse) ProtoMessage() {}

func (x *RefundStockOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundStockOutResponse.ProtoReflect.Descriptor instead.
func (*RefundStockOutResponse) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{70}
}

func (x *RefundStockOutResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundStockOutResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundStockOutResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundStockOutResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *RefundStockOutResponse) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *RefundStockOutResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *RefundStockOutResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *RefundStockOutResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *RefundStockOutResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RefundStockOutResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *RefundStockOutResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RefundStockOutResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *RefundStockOutResponse) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *RefundStockOutResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *RefundStockOutResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *RefundStockOutResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundStockOutResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *RefundStockOutResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RefundStockOutResponse) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *RefundStockOutResponse) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *RefundStockOutResponse) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *RefundStockOutResponse) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

type RetrieveObjectAfterSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveObjectAfterSalesRequest) Reset() {
	*x = RetrieveObjectAfterSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveObjectAfterSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveObjectAfterSalesRequest) ProtoMessage() {}

func (x *RetrieveObjectAfterSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveObjectAfterSalesRequest.ProtoReflect.Descriptor instead.
func (*RetrieveObjectAfterSalesRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{71}
}

func (x *RetrieveObjectAfterSalesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveRefundCompensateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveRefundCompensateRequest) Reset() {
	*x = RetrieveRefundCompensateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRefundCompensateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRefundCompensateRequest) ProtoMessage() {}

func (x *RetrieveRefundCompensateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRefundCompensateRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRefundCompensateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{72}
}

func (x *RetrieveRefundCompensateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveRefundDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveRefundDeliverRequest) Reset() {
	*x = RetrieveRefundDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRefundDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRefundDeliverRequest) ProtoMessage() {}

func (x *RetrieveRefundDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRefundDeliverRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRefundDeliverRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{73}
}

func (x *RetrieveRefundDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveRefundInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveRefundInvoiceRequest) Reset() {
	*x = RetrieveRefundInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRefundInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRefundInvoiceRequest) ProtoMessage() {}

func (x *RetrieveRefundInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRefundInvoiceRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRefundInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{74}
}

func (x *RetrieveRefundInvoiceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveRefundRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveRefundRefundRequest) Reset() {
	*x = RetrieveRefundRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRefundRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRefundRefundRequest) ProtoMessage() {}

func (x *RetrieveRefundRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRefundRefundRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRefundRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{75}
}

func (x *RetrieveRefundRefundRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveRefundReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveRefundReturnRequest) Reset() {
	*x = RetrieveRefundReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRefundReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRefundReturnRequest) ProtoMessage() {}

func (x *RetrieveRefundReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRefundReturnRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRefundReturnRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{76}
}

func (x *RetrieveRefundReturnRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveRefundStockInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveRefundStockInRequest) Reset() {
	*x = RetrieveRefundStockInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRefundStockInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRefundStockInRequest) ProtoMessage() {}

func (x *RetrieveRefundStockInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRefundStockInRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRefundStockInRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{77}
}

func (x *RetrieveRefundStockInRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveRefundStockOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveRefundStockOutRequest) Reset() {
	*x = RetrieveRefundStockOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRefundStockOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRefundStockOutRequest) ProtoMessage() {}

func (x *RetrieveRefundStockOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRefundStockOutRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRefundStockOutRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{78}
}

func (x *RetrieveRefundStockOutRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateObjectAfterSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	GoodsId              *string  `protobuf:"bytes,5,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName            *string  `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu             *string  `protobuf:"bytes,7,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,8,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,9,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName             *string  `protobuf:"bytes,10,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode             *string  `protobuf:"bytes,11,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,12,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	PlatformOrder        *string  `protobuf:"bytes,13,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	OmsOrder             *string  `protobuf:"bytes,14,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	Oid                  *string  `protobuf:"bytes,15,opt,name=oid,proto3,oneof" json:"oid,omitempty"`
	OutAmount            *float64 `protobuf:"fixed64,16,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	RetailPrice          *float64 `protobuf:"fixed64,17,opt,name=retail_price,json=retailPrice,proto3,oneof" json:"retail_price,omitempty"`
	Num                  int32    `protobuf:"varint,18,opt,name=num,proto3" json:"num,omitempty"`
	DamagePartsCode      *string  `protobuf:"bytes,19,opt,name=damage_parts_code,json=damagePartsCode,proto3,oneof" json:"damage_parts_code,omitempty"`
	DamagePartsName      *string  `protobuf:"bytes,20,opt,name=damage_parts_name,json=damagePartsName,proto3,oneof" json:"damage_parts_name,omitempty"`
	DamageReasons        *string  `protobuf:"bytes,21,opt,name=damage_reasons,json=damageReasons,proto3,oneof" json:"damage_reasons,omitempty"`
	DamageDesc           *string  `protobuf:"bytes,22,opt,name=damage_desc,json=damageDesc,proto3,oneof" json:"damage_desc,omitempty"`
	MediaPath            *string  `protobuf:"bytes,23,opt,name=media_path,json=mediaPath,proto3,oneof" json:"media_path,omitempty"`
	RefundObject         *int64   `protobuf:"varint,24,opt,name=refund_object,json=refundObject,proto3,oneof" json:"refund_object,omitempty"`
	OrderDetails         *int64   `protobuf:"varint,25,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *UpdateObjectAfterSalesRequest) Reset() {
	*x = UpdateObjectAfterSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateObjectAfterSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectAfterSalesRequest) ProtoMessage() {}

func (x *UpdateObjectAfterSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectAfterSalesRequest.ProtoReflect.Descriptor instead.
func (*UpdateObjectAfterSalesRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateObjectAfterSalesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateObjectAfterSalesRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateObjectAfterSalesRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateObjectAfterSalesRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *UpdateObjectAfterSalesRequest) GetRetailPrice() float64 {
	if x != nil && x.RetailPrice != nil {
		return *x.RetailPrice
	}
	return 0
}

func (x *UpdateObjectAfterSalesRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *UpdateObjectAfterSalesRequest) GetDamagePartsCode() string {
	if x != nil && x.DamagePartsCode != nil {
		return *x.DamagePartsCode
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetDamagePartsName() string {
	if x != nil && x.DamagePartsName != nil {
		return *x.DamagePartsName
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetDamageReasons() string {
	if x != nil && x.DamageReasons != nil {
		return *x.DamageReasons
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetDamageDesc() string {
	if x != nil && x.DamageDesc != nil {
		return *x.DamageDesc
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetMediaPath() string {
	if x != nil && x.MediaPath != nil {
		return *x.MediaPath
	}
	return ""
}

func (x *UpdateObjectAfterSalesRequest) GetRefundObject() int64 {
	if x != nil && x.RefundObject != nil {
		return *x.RefundObject
	}
	return 0
}

func (x *UpdateObjectAfterSalesRequest) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type UpdateRefundCompensateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PrepayId             *string  `protobuf:"bytes,4,opt,name=prepay_id,json=prepayId,proto3,oneof" json:"prepay_id,omitempty"`
	PrepayExpired        *string  `protobuf:"bytes,5,opt,name=prepay_expired,json=prepayExpired,proto3,oneof" json:"prepay_expired,omitempty"`
	TradeType            *string  `protobuf:"bytes,6,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	TradeState           *string  `protobuf:"bytes,7,opt,name=trade_state,json=tradeState,proto3,oneof" json:"trade_state,omitempty"`
	TradeStateDesc       *string  `protobuf:"bytes,8,opt,name=trade_state_desc,json=tradeStateDesc,proto3,oneof" json:"trade_state_desc,omitempty"`
	TransactionId        *string  `protobuf:"bytes,9,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	AppId                *string  `protobuf:"bytes,10,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	MchId                *string  `protobuf:"bytes,11,opt,name=mch_id,json=mchId,proto3,oneof" json:"mch_id,omitempty"`
	OpenId               string   `protobuf:"bytes,12,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutTradeNo           *string  `protobuf:"bytes,13,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	Attach               *string  `protobuf:"bytes,14,opt,name=attach,proto3,oneof" json:"attach,omitempty"`
	Total                *int32   `protobuf:"varint,15,opt,name=total,proto3,oneof" json:"total,omitempty"`
	PayerTotal           *int32   `protobuf:"varint,16,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	Currency             *string  `protobuf:"bytes,17,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	BankType             *string  `protobuf:"bytes,18,opt,name=bank_type,json=bankType,proto3,oneof" json:"bank_type,omitempty"`
	SuccessTime          *string  `protobuf:"bytes,19,opt,name=success_time,json=successTime,proto3,oneof" json:"success_time,omitempty"`
	OutRefundNo          *string  `protobuf:"bytes,20,opt,name=out_refund_no,json=outRefundNo,proto3,oneof" json:"out_refund_no,omitempty"`
	Reason               *string  `protobuf:"bytes,21,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Refund               *int32   `protobuf:"varint,22,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerRefund          *int32   `protobuf:"varint,23,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund     *int32   `protobuf:"varint,24,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal      *int32   `protobuf:"varint,25,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund       *int32   `protobuf:"varint,26,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	RefundFee            *int32   `protobuf:"varint,27,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	RefundId             *string  `protobuf:"bytes,28,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel              *string  `protobuf:"bytes,29,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount  *string  `protobuf:"bytes,30,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	Status               *string  `protobuf:"bytes,31,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CancelReasons        *string  `protobuf:"bytes,32,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmOrder             *int64   `protobuf:"varint,33,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund            *int64   `protobuf:"varint,34,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmService           *int64   `protobuf:"varint,35,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *UpdateRefundCompensateRequest) Reset() {
	*x = UpdateRefundCompensateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRefundCompensateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRefundCompensateRequest) ProtoMessage() {}

func (x *UpdateRefundCompensateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRefundCompensateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRefundCompensateRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateRefundCompensateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateRefundCompensateRequest) GetPrepayId() string {
	if x != nil && x.PrepayId != nil {
		return *x.PrepayId
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetPrepayExpired() string {
	if x != nil && x.PrepayExpired != nil {
		return *x.PrepayExpired
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetTradeState() string {
	if x != nil && x.TradeState != nil {
		return *x.TradeState
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetTradeStateDesc() string {
	if x != nil && x.TradeStateDesc != nil {
		return *x.TradeStateDesc
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetMchId() string {
	if x != nil && x.MchId != nil {
		return *x.MchId
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetAttach() string {
	if x != nil && x.Attach != nil {
		return *x.Attach
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetSuccessTime() string {
	if x != nil && x.SuccessTime != nil {
		return *x.SuccessTime
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetOutRefundNo() string {
	if x != nil && x.OutRefundNo != nil {
		return *x.OutRefundNo
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *UpdateRefundCompensateRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *UpdateRefundCompensateRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type UpdateRefundDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmRefund            *int64   `protobuf:"varint,3,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CanEdit              bool     `protobuf:"varint,5,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num                  int32    `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	Price                float64  `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount         float64  `protobuf:"fixed64,8,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount             float64  `protobuf:"fixed64,9,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount        float64  `protobuf:"fixed64,10,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount          float64  `protobuf:"fixed64,11,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount          *float64 `protobuf:"fixed64,12,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut             *int32   `protobuf:"varint,13,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore           *int32   `protobuf:"varint,14,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge           *int32   `protobuf:"varint,15,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status               *int32   `protobuf:"varint,16,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus         *int32   `protobuf:"varint,17,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId              *string  `protobuf:"bytes,18,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName            *string  `protobuf:"bytes,19,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu             *string  `protobuf:"bytes,20,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,21,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               string   `protobuf:"bytes,22,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName             *string  `protobuf:"bytes,23,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode             *string  `protobuf:"bytes,24,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,25,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark               *string  `protobuf:"bytes,26,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo                 *string  `protobuf:"bytes,27,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	CtmOrder             *int64   `protobuf:"varint,28,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService           *int64   `protobuf:"varint,29,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
}

func (x *UpdateRefundDeliverRequest) Reset() {
	*x = UpdateRefundDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRefundDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRefundDeliverRequest) ProtoMessage() {}

func (x *UpdateRefundDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRefundDeliverRequest.ProtoReflect.Descriptor instead.
func (*UpdateRefundDeliverRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateRefundDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateRefundDeliverRequest) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *UpdateRefundDeliverRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *UpdateRefundDeliverRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *UpdateRefundDeliverRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

type UpdateRefundInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	InvoiceType          int32    `protobuf:"varint,4,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	PayerType            int32    `protobuf:"varint,5,opt,name=payer_type,json=payerType,proto3" json:"payer_type,omitempty"`
	PayerName            *string  `protobuf:"bytes,6,opt,name=payer_name,json=payerName,proto3,oneof" json:"payer_name,omitempty"`
	PayerRegisterNo      *string  `protobuf:"bytes,7,opt,name=payer_register_no,json=payerRegisterNo,proto3,oneof" json:"payer_register_no,omitempty"`
	PayerPhone           *string  `protobuf:"bytes,8,opt,name=payer_phone,json=payerPhone,proto3,oneof" json:"payer_phone,omitempty"`
	PayerEmail           *string  `protobuf:"bytes,9,opt,name=payer_email,json=payerEmail,proto3,oneof" json:"payer_email,omitempty"`
	PayerAddress         *string  `protobuf:"bytes,10,opt,name=payer_address,json=payerAddress,proto3,oneof" json:"payer_address,omitempty"`
	PayerBank            *string  `protobuf:"bytes,11,opt,name=payer_bank,json=payerBank,proto3,oneof" json:"payer_bank,omitempty"`
	PayerAccount         *string  `protobuf:"bytes,12,opt,name=payer_account,json=payerAccount,proto3,oneof" json:"payer_account,omitempty"`
	InvoiceAmount        *float64 `protobuf:"fixed64,13,opt,name=invoice_amount,json=invoiceAmount,proto3,oneof" json:"invoice_amount,omitempty"`
	InvoiceRemark        *string  `protobuf:"bytes,14,opt,name=invoice_remark,json=invoiceRemark,proto3,oneof" json:"invoice_remark,omitempty"`
	InvoiceStatus        int32    `protobuf:"varint,15,opt,name=invoice_status,json=invoiceStatus,proto3" json:"invoice_status,omitempty"`
	ReasonType           *int32   `protobuf:"varint,16,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	InvoiceNo            *string  `protobuf:"bytes,17,opt,name=invoice_no,json=invoiceNo,proto3,oneof" json:"invoice_no,omitempty"`
	InvoiceCode          *string  `protobuf:"bytes,18,opt,name=invoice_code,json=invoiceCode,proto3,oneof" json:"invoice_code,omitempty"`
	Remark               *string  `protobuf:"bytes,19,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName            *string  `protobuf:"bytes,20,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CtmOrder             *int64   `protobuf:"varint,21,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmService           *int64   `protobuf:"varint,22,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund            *int64   `protobuf:"varint,23,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	ParentInvoice        *int64   `protobuf:"varint,24,opt,name=parent_invoice,json=parentInvoice,proto3,oneof" json:"parent_invoice,omitempty"`
}

func (x *UpdateRefundInvoiceRequest) Reset() {
	*x = UpdateRefundInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRefundInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRefundInvoiceRequest) ProtoMessage() {}

func (x *UpdateRefundInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRefundInvoiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateRefundInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateRefundInvoiceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateRefundInvoiceRequest) GetInvoiceType() int32 {
	if x != nil {
		return x.InvoiceType
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetPayerType() int32 {
	if x != nil {
		return x.PayerType
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetPayerName() string {
	if x != nil && x.PayerName != nil {
		return *x.PayerName
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetPayerRegisterNo() string {
	if x != nil && x.PayerRegisterNo != nil {
		return *x.PayerRegisterNo
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetPayerPhone() string {
	if x != nil && x.PayerPhone != nil {
		return *x.PayerPhone
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetPayerEmail() string {
	if x != nil && x.PayerEmail != nil {
		return *x.PayerEmail
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetPayerAddress() string {
	if x != nil && x.PayerAddress != nil {
		return *x.PayerAddress
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetPayerBank() string {
	if x != nil && x.PayerBank != nil {
		return *x.PayerBank
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetPayerAccount() string {
	if x != nil && x.PayerAccount != nil {
		return *x.PayerAccount
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetInvoiceAmount() float64 {
	if x != nil && x.InvoiceAmount != nil {
		return *x.InvoiceAmount
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetInvoiceRemark() string {
	if x != nil && x.InvoiceRemark != nil {
		return *x.InvoiceRemark
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetInvoiceStatus() int32 {
	if x != nil {
		return x.InvoiceStatus
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetInvoiceNo() string {
	if x != nil && x.InvoiceNo != nil {
		return *x.InvoiceNo
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetInvoiceCode() string {
	if x != nil && x.InvoiceCode != nil {
		return *x.InvoiceCode
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *UpdateRefundInvoiceRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *UpdateRefundInvoiceRequest) GetParentInvoice() int64 {
	if x != nil && x.ParentInvoice != nil {
		return *x.ParentInvoice
	}
	return 0
}

type UpdateRefundRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	RefundNo             *string  `protobuf:"bytes,4,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	TransactionId        *string  `protobuf:"bytes,5,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	PlatformOrder        *string  `protobuf:"bytes,6,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	RefundId             *string  `protobuf:"bytes,7,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel              *string  `protobuf:"bytes,8,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount  *string  `protobuf:"bytes,9,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	RefundSuccessTime    *string  `protobuf:"bytes,10,opt,name=refund_success_time,json=refundSuccessTime,proto3,oneof" json:"refund_success_time,omitempty"`
	RefundCreateTime     *string  `protobuf:"bytes,11,opt,name=refund_create_time,json=refundCreateTime,proto3,oneof" json:"refund_create_time,omitempty"`
	Status               *string  `protobuf:"bytes,12,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Total                *int32   `protobuf:"varint,13,opt,name=total,proto3,oneof" json:"total,omitempty"`
	Refund               *int32   `protobuf:"varint,14,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerTotal           *int32   `protobuf:"varint,15,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	PayerRefund          *int32   `protobuf:"varint,16,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund     *int32   `protobuf:"varint,17,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal      *int32   `protobuf:"varint,18,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund       *int32   `protobuf:"varint,19,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	Currency             *string  `protobuf:"bytes,20,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	RefundFee            *int32   `protobuf:"varint,21,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	CancelReasons        *string  `protobuf:"bytes,22,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	CtmRefund            *int64   `protobuf:"varint,23,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	CtmOrderPay          *int64   `protobuf:"varint,24,opt,name=ctm_order_pay,json=ctmOrderPay,proto3,oneof" json:"ctm_order_pay,omitempty"`
}

func (x *UpdateRefundRefundRequest) Reset() {
	*x = UpdateRefundRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRefundRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRefundRefundRequest) ProtoMessage() {}

func (x *UpdateRefundRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRefundRefundRequest.ProtoReflect.Descriptor instead.
func (*UpdateRefundRefundRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{83}
}

func (x *UpdateRefundRefundRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateRefundRefundRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetRefundSuccessTime() string {
	if x != nil && x.RefundSuccessTime != nil {
		return *x.RefundSuccessTime
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetRefundCreateTime() string {
	if x != nil && x.RefundCreateTime != nil {
		return *x.RefundCreateTime
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *UpdateRefundRefundRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *UpdateRefundRefundRequest) GetCtmOrderPay() int64 {
	if x != nil && x.CtmOrderPay != nil {
		return *x.CtmOrderPay
	}
	return 0
}

type UpdateRefundReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Oid                  string   `protobuf:"bytes,4,opt,name=oid,proto3" json:"oid,omitempty"`
	GoodsId              *string  `protobuf:"bytes,5,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName            *string  `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu             *string  `protobuf:"bytes,7,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,8,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               *string  `protobuf:"bytes,9,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName             *string  `protobuf:"bytes,10,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode             *string  `protobuf:"bytes,11,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode         *string  `protobuf:"bytes,12,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	OutAmount            *float64 `protobuf:"fixed64,13,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	Num                  int32    `protobuf:"varint,14,opt,name=num,proto3" json:"num,omitempty"`
	CtmRefund            *int64   `protobuf:"varint,15,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
	OrderDetails         *int64   `protobuf:"varint,16,opt,name=order_details,json=orderDetails,proto3,oneof" json:"order_details,omitempty"`
}

func (x *UpdateRefundReturnRequest) Reset() {
	*x = UpdateRefundReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRefundReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRefundReturnRequest) ProtoMessage() {}

func (x *UpdateRefundReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRefundReturnRequest.ProtoReflect.Descriptor instead.
func (*UpdateRefundReturnRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateRefundReturnRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRefundReturnRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateRefundReturnRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *UpdateRefundReturnRequest) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *UpdateRefundReturnRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *UpdateRefundReturnRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

func (x *UpdateRefundReturnRequest) GetOrderDetails() int64 {
	if x != nil && x.OrderDetails != nil {
		return *x.OrderDetails
	}
	return 0
}

type UpdateRefundStockInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	SrcOrderNo           *string  `protobuf:"bytes,4,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	SrcOrderType         *string  `protobuf:"bytes,5,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	OrderNo              *string  `protobuf:"bytes,6,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	StockInNo            *string  `protobuf:"bytes,7,opt,name=stock_in_no,json=stockInNo,proto3,oneof" json:"stock_in_no,omitempty"`
	Status               *string  `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName        *string  `protobuf:"bytes,9,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string  `protobuf:"bytes,10,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo          *string  `protobuf:"bytes,11,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	StockinTime          *string  `protobuf:"bytes,12,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CheckTime            *string  `protobuf:"bytes,13,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	Modified             *string  `protobuf:"bytes,14,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,15,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,16,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName             *string  `protobuf:"bytes,17,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo               *string  `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount           float64  `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmService           *int64   `protobuf:"varint,20,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmRefund            *int64   `protobuf:"varint,21,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
}

func (x *UpdateRefundStockInRequest) Reset() {
	*x = UpdateRefundStockInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRefundStockInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRefundStockInRequest) ProtoMessage() {}

func (x *UpdateRefundStockInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRefundStockInRequest.ProtoReflect.Descriptor instead.
func (*UpdateRefundStockInRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateRefundStockInRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRefundStockInRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateRefundStockInRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetSrcOrderType() string {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetStockInNo() string {
	if x != nil && x.StockInNo != nil {
		return *x.StockInNo
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *UpdateRefundStockInRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *UpdateRefundStockInRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *UpdateRefundStockInRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

type UpdateRefundStockOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	SrcOrderNo           *string  `protobuf:"bytes,4,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo           *string  `protobuf:"bytes,5,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo              *string  `protobuf:"bytes,6,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName        *string  `protobuf:"bytes,7,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status               *string  `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName        *string  `protobuf:"bytes,9,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string  `protobuf:"bytes,10,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo          *string  `protobuf:"bytes,11,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime          *string  `protobuf:"bytes,12,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime       *string  `protobuf:"bytes,13,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified             *string  `protobuf:"bytes,14,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,15,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,16,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName             *string  `protobuf:"bytes,17,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo               *string  `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount           float64  `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmService           *int64   `protobuf:"varint,20,opt,name=ctm_service,json=ctmService,proto3,oneof" json:"ctm_service,omitempty"`
	CtmOrder             *int64   `protobuf:"varint,21,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	CtmRefund            *int64   `protobuf:"varint,22,opt,name=ctm_refund,json=ctmRefund,proto3,oneof" json:"ctm_refund,omitempty"`
}

func (x *UpdateRefundStockOutRequest) Reset() {
	*x = UpdateRefundStockOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_refund_ito_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRefundStockOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRefundStockOutRequest) ProtoMessage() {}

func (x *UpdateRefundStockOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_refund_ito_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRefundStockOutRequest.ProtoReflect.Descriptor instead.
func (*UpdateRefundStockOutRequest) Descriptor() ([]byte, []int) {
	return file_refund_ito_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateRefundStockOutRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRefundStockOutRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateRefundStockOutRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *UpdateRefundStockOutRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *UpdateRefundStockOutRequest) GetCtmService() int64 {
	if x != nil && x.CtmService != nil {
		return *x.CtmService
	}
	return 0
}

func (x *UpdateRefundStockOutRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *UpdateRefundStockOutRequest) GetCtmRefund() int64 {
	if x != nil && x.CtmRefund != nil {
		return *x.CtmRefund
	}
	return 0
}

var File_refund_ito_proto protoreflect.FileDescriptor

var file_refund_ito_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99,
	0x01, 0x0a, 0x25, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd5, 0x0d, 0x0a, 0x21, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x6d, 0x63, 0x68,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0a, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x17, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x18, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x1c, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1d, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x0a, 0x63,
	0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x09, 0x0a, 0x1e, 0x42, 0x75, 0x6c,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x63, 0x74, 0x6d,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e,
	0x45, 0x64, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x08, 0x63, 0x74,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11,
	0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x05, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08,
	0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x09, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74,
	0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9a, 0x09, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x6f,
	0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0b, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd1, 0x0d, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x12, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14,
	0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1c, 0x52, 0x08,
	0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x1d, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa2, 0x09, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x73, 0x70, 0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x08, 0x63, 0x74, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52,
	0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x93, 0x09, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x08, 0x63, 0x74, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52,
	0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x10, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xf9, 0x09, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x11, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x13, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x14, 0x52, 0x0b, 0x63, 0x74, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x79, 0x22, 0x8e, 0x05, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0a, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xdb, 0x07, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x09,
	0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x22, 0xa3, 0x08, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x08, 0x63, 0x74, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x09,
	0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x43, 0x74, 0x6d, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xbb, 0x1e, 0x0a, 0x14, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x17, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x17, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x22, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0b, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x24, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52,
	0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x27, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x6f, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2d, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x29,
	0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x07, 0x69, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74,
	0x6d, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x48, 0x36, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x37, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63,
	0x74, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x79, 0x0a, 0x15, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x1e, 0x0a, 0x1d,
	0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x77,
	0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x16, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1f, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x20, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x21, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x23, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x29, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x6f,
	0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2c, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x31, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x32, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x33, 0x52, 0x07, 0x69, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x34, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x35, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x48, 0x36,
	0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x48, 0x37, 0x52, 0x08, 0x63,
	0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f,
	0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74,
	0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xb7, 0x1e, 0x0a, 0x10, 0x43, 0x74, 0x6d, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x58,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x19, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0b, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x24, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x25, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26,
	0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x27, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x6f, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12,
	0x29, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x6f, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30,
	0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x07, 0x69,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x74, 0x6d, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x48, 0x36, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x03, 0x48, 0x37, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x63, 0x74, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0xc4, 0x23, 0x0a, 0x11, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x74, 0x6d, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x74,
	0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x74, 0x6d,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x74, 0x6d, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x74,
	0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x65, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x62, 0x0a, 0x12, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x73, 0x77, 0x61, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x73, 0x0a, 0x19, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x61, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x5e, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x61, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x12, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x09, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x15, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1f, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61,
	0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x05, 0x48, 0x26, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6f,
	0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27,
	0x52, 0x08, 0x6f, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2b, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x11, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x07, 0x69, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x33, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x03, 0x48, 0x34,
	0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x74, 0x6d, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x37, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x37, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x33, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x35, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x1a, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x94, 0x09, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08,
	0x6f, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x12, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xbd, 0x09, 0x0a, 0x18, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08,
	0x6f, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x12, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x47,
	0x0a, 0x19, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xcb, 0x0d, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x11, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x13, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x14, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x15, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x13, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x1c, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x1d, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0xc8, 0x0e, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x06,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x12, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52,
	0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1a, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1c, 0x52, 0x08, 0x63,
	0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74,
	0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1d,
	0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9c,
	0x09, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70,
	0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0a, 0x63, 0x74,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x94, 0x0a,
	0x0a, 0x15, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x63, 0x74,
	0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x72,
	0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74,
	0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52,
	0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x11, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0xbc, 0x0a, 0x0a, 0x1d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0a, 0x63, 0x74,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x10, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x09, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x08, 0x63, 0x74,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f,
	0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x8e, 0x0b, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x58, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x08, 0x63,
	0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0f, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x32, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfd, 0x04, 0x0a,
	0x15, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x5d, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7f, 0x0a, 0x18,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf3, 0x09,
	0x0a, 0x13, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x14, 0x52, 0x0b, 0x63, 0x74,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x22, 0xbd, 0x0a, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x14, 0x52, 0x0b, 0x63, 0x74,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x22, 0x7f, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x05, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xb1, 0x05, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0a, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x74, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x74, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xfe, 0x07, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52,
	0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x08, 0x0a, 0x16, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0f, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x22, 0x31, 0x0a, 0x1f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x1f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcf, 0x09, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08,
	0x6f, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x12, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x86, 0x0e, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0a, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x17, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x18, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x1c, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1d, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x0a, 0x63, 0x74,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66,
	0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xd7, 0x09, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74,
	0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74,
	0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc8, 0x09, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x08, 0x63, 0x74, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52,
	0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x10, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xae, 0x0a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e,
	0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x12, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x74, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x14,
	0x52, 0x0b, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x22, 0xc3, 0x05, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x09, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x90, 0x08,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x72,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0a, 0x63, 0x74, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x74, 0x6d, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x09, 0x63,
	0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x22, 0xd8, 0x08, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0a, 0x63, 0x74, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74,
	0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52,
	0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x11, 0x52, 0x09, 0x63, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x32, 0xeb, 0x37, 0x0a, 0x16,
	0x43, 0x74, 0x6d, 0x49, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x12, 0x44, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x17, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x41, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x40, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x91, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x12, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x3a,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x36,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x12,
	0x3d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x14,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x12, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x15, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x12, 0x3b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x37, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x12, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x36, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x12, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12,
	0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x4e,
	0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x69, 0x64, 0x12, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4e, 0x65, 0x78, 0x74, 0x52, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12,
	0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a,
	0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a,
	0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x3a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x3b, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x3c, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74,
	0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x74, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x39, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x85, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x88, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x12, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f,
	0x70, 0x62, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_refund_ito_proto_rawDescOnce sync.Once
	file_refund_ito_proto_rawDescData = file_refund_ito_proto_rawDesc
)

func file_refund_ito_proto_rawDescGZIP() []byte {
	file_refund_ito_proto_rawDescOnce.Do(func() {
		file_refund_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_refund_ito_proto_rawDescData)
	})
	return file_refund_ito_proto_rawDescData
}

var file_refund_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_refund_ito_proto_goTypes = []interface{}{
	(*BulkCreateRefundCompensateListRequest)(nil), // 0: customer_service.customer_ito.BulkCreateRefundCompensateListRequest
	(*BulkCreateRefundCompensateRequest)(nil),     // 1: customer_service.customer_ito.BulkCreateRefundCompensateRequest
	(*BulkCreateRefundDeliverListRequest)(nil),    // 2: customer_service.customer_ito.BulkCreateRefundDeliverListRequest
	(*BulkCreateRefundDeliverRequest)(nil),        // 3: customer_service.customer_ito.BulkCreateRefundDeliverRequest
	(*BulkCreateRefundReturnListRequest)(nil),     // 4: customer_service.customer_ito.BulkCreateRefundReturnListRequest
	(*BulkCreateRefundReturnRequest)(nil),         // 5: customer_service.customer_ito.BulkCreateRefundReturnRequest
	(*CreateObjectAfterSalesRequest)(nil),         // 6: customer_service.customer_ito.CreateObjectAfterSalesRequest
	(*CreateRefundCompensateRequest)(nil),         // 7: customer_service.customer_ito.CreateRefundCompensateRequest
	(*CreateRefundDeliverRequest)(nil),            // 8: customer_service.customer_ito.CreateRefundDeliverRequest
	(*CreateRefundInvoiceRequest)(nil),            // 9: customer_service.customer_ito.CreateRefundInvoiceRequest
	(*CreateRefundRefundRequest)(nil),             // 10: customer_service.customer_ito.CreateRefundRefundRequest
	(*CreateRefundReturnRequest)(nil),             // 11: customer_service.customer_ito.CreateRefundReturnRequest
	(*CreateRefundStockInRequest)(nil),            // 12: customer_service.customer_ito.CreateRefundStockInRequest
	(*CreateRefundStockOutRequest)(nil),           // 13: customer_service.customer_ito.CreateRefundStockOutRequest
	(*CtmRefundDestroyRequest)(nil),               // 14: customer_service.customer_ito.CtmRefundDestroyRequest
	(*CtmRefundListRequest)(nil),                  // 15: customer_service.customer_ito.CtmRefundListRequest
	(*CtmRefundListResponse)(nil),                 // 16: customer_service.customer_ito.CtmRefundListResponse
	(*CtmRefundPartialUpdateRequest)(nil),         // 17: customer_service.customer_ito.CtmRefundPartialUpdateRequest
	(*CtmRefundRequest)(nil),                      // 18: customer_service.customer_ito.CtmRefundRequest
	(*CtmRefundResponse)(nil),                     // 19: customer_service.customer_ito.CtmRefundResponse
	(*CtmRefundRetrieveRequest)(nil),              // 20: customer_service.customer_ito.CtmRefundRetrieveRequest
	(*DestroyObjectAfterSalesRequest)(nil),        // 21: customer_service.customer_ito.DestroyObjectAfterSalesRequest
	(*DestroyRefundCompensateRequest)(nil),        // 22: customer_service.customer_ito.DestroyRefundCompensateRequest
	(*DestroyRefundDeliverRequest)(nil),           // 23: customer_service.customer_ito.DestroyRefundDeliverRequest
	(*DestroyRefundInvoiceRequest)(nil),           // 24: customer_service.customer_ito.DestroyRefundInvoiceRequest
	(*DestroyRefundRefundRequest)(nil),            // 25: customer_service.customer_ito.DestroyRefundRefundRequest
	(*DestroyRefundReturnRequest)(nil),            // 26: customer_service.customer_ito.DestroyRefundReturnRequest
	(*DestroyRefundStockInRequest)(nil),           // 27: customer_service.customer_ito.DestroyRefundStockInRequest
	(*DestroyRefundStockOutRequest)(nil),          // 28: customer_service.customer_ito.DestroyRefundStockOutRequest
	(*ListObjectAfterSalesRequest)(nil),           // 29: customer_service.customer_ito.ListObjectAfterSalesRequest
	(*ListRefundCompensateRequest)(nil),           // 30: customer_service.customer_ito.ListRefundCompensateRequest
	(*ListRefundDeliverRequest)(nil),              // 31: customer_service.customer_ito.ListRefundDeliverRequest
	(*ListRefundInvoiceRequest)(nil),              // 32: customer_service.customer_ito.ListRefundInvoiceRequest
	(*ListRefundRefundRequest)(nil),               // 33: customer_service.customer_ito.ListRefundRefundRequest
	(*ListRefundReturnRequest)(nil),               // 34: customer_service.customer_ito.ListRefundReturnRequest
	(*ListRefundStockInRequest)(nil),              // 35: customer_service.customer_ito.ListRefundStockInRequest
	(*ListRefundStockOutRequest)(nil),             // 36: customer_service.customer_ito.ListRefundStockOutRequest
	(*NextNoRefundRefundRequest)(nil),             // 37: customer_service.customer_ito.NextNoRefundRefundRequest
	(*NextNoRefundRefundResponse)(nil),            // 38: customer_service.customer_ito.NextNoRefundRefundResponse
	(*ObjectAfterSalesListResponse)(nil),          // 39: customer_service.customer_ito.ObjectAfterSalesListResponse
	(*ObjectAfterSalesRequest)(nil),               // 40: customer_service.customer_ito.ObjectAfterSalesRequest
	(*ObjectAfterSalesResponse)(nil),              // 41: customer_service.customer_ito.ObjectAfterSalesResponse
	(*OptionValueIntResponse)(nil),                // 42: customer_service.customer_ito.OptionValueIntResponse
	(*OptionValueStringResponse)(nil),             // 43: customer_service.customer_ito.OptionValueStringResponse
	(*RefundCompensateListResponse)(nil),          // 44: customer_service.customer_ito.RefundCompensateListResponse
	(*RefundCompensateRequest)(nil),               // 45: customer_service.customer_ito.RefundCompensateRequest
	(*RefundCompensateResponse)(nil),              // 46: customer_service.customer_ito.RefundCompensateResponse
	(*RefundDeliverListResponse)(nil),             // 47: customer_service.customer_ito.RefundDeliverListResponse
	(*RefundDeliverRequest)(nil),                  // 48: customer_service.customer_ito.RefundDeliverRequest
	(*RefundDeliverResponse)(nil),                 // 49: customer_service.customer_ito.RefundDeliverResponse
	(*RefundInvoiceChildrenResponse)(nil),         // 50: customer_service.customer_ito.RefundInvoiceChildrenResponse
	(*RefundInvoiceListResponse)(nil),             // 51: customer_service.customer_ito.RefundInvoiceListResponse
	(*RefundInvoiceRequest)(nil),                  // 52: customer_service.customer_ito.RefundInvoiceRequest
	(*RefundInvoiceResponse)(nil),                 // 53: customer_service.customer_ito.RefundInvoiceResponse
	(*RefundNextRidRequest)(nil),                  // 54: customer_service.customer_ito.RefundNextRidRequest
	(*RefundNextRidResponse)(nil),                 // 55: customer_service.customer_ito.RefundNextRidResponse
	(*RefundOptionsRequest)(nil),                  // 56: customer_service.customer_ito.RefundOptionsRequest
	(*RefundOptionsResponse)(nil),                 // 57: customer_service.customer_ito.RefundOptionsResponse
	(*RefundRefundListResponse)(nil),              // 58: customer_service.customer_ito.RefundRefundListResponse
	(*RefundRefundRequest)(nil),                   // 59: customer_service.customer_ito.RefundRefundRequest
	(*RefundRefundResponse)(nil),                  // 60: customer_service.customer_ito.RefundRefundResponse
	(*RefundReturnListResponse)(nil),              // 61: customer_service.customer_ito.RefundReturnListResponse
	(*RefundReturnRequest)(nil),                   // 62: customer_service.customer_ito.RefundReturnRequest
	(*RefundReturnResponse)(nil),                  // 63: customer_service.customer_ito.RefundReturnResponse
	(*RefundStatusCountListResponse)(nil),         // 64: customer_service.customer_ito.RefundStatusCountListResponse
	(*RefundStatusCountRequest)(nil),              // 65: customer_service.customer_ito.RefundStatusCountRequest
	(*RefundStatusCountResponse)(nil),             // 66: customer_service.customer_ito.RefundStatusCountResponse
	(*RefundStockInListResponse)(nil),             // 67: customer_service.customer_ito.RefundStockInListResponse
	(*RefundStockInResponse)(nil),                 // 68: customer_service.customer_ito.RefundStockInResponse
	(*RefundStockOutListResponse)(nil),            // 69: customer_service.customer_ito.RefundStockOutListResponse
	(*RefundStockOutResponse)(nil),                // 70: customer_service.customer_ito.RefundStockOutResponse
	(*RetrieveObjectAfterSalesRequest)(nil),       // 71: customer_service.customer_ito.RetrieveObjectAfterSalesRequest
	(*RetrieveRefundCompensateRequest)(nil),       // 72: customer_service.customer_ito.RetrieveRefundCompensateRequest
	(*RetrieveRefundDeliverRequest)(nil),          // 73: customer_service.customer_ito.RetrieveRefundDeliverRequest
	(*RetrieveRefundInvoiceRequest)(nil),          // 74: customer_service.customer_ito.RetrieveRefundInvoiceRequest
	(*RetrieveRefundRefundRequest)(nil),           // 75: customer_service.customer_ito.RetrieveRefundRefundRequest
	(*RetrieveRefundReturnRequest)(nil),           // 76: customer_service.customer_ito.RetrieveRefundReturnRequest
	(*RetrieveRefundStockInRequest)(nil),          // 77: customer_service.customer_ito.RetrieveRefundStockInRequest
	(*RetrieveRefundStockOutRequest)(nil),         // 78: customer_service.customer_ito.RetrieveRefundStockOutRequest
	(*UpdateObjectAfterSalesRequest)(nil),         // 79: customer_service.customer_ito.UpdateObjectAfterSalesRequest
	(*UpdateRefundCompensateRequest)(nil),         // 80: customer_service.customer_ito.UpdateRefundCompensateRequest
	(*UpdateRefundDeliverRequest)(nil),            // 81: customer_service.customer_ito.UpdateRefundDeliverRequest
	(*UpdateRefundInvoiceRequest)(nil),            // 82: customer_service.customer_ito.UpdateRefundInvoiceRequest
	(*UpdateRefundRefundRequest)(nil),             // 83: customer_service.customer_ito.UpdateRefundRefundRequest
	(*UpdateRefundReturnRequest)(nil),             // 84: customer_service.customer_ito.UpdateRefundReturnRequest
	(*UpdateRefundStockInRequest)(nil),            // 85: customer_service.customer_ito.UpdateRefundStockInRequest
	(*UpdateRefundStockOutRequest)(nil),           // 86: customer_service.customer_ito.UpdateRefundStockOutRequest
	(*emptypb.Empty)(nil),                         // 87: google.protobuf.Empty
}
var file_refund_ito_proto_depIdxs = []int32{
	1,   // 0: customer_service.customer_ito.BulkCreateRefundCompensateListRequest.results:type_name -> customer_service.customer_ito.BulkCreateRefundCompensateRequest
	3,   // 1: customer_service.customer_ito.BulkCreateRefundDeliverListRequest.results:type_name -> customer_service.customer_ito.BulkCreateRefundDeliverRequest
	5,   // 2: customer_service.customer_ito.BulkCreateRefundReturnListRequest.results:type_name -> customer_service.customer_ito.BulkCreateRefundReturnRequest
	40,  // 3: customer_service.customer_ito.CtmRefundListRequest.after_sales_content:type_name -> customer_service.customer_ito.ObjectAfterSalesRequest
	62,  // 4: customer_service.customer_ito.CtmRefundListRequest.return_list:type_name -> customer_service.customer_ito.RefundReturnRequest
	48,  // 5: customer_service.customer_ito.CtmRefundListRequest.swap_list:type_name -> customer_service.customer_ito.RefundDeliverRequest
	45,  // 6: customer_service.customer_ito.CtmRefundListRequest.refund_compensate_content:type_name -> customer_service.customer_ito.RefundCompensateRequest
	59,  // 7: customer_service.customer_ito.CtmRefundListRequest.pay_content:type_name -> customer_service.customer_ito.RefundRefundRequest
	52,  // 8: customer_service.customer_ito.CtmRefundListRequest.invoice_content:type_name -> customer_service.customer_ito.RefundInvoiceRequest
	19,  // 9: customer_service.customer_ito.CtmRefundListResponse.results:type_name -> customer_service.customer_ito.CtmRefundResponse
	40,  // 10: customer_service.customer_ito.CtmRefundPartialUpdateRequest.after_sales_content:type_name -> customer_service.customer_ito.ObjectAfterSalesRequest
	62,  // 11: customer_service.customer_ito.CtmRefundPartialUpdateRequest.return_list:type_name -> customer_service.customer_ito.RefundReturnRequest
	48,  // 12: customer_service.customer_ito.CtmRefundPartialUpdateRequest.swap_list:type_name -> customer_service.customer_ito.RefundDeliverRequest
	45,  // 13: customer_service.customer_ito.CtmRefundPartialUpdateRequest.refund_compensate_content:type_name -> customer_service.customer_ito.RefundCompensateRequest
	59,  // 14: customer_service.customer_ito.CtmRefundPartialUpdateRequest.pay_content:type_name -> customer_service.customer_ito.RefundRefundRequest
	52,  // 15: customer_service.customer_ito.CtmRefundPartialUpdateRequest.invoice_content:type_name -> customer_service.customer_ito.RefundInvoiceRequest
	40,  // 16: customer_service.customer_ito.CtmRefundRequest.after_sales_content:type_name -> customer_service.customer_ito.ObjectAfterSalesRequest
	62,  // 17: customer_service.customer_ito.CtmRefundRequest.return_list:type_name -> customer_service.customer_ito.RefundReturnRequest
	48,  // 18: customer_service.customer_ito.CtmRefundRequest.swap_list:type_name -> customer_service.customer_ito.RefundDeliverRequest
	45,  // 19: customer_service.customer_ito.CtmRefundRequest.refund_compensate_content:type_name -> customer_service.customer_ito.RefundCompensateRequest
	59,  // 20: customer_service.customer_ito.CtmRefundRequest.pay_content:type_name -> customer_service.customer_ito.RefundRefundRequest
	52,  // 21: customer_service.customer_ito.CtmRefundRequest.invoice_content:type_name -> customer_service.customer_ito.RefundInvoiceRequest
	41,  // 22: customer_service.customer_ito.CtmRefundResponse.after_sales_details:type_name -> customer_service.customer_ito.ObjectAfterSalesResponse
	63,  // 23: customer_service.customer_ito.CtmRefundResponse.refund_goods_details:type_name -> customer_service.customer_ito.RefundReturnResponse
	49,  // 24: customer_service.customer_ito.CtmRefundResponse.swap_goods_details:type_name -> customer_service.customer_ito.RefundDeliverResponse
	46,  // 25: customer_service.customer_ito.CtmRefundResponse.refund_compensate_details:type_name -> customer_service.customer_ito.RefundCompensateResponse
	60,  // 26: customer_service.customer_ito.CtmRefundResponse.refund_pay_details:type_name -> customer_service.customer_ito.RefundRefundResponse
	53,  // 27: customer_service.customer_ito.CtmRefundResponse.refund_invoice_details:type_name -> customer_service.customer_ito.RefundInvoiceResponse
	68,  // 28: customer_service.customer_ito.CtmRefundResponse.stock_in_details:type_name -> customer_service.customer_ito.RefundStockInResponse
	70,  // 29: customer_service.customer_ito.CtmRefundResponse.stock_out_details:type_name -> customer_service.customer_ito.RefundStockOutResponse
	41,  // 30: customer_service.customer_ito.ObjectAfterSalesListResponse.results:type_name -> customer_service.customer_ito.ObjectAfterSalesResponse
	46,  // 31: customer_service.customer_ito.RefundCompensateListResponse.results:type_name -> customer_service.customer_ito.RefundCompensateResponse
	49,  // 32: customer_service.customer_ito.RefundDeliverListResponse.results:type_name -> customer_service.customer_ito.RefundDeliverResponse
	53,  // 33: customer_service.customer_ito.RefundInvoiceListResponse.results:type_name -> customer_service.customer_ito.RefundInvoiceResponse
	50,  // 34: customer_service.customer_ito.RefundInvoiceResponse.children:type_name -> customer_service.customer_ito.RefundInvoiceChildrenResponse
	42,  // 35: customer_service.customer_ito.RefundOptionsResponse.create_type:type_name -> customer_service.customer_ito.OptionValueIntResponse
	42,  // 36: customer_service.customer_ito.RefundOptionsResponse.trade_type:type_name -> customer_service.customer_ito.OptionValueIntResponse
	42,  // 37: customer_service.customer_ito.RefundOptionsResponse.type:type_name -> customer_service.customer_ito.OptionValueIntResponse
	43,  // 38: customer_service.customer_ito.RefundOptionsResponse.refund_status:type_name -> customer_service.customer_ito.OptionValueStringResponse
	42,  // 39: customer_service.customer_ito.RefundOptionsResponse.trade_status:type_name -> customer_service.customer_ito.OptionValueIntResponse
	42,  // 40: customer_service.customer_ito.RefundOptionsResponse.pay_status:type_name -> customer_service.customer_ito.OptionValueIntResponse
	42,  // 41: customer_service.customer_ito.RefundOptionsResponse.invoice_status:type_name -> customer_service.customer_ito.OptionValueIntResponse
	60,  // 42: customer_service.customer_ito.RefundRefundListResponse.results:type_name -> customer_service.customer_ito.RefundRefundResponse
	63,  // 43: customer_service.customer_ito.RefundReturnListResponse.results:type_name -> customer_service.customer_ito.RefundReturnResponse
	66,  // 44: customer_service.customer_ito.RefundStatusCountListResponse.results:type_name -> customer_service.customer_ito.RefundStatusCountResponse
	68,  // 45: customer_service.customer_ito.RefundStockInListResponse.results:type_name -> customer_service.customer_ito.RefundStockInResponse
	70,  // 46: customer_service.customer_ito.RefundStockOutListResponse.results:type_name -> customer_service.customer_ito.RefundStockOutResponse
	0,   // 47: customer_service.customer_ito.CtmItoRefundController.BulkCreateRefundCompensate:input_type -> customer_service.customer_ito.BulkCreateRefundCompensateListRequest
	2,   // 48: customer_service.customer_ito.CtmItoRefundController.BulkCreateRefundDeliver:input_type -> customer_service.customer_ito.BulkCreateRefundDeliverListRequest
	4,   // 49: customer_service.customer_ito.CtmItoRefundController.BulkCreateRefundReturn:input_type -> customer_service.customer_ito.BulkCreateRefundReturnListRequest
	18,  // 50: customer_service.customer_ito.CtmItoRefundController.Create:input_type -> customer_service.customer_ito.CtmRefundRequest
	6,   // 51: customer_service.customer_ito.CtmItoRefundController.CreateObjectAfterSales:input_type -> customer_service.customer_ito.CreateObjectAfterSalesRequest
	7,   // 52: customer_service.customer_ito.CtmItoRefundController.CreateRefundCompensate:input_type -> customer_service.customer_ito.CreateRefundCompensateRequest
	8,   // 53: customer_service.customer_ito.CtmItoRefundController.CreateRefundDeliver:input_type -> customer_service.customer_ito.CreateRefundDeliverRequest
	9,   // 54: customer_service.customer_ito.CtmItoRefundController.CreateRefundInvoice:input_type -> customer_service.customer_ito.CreateRefundInvoiceRequest
	10,  // 55: customer_service.customer_ito.CtmItoRefundController.CreateRefundRefund:input_type -> customer_service.customer_ito.CreateRefundRefundRequest
	11,  // 56: customer_service.customer_ito.CtmItoRefundController.CreateRefundReturn:input_type -> customer_service.customer_ito.CreateRefundReturnRequest
	12,  // 57: customer_service.customer_ito.CtmItoRefundController.CreateRefundStockIn:input_type -> customer_service.customer_ito.CreateRefundStockInRequest
	13,  // 58: customer_service.customer_ito.CtmItoRefundController.CreateRefundStockOut:input_type -> customer_service.customer_ito.CreateRefundStockOutRequest
	14,  // 59: customer_service.customer_ito.CtmItoRefundController.Destroy:input_type -> customer_service.customer_ito.CtmRefundDestroyRequest
	21,  // 60: customer_service.customer_ito.CtmItoRefundController.DestroyObjectAfterSales:input_type -> customer_service.customer_ito.DestroyObjectAfterSalesRequest
	22,  // 61: customer_service.customer_ito.CtmItoRefundController.DestroyRefundCompensate:input_type -> customer_service.customer_ito.DestroyRefundCompensateRequest
	23,  // 62: customer_service.customer_ito.CtmItoRefundController.DestroyRefundDeliver:input_type -> customer_service.customer_ito.DestroyRefundDeliverRequest
	24,  // 63: customer_service.customer_ito.CtmItoRefundController.DestroyRefundInvoice:input_type -> customer_service.customer_ito.DestroyRefundInvoiceRequest
	25,  // 64: customer_service.customer_ito.CtmItoRefundController.DestroyRefundRefund:input_type -> customer_service.customer_ito.DestroyRefundRefundRequest
	26,  // 65: customer_service.customer_ito.CtmItoRefundController.DestroyRefundReturn:input_type -> customer_service.customer_ito.DestroyRefundReturnRequest
	27,  // 66: customer_service.customer_ito.CtmItoRefundController.DestroyRefundStockIn:input_type -> customer_service.customer_ito.DestroyRefundStockInRequest
	28,  // 67: customer_service.customer_ito.CtmItoRefundController.DestroyRefundStockOut:input_type -> customer_service.customer_ito.DestroyRefundStockOutRequest
	15,  // 68: customer_service.customer_ito.CtmItoRefundController.List:input_type -> customer_service.customer_ito.CtmRefundListRequest
	29,  // 69: customer_service.customer_ito.CtmItoRefundController.ListObjectAfterSales:input_type -> customer_service.customer_ito.ListObjectAfterSalesRequest
	30,  // 70: customer_service.customer_ito.CtmItoRefundController.ListRefundCompensate:input_type -> customer_service.customer_ito.ListRefundCompensateRequest
	31,  // 71: customer_service.customer_ito.CtmItoRefundController.ListRefundDeliver:input_type -> customer_service.customer_ito.ListRefundDeliverRequest
	32,  // 72: customer_service.customer_ito.CtmItoRefundController.ListRefundInvoice:input_type -> customer_service.customer_ito.ListRefundInvoiceRequest
	33,  // 73: customer_service.customer_ito.CtmItoRefundController.ListRefundRefund:input_type -> customer_service.customer_ito.ListRefundRefundRequest
	34,  // 74: customer_service.customer_ito.CtmItoRefundController.ListRefundReturn:input_type -> customer_service.customer_ito.ListRefundReturnRequest
	35,  // 75: customer_service.customer_ito.CtmItoRefundController.ListRefundStockIn:input_type -> customer_service.customer_ito.ListRefundStockInRequest
	36,  // 76: customer_service.customer_ito.CtmItoRefundController.ListRefundStockOut:input_type -> customer_service.customer_ito.ListRefundStockOutRequest
	37,  // 77: customer_service.customer_ito.CtmItoRefundController.NextNoRefundRefund:input_type -> customer_service.customer_ito.NextNoRefundRefundRequest
	17,  // 78: customer_service.customer_ito.CtmItoRefundController.PartialUpdate:input_type -> customer_service.customer_ito.CtmRefundPartialUpdateRequest
	54,  // 79: customer_service.customer_ito.CtmItoRefundController.RefundNextRid:input_type -> customer_service.customer_ito.RefundNextRidRequest
	56,  // 80: customer_service.customer_ito.CtmItoRefundController.RefundOptions:input_type -> customer_service.customer_ito.RefundOptionsRequest
	65,  // 81: customer_service.customer_ito.CtmItoRefundController.RefundStatusCount:input_type -> customer_service.customer_ito.RefundStatusCountRequest
	20,  // 82: customer_service.customer_ito.CtmItoRefundController.Retrieve:input_type -> customer_service.customer_ito.CtmRefundRetrieveRequest
	71,  // 83: customer_service.customer_ito.CtmItoRefundController.RetrieveObjectAfterSales:input_type -> customer_service.customer_ito.RetrieveObjectAfterSalesRequest
	72,  // 84: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundCompensate:input_type -> customer_service.customer_ito.RetrieveRefundCompensateRequest
	73,  // 85: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundDeliver:input_type -> customer_service.customer_ito.RetrieveRefundDeliverRequest
	74,  // 86: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundInvoice:input_type -> customer_service.customer_ito.RetrieveRefundInvoiceRequest
	75,  // 87: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundRefund:input_type -> customer_service.customer_ito.RetrieveRefundRefundRequest
	76,  // 88: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundReturn:input_type -> customer_service.customer_ito.RetrieveRefundReturnRequest
	77,  // 89: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundStockIn:input_type -> customer_service.customer_ito.RetrieveRefundStockInRequest
	78,  // 90: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundStockOut:input_type -> customer_service.customer_ito.RetrieveRefundStockOutRequest
	18,  // 91: customer_service.customer_ito.CtmItoRefundController.Update:input_type -> customer_service.customer_ito.CtmRefundRequest
	79,  // 92: customer_service.customer_ito.CtmItoRefundController.UpdateObjectAfterSales:input_type -> customer_service.customer_ito.UpdateObjectAfterSalesRequest
	80,  // 93: customer_service.customer_ito.CtmItoRefundController.UpdateRefundCompensate:input_type -> customer_service.customer_ito.UpdateRefundCompensateRequest
	81,  // 94: customer_service.customer_ito.CtmItoRefundController.UpdateRefundDeliver:input_type -> customer_service.customer_ito.UpdateRefundDeliverRequest
	82,  // 95: customer_service.customer_ito.CtmItoRefundController.UpdateRefundInvoice:input_type -> customer_service.customer_ito.UpdateRefundInvoiceRequest
	83,  // 96: customer_service.customer_ito.CtmItoRefundController.UpdateRefundRefund:input_type -> customer_service.customer_ito.UpdateRefundRefundRequest
	84,  // 97: customer_service.customer_ito.CtmItoRefundController.UpdateRefundReturn:input_type -> customer_service.customer_ito.UpdateRefundReturnRequest
	85,  // 98: customer_service.customer_ito.CtmItoRefundController.UpdateRefundStockIn:input_type -> customer_service.customer_ito.UpdateRefundStockInRequest
	86,  // 99: customer_service.customer_ito.CtmItoRefundController.UpdateRefundStockOut:input_type -> customer_service.customer_ito.UpdateRefundStockOutRequest
	44,  // 100: customer_service.customer_ito.CtmItoRefundController.BulkCreateRefundCompensate:output_type -> customer_service.customer_ito.RefundCompensateListResponse
	47,  // 101: customer_service.customer_ito.CtmItoRefundController.BulkCreateRefundDeliver:output_type -> customer_service.customer_ito.RefundDeliverListResponse
	61,  // 102: customer_service.customer_ito.CtmItoRefundController.BulkCreateRefundReturn:output_type -> customer_service.customer_ito.RefundReturnListResponse
	19,  // 103: customer_service.customer_ito.CtmItoRefundController.Create:output_type -> customer_service.customer_ito.CtmRefundResponse
	41,  // 104: customer_service.customer_ito.CtmItoRefundController.CreateObjectAfterSales:output_type -> customer_service.customer_ito.ObjectAfterSalesResponse
	46,  // 105: customer_service.customer_ito.CtmItoRefundController.CreateRefundCompensate:output_type -> customer_service.customer_ito.RefundCompensateResponse
	49,  // 106: customer_service.customer_ito.CtmItoRefundController.CreateRefundDeliver:output_type -> customer_service.customer_ito.RefundDeliverResponse
	53,  // 107: customer_service.customer_ito.CtmItoRefundController.CreateRefundInvoice:output_type -> customer_service.customer_ito.RefundInvoiceResponse
	60,  // 108: customer_service.customer_ito.CtmItoRefundController.CreateRefundRefund:output_type -> customer_service.customer_ito.RefundRefundResponse
	63,  // 109: customer_service.customer_ito.CtmItoRefundController.CreateRefundReturn:output_type -> customer_service.customer_ito.RefundReturnResponse
	68,  // 110: customer_service.customer_ito.CtmItoRefundController.CreateRefundStockIn:output_type -> customer_service.customer_ito.RefundStockInResponse
	70,  // 111: customer_service.customer_ito.CtmItoRefundController.CreateRefundStockOut:output_type -> customer_service.customer_ito.RefundStockOutResponse
	87,  // 112: customer_service.customer_ito.CtmItoRefundController.Destroy:output_type -> google.protobuf.Empty
	87,  // 113: customer_service.customer_ito.CtmItoRefundController.DestroyObjectAfterSales:output_type -> google.protobuf.Empty
	87,  // 114: customer_service.customer_ito.CtmItoRefundController.DestroyRefundCompensate:output_type -> google.protobuf.Empty
	87,  // 115: customer_service.customer_ito.CtmItoRefundController.DestroyRefundDeliver:output_type -> google.protobuf.Empty
	87,  // 116: customer_service.customer_ito.CtmItoRefundController.DestroyRefundInvoice:output_type -> google.protobuf.Empty
	87,  // 117: customer_service.customer_ito.CtmItoRefundController.DestroyRefundRefund:output_type -> google.protobuf.Empty
	87,  // 118: customer_service.customer_ito.CtmItoRefundController.DestroyRefundReturn:output_type -> google.protobuf.Empty
	87,  // 119: customer_service.customer_ito.CtmItoRefundController.DestroyRefundStockIn:output_type -> google.protobuf.Empty
	87,  // 120: customer_service.customer_ito.CtmItoRefundController.DestroyRefundStockOut:output_type -> google.protobuf.Empty
	16,  // 121: customer_service.customer_ito.CtmItoRefundController.List:output_type -> customer_service.customer_ito.CtmRefundListResponse
	39,  // 122: customer_service.customer_ito.CtmItoRefundController.ListObjectAfterSales:output_type -> customer_service.customer_ito.ObjectAfterSalesListResponse
	44,  // 123: customer_service.customer_ito.CtmItoRefundController.ListRefundCompensate:output_type -> customer_service.customer_ito.RefundCompensateListResponse
	47,  // 124: customer_service.customer_ito.CtmItoRefundController.ListRefundDeliver:output_type -> customer_service.customer_ito.RefundDeliverListResponse
	51,  // 125: customer_service.customer_ito.CtmItoRefundController.ListRefundInvoice:output_type -> customer_service.customer_ito.RefundInvoiceListResponse
	58,  // 126: customer_service.customer_ito.CtmItoRefundController.ListRefundRefund:output_type -> customer_service.customer_ito.RefundRefundListResponse
	61,  // 127: customer_service.customer_ito.CtmItoRefundController.ListRefundReturn:output_type -> customer_service.customer_ito.RefundReturnListResponse
	67,  // 128: customer_service.customer_ito.CtmItoRefundController.ListRefundStockIn:output_type -> customer_service.customer_ito.RefundStockInListResponse
	69,  // 129: customer_service.customer_ito.CtmItoRefundController.ListRefundStockOut:output_type -> customer_service.customer_ito.RefundStockOutListResponse
	38,  // 130: customer_service.customer_ito.CtmItoRefundController.NextNoRefundRefund:output_type -> customer_service.customer_ito.NextNoRefundRefundResponse
	19,  // 131: customer_service.customer_ito.CtmItoRefundController.PartialUpdate:output_type -> customer_service.customer_ito.CtmRefundResponse
	55,  // 132: customer_service.customer_ito.CtmItoRefundController.RefundNextRid:output_type -> customer_service.customer_ito.RefundNextRidResponse
	57,  // 133: customer_service.customer_ito.CtmItoRefundController.RefundOptions:output_type -> customer_service.customer_ito.RefundOptionsResponse
	64,  // 134: customer_service.customer_ito.CtmItoRefundController.RefundStatusCount:output_type -> customer_service.customer_ito.RefundStatusCountListResponse
	19,  // 135: customer_service.customer_ito.CtmItoRefundController.Retrieve:output_type -> customer_service.customer_ito.CtmRefundResponse
	41,  // 136: customer_service.customer_ito.CtmItoRefundController.RetrieveObjectAfterSales:output_type -> customer_service.customer_ito.ObjectAfterSalesResponse
	46,  // 137: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundCompensate:output_type -> customer_service.customer_ito.RefundCompensateResponse
	49,  // 138: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundDeliver:output_type -> customer_service.customer_ito.RefundDeliverResponse
	53,  // 139: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundInvoice:output_type -> customer_service.customer_ito.RefundInvoiceResponse
	60,  // 140: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundRefund:output_type -> customer_service.customer_ito.RefundRefundResponse
	63,  // 141: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundReturn:output_type -> customer_service.customer_ito.RefundReturnResponse
	68,  // 142: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundStockIn:output_type -> customer_service.customer_ito.RefundStockInResponse
	70,  // 143: customer_service.customer_ito.CtmItoRefundController.RetrieveRefundStockOut:output_type -> customer_service.customer_ito.RefundStockOutResponse
	19,  // 144: customer_service.customer_ito.CtmItoRefundController.Update:output_type -> customer_service.customer_ito.CtmRefundResponse
	41,  // 145: customer_service.customer_ito.CtmItoRefundController.UpdateObjectAfterSales:output_type -> customer_service.customer_ito.ObjectAfterSalesResponse
	46,  // 146: customer_service.customer_ito.CtmItoRefundController.UpdateRefundCompensate:output_type -> customer_service.customer_ito.RefundCompensateResponse
	49,  // 147: customer_service.customer_ito.CtmItoRefundController.UpdateRefundDeliver:output_type -> customer_service.customer_ito.RefundDeliverResponse
	53,  // 148: customer_service.customer_ito.CtmItoRefundController.UpdateRefundInvoice:output_type -> customer_service.customer_ito.RefundInvoiceResponse
	60,  // 149: customer_service.customer_ito.CtmItoRefundController.UpdateRefundRefund:output_type -> customer_service.customer_ito.RefundRefundResponse
	63,  // 150: customer_service.customer_ito.CtmItoRefundController.UpdateRefundReturn:output_type -> customer_service.customer_ito.RefundReturnResponse
	68,  // 151: customer_service.customer_ito.CtmItoRefundController.UpdateRefundStockIn:output_type -> customer_service.customer_ito.RefundStockInResponse
	70,  // 152: customer_service.customer_ito.CtmItoRefundController.UpdateRefundStockOut:output_type -> customer_service.customer_ito.RefundStockOutResponse
	100, // [100:153] is the sub-list for method output_type
	47,  // [47:100] is the sub-list for method input_type
	47,  // [47:47] is the sub-list for extension type_name
	47,  // [47:47] is the sub-list for extension extendee
	0,   // [0:47] is the sub-list for field type_name
}

func init() { file_refund_ito_proto_init() }
func file_refund_ito_proto_init() {
	if File_refund_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_refund_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRefundCompensateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRefundCompensateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRefundDeliverListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRefundDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRefundReturnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRefundReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObjectAfterSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundCompensateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundStockInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundStockOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmRefundDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmRefundListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmRefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmRefundPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmRefundRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyObjectAfterSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRefundCompensateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRefundDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRefundInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRefundRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRefundReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRefundStockInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRefundStockOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectAfterSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundCompensateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundStockInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundStockOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextNoRefundRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextNoRefundRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAfterSalesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAfterSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAfterSalesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionValueIntResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionValueStringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundCompensateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundCompensateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundCompensateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundDeliverListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundDeliverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundInvoiceChildrenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundInvoiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundInvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundNextRidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundNextRidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundReturnListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundStatusCountListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundStatusCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundStatusCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundStockInListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundStockInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundStockOutListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundStockOutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveObjectAfterSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRefundCompensateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRefundDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRefundInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRefundRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRefundReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRefundStockInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRefundStockOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateObjectAfterSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRefundCompensateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRefundDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRefundInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRefundRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRefundReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRefundStockInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_refund_ito_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRefundStockOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_refund_ito_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_refund_ito_proto_msgTypes[86].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_refund_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_refund_ito_proto_goTypes,
		DependencyIndexes: file_refund_ito_proto_depIdxs,
		MessageInfos:      file_refund_ito_proto_msgTypes,
	}.Build()
	File_refund_ito_proto = out.File
	file_refund_ito_proto_rawDesc = nil
	file_refund_ito_proto_goTypes = nil
	file_refund_ito_proto_depIdxs = nil
}
