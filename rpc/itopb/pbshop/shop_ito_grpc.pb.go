// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: shop_ito.proto

package pbshop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BuShopController_BuBulkUpdate_FullMethodName   = "/shopmanage_service.shop_ito.BuShopController/BuBulkUpdate"
	BuShopController_Create_FullMethodName         = "/shopmanage_service.shop_ito.BuShopController/Create"
	BuShopController_CreateRelation_FullMethodName = "/shopmanage_service.shop_ito.BuShopController/CreateRelation"
	BuShopController_Destroy_FullMethodName        = "/shopmanage_service.shop_ito.BuShopController/Destroy"
	BuShopController_List_FullMethodName           = "/shopmanage_service.shop_ito.BuShopController/List"
	BuShopController_PartialUpdate_FullMethodName  = "/shopmanage_service.shop_ito.BuShopController/PartialUpdate"
	BuShopController_Retrieve_FullMethodName       = "/shopmanage_service.shop_ito.BuShopController/Retrieve"
	BuShopController_ShopList_FullMethodName       = "/shopmanage_service.shop_ito.BuShopController/ShopList"
	BuShopController_Update_FullMethodName         = "/shopmanage_service.shop_ito.BuShopController/Update"
)

// BuShopControllerClient is the client API for BuShopController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuShopControllerClient interface {
	BuBulkUpdate(ctx context.Context, in *BuBulkUpdateRequest, opts ...grpc.CallOption) (*BuBulkUpdateResponse, error)
	Create(ctx context.Context, in *BusinessUnitModelRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error)
	CreateRelation(ctx context.Context, in *BuShopCreateRelationRequest, opts ...grpc.CallOption) (*ItoShopsModelListResponse, error)
	Destroy(ctx context.Context, in *BusinessUnitModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *BusinessUnitModelListRequest, opts ...grpc.CallOption) (*BusinessUnitModelListResponse, error)
	PartialUpdate(ctx context.Context, in *BusinessUnitModelPartialUpdateRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error)
	Retrieve(ctx context.Context, in *BusinessUnitModelRetrieveRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error)
	ShopList(ctx context.Context, in *ItoShopsModelRequest, opts ...grpc.CallOption) (*ItoShopsModelListResponse, error)
	Update(ctx context.Context, in *BusinessUnitModelRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error)
}

type buShopControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewBuShopControllerClient(cc grpc.ClientConnInterface) BuShopControllerClient {
	return &buShopControllerClient{cc}
}

func (c *buShopControllerClient) BuBulkUpdate(ctx context.Context, in *BuBulkUpdateRequest, opts ...grpc.CallOption) (*BuBulkUpdateResponse, error) {
	out := new(BuBulkUpdateResponse)
	err := c.cc.Invoke(ctx, BuShopController_BuBulkUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) Create(ctx context.Context, in *BusinessUnitModelRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error) {
	out := new(BusinessUnitModelResponse)
	err := c.cc.Invoke(ctx, BuShopController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) CreateRelation(ctx context.Context, in *BuShopCreateRelationRequest, opts ...grpc.CallOption) (*ItoShopsModelListResponse, error) {
	out := new(ItoShopsModelListResponse)
	err := c.cc.Invoke(ctx, BuShopController_CreateRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) Destroy(ctx context.Context, in *BusinessUnitModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BuShopController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) List(ctx context.Context, in *BusinessUnitModelListRequest, opts ...grpc.CallOption) (*BusinessUnitModelListResponse, error) {
	out := new(BusinessUnitModelListResponse)
	err := c.cc.Invoke(ctx, BuShopController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) PartialUpdate(ctx context.Context, in *BusinessUnitModelPartialUpdateRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error) {
	out := new(BusinessUnitModelResponse)
	err := c.cc.Invoke(ctx, BuShopController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) Retrieve(ctx context.Context, in *BusinessUnitModelRetrieveRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error) {
	out := new(BusinessUnitModelResponse)
	err := c.cc.Invoke(ctx, BuShopController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) ShopList(ctx context.Context, in *ItoShopsModelRequest, opts ...grpc.CallOption) (*ItoShopsModelListResponse, error) {
	out := new(ItoShopsModelListResponse)
	err := c.cc.Invoke(ctx, BuShopController_ShopList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buShopControllerClient) Update(ctx context.Context, in *BusinessUnitModelRequest, opts ...grpc.CallOption) (*BusinessUnitModelResponse, error) {
	out := new(BusinessUnitModelResponse)
	err := c.cc.Invoke(ctx, BuShopController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuShopControllerServer is the server API for BuShopController service.
// All implementations must embed UnimplementedBuShopControllerServer
// for forward compatibility
type BuShopControllerServer interface {
	BuBulkUpdate(context.Context, *BuBulkUpdateRequest) (*BuBulkUpdateResponse, error)
	Create(context.Context, *BusinessUnitModelRequest) (*BusinessUnitModelResponse, error)
	CreateRelation(context.Context, *BuShopCreateRelationRequest) (*ItoShopsModelListResponse, error)
	Destroy(context.Context, *BusinessUnitModelDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *BusinessUnitModelListRequest) (*BusinessUnitModelListResponse, error)
	PartialUpdate(context.Context, *BusinessUnitModelPartialUpdateRequest) (*BusinessUnitModelResponse, error)
	Retrieve(context.Context, *BusinessUnitModelRetrieveRequest) (*BusinessUnitModelResponse, error)
	ShopList(context.Context, *ItoShopsModelRequest) (*ItoShopsModelListResponse, error)
	Update(context.Context, *BusinessUnitModelRequest) (*BusinessUnitModelResponse, error)
	mustEmbedUnimplementedBuShopControllerServer()
}

// UnimplementedBuShopControllerServer must be embedded to have forward compatible implementations.
type UnimplementedBuShopControllerServer struct {
}

func (UnimplementedBuShopControllerServer) BuBulkUpdate(context.Context, *BuBulkUpdateRequest) (*BuBulkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuBulkUpdate not implemented")
}
func (UnimplementedBuShopControllerServer) Create(context.Context, *BusinessUnitModelRequest) (*BusinessUnitModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBuShopControllerServer) CreateRelation(context.Context, *BuShopCreateRelationRequest) (*ItoShopsModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}
func (UnimplementedBuShopControllerServer) Destroy(context.Context, *BusinessUnitModelDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedBuShopControllerServer) List(context.Context, *BusinessUnitModelListRequest) (*BusinessUnitModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBuShopControllerServer) PartialUpdate(context.Context, *BusinessUnitModelPartialUpdateRequest) (*BusinessUnitModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedBuShopControllerServer) Retrieve(context.Context, *BusinessUnitModelRetrieveRequest) (*BusinessUnitModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedBuShopControllerServer) ShopList(context.Context, *ItoShopsModelRequest) (*ItoShopsModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopList not implemented")
}
func (UnimplementedBuShopControllerServer) Update(context.Context, *BusinessUnitModelRequest) (*BusinessUnitModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBuShopControllerServer) mustEmbedUnimplementedBuShopControllerServer() {}

// UnsafeBuShopControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuShopControllerServer will
// result in compilation errors.
type UnsafeBuShopControllerServer interface {
	mustEmbedUnimplementedBuShopControllerServer()
}

func RegisterBuShopControllerServer(s grpc.ServiceRegistrar, srv BuShopControllerServer) {
	s.RegisterService(&BuShopController_ServiceDesc, srv)
}

func _BuShopController_BuBulkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuBulkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).BuBulkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_BuBulkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).BuBulkUpdate(ctx, req.(*BuBulkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessUnitModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).Create(ctx, req.(*BusinessUnitModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuShopCreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_CreateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).CreateRelation(ctx, req.(*BuShopCreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessUnitModelDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).Destroy(ctx, req.(*BusinessUnitModelDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessUnitModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).List(ctx, req.(*BusinessUnitModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessUnitModelPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).PartialUpdate(ctx, req.(*BusinessUnitModelPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessUnitModelRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).Retrieve(ctx, req.(*BusinessUnitModelRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_ShopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItoShopsModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).ShopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_ShopList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).ShopList(ctx, req.(*ItoShopsModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuShopController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessUnitModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuShopControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuShopController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuShopControllerServer).Update(ctx, req.(*BusinessUnitModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuShopController_ServiceDesc is the grpc.ServiceDesc for BuShopController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuShopController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopmanage_service.shop_ito.BuShopController",
	HandlerType: (*BuShopControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuBulkUpdate",
			Handler:    _BuShopController_BuBulkUpdate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BuShopController_Create_Handler,
		},
		{
			MethodName: "CreateRelation",
			Handler:    _BuShopController_CreateRelation_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _BuShopController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BuShopController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _BuShopController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _BuShopController_Retrieve_Handler,
		},
		{
			MethodName: "ShopList",
			Handler:    _BuShopController_ShopList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BuShopController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop_ito.proto",
}

const (
	HmxTradesController_EmployeeHmx_FullMethodName = "/shopmanage_service.shop_ito.HmxTradesController/EmployeeHmx"
	HmxTradesController_List_FullMethodName        = "/shopmanage_service.shop_ito.HmxTradesController/List"
	HmxTradesController_Retrieve_FullMethodName    = "/shopmanage_service.shop_ito.HmxTradesController/Retrieve"
	HmxTradesController_StoreHmx_FullMethodName    = "/shopmanage_service.shop_ito.HmxTradesController/StoreHmx"
)

// HmxTradesControllerClient is the client API for HmxTradesController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HmxTradesControllerClient interface {
	EmployeeHmx(ctx context.Context, in *EmployeeHmxRequest, opts ...grpc.CallOption) (*EmployeesHmxListResponse, error)
	List(ctx context.Context, in *StoreTradesListRequest, opts ...grpc.CallOption) (*StoreTradesListResponse, error)
	Retrieve(ctx context.Context, in *StoreTradesRetrieveRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error)
	StoreHmx(ctx context.Context, in *StoreHmxRequest, opts ...grpc.CallOption) (*StoreHmxListResponse, error)
}

type hmxTradesControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewHmxTradesControllerClient(cc grpc.ClientConnInterface) HmxTradesControllerClient {
	return &hmxTradesControllerClient{cc}
}

func (c *hmxTradesControllerClient) EmployeeHmx(ctx context.Context, in *EmployeeHmxRequest, opts ...grpc.CallOption) (*EmployeesHmxListResponse, error) {
	out := new(EmployeesHmxListResponse)
	err := c.cc.Invoke(ctx, HmxTradesController_EmployeeHmx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hmxTradesControllerClient) List(ctx context.Context, in *StoreTradesListRequest, opts ...grpc.CallOption) (*StoreTradesListResponse, error) {
	out := new(StoreTradesListResponse)
	err := c.cc.Invoke(ctx, HmxTradesController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hmxTradesControllerClient) Retrieve(ctx context.Context, in *StoreTradesRetrieveRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error) {
	out := new(StoreTradesResponse)
	err := c.cc.Invoke(ctx, HmxTradesController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hmxTradesControllerClient) StoreHmx(ctx context.Context, in *StoreHmxRequest, opts ...grpc.CallOption) (*StoreHmxListResponse, error) {
	out := new(StoreHmxListResponse)
	err := c.cc.Invoke(ctx, HmxTradesController_StoreHmx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HmxTradesControllerServer is the server API for HmxTradesController service.
// All implementations must embed UnimplementedHmxTradesControllerServer
// for forward compatibility
type HmxTradesControllerServer interface {
	EmployeeHmx(context.Context, *EmployeeHmxRequest) (*EmployeesHmxListResponse, error)
	List(context.Context, *StoreTradesListRequest) (*StoreTradesListResponse, error)
	Retrieve(context.Context, *StoreTradesRetrieveRequest) (*StoreTradesResponse, error)
	StoreHmx(context.Context, *StoreHmxRequest) (*StoreHmxListResponse, error)
	mustEmbedUnimplementedHmxTradesControllerServer()
}

// UnimplementedHmxTradesControllerServer must be embedded to have forward compatible implementations.
type UnimplementedHmxTradesControllerServer struct {
}

func (UnimplementedHmxTradesControllerServer) EmployeeHmx(context.Context, *EmployeeHmxRequest) (*EmployeesHmxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployeeHmx not implemented")
}
func (UnimplementedHmxTradesControllerServer) List(context.Context, *StoreTradesListRequest) (*StoreTradesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHmxTradesControllerServer) Retrieve(context.Context, *StoreTradesRetrieveRequest) (*StoreTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedHmxTradesControllerServer) StoreHmx(context.Context, *StoreHmxRequest) (*StoreHmxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHmx not implemented")
}
func (UnimplementedHmxTradesControllerServer) mustEmbedUnimplementedHmxTradesControllerServer() {}

// UnsafeHmxTradesControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HmxTradesControllerServer will
// result in compilation errors.
type UnsafeHmxTradesControllerServer interface {
	mustEmbedUnimplementedHmxTradesControllerServer()
}

func RegisterHmxTradesControllerServer(s grpc.ServiceRegistrar, srv HmxTradesControllerServer) {
	s.RegisterService(&HmxTradesController_ServiceDesc, srv)
}

func _HmxTradesController_EmployeeHmx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeHmxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HmxTradesControllerServer).EmployeeHmx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HmxTradesController_EmployeeHmx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HmxTradesControllerServer).EmployeeHmx(ctx, req.(*EmployeeHmxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HmxTradesController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HmxTradesControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HmxTradesController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HmxTradesControllerServer).List(ctx, req.(*StoreTradesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HmxTradesController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HmxTradesControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HmxTradesController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HmxTradesControllerServer).Retrieve(ctx, req.(*StoreTradesRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HmxTradesController_StoreHmx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreHmxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HmxTradesControllerServer).StoreHmx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HmxTradesController_StoreHmx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HmxTradesControllerServer).StoreHmx(ctx, req.(*StoreHmxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HmxTradesController_ServiceDesc is the grpc.ServiceDesc for HmxTradesController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HmxTradesController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopmanage_service.shop_ito.HmxTradesController",
	HandlerType: (*HmxTradesControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmployeeHmx",
			Handler:    _HmxTradesController_EmployeeHmx_Handler,
		},
		{
			MethodName: "List",
			Handler:    _HmxTradesController_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _HmxTradesController_Retrieve_Handler,
		},
		{
			MethodName: "StoreHmx",
			Handler:    _HmxTradesController_StoreHmx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop_ito.proto",
}
