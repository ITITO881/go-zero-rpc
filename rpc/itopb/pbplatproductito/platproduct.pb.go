// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.19.4
// source: platproduct.proto

package pbplatproductito

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpuNameListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpuNameListReq) Reset() {
	*x = SpuNameListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuNameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuNameListReq) ProtoMessage() {}

func (x *SpuNameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuNameListReq.ProtoReflect.Descriptor instead.
func (*SpuNameListReq) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{0}
}

type SpuNameItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spu名称
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Spu编码
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpuNameItem) Reset() {
	*x = SpuNameItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuNameItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuNameItem) ProtoMessage() {}

func (x *SpuNameItem) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuNameItem.ProtoReflect.Descriptor instead.
func (*SpuNameItem) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{1}
}

func (x *SpuNameItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SpuNameItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SpuNameListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuNames []*SpuNameItem `protobuf:"bytes,1,rep,name=spu_names,json=spuNames,proto3" json:"spu_names,omitempty"`
}

func (x *SpuNameListResp) Reset() {
	*x = SpuNameListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuNameListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuNameListResp) ProtoMessage() {}

func (x *SpuNameListResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuNameListResp.ProtoReflect.Descriptor instead.
func (*SpuNameListResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{2}
}

func (x *SpuNameListResp) GetSpuNames() []*SpuNameItem {
	if x != nil {
		return x.SpuNames
	}
	return nil
}

// *  check 编码列表 接口 *
type CheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckType   string  `protobuf:"bytes,1,opt,name=checkType,proto3" json:"checkType,omitempty"`
	Spu         *string `protobuf:"bytes,2,opt,name=spu,proto3,oneof" json:"spu,omitempty"`
	Sku         *string `protobuf:"bytes,3,opt,name=sku,proto3,oneof" json:"sku,omitempty"`
	PlatCode    *string `protobuf:"bytes,4,opt,name=platCode,proto3,oneof" json:"platCode,omitempty"`
	PlatSubCode *string `protobuf:"bytes,5,opt,name=platSubCode,proto3,oneof" json:"platSubCode,omitempty"`
	PlatName    *string `protobuf:"bytes,6,opt,name=platName,proto3,oneof" json:"platName,omitempty"`
}

func (x *CheckReq) Reset() {
	*x = CheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckReq) ProtoMessage() {}

func (x *CheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckReq.ProtoReflect.Descriptor instead.
func (*CheckReq) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{3}
}

func (x *CheckReq) GetCheckType() string {
	if x != nil {
		return x.CheckType
	}
	return ""
}

func (x *CheckReq) GetSpu() string {
	if x != nil && x.Spu != nil {
		return *x.Spu
	}
	return ""
}

func (x *CheckReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *CheckReq) GetPlatCode() string {
	if x != nil && x.PlatCode != nil {
		return *x.PlatCode
	}
	return ""
}

func (x *CheckReq) GetPlatSubCode() string {
	if x != nil && x.PlatSubCode != nil {
		return *x.PlatSubCode
	}
	return ""
}

func (x *CheckReq) GetPlatName() string {
	if x != nil && x.PlatName != nil {
		return *x.PlatName
	}
	return ""
}

type SpuListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuList []string `protobuf:"bytes,1,rep,name=SpuList,proto3" json:"SpuList,omitempty"`
}

func (x *SpuListResp) Reset() {
	*x = SpuListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuListResp) ProtoMessage() {}

func (x *SpuListResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuListResp.ProtoReflect.Descriptor instead.
func (*SpuListResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{4}
}

func (x *SpuListResp) GetSpuList() []string {
	if x != nil {
		return x.SpuList
	}
	return nil
}

type SkuListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuList []string `protobuf:"bytes,1,rep,name=SkuList,proto3" json:"SkuList,omitempty"`
}

func (x *SkuListResp) Reset() {
	*x = SkuListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuListResp) ProtoMessage() {}

func (x *SkuListResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuListResp.ProtoReflect.Descriptor instead.
func (*SkuListResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{5}
}

func (x *SkuListResp) GetSkuList() []string {
	if x != nil {
		return x.SkuList
	}
	return nil
}

type PlatCodeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatCodeList []string `protobuf:"bytes,1,rep,name=PlatCodeList,proto3" json:"PlatCodeList,omitempty"`
}

func (x *PlatCodeListResp) Reset() {
	*x = PlatCodeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatCodeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatCodeListResp) ProtoMessage() {}

func (x *PlatCodeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatCodeListResp.ProtoReflect.Descriptor instead.
func (*PlatCodeListResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{6}
}

func (x *PlatCodeListResp) GetPlatCodeList() []string {
	if x != nil {
		return x.PlatCodeList
	}
	return nil
}

type PlatSubCodeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatSubCodeList []string `protobuf:"bytes,1,rep,name=PlatSubCodeList,proto3" json:"PlatSubCodeList,omitempty"`
}

func (x *PlatSubCodeListResp) Reset() {
	*x = PlatSubCodeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatSubCodeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatSubCodeListResp) ProtoMessage() {}

func (x *PlatSubCodeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatSubCodeListResp.ProtoReflect.Descriptor instead.
func (*PlatSubCodeListResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{7}
}

func (x *PlatSubCodeListResp) GetPlatSubCodeList() []string {
	if x != nil {
		return x.PlatSubCodeList
	}
	return nil
}

type PlatNameListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatNameList []string `protobuf:"bytes,1,rep,name=PlatNameList,proto3" json:"PlatNameList,omitempty"`
}

func (x *PlatNameListResp) Reset() {
	*x = PlatNameListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatNameListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatNameListResp) ProtoMessage() {}

func (x *PlatNameListResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatNameListResp.ProtoReflect.Descriptor instead.
func (*PlatNameListResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{8}
}

func (x *PlatNameListResp) GetPlatNameList() []string {
	if x != nil {
		return x.PlatNameList
	}
	return nil
}

type CheckResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuListResp         *SpuListResp         `protobuf:"bytes,1,opt,name=SpuListResp,proto3,oneof" json:"SpuListResp,omitempty"`
	SkuListResp         *SkuListResp         `protobuf:"bytes,2,opt,name=SkuListResp,proto3,oneof" json:"SkuListResp,omitempty"`
	PlatCodeListResp    *PlatCodeListResp    `protobuf:"bytes,3,opt,name=PlatCodeListResp,proto3,oneof" json:"PlatCodeListResp,omitempty"`
	PlatSubCodeListResp *PlatSubCodeListResp `protobuf:"bytes,4,opt,name=PlatSubCodeListResp,proto3,oneof" json:"PlatSubCodeListResp,omitempty"`
	PlatNameListResp    *PlatNameListResp    `protobuf:"bytes,5,opt,name=PlatNameListResp,proto3,oneof" json:"PlatNameListResp,omitempty"`
}

func (x *CheckResp) Reset() {
	*x = CheckResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResp) ProtoMessage() {}

func (x *CheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResp.ProtoReflect.Descriptor instead.
func (*CheckResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{9}
}

func (x *CheckResp) GetSpuListResp() *SpuListResp {
	if x != nil {
		return x.SpuListResp
	}
	return nil
}

func (x *CheckResp) GetSkuListResp() *SkuListResp {
	if x != nil {
		return x.SkuListResp
	}
	return nil
}

func (x *CheckResp) GetPlatCodeListResp() *PlatCodeListResp {
	if x != nil {
		return x.PlatCodeListResp
	}
	return nil
}

func (x *CheckResp) GetPlatSubCodeListResp() *PlatSubCodeListResp {
	if x != nil {
		return x.PlatSubCodeListResp
	}
	return nil
}

func (x *CheckResp) GetPlatNameListResp() *PlatNameListResp {
	if x != nil {
		return x.PlatNameListResp
	}
	return nil
}

// *  create 新增操作 接口 *
type CreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spu     string  `protobuf:"bytes,1,opt,name=spu,proto3" json:"spu,omitempty"`               //
	Sku     *string `protobuf:"bytes,2,opt,name=sku,proto3,oneof" json:"sku,omitempty"`         // spu+sku 联合唯一，需校验
	BarCode *string `protobuf:"bytes,3,opt,name=barCode,proto3,oneof" json:"barCode,omitempty"` // 唯一性字段，且创建SKU时，必须绑定“正确”的SPU
	// 1. SPU 相关属性
	PlatBrand    *string `protobuf:"bytes,5,opt,name=platBrand,proto3,oneof" json:"platBrand,omitempty"`       // 平台产品品牌
	PlatCategory *string `protobuf:"bytes,6,opt,name=platCategory,proto3,oneof" json:"platCategory,omitempty"` // 平台产品类别
	PlatSeries   *string `protobuf:"bytes,7,opt,name=platSeries,proto3,oneof" json:"platSeries,omitempty"`     // 平台产品系列
	PlatModel    *string `protobuf:"bytes,8,opt,name=platModel,proto3,oneof" json:"platModel,omitempty"`       // 平台商品型号
	// 2. SKU 相关属性（SPU没有SKU的相关的下面 5个属性）
	PlatColor   *string `protobuf:"bytes,10,opt,name=platColor,proto3,oneof" json:"platColor,omitempty"`     // 平台商品颜色
	PlatSize    *string `protobuf:"bytes,11,opt,name=platSize,proto3,oneof" json:"platSize,omitempty"`       // 平台商品尺寸
	PlatTexture *string `protobuf:"bytes,12,opt,name=platTexture,proto3,oneof" json:"platTexture,omitempty"` // 平台商品纹理
	PlatLining  *string `protobuf:"bytes,13,opt,name=platLining,proto3,oneof" json:"platLining,omitempty"`   // 平台商品内里
	PlatVersion *string `protobuf:"bytes,14,opt,name=platVersion,proto3,oneof" json:"platVersion,omitempty"` // 平台商品版本
	NameColor   *string `protobuf:"bytes,60,opt,name=nameColor,proto3,oneof" json:"nameColor,omitempty"`
	NameSize    *string `protobuf:"bytes,61,opt,name=nameSize,proto3,oneof" json:"nameSize,omitempty"`
	NameTexture *string `protobuf:"bytes,62,opt,name=nameTexture,proto3,oneof" json:"nameTexture,omitempty"`
	NameLining  *string `protobuf:"bytes,63,opt,name=nameLining,proto3,oneof" json:"nameLining,omitempty"`
	NameVersion *string `protobuf:"bytes,64,opt,name=nameVersion,proto3,oneof" json:"nameVersion,omitempty"`
	// 3. 平台编码信息
	PlatCode    *string `protobuf:"bytes,20,opt,name=platCode,proto3,oneof" json:"platCode,omitempty"`       // 平台商品编码
	PlatSubCode *string `protobuf:"bytes,21,opt,name=platSubCode,proto3,oneof" json:"platSubCode,omitempty"` // platCode+platSubCode 联合唯一，需校验
	PlatName    *string `protobuf:"bytes,22,opt,name=platName,proto3,oneof" json:"platName,omitempty"`       // 平台商品名称
	PlatBrief   *string `protobuf:"bytes,23,opt,name=platBrief,proto3,oneof" json:"platBrief,omitempty"`     // 平台商品简称，创建SKU时，默认值将复制SPU相应字段
	PlatDesc    *string `protobuf:"bytes,24,opt,name=platDesc,proto3,oneof" json:"platDesc,omitempty"`       // 平台商品描述，创建SKU时，默认值将复制SPU相应字段
	// 4. 查询信息
	PlatTag      *string `protobuf:"bytes,25,opt,name=platTag,proto3,oneof" json:"platTag,omitempty"`           // 平台商品标签，创建SKU时，默认值将复制SPU相应字段
	PlatRetail   *string `protobuf:"bytes,26,opt,name=platRetail,proto3,oneof" json:"platRetail,omitempty"`     // 平台建议售价，创建SKU时，默认值将复制SPU相应字段
	PlatDiscount *string `protobuf:"bytes,27,opt,name=platDiscount,proto3,oneof" json:"platDiscount,omitempty"` // 平台折扣售价，创建SKU时，默认值将复制SPU相应字段
	// 5. 控制信息
	IsSelected *int64  `protobuf:"varint,30,opt,name=isSelected,proto3,oneof" json:"isSelected,omitempty"`
	StartedAt  *string `protobuf:"bytes,31,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	ExpiredAt  *string `protobuf:"bytes,32,opt,name=expiredAt,proto3,oneof" json:"expiredAt,omitempty"`
	// 6. 可选附件坚果参数
	NutNum   *int64 `protobuf:"varint,35,opt,name=nutNum,proto3,oneof" json:"nutNum,omitempty"`
	BadgeNum *int64 `protobuf:"varint,36,opt,name=badgeNum,proto3,oneof" json:"badgeNum,omitempty"`
	ScoreNum *int64 `protobuf:"varint,37,opt,name=scoreNum,proto3,oneof" json:"scoreNum,omitempty"`
	// 7. 备用字段
	Red    *string `protobuf:"bytes,40,opt,name=red,proto3,oneof" json:"red,omitempty"`
	Orange *string `protobuf:"bytes,41,opt,name=orange,proto3,oneof" json:"orange,omitempty"`
	Yellow *string `protobuf:"bytes,42,opt,name=yellow,proto3,oneof" json:"yellow,omitempty"`
	Green  *string `protobuf:"bytes,43,opt,name=green,proto3,oneof" json:"green,omitempty"`
	Cyan   *string `protobuf:"bytes,44,opt,name=cyan,proto3,oneof" json:"cyan,omitempty"`
	Blue   *string `protobuf:"bytes,45,opt,name=blue,proto3,oneof" json:"blue,omitempty"`
	Purple *string `protobuf:"bytes,46,opt,name=purple,proto3,oneof" json:"purple,omitempty"`
	// 8. 备用整型字段
	DogNum  *int64 `protobuf:"varint,50,opt,name=dogNum,proto3,oneof" json:"dogNum,omitempty"`
	CatNum  *int64 `protobuf:"varint,51,opt,name=catNum,proto3,oneof" json:"catNum,omitempty"`
	DuckNum *int64 `protobuf:"varint,52,opt,name=duckNum,proto3,oneof" json:"duckNum,omitempty"`
}

func (x *CreateReq) Reset() {
	*x = CreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq) ProtoMessage() {}

func (x *CreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq.ProtoReflect.Descriptor instead.
func (*CreateReq) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{10}
}

func (x *CreateReq) GetSpu() string {
	if x != nil {
		return x.Spu
	}
	return ""
}

func (x *CreateReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *CreateReq) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *CreateReq) GetPlatBrand() string {
	if x != nil && x.PlatBrand != nil {
		return *x.PlatBrand
	}
	return ""
}

func (x *CreateReq) GetPlatCategory() string {
	if x != nil && x.PlatCategory != nil {
		return *x.PlatCategory
	}
	return ""
}

func (x *CreateReq) GetPlatSeries() string {
	if x != nil && x.PlatSeries != nil {
		return *x.PlatSeries
	}
	return ""
}

func (x *CreateReq) GetPlatModel() string {
	if x != nil && x.PlatModel != nil {
		return *x.PlatModel
	}
	return ""
}

func (x *CreateReq) GetPlatColor() string {
	if x != nil && x.PlatColor != nil {
		return *x.PlatColor
	}
	return ""
}

func (x *CreateReq) GetPlatSize() string {
	if x != nil && x.PlatSize != nil {
		return *x.PlatSize
	}
	return ""
}

func (x *CreateReq) GetPlatTexture() string {
	if x != nil && x.PlatTexture != nil {
		return *x.PlatTexture
	}
	return ""
}

func (x *CreateReq) GetPlatLining() string {
	if x != nil && x.PlatLining != nil {
		return *x.PlatLining
	}
	return ""
}

func (x *CreateReq) GetPlatVersion() string {
	if x != nil && x.PlatVersion != nil {
		return *x.PlatVersion
	}
	return ""
}

func (x *CreateReq) GetNameColor() string {
	if x != nil && x.NameColor != nil {
		return *x.NameColor
	}
	return ""
}

func (x *CreateReq) GetNameSize() string {
	if x != nil && x.NameSize != nil {
		return *x.NameSize
	}
	return ""
}

func (x *CreateReq) GetNameTexture() string {
	if x != nil && x.NameTexture != nil {
		return *x.NameTexture
	}
	return ""
}

func (x *CreateReq) GetNameLining() string {
	if x != nil && x.NameLining != nil {
		return *x.NameLining
	}
	return ""
}

func (x *CreateReq) GetNameVersion() string {
	if x != nil && x.NameVersion != nil {
		return *x.NameVersion
	}
	return ""
}

func (x *CreateReq) GetPlatCode() string {
	if x != nil && x.PlatCode != nil {
		return *x.PlatCode
	}
	return ""
}

func (x *CreateReq) GetPlatSubCode() string {
	if x != nil && x.PlatSubCode != nil {
		return *x.PlatSubCode
	}
	return ""
}

func (x *CreateReq) GetPlatName() string {
	if x != nil && x.PlatName != nil {
		return *x.PlatName
	}
	return ""
}

func (x *CreateReq) GetPlatBrief() string {
	if x != nil && x.PlatBrief != nil {
		return *x.PlatBrief
	}
	return ""
}

func (x *CreateReq) GetPlatDesc() string {
	if x != nil && x.PlatDesc != nil {
		return *x.PlatDesc
	}
	return ""
}

func (x *CreateReq) GetPlatTag() string {
	if x != nil && x.PlatTag != nil {
		return *x.PlatTag
	}
	return ""
}

func (x *CreateReq) GetPlatRetail() string {
	if x != nil && x.PlatRetail != nil {
		return *x.PlatRetail
	}
	return ""
}

func (x *CreateReq) GetPlatDiscount() string {
	if x != nil && x.PlatDiscount != nil {
		return *x.PlatDiscount
	}
	return ""
}

func (x *CreateReq) GetIsSelected() int64 {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return 0
}

func (x *CreateReq) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *CreateReq) GetExpiredAt() string {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return ""
}

func (x *CreateReq) GetNutNum() int64 {
	if x != nil && x.NutNum != nil {
		return *x.NutNum
	}
	return 0
}

func (x *CreateReq) GetBadgeNum() int64 {
	if x != nil && x.BadgeNum != nil {
		return *x.BadgeNum
	}
	return 0
}

func (x *CreateReq) GetScoreNum() int64 {
	if x != nil && x.ScoreNum != nil {
		return *x.ScoreNum
	}
	return 0
}

func (x *CreateReq) GetRed() string {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return ""
}

func (x *CreateReq) GetOrange() string {
	if x != nil && x.Orange != nil {
		return *x.Orange
	}
	return ""
}

func (x *CreateReq) GetYellow() string {
	if x != nil && x.Yellow != nil {
		return *x.Yellow
	}
	return ""
}

func (x *CreateReq) GetGreen() string {
	if x != nil && x.Green != nil {
		return *x.Green
	}
	return ""
}

func (x *CreateReq) GetCyan() string {
	if x != nil && x.Cyan != nil {
		return *x.Cyan
	}
	return ""
}

func (x *CreateReq) GetBlue() string {
	if x != nil && x.Blue != nil {
		return *x.Blue
	}
	return ""
}

func (x *CreateReq) GetPurple() string {
	if x != nil && x.Purple != nil {
		return *x.Purple
	}
	return ""
}

func (x *CreateReq) GetDogNum() int64 {
	if x != nil && x.DogNum != nil {
		return *x.DogNum
	}
	return 0
}

func (x *CreateReq) GetCatNum() int64 {
	if x != nil && x.CatNum != nil {
		return *x.CatNum
	}
	return 0
}

func (x *CreateReq) GetDuckNum() int64 {
	if x != nil && x.DuckNum != nil {
		return *x.DuckNum
	}
	return 0
}

type AffectedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected int64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *AffectedResp) Reset() {
	*x = AffectedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffectedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffectedResp) ProtoMessage() {}

func (x *AffectedResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffectedResp.ProtoReflect.Descriptor instead.
func (*AffectedResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{11}
}

func (x *AffectedResp) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

// *  retrieve 单查操作 接口 （支持多条件，模糊查询）*
type RetrieveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spu         *string `protobuf:"bytes,1,opt,name=spu,proto3,oneof" json:"spu,omitempty"`                 //
	Sku         *string `protobuf:"bytes,2,opt,name=sku,proto3,oneof" json:"sku,omitempty"`                 // spu+sku 组合唯一
	PlatCode    *string `protobuf:"bytes,3,opt,name=platCode,proto3,oneof" json:"platCode,omitempty"`       //
	PlatSubCode *string `protobuf:"bytes,4,opt,name=platSubCode,proto3,oneof" json:"platSubCode,omitempty"` // platCode+platSubCode 组合唯一
}

func (x *RetrieveReq) Reset() {
	*x = RetrieveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveReq) ProtoMessage() {}

func (x *RetrieveReq) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveReq.ProtoReflect.Descriptor instead.
func (*RetrieveReq) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{12}
}

func (x *RetrieveReq) GetSpu() string {
	if x != nil && x.Spu != nil {
		return *x.Spu
	}
	return ""
}

func (x *RetrieveReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *RetrieveReq) GetPlatCode() string {
	if x != nil && x.PlatCode != nil {
		return *x.PlatCode
	}
	return ""
}

func (x *RetrieveReq) GetPlatSubCode() string {
	if x != nil && x.PlatSubCode != nil {
		return *x.PlatSubCode
	}
	return ""
}

type ItemResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int64  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Spu     *string `protobuf:"bytes,2,opt,name=spu,proto3,oneof" json:"spu,omitempty"`
	Sku     *string `protobuf:"bytes,3,opt,name=sku,proto3,oneof" json:"sku,omitempty"`
	BarCode *string `protobuf:"bytes,4,opt,name=barCode,proto3,oneof" json:"barCode,omitempty"`
	// 1. SPU 相关属性
	PlatBrand    *string `protobuf:"bytes,5,opt,name=platBrand,proto3,oneof" json:"platBrand,omitempty"`
	PlatCategory *string `protobuf:"bytes,6,opt,name=platCategory,proto3,oneof" json:"platCategory,omitempty"`
	PlatSeries   *string `protobuf:"bytes,7,opt,name=platSeries,proto3,oneof" json:"platSeries,omitempty"`
	PlatModel    *string `protobuf:"bytes,8,opt,name=platModel,proto3,oneof" json:"platModel,omitempty"`
	// 2. SKU 相关属性
	PlatColor   *string `protobuf:"bytes,10,opt,name=platColor,proto3,oneof" json:"platColor,omitempty"`
	PlatSize    *string `protobuf:"bytes,11,opt,name=platSize,proto3,oneof" json:"platSize,omitempty"`
	PlatTexture *string `protobuf:"bytes,12,opt,name=platTexture,proto3,oneof" json:"platTexture,omitempty"`
	PlatLining  *string `protobuf:"bytes,13,opt,name=platLining,proto3,oneof" json:"platLining,omitempty"`
	PlatVersion *string `protobuf:"bytes,14,opt,name=platVersion,proto3,oneof" json:"platVersion,omitempty"`
	NameColor   *string `protobuf:"bytes,60,opt,name=nameColor,proto3,oneof" json:"nameColor,omitempty"`
	NameSize    *string `protobuf:"bytes,61,opt,name=nameSize,proto3,oneof" json:"nameSize,omitempty"`
	NameTexture *string `protobuf:"bytes,62,opt,name=nameTexture,proto3,oneof" json:"nameTexture,omitempty"`
	NameLining  *string `protobuf:"bytes,63,opt,name=nameLining,proto3,oneof" json:"nameLining,omitempty"`
	NameVersion *string `protobuf:"bytes,64,opt,name=nameVersion,proto3,oneof" json:"nameVersion,omitempty"`
	// 3. 编码信息
	PlatCode    *string `protobuf:"bytes,15,opt,name=platCode,proto3,oneof" json:"platCode,omitempty"`       // 平台商品编码
	PlatSubCode *string `protobuf:"bytes,16,opt,name=platSubCode,proto3,oneof" json:"platSubCode,omitempty"` // platCode+platSubCode 联合唯一，需校验
	PlatName    *string `protobuf:"bytes,17,opt,name=platName,proto3,oneof" json:"platName,omitempty"`
	PlatBrief   *string `protobuf:"bytes,18,opt,name=platBrief,proto3,oneof" json:"platBrief,omitempty"`
	PlatDesc    *string `protobuf:"bytes,19,opt,name=platDesc,proto3,oneof" json:"platDesc,omitempty"`
	// 4. 查询信息
	PlatTag      *string `protobuf:"bytes,20,opt,name=platTag,proto3,oneof" json:"platTag,omitempty"`
	PlatRetail   *string `protobuf:"bytes,21,opt,name=platRetail,proto3,oneof" json:"platRetail,omitempty"`
	PlatDiscount *string `protobuf:"bytes,22,opt,name=platDiscount,proto3,oneof" json:"platDiscount,omitempty"`
	// 5. 控制信息
	IsSelected *int64  `protobuf:"varint,25,opt,name=isSelected,proto3,oneof" json:"isSelected,omitempty"`
	StartedAt  *string `protobuf:"bytes,26,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	ExpiredAt  *string `protobuf:"bytes,27,opt,name=expiredAt,proto3,oneof" json:"expiredAt,omitempty"`
	// 6. 可选附件坚果参数
	NutNum   *int64 `protobuf:"varint,35,opt,name=nutNum,proto3,oneof" json:"nutNum,omitempty"`
	BadgeNum *int64 `protobuf:"varint,36,opt,name=badgeNum,proto3,oneof" json:"badgeNum,omitempty"`
	ScoreNum *int64 `protobuf:"varint,37,opt,name=scoreNum,proto3,oneof" json:"scoreNum,omitempty"`
	// 7. 备用字符串字段
	Red    *string `protobuf:"bytes,40,opt,name=red,proto3,oneof" json:"red,omitempty"`
	Orange *string `protobuf:"bytes,41,opt,name=orange,proto3,oneof" json:"orange,omitempty"`
	Yellow *string `protobuf:"bytes,42,opt,name=yellow,proto3,oneof" json:"yellow,omitempty"`
	Green  *string `protobuf:"bytes,43,opt,name=green,proto3,oneof" json:"green,omitempty"`
	Cyan   *string `protobuf:"bytes,44,opt,name=cyan,proto3,oneof" json:"cyan,omitempty"`
	Blue   *string `protobuf:"bytes,45,opt,name=blue,proto3,oneof" json:"blue,omitempty"`
	Purple *string `protobuf:"bytes,46,opt,name=purple,proto3,oneof" json:"purple,omitempty"`
	// 8. 备用整型字段
	DogNum  *int64 `protobuf:"varint,50,opt,name=dogNum,proto3,oneof" json:"dogNum,omitempty"`
	CatNum  *int64 `protobuf:"varint,51,opt,name=catNum,proto3,oneof" json:"catNum,omitempty"`
	DuckNum *int64 `protobuf:"varint,52,opt,name=duckNum,proto3,oneof" json:"duckNum,omitempty"`
}

func (x *ItemResp) Reset() {
	*x = ItemResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemResp) ProtoMessage() {}

func (x *ItemResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemResp.ProtoReflect.Descriptor instead.
func (*ItemResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{13}
}

func (x *ItemResp) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ItemResp) GetSpu() string {
	if x != nil && x.Spu != nil {
		return *x.Spu
	}
	return ""
}

func (x *ItemResp) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *ItemResp) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *ItemResp) GetPlatBrand() string {
	if x != nil && x.PlatBrand != nil {
		return *x.PlatBrand
	}
	return ""
}

func (x *ItemResp) GetPlatCategory() string {
	if x != nil && x.PlatCategory != nil {
		return *x.PlatCategory
	}
	return ""
}

func (x *ItemResp) GetPlatSeries() string {
	if x != nil && x.PlatSeries != nil {
		return *x.PlatSeries
	}
	return ""
}

func (x *ItemResp) GetPlatModel() string {
	if x != nil && x.PlatModel != nil {
		return *x.PlatModel
	}
	return ""
}

func (x *ItemResp) GetPlatColor() string {
	if x != nil && x.PlatColor != nil {
		return *x.PlatColor
	}
	return ""
}

func (x *ItemResp) GetPlatSize() string {
	if x != nil && x.PlatSize != nil {
		return *x.PlatSize
	}
	return ""
}

func (x *ItemResp) GetPlatTexture() string {
	if x != nil && x.PlatTexture != nil {
		return *x.PlatTexture
	}
	return ""
}

func (x *ItemResp) GetPlatLining() string {
	if x != nil && x.PlatLining != nil {
		return *x.PlatLining
	}
	return ""
}

func (x *ItemResp) GetPlatVersion() string {
	if x != nil && x.PlatVersion != nil {
		return *x.PlatVersion
	}
	return ""
}

func (x *ItemResp) GetNameColor() string {
	if x != nil && x.NameColor != nil {
		return *x.NameColor
	}
	return ""
}

func (x *ItemResp) GetNameSize() string {
	if x != nil && x.NameSize != nil {
		return *x.NameSize
	}
	return ""
}

func (x *ItemResp) GetNameTexture() string {
	if x != nil && x.NameTexture != nil {
		return *x.NameTexture
	}
	return ""
}

func (x *ItemResp) GetNameLining() string {
	if x != nil && x.NameLining != nil {
		return *x.NameLining
	}
	return ""
}

func (x *ItemResp) GetNameVersion() string {
	if x != nil && x.NameVersion != nil {
		return *x.NameVersion
	}
	return ""
}

func (x *ItemResp) GetPlatCode() string {
	if x != nil && x.PlatCode != nil {
		return *x.PlatCode
	}
	return ""
}

func (x *ItemResp) GetPlatSubCode() string {
	if x != nil && x.PlatSubCode != nil {
		return *x.PlatSubCode
	}
	return ""
}

func (x *ItemResp) GetPlatName() string {
	if x != nil && x.PlatName != nil {
		return *x.PlatName
	}
	return ""
}

func (x *ItemResp) GetPlatBrief() string {
	if x != nil && x.PlatBrief != nil {
		return *x.PlatBrief
	}
	return ""
}

func (x *ItemResp) GetPlatDesc() string {
	if x != nil && x.PlatDesc != nil {
		return *x.PlatDesc
	}
	return ""
}

func (x *ItemResp) GetPlatTag() string {
	if x != nil && x.PlatTag != nil {
		return *x.PlatTag
	}
	return ""
}

func (x *ItemResp) GetPlatRetail() string {
	if x != nil && x.PlatRetail != nil {
		return *x.PlatRetail
	}
	return ""
}

func (x *ItemResp) GetPlatDiscount() string {
	if x != nil && x.PlatDiscount != nil {
		return *x.PlatDiscount
	}
	return ""
}

func (x *ItemResp) GetIsSelected() int64 {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return 0
}

func (x *ItemResp) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *ItemResp) GetExpiredAt() string {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return ""
}

func (x *ItemResp) GetNutNum() int64 {
	if x != nil && x.NutNum != nil {
		return *x.NutNum
	}
	return 0
}

func (x *ItemResp) GetBadgeNum() int64 {
	if x != nil && x.BadgeNum != nil {
		return *x.BadgeNum
	}
	return 0
}

func (x *ItemResp) GetScoreNum() int64 {
	if x != nil && x.ScoreNum != nil {
		return *x.ScoreNum
	}
	return 0
}

func (x *ItemResp) GetRed() string {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return ""
}

func (x *ItemResp) GetOrange() string {
	if x != nil && x.Orange != nil {
		return *x.Orange
	}
	return ""
}

func (x *ItemResp) GetYellow() string {
	if x != nil && x.Yellow != nil {
		return *x.Yellow
	}
	return ""
}

func (x *ItemResp) GetGreen() string {
	if x != nil && x.Green != nil {
		return *x.Green
	}
	return ""
}

func (x *ItemResp) GetCyan() string {
	if x != nil && x.Cyan != nil {
		return *x.Cyan
	}
	return ""
}

func (x *ItemResp) GetBlue() string {
	if x != nil && x.Blue != nil {
		return *x.Blue
	}
	return ""
}

func (x *ItemResp) GetPurple() string {
	if x != nil && x.Purple != nil {
		return *x.Purple
	}
	return ""
}

func (x *ItemResp) GetDogNum() int64 {
	if x != nil && x.DogNum != nil {
		return *x.DogNum
	}
	return 0
}

func (x *ItemResp) GetCatNum() int64 {
	if x != nil && x.CatNum != nil {
		return *x.CatNum
	}
	return 0
}

func (x *ItemResp) GetDuckNum() int64 {
	if x != nil && x.DuckNum != nil {
		return *x.DuckNum
	}
	return 0
}

// *  list 列表查操作 接口 （支持多条件，模糊查询，分页查询）*
type ListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     *int64  `protobuf:"varint,30,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize *int64  `protobuf:"varint,31,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
	Spu      *string `protobuf:"bytes,1,opt,name=spu,proto3,oneof" json:"spu,omitempty"`
	Sku      *string `protobuf:"bytes,2,opt,name=sku,proto3,oneof" json:"sku,omitempty"`
	BarCode  *string `protobuf:"bytes,3,opt,name=barCode,proto3,oneof" json:"barCode,omitempty"`
	// SPU 相关属性
	PlatBrand    *string `protobuf:"bytes,5,opt,name=platBrand,proto3,oneof" json:"platBrand,omitempty"`
	PlatCategory *string `protobuf:"bytes,6,opt,name=platCategory,proto3,oneof" json:"platCategory,omitempty"`
	PlatSeries   *string `protobuf:"bytes,7,opt,name=platSeries,proto3,oneof" json:"platSeries,omitempty"`
	PlatModel    *string `protobuf:"bytes,8,opt,name=platModel,proto3,oneof" json:"platModel,omitempty"`
	// SKU 相关属性
	PlatColor   *string `protobuf:"bytes,10,opt,name=platColor,proto3,oneof" json:"platColor,omitempty"`
	PlatSize    *string `protobuf:"bytes,11,opt,name=platSize,proto3,oneof" json:"platSize,omitempty"`
	PlatTexture *string `protobuf:"bytes,12,opt,name=platTexture,proto3,oneof" json:"platTexture,omitempty"`
	PlatLining  *string `protobuf:"bytes,13,opt,name=platLining,proto3,oneof" json:"platLining,omitempty"`
	PlatVersion *string `protobuf:"bytes,14,opt,name=platVersion,proto3,oneof" json:"platVersion,omitempty"`
	// 编码信息
	PlatCode    *string `protobuf:"bytes,15,opt,name=platCode,proto3,oneof" json:"platCode,omitempty"`
	PlatSubCode *string `protobuf:"bytes,19,opt,name=platSubCode,proto3,oneof" json:"platSubCode,omitempty"`
	PlatName    *string `protobuf:"bytes,16,opt,name=platName,proto3,oneof" json:"platName,omitempty"`
	PlatBrief   *string `protobuf:"bytes,17,opt,name=platBrief,proto3,oneof" json:"platBrief,omitempty"`
	PlatDesc    *string `protobuf:"bytes,18,opt,name=platDesc,proto3,oneof" json:"platDesc,omitempty"`
	// 查询信息
	PlatTag      *string `protobuf:"bytes,20,opt,name=platTag,proto3,oneof" json:"platTag,omitempty"`
	PlatRetail   *string `protobuf:"bytes,21,opt,name=platRetail,proto3,oneof" json:"platRetail,omitempty"`
	PlatDiscount *string `protobuf:"bytes,22,opt,name=platDiscount,proto3,oneof" json:"platDiscount,omitempty"`
	// 控制信息
	IsSelected *int64 `protobuf:"varint,25,opt,name=isSelected,proto3,oneof" json:"isSelected,omitempty"`
	// 6. 可选附件坚果参数
	NutNum   *int64 `protobuf:"varint,35,opt,name=nutNum,proto3,oneof" json:"nutNum,omitempty"`
	BadgeNum *int64 `protobuf:"varint,36,opt,name=badgeNum,proto3,oneof" json:"badgeNum,omitempty"`
	ScoreNum *int64 `protobuf:"varint,37,opt,name=scoreNum,proto3,oneof" json:"scoreNum,omitempty"`
	// 7. 备用字符串字段
	Red    *string `protobuf:"bytes,40,opt,name=red,proto3,oneof" json:"red,omitempty"`
	Orange *string `protobuf:"bytes,41,opt,name=orange,proto3,oneof" json:"orange,omitempty"`
	Yellow *string `protobuf:"bytes,42,opt,name=yellow,proto3,oneof" json:"yellow,omitempty"`
	Green  *string `protobuf:"bytes,43,opt,name=green,proto3,oneof" json:"green,omitempty"`
	Cyan   *string `protobuf:"bytes,44,opt,name=cyan,proto3,oneof" json:"cyan,omitempty"`
	Blue   *string `protobuf:"bytes,45,opt,name=blue,proto3,oneof" json:"blue,omitempty"`
	Purple *string `protobuf:"bytes,46,opt,name=purple,proto3,oneof" json:"purple,omitempty"`
	// 8. 备用整型字段
	DogNum  *int64 `protobuf:"varint,50,opt,name=dogNum,proto3,oneof" json:"dogNum,omitempty"`
	CatNum  *int64 `protobuf:"varint,51,opt,name=catNum,proto3,oneof" json:"catNum,omitempty"`
	DuckNum *int64 `protobuf:"varint,52,opt,name=duckNum,proto3,oneof" json:"duckNum,omitempty"`
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{14}
}

func (x *ListReq) GetPage() int64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListReq) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListReq) GetSpu() string {
	if x != nil && x.Spu != nil {
		return *x.Spu
	}
	return ""
}

func (x *ListReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *ListReq) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *ListReq) GetPlatBrand() string {
	if x != nil && x.PlatBrand != nil {
		return *x.PlatBrand
	}
	return ""
}

func (x *ListReq) GetPlatCategory() string {
	if x != nil && x.PlatCategory != nil {
		return *x.PlatCategory
	}
	return ""
}

func (x *ListReq) GetPlatSeries() string {
	if x != nil && x.PlatSeries != nil {
		return *x.PlatSeries
	}
	return ""
}

func (x *ListReq) GetPlatModel() string {
	if x != nil && x.PlatModel != nil {
		return *x.PlatModel
	}
	return ""
}

func (x *ListReq) GetPlatColor() string {
	if x != nil && x.PlatColor != nil {
		return *x.PlatColor
	}
	return ""
}

func (x *ListReq) GetPlatSize() string {
	if x != nil && x.PlatSize != nil {
		return *x.PlatSize
	}
	return ""
}

func (x *ListReq) GetPlatTexture() string {
	if x != nil && x.PlatTexture != nil {
		return *x.PlatTexture
	}
	return ""
}

func (x *ListReq) GetPlatLining() string {
	if x != nil && x.PlatLining != nil {
		return *x.PlatLining
	}
	return ""
}

func (x *ListReq) GetPlatVersion() string {
	if x != nil && x.PlatVersion != nil {
		return *x.PlatVersion
	}
	return ""
}

func (x *ListReq) GetPlatCode() string {
	if x != nil && x.PlatCode != nil {
		return *x.PlatCode
	}
	return ""
}

func (x *ListReq) GetPlatSubCode() string {
	if x != nil && x.PlatSubCode != nil {
		return *x.PlatSubCode
	}
	return ""
}

func (x *ListReq) GetPlatName() string {
	if x != nil && x.PlatName != nil {
		return *x.PlatName
	}
	return ""
}

func (x *ListReq) GetPlatBrief() string {
	if x != nil && x.PlatBrief != nil {
		return *x.PlatBrief
	}
	return ""
}

func (x *ListReq) GetPlatDesc() string {
	if x != nil && x.PlatDesc != nil {
		return *x.PlatDesc
	}
	return ""
}

func (x *ListReq) GetPlatTag() string {
	if x != nil && x.PlatTag != nil {
		return *x.PlatTag
	}
	return ""
}

func (x *ListReq) GetPlatRetail() string {
	if x != nil && x.PlatRetail != nil {
		return *x.PlatRetail
	}
	return ""
}

func (x *ListReq) GetPlatDiscount() string {
	if x != nil && x.PlatDiscount != nil {
		return *x.PlatDiscount
	}
	return ""
}

func (x *ListReq) GetIsSelected() int64 {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return 0
}

func (x *ListReq) GetNutNum() int64 {
	if x != nil && x.NutNum != nil {
		return *x.NutNum
	}
	return 0
}

func (x *ListReq) GetBadgeNum() int64 {
	if x != nil && x.BadgeNum != nil {
		return *x.BadgeNum
	}
	return 0
}

func (x *ListReq) GetScoreNum() int64 {
	if x != nil && x.ScoreNum != nil {
		return *x.ScoreNum
	}
	return 0
}

func (x *ListReq) GetRed() string {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return ""
}

func (x *ListReq) GetOrange() string {
	if x != nil && x.Orange != nil {
		return *x.Orange
	}
	return ""
}

func (x *ListReq) GetYellow() string {
	if x != nil && x.Yellow != nil {
		return *x.Yellow
	}
	return ""
}

func (x *ListReq) GetGreen() string {
	if x != nil && x.Green != nil {
		return *x.Green
	}
	return ""
}

func (x *ListReq) GetCyan() string {
	if x != nil && x.Cyan != nil {
		return *x.Cyan
	}
	return ""
}

func (x *ListReq) GetBlue() string {
	if x != nil && x.Blue != nil {
		return *x.Blue
	}
	return ""
}

func (x *ListReq) GetPurple() string {
	if x != nil && x.Purple != nil {
		return *x.Purple
	}
	return ""
}

func (x *ListReq) GetDogNum() int64 {
	if x != nil && x.DogNum != nil {
		return *x.DogNum
	}
	return 0
}

func (x *ListReq) GetCatNum() int64 {
	if x != nil && x.CatNum != nil {
		return *x.CatNum
	}
	return 0
}

func (x *ListReq) GetDuckNum() int64 {
	if x != nil && x.DuckNum != nil {
		return *x.DuckNum
	}
	return 0
}

type ListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ItemResp `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
	Count  int64       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListResp) Reset() {
	*x = ListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResp) ProtoMessage() {}

func (x *ListResp) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResp.ProtoReflect.Descriptor instead.
func (*ListResp) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{15}
}

func (x *ListResp) GetResult() []*ItemResp {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *  Delete 单删 操作 接口 （基于Id）*
type DropReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spu string  `protobuf:"bytes,1,opt,name=spu,proto3" json:"spu,omitempty"`
	Sku *string `protobuf:"bytes,2,opt,name=sku,proto3,oneof" json:"sku,omitempty"`
}

func (x *DropReq) Reset() {
	*x = DropReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropReq) ProtoMessage() {}

func (x *DropReq) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropReq.ProtoReflect.Descriptor instead.
func (*DropReq) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{16}
}

func (x *DropReq) GetSpu() string {
	if x != nil {
		return x.Spu
	}
	return ""
}

func (x *DropReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

// *  Update 单改 操作 接口 （指定Id）*
type UpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标识字段，用于进行查找匹配，本身不能被更新
	Spu string  `protobuf:"bytes,1,opt,name=spu,proto3" json:"spu,omitempty"`       // spu 字段创建后，不能修改，只能删除
	Sku *string `protobuf:"bytes,2,opt,name=sku,proto3,oneof" json:"sku,omitempty"` // sku 字段创建后，不能修改，只能删除
	// 1. SPU 相关属性
	PlatBrand    *string `protobuf:"bytes,5,opt,name=platBrand,proto3,oneof" json:"platBrand,omitempty"`
	PlatCategory *string `protobuf:"bytes,6,opt,name=platCategory,proto3,oneof" json:"platCategory,omitempty"`
	PlatSeries   *string `protobuf:"bytes,7,opt,name=platSeries,proto3,oneof" json:"platSeries,omitempty"`
	PlatModel    *string `protobuf:"bytes,8,opt,name=platModel,proto3,oneof" json:"platModel,omitempty"`
	// 2. SKU 相关属性
	PlatColor   *string `protobuf:"bytes,10,opt,name=platColor,proto3,oneof" json:"platColor,omitempty"`
	PlatSize    *string `protobuf:"bytes,11,opt,name=platSize,proto3,oneof" json:"platSize,omitempty"`
	PlatTexture *string `protobuf:"bytes,12,opt,name=platTexture,proto3,oneof" json:"platTexture,omitempty"`
	PlatLining  *string `protobuf:"bytes,13,opt,name=platLining,proto3,oneof" json:"platLining,omitempty"`
	PlatVersion *string `protobuf:"bytes,14,opt,name=platVersion,proto3,oneof" json:"platVersion,omitempty"`
	NameColor   *string `protobuf:"bytes,60,opt,name=nameColor,proto3,oneof" json:"nameColor,omitempty"`
	NameSize    *string `protobuf:"bytes,61,opt,name=nameSize,proto3,oneof" json:"nameSize,omitempty"`
	NameTexture *string `protobuf:"bytes,62,opt,name=nameTexture,proto3,oneof" json:"nameTexture,omitempty"`
	NameLining  *string `protobuf:"bytes,63,opt,name=nameLining,proto3,oneof" json:"nameLining,omitempty"`
	NameVersion *string `protobuf:"bytes,64,opt,name=nameVersion,proto3,oneof" json:"nameVersion,omitempty"`
	// 3. 编码信息
	PlatCode    *string `protobuf:"bytes,15,opt,name=platCode,proto3,oneof" json:"platCode,omitempty"`       // 平台商品编码
	PlatSubCode *string `protobuf:"bytes,16,opt,name=platSubCode,proto3,oneof" json:"platSubCode,omitempty"` // platCode+platSubCode 联合唯一，需校验
	PlatName    *string `protobuf:"bytes,17,opt,name=platName,proto3,oneof" json:"platName,omitempty"`
	PlatBrief   *string `protobuf:"bytes,18,opt,name=platBrief,proto3,oneof" json:"platBrief,omitempty"`
	PlatDesc    *string `protobuf:"bytes,19,opt,name=platDesc,proto3,oneof" json:"platDesc,omitempty"`
	// 4. 查询信息
	PlatTag      *string `protobuf:"bytes,20,opt,name=platTag,proto3,oneof" json:"platTag,omitempty"`
	PlatRetail   *string `protobuf:"bytes,21,opt,name=platRetail,proto3,oneof" json:"platRetail,omitempty"`
	PlatDiscount *string `protobuf:"bytes,22,opt,name=platDiscount,proto3,oneof" json:"platDiscount,omitempty"`
	// 5. 控制信息
	IsSelected *int64  `protobuf:"varint,25,opt,name=isSelected,proto3,oneof" json:"isSelected,omitempty"`
	StartedAt  *string `protobuf:"bytes,26,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	ExpiredAt  *string `protobuf:"bytes,27,opt,name=expiredAt,proto3,oneof" json:"expiredAt,omitempty"`
	// 6. 可选附件坚果参数
	NutNum   *int64 `protobuf:"varint,35,opt,name=nutNum,proto3,oneof" json:"nutNum,omitempty"`
	BadgeNum *int64 `protobuf:"varint,36,opt,name=badgeNum,proto3,oneof" json:"badgeNum,omitempty"`
	ScoreNum *int64 `protobuf:"varint,37,opt,name=scoreNum,proto3,oneof" json:"scoreNum,omitempty"`
	// 7. 备用字符串字段
	Red    *string `protobuf:"bytes,40,opt,name=red,proto3,oneof" json:"red,omitempty"`
	Orange *string `protobuf:"bytes,41,opt,name=orange,proto3,oneof" json:"orange,omitempty"`
	Yellow *string `protobuf:"bytes,42,opt,name=yellow,proto3,oneof" json:"yellow,omitempty"`
	Green  *string `protobuf:"bytes,43,opt,name=green,proto3,oneof" json:"green,omitempty"`
	Cyan   *string `protobuf:"bytes,44,opt,name=cyan,proto3,oneof" json:"cyan,omitempty"`
	Blue   *string `protobuf:"bytes,45,opt,name=blue,proto3,oneof" json:"blue,omitempty"`
	Purple *string `protobuf:"bytes,46,opt,name=purple,proto3,oneof" json:"purple,omitempty"`
	// 8. 备用整型字段
	DogNum  *int64 `protobuf:"varint,50,opt,name=dogNum,proto3,oneof" json:"dogNum,omitempty"`
	CatNum  *int64 `protobuf:"varint,51,opt,name=catNum,proto3,oneof" json:"catNum,omitempty"`
	DuckNum *int64 `protobuf:"varint,52,opt,name=duckNum,proto3,oneof" json:"duckNum,omitempty"`
}

func (x *UpdateReq) Reset() {
	*x = UpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platproduct_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq) ProtoMessage() {}

func (x *UpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_platproduct_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq.ProtoReflect.Descriptor instead.
func (*UpdateReq) Descriptor() ([]byte, []int) {
	return file_platproduct_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateReq) GetSpu() string {
	if x != nil {
		return x.Spu
	}
	return ""
}

func (x *UpdateReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *UpdateReq) GetPlatBrand() string {
	if x != nil && x.PlatBrand != nil {
		return *x.PlatBrand
	}
	return ""
}

func (x *UpdateReq) GetPlatCategory() string {
	if x != nil && x.PlatCategory != nil {
		return *x.PlatCategory
	}
	return ""
}

func (x *UpdateReq) GetPlatSeries() string {
	if x != nil && x.PlatSeries != nil {
		return *x.PlatSeries
	}
	return ""
}

func (x *UpdateReq) GetPlatModel() string {
	if x != nil && x.PlatModel != nil {
		return *x.PlatModel
	}
	return ""
}

func (x *UpdateReq) GetPlatColor() string {
	if x != nil && x.PlatColor != nil {
		return *x.PlatColor
	}
	return ""
}

func (x *UpdateReq) GetPlatSize() string {
	if x != nil && x.PlatSize != nil {
		return *x.PlatSize
	}
	return ""
}

func (x *UpdateReq) GetPlatTexture() string {
	if x != nil && x.PlatTexture != nil {
		return *x.PlatTexture
	}
	return ""
}

func (x *UpdateReq) GetPlatLining() string {
	if x != nil && x.PlatLining != nil {
		return *x.PlatLining
	}
	return ""
}

func (x *UpdateReq) GetPlatVersion() string {
	if x != nil && x.PlatVersion != nil {
		return *x.PlatVersion
	}
	return ""
}

func (x *UpdateReq) GetNameColor() string {
	if x != nil && x.NameColor != nil {
		return *x.NameColor
	}
	return ""
}

func (x *UpdateReq) GetNameSize() string {
	if x != nil && x.NameSize != nil {
		return *x.NameSize
	}
	return ""
}

func (x *UpdateReq) GetNameTexture() string {
	if x != nil && x.NameTexture != nil {
		return *x.NameTexture
	}
	return ""
}

func (x *UpdateReq) GetNameLining() string {
	if x != nil && x.NameLining != nil {
		return *x.NameLining
	}
	return ""
}

func (x *UpdateReq) GetNameVersion() string {
	if x != nil && x.NameVersion != nil {
		return *x.NameVersion
	}
	return ""
}

func (x *UpdateReq) GetPlatCode() string {
	if x != nil && x.PlatCode != nil {
		return *x.PlatCode
	}
	return ""
}

func (x *UpdateReq) GetPlatSubCode() string {
	if x != nil && x.PlatSubCode != nil {
		return *x.PlatSubCode
	}
	return ""
}

func (x *UpdateReq) GetPlatName() string {
	if x != nil && x.PlatName != nil {
		return *x.PlatName
	}
	return ""
}

func (x *UpdateReq) GetPlatBrief() string {
	if x != nil && x.PlatBrief != nil {
		return *x.PlatBrief
	}
	return ""
}

func (x *UpdateReq) GetPlatDesc() string {
	if x != nil && x.PlatDesc != nil {
		return *x.PlatDesc
	}
	return ""
}

func (x *UpdateReq) GetPlatTag() string {
	if x != nil && x.PlatTag != nil {
		return *x.PlatTag
	}
	return ""
}

func (x *UpdateReq) GetPlatRetail() string {
	if x != nil && x.PlatRetail != nil {
		return *x.PlatRetail
	}
	return ""
}

func (x *UpdateReq) GetPlatDiscount() string {
	if x != nil && x.PlatDiscount != nil {
		return *x.PlatDiscount
	}
	return ""
}

func (x *UpdateReq) GetIsSelected() int64 {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return 0
}

func (x *UpdateReq) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *UpdateReq) GetExpiredAt() string {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return ""
}

func (x *UpdateReq) GetNutNum() int64 {
	if x != nil && x.NutNum != nil {
		return *x.NutNum
	}
	return 0
}

func (x *UpdateReq) GetBadgeNum() int64 {
	if x != nil && x.BadgeNum != nil {
		return *x.BadgeNum
	}
	return 0
}

func (x *UpdateReq) GetScoreNum() int64 {
	if x != nil && x.ScoreNum != nil {
		return *x.ScoreNum
	}
	return 0
}

func (x *UpdateReq) GetRed() string {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return ""
}

func (x *UpdateReq) GetOrange() string {
	if x != nil && x.Orange != nil {
		return *x.Orange
	}
	return ""
}

func (x *UpdateReq) GetYellow() string {
	if x != nil && x.Yellow != nil {
		return *x.Yellow
	}
	return ""
}

func (x *UpdateReq) GetGreen() string {
	if x != nil && x.Green != nil {
		return *x.Green
	}
	return ""
}

func (x *UpdateReq) GetCyan() string {
	if x != nil && x.Cyan != nil {
		return *x.Cyan
	}
	return ""
}

func (x *UpdateReq) GetBlue() string {
	if x != nil && x.Blue != nil {
		return *x.Blue
	}
	return ""
}

func (x *UpdateReq) GetPurple() string {
	if x != nil && x.Purple != nil {
		return *x.Purple
	}
	return ""
}

func (x *UpdateReq) GetDogNum() int64 {
	if x != nil && x.DogNum != nil {
		return *x.DogNum
	}
	return 0
}

func (x *UpdateReq) GetCatNum() int64 {
	if x != nil && x.CatNum != nil {
		return *x.CatNum
	}
	return 0
}

func (x *UpdateReq) GetDuckNum() int64 {
	if x != nil && x.DuckNum != nil {
		return *x.DuckNum
	}
	return 0
}

var File_platproduct_proto protoreflect.FileDescriptor

var file_platproduct_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49,
	0x0a, 0x0f, 0x53, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x08, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x73, 0x70, 0x75, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27,
	0x0a, 0x0b, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x3f, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x50, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x36, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x53, 0x6b, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x6b, 0x75,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x53, 0x6b, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x10, 0x50, 0x6c,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x48, 0x02, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x03, 0x52, 0x13, 0x50,
	0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48,
	0x04, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x70, 0x75, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x6b, 0x75, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x6c, 0x61, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x50, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd9, 0x0e, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x16, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x18,
	0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x19, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1b, 0x52, 0x06, 0x6e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x1c, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1d, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x03, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x06, 0x6f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x06, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22,
	0x52, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x75,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x24, 0x52, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x25, 0x52, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x48, 0x26, 0x52, 0x06,
	0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x75, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x48, 0x27, 0x52, 0x07, 0x64, 0x75,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x74,
	0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x72, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x79, 0x61, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x75, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x2a, 0x0a, 0x0c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x15, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x81, 0x0f, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x73, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x73, 0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x73, 0x6b, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x1a, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1d, 0x52, 0x06, 0x6e, 0x75, 0x74,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1f, 0x52, 0x08, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x03, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x21, 0x52, 0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x06,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x24, 0x52, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x04, 0x62,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x27, 0x52, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x28, 0x52, 0x06, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x64, 0x75, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x48, 0x29,
	0x52, 0x07, 0x64, 0x75, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x73, 0x6b, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4c,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x79, 0x61,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70,
	0x75, 0x72, 0x70, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x64, 0x75, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0xd1, 0x0c, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x73, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x73, 0x70,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62,
	0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x16, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x17, 0x52, 0x06, 0x6e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x18, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x19, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x03, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x06, 0x6f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52,
	0x04, 0x63, 0x79, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x20, 0x52, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x48, 0x21,
	0x52, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x48, 0x22, 0x52, 0x06, 0x63,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x75, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x48, 0x23, 0x52, 0x07, 0x64, 0x75, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x4e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x79, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f,
	0x67, 0x4e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x75, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x50, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x0a,
	0x07, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x6b,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x22, 0xae, 0x0e, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x6b, 0x75,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x15, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x17, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1a, 0x52, 0x06, 0x6e, 0x75, 0x74, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1b, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1c, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x03, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52,
	0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x79, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x06, 0x79, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x21, 0x52, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62,
	0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x04, 0x62, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x48, 0x25,
	0x52, 0x06, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64,
	0x75, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x48, 0x26, 0x52, 0x07,
	0x64, 0x75, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73,
	0x6b, 0x75, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x54, 0x61, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x79, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x67,
	0x4e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x64, 0x75, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x32, 0xc3, 0x03, 0x0a, 0x0e, 0x50,
	0x6c, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x74, 0x6f, 0x12, 0x3d, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x08,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x53, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x70, 0x62, 0x70, 0x6c, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_platproduct_proto_rawDescOnce sync.Once
	file_platproduct_proto_rawDescData = file_platproduct_proto_rawDesc
)

func file_platproduct_proto_rawDescGZIP() []byte {
	file_platproduct_proto_rawDescOnce.Do(func() {
		file_platproduct_proto_rawDescData = protoimpl.X.CompressGZIP(file_platproduct_proto_rawDescData)
	})
	return file_platproduct_proto_rawDescData
}

var file_platproduct_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_platproduct_proto_goTypes = []interface{}{
	(*SpuNameListReq)(nil),      // 0: plat_product.SpuNameListReq
	(*SpuNameItem)(nil),         // 1: plat_product.SpuNameItem
	(*SpuNameListResp)(nil),     // 2: plat_product.SpuNameListResp
	(*CheckReq)(nil),            // 3: plat_product.CheckReq
	(*SpuListResp)(nil),         // 4: plat_product.SpuListResp
	(*SkuListResp)(nil),         // 5: plat_product.SkuListResp
	(*PlatCodeListResp)(nil),    // 6: plat_product.PlatCodeListResp
	(*PlatSubCodeListResp)(nil), // 7: plat_product.PlatSubCodeListResp
	(*PlatNameListResp)(nil),    // 8: plat_product.PlatNameListResp
	(*CheckResp)(nil),           // 9: plat_product.CheckResp
	(*CreateReq)(nil),           // 10: plat_product.CreateReq
	(*AffectedResp)(nil),        // 11: plat_product.AffectedResp
	(*RetrieveReq)(nil),         // 12: plat_product.RetrieveReq
	(*ItemResp)(nil),            // 13: plat_product.ItemResp
	(*ListReq)(nil),             // 14: plat_product.ListReq
	(*ListResp)(nil),            // 15: plat_product.ListResp
	(*DropReq)(nil),             // 16: plat_product.DropReq
	(*UpdateReq)(nil),           // 17: plat_product.UpdateReq
}
var file_platproduct_proto_depIdxs = []int32{
	1,  // 0: plat_product.SpuNameListResp.spu_names:type_name -> plat_product.SpuNameItem
	4,  // 1: plat_product.CheckResp.SpuListResp:type_name -> plat_product.SpuListResp
	5,  // 2: plat_product.CheckResp.SkuListResp:type_name -> plat_product.SkuListResp
	6,  // 3: plat_product.CheckResp.PlatCodeListResp:type_name -> plat_product.PlatCodeListResp
	7,  // 4: plat_product.CheckResp.PlatSubCodeListResp:type_name -> plat_product.PlatSubCodeListResp
	8,  // 5: plat_product.CheckResp.PlatNameListResp:type_name -> plat_product.PlatNameListResp
	13, // 6: plat_product.ListResp.Result:type_name -> plat_product.ItemResp
	10, // 7: plat_product.PlatProductIto.Create:input_type -> plat_product.CreateReq
	12, // 8: plat_product.PlatProductIto.Retrieve:input_type -> plat_product.RetrieveReq
	14, // 9: plat_product.PlatProductIto.List:input_type -> plat_product.ListReq
	16, // 10: plat_product.PlatProductIto.Delete:input_type -> plat_product.DropReq
	17, // 11: plat_product.PlatProductIto.Update:input_type -> plat_product.UpdateReq
	3,  // 12: plat_product.PlatProductIto.Check:input_type -> plat_product.CheckReq
	0,  // 13: plat_product.PlatProductIto.SpuList:input_type -> plat_product.SpuNameListReq
	11, // 14: plat_product.PlatProductIto.Create:output_type -> plat_product.AffectedResp
	13, // 15: plat_product.PlatProductIto.Retrieve:output_type -> plat_product.ItemResp
	15, // 16: plat_product.PlatProductIto.List:output_type -> plat_product.ListResp
	11, // 17: plat_product.PlatProductIto.Delete:output_type -> plat_product.AffectedResp
	11, // 18: plat_product.PlatProductIto.Update:output_type -> plat_product.AffectedResp
	9,  // 19: plat_product.PlatProductIto.Check:output_type -> plat_product.CheckResp
	2,  // 20: plat_product.PlatProductIto.SpuList:output_type -> plat_product.SpuNameListResp
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_platproduct_proto_init() }
func file_platproduct_proto_init() {
	if File_platproduct_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_platproduct_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuNameListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuNameItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuNameListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatCodeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatSubCodeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatNameListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffectedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platproduct_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_platproduct_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_platproduct_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_platproduct_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_platproduct_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_platproduct_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_platproduct_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_platproduct_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_platproduct_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platproduct_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platproduct_proto_goTypes,
		DependencyIndexes: file_platproduct_proto_depIdxs,
		MessageInfos:      file_platproduct_proto_msgTypes,
	}.Build()
	File_platproduct_proto = out.File
	file_platproduct_proto_rawDesc = nil
	file_platproduct_proto_goTypes = nil
	file_platproduct_proto_depIdxs = nil
}
