// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: platproduct.proto

package pbplatproductito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlatProductIto_Create_FullMethodName   = "/plat_product.PlatProductIto/Create"
	PlatProductIto_Retrieve_FullMethodName = "/plat_product.PlatProductIto/Retrieve"
	PlatProductIto_List_FullMethodName     = "/plat_product.PlatProductIto/List"
	PlatProductIto_Delete_FullMethodName   = "/plat_product.PlatProductIto/Delete"
	PlatProductIto_Update_FullMethodName   = "/plat_product.PlatProductIto/Update"
	PlatProductIto_Check_FullMethodName    = "/plat_product.PlatProductIto/Check"
	PlatProductIto_SpuList_FullMethodName  = "/plat_product.PlatProductIto/SpuList"
)

// PlatProductItoClient is the client API for PlatProductIto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatProductItoClient interface {
	// 1. 新增1条记录
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*AffectedResp, error)
	// 2. 2. 基于spu/sku/platCode组合条件 单查 返回唯一结果
	Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*ItemResp, error)
	// 3. 列表查，支持模糊查询，多条件查询，设置分页条件
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	// 4. spu会连带删除所有sku, sku删除仅删除单条记录
	Delete(ctx context.Context, in *DropReq, opts ...grpc.CallOption) (*AffectedResp, error)
	// 5. 单改，基于spu 或 sku 进行修改
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*AffectedResp, error)
	// 6. 属性列表查询，用于下拉选项，及表单去重
	Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error)
	// 7. SPU全部列表，用于 优惠券的 限定产品绑定
	SpuList(ctx context.Context, in *SpuNameListReq, opts ...grpc.CallOption) (*SpuNameListResp, error)
}

type platProductItoClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatProductItoClient(cc grpc.ClientConnInterface) PlatProductItoClient {
	return &platProductItoClient{cc}
}

func (c *platProductItoClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*AffectedResp, error) {
	out := new(AffectedResp)
	err := c.cc.Invoke(ctx, PlatProductIto_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platProductItoClient) Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*ItemResp, error) {
	out := new(ItemResp)
	err := c.cc.Invoke(ctx, PlatProductIto_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platProductItoClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, PlatProductIto_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platProductItoClient) Delete(ctx context.Context, in *DropReq, opts ...grpc.CallOption) (*AffectedResp, error) {
	out := new(AffectedResp)
	err := c.cc.Invoke(ctx, PlatProductIto_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platProductItoClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*AffectedResp, error) {
	out := new(AffectedResp)
	err := c.cc.Invoke(ctx, PlatProductIto_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platProductItoClient) Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error) {
	out := new(CheckResp)
	err := c.cc.Invoke(ctx, PlatProductIto_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platProductItoClient) SpuList(ctx context.Context, in *SpuNameListReq, opts ...grpc.CallOption) (*SpuNameListResp, error) {
	out := new(SpuNameListResp)
	err := c.cc.Invoke(ctx, PlatProductIto_SpuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatProductItoServer is the server API for PlatProductIto service.
// All implementations must embed UnimplementedPlatProductItoServer
// for forward compatibility
type PlatProductItoServer interface {
	// 1. 新增1条记录
	Create(context.Context, *CreateReq) (*AffectedResp, error)
	// 2. 2. 基于spu/sku/platCode组合条件 单查 返回唯一结果
	Retrieve(context.Context, *RetrieveReq) (*ItemResp, error)
	// 3. 列表查，支持模糊查询，多条件查询，设置分页条件
	List(context.Context, *ListReq) (*ListResp, error)
	// 4. spu会连带删除所有sku, sku删除仅删除单条记录
	Delete(context.Context, *DropReq) (*AffectedResp, error)
	// 5. 单改，基于spu 或 sku 进行修改
	Update(context.Context, *UpdateReq) (*AffectedResp, error)
	// 6. 属性列表查询，用于下拉选项，及表单去重
	Check(context.Context, *CheckReq) (*CheckResp, error)
	// 7. SPU全部列表，用于 优惠券的 限定产品绑定
	SpuList(context.Context, *SpuNameListReq) (*SpuNameListResp, error)
	mustEmbedUnimplementedPlatProductItoServer()
}

// UnimplementedPlatProductItoServer must be embedded to have forward compatible implementations.
type UnimplementedPlatProductItoServer struct {
}

func (UnimplementedPlatProductItoServer) Create(context.Context, *CreateReq) (*AffectedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlatProductItoServer) Retrieve(context.Context, *RetrieveReq) (*ItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedPlatProductItoServer) List(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPlatProductItoServer) Delete(context.Context, *DropReq) (*AffectedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlatProductItoServer) Update(context.Context, *UpdateReq) (*AffectedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlatProductItoServer) Check(context.Context, *CheckReq) (*CheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedPlatProductItoServer) SpuList(context.Context, *SpuNameListReq) (*SpuNameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpuList not implemented")
}
func (UnimplementedPlatProductItoServer) mustEmbedUnimplementedPlatProductItoServer() {}

// UnsafePlatProductItoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatProductItoServer will
// result in compilation errors.
type UnsafePlatProductItoServer interface {
	mustEmbedUnimplementedPlatProductItoServer()
}

func RegisterPlatProductItoServer(s grpc.ServiceRegistrar, srv PlatProductItoServer) {
	s.RegisterService(&PlatProductIto_ServiceDesc, srv)
}

func _PlatProductIto_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatProductItoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatProductIto_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatProductItoServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatProductIto_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatProductItoServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatProductIto_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatProductItoServer).Retrieve(ctx, req.(*RetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatProductIto_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatProductItoServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatProductIto_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatProductItoServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatProductIto_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatProductItoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatProductIto_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatProductItoServer).Delete(ctx, req.(*DropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatProductIto_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatProductItoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatProductIto_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatProductItoServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatProductIto_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatProductItoServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatProductIto_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatProductItoServer).Check(ctx, req.(*CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatProductIto_SpuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuNameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatProductItoServer).SpuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatProductIto_SpuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatProductItoServer).SpuList(ctx, req.(*SpuNameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatProductIto_ServiceDesc is the grpc.ServiceDesc for PlatProductIto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatProductIto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plat_product.PlatProductIto",
	HandlerType: (*PlatProductItoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PlatProductIto_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _PlatProductIto_Retrieve_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PlatProductIto_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlatProductIto_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PlatProductIto_Update_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _PlatProductIto_Check_Handler,
		},
		{
			MethodName: "SpuList",
			Handler:    _PlatProductIto_SpuList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platproduct.proto",
}
