// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: card_ito.proto

package cardito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CardCareController_Create_FullMethodName        = "/card_service.card_ito.CardCareController/Create"
	CardCareController_Destroy_FullMethodName       = "/card_service.card_ito.CardCareController/Destroy"
	CardCareController_List_FullMethodName          = "/card_service.card_ito.CardCareController/List"
	CardCareController_Options_FullMethodName       = "/card_service.card_ito.CardCareController/Options"
	CardCareController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardCareController/PartialUpdate"
	CardCareController_Retrieve_FullMethodName      = "/card_service.card_ito.CardCareController/Retrieve"
	CardCareController_Update_FullMethodName        = "/card_service.card_ito.CardCareController/Update"
)

// CardCareControllerClient is the client API for CardCareController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardCareControllerClient interface {
	Create(ctx context.Context, in *CardCareRequest, opts ...grpc.CallOption) (*CardCareResponse, error)
	Destroy(ctx context.Context, in *CardCareDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *CardCareListRequest, opts ...grpc.CallOption) (*CardCareListResponse, error)
	Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardCareOptionResponse, error)
	PartialUpdate(ctx context.Context, in *CardCarePartialUpdateRequest, opts ...grpc.CallOption) (*CardCareResponse, error)
	Retrieve(ctx context.Context, in *CardCareRetrieveRequest, opts ...grpc.CallOption) (*CardCareResponse, error)
	Update(ctx context.Context, in *CardCareRequest, opts ...grpc.CallOption) (*CardCareResponse, error)
}

type cardCareControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardCareControllerClient(cc grpc.ClientConnInterface) CardCareControllerClient {
	return &cardCareControllerClient{cc}
}

func (c *cardCareControllerClient) Create(ctx context.Context, in *CardCareRequest, opts ...grpc.CallOption) (*CardCareResponse, error) {
	out := new(CardCareResponse)
	err := c.cc.Invoke(ctx, CardCareController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCareControllerClient) Destroy(ctx context.Context, in *CardCareDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CardCareController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCareControllerClient) List(ctx context.Context, in *CardCareListRequest, opts ...grpc.CallOption) (*CardCareListResponse, error) {
	out := new(CardCareListResponse)
	err := c.cc.Invoke(ctx, CardCareController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCareControllerClient) Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardCareOptionResponse, error) {
	out := new(CardCareOptionResponse)
	err := c.cc.Invoke(ctx, CardCareController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCareControllerClient) PartialUpdate(ctx context.Context, in *CardCarePartialUpdateRequest, opts ...grpc.CallOption) (*CardCareResponse, error) {
	out := new(CardCareResponse)
	err := c.cc.Invoke(ctx, CardCareController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCareControllerClient) Retrieve(ctx context.Context, in *CardCareRetrieveRequest, opts ...grpc.CallOption) (*CardCareResponse, error) {
	out := new(CardCareResponse)
	err := c.cc.Invoke(ctx, CardCareController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCareControllerClient) Update(ctx context.Context, in *CardCareRequest, opts ...grpc.CallOption) (*CardCareResponse, error) {
	out := new(CardCareResponse)
	err := c.cc.Invoke(ctx, CardCareController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardCareControllerServer is the server API for CardCareController service.
// All implementations must embed UnimplementedCardCareControllerServer
// for forward compatibility
type CardCareControllerServer interface {
	Create(context.Context, *CardCareRequest) (*CardCareResponse, error)
	Destroy(context.Context, *CardCareDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *CardCareListRequest) (*CardCareListResponse, error)
	Options(context.Context, *OptionRequest) (*CardCareOptionResponse, error)
	PartialUpdate(context.Context, *CardCarePartialUpdateRequest) (*CardCareResponse, error)
	Retrieve(context.Context, *CardCareRetrieveRequest) (*CardCareResponse, error)
	Update(context.Context, *CardCareRequest) (*CardCareResponse, error)
	mustEmbedUnimplementedCardCareControllerServer()
}

// UnimplementedCardCareControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardCareControllerServer struct {
}

func (UnimplementedCardCareControllerServer) Create(context.Context, *CardCareRequest) (*CardCareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardCareControllerServer) Destroy(context.Context, *CardCareDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardCareControllerServer) List(context.Context, *CardCareListRequest) (*CardCareListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardCareControllerServer) Options(context.Context, *OptionRequest) (*CardCareOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedCardCareControllerServer) PartialUpdate(context.Context, *CardCarePartialUpdateRequest) (*CardCareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardCareControllerServer) Retrieve(context.Context, *CardCareRetrieveRequest) (*CardCareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardCareControllerServer) Update(context.Context, *CardCareRequest) (*CardCareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardCareControllerServer) mustEmbedUnimplementedCardCareControllerServer() {}

// UnsafeCardCareControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardCareControllerServer will
// result in compilation errors.
type UnsafeCardCareControllerServer interface {
	mustEmbedUnimplementedCardCareControllerServer()
}

func RegisterCardCareControllerServer(s grpc.ServiceRegistrar, srv CardCareControllerServer) {
	s.RegisterService(&CardCareController_ServiceDesc, srv)
}

func _CardCareController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCareControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCareController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCareControllerServer).Create(ctx, req.(*CardCareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCareController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCareDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCareControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCareController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCareControllerServer).Destroy(ctx, req.(*CardCareDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCareController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCareListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCareControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCareController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCareControllerServer).List(ctx, req.(*CardCareListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCareController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCareControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCareController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCareControllerServer).Options(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCareController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCarePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCareControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCareController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCareControllerServer).PartialUpdate(ctx, req.(*CardCarePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCareController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCareRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCareControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCareController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCareControllerServer).Retrieve(ctx, req.(*CardCareRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCareController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCareControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCareController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCareControllerServer).Update(ctx, req.(*CardCareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardCareController_ServiceDesc is the grpc.ServiceDesc for CardCareController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardCareController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardCareController",
	HandlerType: (*CardCareControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardCareController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardCareController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardCareController_List_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _CardCareController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardCareController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardCareController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardCareController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardMemberController_Create_FullMethodName        = "/card_service.card_ito.CardMemberController/Create"
	CardMemberController_Destroy_FullMethodName       = "/card_service.card_ito.CardMemberController/Destroy"
	CardMemberController_List_FullMethodName          = "/card_service.card_ito.CardMemberController/List"
	CardMemberController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardMemberController/PartialUpdate"
	CardMemberController_Retrieve_FullMethodName      = "/card_service.card_ito.CardMemberController/Retrieve"
	CardMemberController_Update_FullMethodName        = "/card_service.card_ito.CardMemberController/Update"
)

// CardMemberControllerClient is the client API for CardMemberController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardMemberControllerClient interface {
	Create(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
	Destroy(ctx context.Context, in *CardMemberDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *CardMemberListRequest, opts ...grpc.CallOption) (*CardMemberListResponse, error)
	PartialUpdate(ctx context.Context, in *CardMemberPartialUpdateRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
	Retrieve(ctx context.Context, in *CardMemberRetrieveRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
	Update(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
}

type cardMemberControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardMemberControllerClient(cc grpc.ClientConnInterface) CardMemberControllerClient {
	return &cardMemberControllerClient{cc}
}

func (c *cardMemberControllerClient) Create(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) Destroy(ctx context.Context, in *CardMemberDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CardMemberController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) List(ctx context.Context, in *CardMemberListRequest, opts ...grpc.CallOption) (*CardMemberListResponse, error) {
	out := new(CardMemberListResponse)
	err := c.cc.Invoke(ctx, CardMemberController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) PartialUpdate(ctx context.Context, in *CardMemberPartialUpdateRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) Retrieve(ctx context.Context, in *CardMemberRetrieveRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) Update(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardMemberControllerServer is the server API for CardMemberController service.
// All implementations must embed UnimplementedCardMemberControllerServer
// for forward compatibility
type CardMemberControllerServer interface {
	Create(context.Context, *CardMemberRequest) (*CardMemberResponse, error)
	Destroy(context.Context, *CardMemberDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *CardMemberListRequest) (*CardMemberListResponse, error)
	PartialUpdate(context.Context, *CardMemberPartialUpdateRequest) (*CardMemberResponse, error)
	Retrieve(context.Context, *CardMemberRetrieveRequest) (*CardMemberResponse, error)
	Update(context.Context, *CardMemberRequest) (*CardMemberResponse, error)
	mustEmbedUnimplementedCardMemberControllerServer()
}

// UnimplementedCardMemberControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardMemberControllerServer struct {
}

func (UnimplementedCardMemberControllerServer) Create(context.Context, *CardMemberRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardMemberControllerServer) Destroy(context.Context, *CardMemberDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardMemberControllerServer) List(context.Context, *CardMemberListRequest) (*CardMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardMemberControllerServer) PartialUpdate(context.Context, *CardMemberPartialUpdateRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardMemberControllerServer) Retrieve(context.Context, *CardMemberRetrieveRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardMemberControllerServer) Update(context.Context, *CardMemberRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardMemberControllerServer) mustEmbedUnimplementedCardMemberControllerServer() {}

// UnsafeCardMemberControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardMemberControllerServer will
// result in compilation errors.
type UnsafeCardMemberControllerServer interface {
	mustEmbedUnimplementedCardMemberControllerServer()
}

func RegisterCardMemberControllerServer(s grpc.ServiceRegistrar, srv CardMemberControllerServer) {
	s.RegisterService(&CardMemberController_ServiceDesc, srv)
}

func _CardMemberController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Create(ctx, req.(*CardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Destroy(ctx, req.(*CardMemberDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).List(ctx, req.(*CardMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).PartialUpdate(ctx, req.(*CardMemberPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Retrieve(ctx, req.(*CardMemberRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Update(ctx, req.(*CardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardMemberController_ServiceDesc is the grpc.ServiceDesc for CardMemberController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardMemberController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardMemberController",
	HandlerType: (*CardMemberControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardMemberController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardMemberController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardMemberController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardMemberController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardMemberController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardMemberController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardNutController_Create_FullMethodName        = "/card_service.card_ito.CardNutController/Create"
	CardNutController_Destroy_FullMethodName       = "/card_service.card_ito.CardNutController/Destroy"
	CardNutController_List_FullMethodName          = "/card_service.card_ito.CardNutController/List"
	CardNutController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardNutController/PartialUpdate"
	CardNutController_Retrieve_FullMethodName      = "/card_service.card_ito.CardNutController/Retrieve"
	CardNutController_Update_FullMethodName        = "/card_service.card_ito.CardNutController/Update"
)

// CardNutControllerClient is the client API for CardNutController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardNutControllerClient interface {
	Create(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
	Destroy(ctx context.Context, in *CardNutDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *CardNutListRequest, opts ...grpc.CallOption) (*CardNutListResponse, error)
	PartialUpdate(ctx context.Context, in *CardNutPartialUpdateRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
	Retrieve(ctx context.Context, in *CardNutRetrieveRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
	Update(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
}

type cardNutControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardNutControllerClient(cc grpc.ClientConnInterface) CardNutControllerClient {
	return &cardNutControllerClient{cc}
}

func (c *cardNutControllerClient) Create(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) Destroy(ctx context.Context, in *CardNutDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CardNutController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) List(ctx context.Context, in *CardNutListRequest, opts ...grpc.CallOption) (*CardNutListResponse, error) {
	out := new(CardNutListResponse)
	err := c.cc.Invoke(ctx, CardNutController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) PartialUpdate(ctx context.Context, in *CardNutPartialUpdateRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) Retrieve(ctx context.Context, in *CardNutRetrieveRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) Update(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardNutControllerServer is the server API for CardNutController service.
// All implementations must embed UnimplementedCardNutControllerServer
// for forward compatibility
type CardNutControllerServer interface {
	Create(context.Context, *CardNutRequest) (*CardNutResponse, error)
	Destroy(context.Context, *CardNutDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *CardNutListRequest) (*CardNutListResponse, error)
	PartialUpdate(context.Context, *CardNutPartialUpdateRequest) (*CardNutResponse, error)
	Retrieve(context.Context, *CardNutRetrieveRequest) (*CardNutResponse, error)
	Update(context.Context, *CardNutRequest) (*CardNutResponse, error)
	mustEmbedUnimplementedCardNutControllerServer()
}

// UnimplementedCardNutControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardNutControllerServer struct {
}

func (UnimplementedCardNutControllerServer) Create(context.Context, *CardNutRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardNutControllerServer) Destroy(context.Context, *CardNutDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardNutControllerServer) List(context.Context, *CardNutListRequest) (*CardNutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardNutControllerServer) PartialUpdate(context.Context, *CardNutPartialUpdateRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardNutControllerServer) Retrieve(context.Context, *CardNutRetrieveRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardNutControllerServer) Update(context.Context, *CardNutRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardNutControllerServer) mustEmbedUnimplementedCardNutControllerServer() {}

// UnsafeCardNutControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardNutControllerServer will
// result in compilation errors.
type UnsafeCardNutControllerServer interface {
	mustEmbedUnimplementedCardNutControllerServer()
}

func RegisterCardNutControllerServer(s grpc.ServiceRegistrar, srv CardNutControllerServer) {
	s.RegisterService(&CardNutController_ServiceDesc, srv)
}

func _CardNutController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Create(ctx, req.(*CardNutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Destroy(ctx, req.(*CardNutDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).List(ctx, req.(*CardNutListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).PartialUpdate(ctx, req.(*CardNutPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Retrieve(ctx, req.(*CardNutRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Update(ctx, req.(*CardNutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardNutController_ServiceDesc is the grpc.ServiceDesc for CardNutController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardNutController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardNutController",
	HandlerType: (*CardNutControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardNutController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardNutController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardNutController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardNutController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardNutController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardNutController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardVoucherController_Create_FullMethodName        = "/card_service.card_ito.CardVoucherController/Create"
	CardVoucherController_Destroy_FullMethodName       = "/card_service.card_ito.CardVoucherController/Destroy"
	CardVoucherController_List_FullMethodName          = "/card_service.card_ito.CardVoucherController/List"
	CardVoucherController_NextSerial_FullMethodName    = "/card_service.card_ito.CardVoucherController/NextSerial"
	CardVoucherController_Options_FullMethodName       = "/card_service.card_ito.CardVoucherController/Options"
	CardVoucherController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardVoucherController/PartialUpdate"
	CardVoucherController_Retrieve_FullMethodName      = "/card_service.card_ito.CardVoucherController/Retrieve"
	CardVoucherController_Update_FullMethodName        = "/card_service.card_ito.CardVoucherController/Update"
)

// CardVoucherControllerClient is the client API for CardVoucherController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardVoucherControllerClient interface {
	Create(ctx context.Context, in *CardVoucherRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error)
	Destroy(ctx context.Context, in *CardVoucherDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *CardVoucherListRequest, opts ...grpc.CallOption) (*CardVoucherListResponse, error)
	NextSerial(ctx context.Context, in *NextSerialRequest, opts ...grpc.CallOption) (*CardVoucherNextSerialResponse, error)
	Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardVoucherOptionResponse, error)
	PartialUpdate(ctx context.Context, in *CardVoucherPartialUpdateRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error)
	Retrieve(ctx context.Context, in *CardVoucherRetrieveRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error)
	Update(ctx context.Context, in *CardVoucherRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error)
}

type cardVoucherControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardVoucherControllerClient(cc grpc.ClientConnInterface) CardVoucherControllerClient {
	return &cardVoucherControllerClient{cc}
}

func (c *cardVoucherControllerClient) Create(ctx context.Context, in *CardVoucherRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error) {
	out := new(CardVoucherResponse)
	err := c.cc.Invoke(ctx, CardVoucherController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardVoucherControllerClient) Destroy(ctx context.Context, in *CardVoucherDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CardVoucherController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardVoucherControllerClient) List(ctx context.Context, in *CardVoucherListRequest, opts ...grpc.CallOption) (*CardVoucherListResponse, error) {
	out := new(CardVoucherListResponse)
	err := c.cc.Invoke(ctx, CardVoucherController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardVoucherControllerClient) NextSerial(ctx context.Context, in *NextSerialRequest, opts ...grpc.CallOption) (*CardVoucherNextSerialResponse, error) {
	out := new(CardVoucherNextSerialResponse)
	err := c.cc.Invoke(ctx, CardVoucherController_NextSerial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardVoucherControllerClient) Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardVoucherOptionResponse, error) {
	out := new(CardVoucherOptionResponse)
	err := c.cc.Invoke(ctx, CardVoucherController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardVoucherControllerClient) PartialUpdate(ctx context.Context, in *CardVoucherPartialUpdateRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error) {
	out := new(CardVoucherResponse)
	err := c.cc.Invoke(ctx, CardVoucherController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardVoucherControllerClient) Retrieve(ctx context.Context, in *CardVoucherRetrieveRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error) {
	out := new(CardVoucherResponse)
	err := c.cc.Invoke(ctx, CardVoucherController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardVoucherControllerClient) Update(ctx context.Context, in *CardVoucherRequest, opts ...grpc.CallOption) (*CardVoucherResponse, error) {
	out := new(CardVoucherResponse)
	err := c.cc.Invoke(ctx, CardVoucherController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardVoucherControllerServer is the server API for CardVoucherController service.
// All implementations must embed UnimplementedCardVoucherControllerServer
// for forward compatibility
type CardVoucherControllerServer interface {
	Create(context.Context, *CardVoucherRequest) (*CardVoucherResponse, error)
	Destroy(context.Context, *CardVoucherDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *CardVoucherListRequest) (*CardVoucherListResponse, error)
	NextSerial(context.Context, *NextSerialRequest) (*CardVoucherNextSerialResponse, error)
	Options(context.Context, *OptionRequest) (*CardVoucherOptionResponse, error)
	PartialUpdate(context.Context, *CardVoucherPartialUpdateRequest) (*CardVoucherResponse, error)
	Retrieve(context.Context, *CardVoucherRetrieveRequest) (*CardVoucherResponse, error)
	Update(context.Context, *CardVoucherRequest) (*CardVoucherResponse, error)
	mustEmbedUnimplementedCardVoucherControllerServer()
}

// UnimplementedCardVoucherControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardVoucherControllerServer struct {
}

func (UnimplementedCardVoucherControllerServer) Create(context.Context, *CardVoucherRequest) (*CardVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardVoucherControllerServer) Destroy(context.Context, *CardVoucherDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardVoucherControllerServer) List(context.Context, *CardVoucherListRequest) (*CardVoucherListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardVoucherControllerServer) NextSerial(context.Context, *NextSerialRequest) (*CardVoucherNextSerialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSerial not implemented")
}
func (UnimplementedCardVoucherControllerServer) Options(context.Context, *OptionRequest) (*CardVoucherOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedCardVoucherControllerServer) PartialUpdate(context.Context, *CardVoucherPartialUpdateRequest) (*CardVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardVoucherControllerServer) Retrieve(context.Context, *CardVoucherRetrieveRequest) (*CardVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardVoucherControllerServer) Update(context.Context, *CardVoucherRequest) (*CardVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardVoucherControllerServer) mustEmbedUnimplementedCardVoucherControllerServer() {}

// UnsafeCardVoucherControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardVoucherControllerServer will
// result in compilation errors.
type UnsafeCardVoucherControllerServer interface {
	mustEmbedUnimplementedCardVoucherControllerServer()
}

func RegisterCardVoucherControllerServer(s grpc.ServiceRegistrar, srv CardVoucherControllerServer) {
	s.RegisterService(&CardVoucherController_ServiceDesc, srv)
}

func _CardVoucherController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).Create(ctx, req.(*CardVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardVoucherController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardVoucherDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).Destroy(ctx, req.(*CardVoucherDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardVoucherController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardVoucherListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).List(ctx, req.(*CardVoucherListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardVoucherController_NextSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).NextSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_NextSerial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).NextSerial(ctx, req.(*NextSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardVoucherController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).Options(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardVoucherController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardVoucherPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).PartialUpdate(ctx, req.(*CardVoucherPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardVoucherController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardVoucherRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).Retrieve(ctx, req.(*CardVoucherRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardVoucherController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardVoucherControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardVoucherController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardVoucherControllerServer).Update(ctx, req.(*CardVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardVoucherController_ServiceDesc is the grpc.ServiceDesc for CardVoucherController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardVoucherController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardVoucherController",
	HandlerType: (*CardVoucherControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardVoucherController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardVoucherController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardVoucherController_List_Handler,
		},
		{
			MethodName: "NextSerial",
			Handler:    _CardVoucherController_NextSerial_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _CardVoucherController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardVoucherController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardVoucherController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardVoucherController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}
