// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: card_ito.proto

package cardito

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CardDiscountController_Create_FullMethodName        = "/card_service.card_ito.CardDiscountController/Create"
	CardDiscountController_Destroy_FullMethodName       = "/card_service.card_ito.CardDiscountController/Destroy"
	CardDiscountController_List_FullMethodName          = "/card_service.card_ito.CardDiscountController/List"
	CardDiscountController_Options_FullMethodName       = "/card_service.card_ito.CardDiscountController/Options"
	CardDiscountController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardDiscountController/PartialUpdate"
	CardDiscountController_Retrieve_FullMethodName      = "/card_service.card_ito.CardDiscountController/Retrieve"
	CardDiscountController_Update_FullMethodName        = "/card_service.card_ito.CardDiscountController/Update"
)

// CardDiscountControllerClient is the client API for CardDiscountController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardDiscountControllerClient interface {
	Create(ctx context.Context, in *CardDiscountRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error)
	Destroy(ctx context.Context, in *CardDiscountDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *CardDiscountListRequest, opts ...grpc.CallOption) (*CardDiscountListResponse, error)
	Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardDiscountOptionResponse, error)
	PartialUpdate(ctx context.Context, in *CardDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error)
	Retrieve(ctx context.Context, in *CardDiscountRetrieveRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error)
	Update(ctx context.Context, in *CardDiscountRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error)
}

type cardDiscountControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardDiscountControllerClient(cc grpc.ClientConnInterface) CardDiscountControllerClient {
	return &cardDiscountControllerClient{cc}
}

func (c *cardDiscountControllerClient) Create(ctx context.Context, in *CardDiscountRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error) {
	out := new(CardDiscountResponse)
	err := c.cc.Invoke(ctx, CardDiscountController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDiscountControllerClient) Destroy(ctx context.Context, in *CardDiscountDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CardDiscountController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDiscountControllerClient) List(ctx context.Context, in *CardDiscountListRequest, opts ...grpc.CallOption) (*CardDiscountListResponse, error) {
	out := new(CardDiscountListResponse)
	err := c.cc.Invoke(ctx, CardDiscountController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDiscountControllerClient) Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardDiscountOptionResponse, error) {
	out := new(CardDiscountOptionResponse)
	err := c.cc.Invoke(ctx, CardDiscountController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDiscountControllerClient) PartialUpdate(ctx context.Context, in *CardDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error) {
	out := new(CardDiscountResponse)
	err := c.cc.Invoke(ctx, CardDiscountController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDiscountControllerClient) Retrieve(ctx context.Context, in *CardDiscountRetrieveRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error) {
	out := new(CardDiscountResponse)
	err := c.cc.Invoke(ctx, CardDiscountController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDiscountControllerClient) Update(ctx context.Context, in *CardDiscountRequest, opts ...grpc.CallOption) (*CardDiscountResponse, error) {
	out := new(CardDiscountResponse)
	err := c.cc.Invoke(ctx, CardDiscountController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardDiscountControllerServer is the server API for CardDiscountController service.
// All implementations must embed UnimplementedCardDiscountControllerServer
// for forward compatibility
type CardDiscountControllerServer interface {
	Create(context.Context, *CardDiscountRequest) (*CardDiscountResponse, error)
	Destroy(context.Context, *CardDiscountDestroyRequest) (*empty.Empty, error)
	List(context.Context, *CardDiscountListRequest) (*CardDiscountListResponse, error)
	Options(context.Context, *OptionRequest) (*CardDiscountOptionResponse, error)
	PartialUpdate(context.Context, *CardDiscountPartialUpdateRequest) (*CardDiscountResponse, error)
	Retrieve(context.Context, *CardDiscountRetrieveRequest) (*CardDiscountResponse, error)
	Update(context.Context, *CardDiscountRequest) (*CardDiscountResponse, error)
	mustEmbedUnimplementedCardDiscountControllerServer()
}

// UnimplementedCardDiscountControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardDiscountControllerServer struct {
}

func (UnimplementedCardDiscountControllerServer) Create(context.Context, *CardDiscountRequest) (*CardDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardDiscountControllerServer) Destroy(context.Context, *CardDiscountDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardDiscountControllerServer) List(context.Context, *CardDiscountListRequest) (*CardDiscountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardDiscountControllerServer) Options(context.Context, *OptionRequest) (*CardDiscountOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedCardDiscountControllerServer) PartialUpdate(context.Context, *CardDiscountPartialUpdateRequest) (*CardDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardDiscountControllerServer) Retrieve(context.Context, *CardDiscountRetrieveRequest) (*CardDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardDiscountControllerServer) Update(context.Context, *CardDiscountRequest) (*CardDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardDiscountControllerServer) mustEmbedUnimplementedCardDiscountControllerServer() {
}

// UnsafeCardDiscountControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardDiscountControllerServer will
// result in compilation errors.
type UnsafeCardDiscountControllerServer interface {
	mustEmbedUnimplementedCardDiscountControllerServer()
}

func RegisterCardDiscountControllerServer(s grpc.ServiceRegistrar, srv CardDiscountControllerServer) {
	s.RegisterService(&CardDiscountController_ServiceDesc, srv)
}

func _CardDiscountController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDiscountControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDiscountController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDiscountControllerServer).Create(ctx, req.(*CardDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardDiscountController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDiscountDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDiscountControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDiscountController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDiscountControllerServer).Destroy(ctx, req.(*CardDiscountDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardDiscountController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDiscountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDiscountControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDiscountController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDiscountControllerServer).List(ctx, req.(*CardDiscountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardDiscountController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDiscountControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDiscountController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDiscountControllerServer).Options(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardDiscountController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDiscountPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDiscountControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDiscountController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDiscountControllerServer).PartialUpdate(ctx, req.(*CardDiscountPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardDiscountController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDiscountRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDiscountControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDiscountController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDiscountControllerServer).Retrieve(ctx, req.(*CardDiscountRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardDiscountController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDiscountControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDiscountController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDiscountControllerServer).Update(ctx, req.(*CardDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardDiscountController_ServiceDesc is the grpc.ServiceDesc for CardDiscountController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardDiscountController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardDiscountController",
	HandlerType: (*CardDiscountControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardDiscountController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardDiscountController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardDiscountController_List_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _CardDiscountController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardDiscountController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardDiscountController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardDiscountController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardFullDiscountController_Create_FullMethodName        = "/card_service.card_ito.CardFullDiscountController/Create"
	CardFullDiscountController_Destroy_FullMethodName       = "/card_service.card_ito.CardFullDiscountController/Destroy"
	CardFullDiscountController_List_FullMethodName          = "/card_service.card_ito.CardFullDiscountController/List"
	CardFullDiscountController_Options_FullMethodName       = "/card_service.card_ito.CardFullDiscountController/Options"
	CardFullDiscountController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardFullDiscountController/PartialUpdate"
	CardFullDiscountController_Retrieve_FullMethodName      = "/card_service.card_ito.CardFullDiscountController/Retrieve"
	CardFullDiscountController_Update_FullMethodName        = "/card_service.card_ito.CardFullDiscountController/Update"
)

// CardFullDiscountControllerClient is the client API for CardFullDiscountController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardFullDiscountControllerClient interface {
	Create(ctx context.Context, in *CardFullDiscountRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error)
	Destroy(ctx context.Context, in *CardFullDiscountDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *CardFullDiscountListRequest, opts ...grpc.CallOption) (*CardFullDiscountListResponse, error)
	Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardFullDiscountOptionResponse, error)
	PartialUpdate(ctx context.Context, in *CardFullDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error)
	Retrieve(ctx context.Context, in *CardFullDiscountRetrieveRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error)
	Update(ctx context.Context, in *CardFullDiscountRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error)
}

type cardFullDiscountControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardFullDiscountControllerClient(cc grpc.ClientConnInterface) CardFullDiscountControllerClient {
	return &cardFullDiscountControllerClient{cc}
}

func (c *cardFullDiscountControllerClient) Create(ctx context.Context, in *CardFullDiscountRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error) {
	out := new(CardFullDiscountResponse)
	err := c.cc.Invoke(ctx, CardFullDiscountController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardFullDiscountControllerClient) Destroy(ctx context.Context, in *CardFullDiscountDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CardFullDiscountController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardFullDiscountControllerClient) List(ctx context.Context, in *CardFullDiscountListRequest, opts ...grpc.CallOption) (*CardFullDiscountListResponse, error) {
	out := new(CardFullDiscountListResponse)
	err := c.cc.Invoke(ctx, CardFullDiscountController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardFullDiscountControllerClient) Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardFullDiscountOptionResponse, error) {
	out := new(CardFullDiscountOptionResponse)
	err := c.cc.Invoke(ctx, CardFullDiscountController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardFullDiscountControllerClient) PartialUpdate(ctx context.Context, in *CardFullDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error) {
	out := new(CardFullDiscountResponse)
	err := c.cc.Invoke(ctx, CardFullDiscountController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardFullDiscountControllerClient) Retrieve(ctx context.Context, in *CardFullDiscountRetrieveRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error) {
	out := new(CardFullDiscountResponse)
	err := c.cc.Invoke(ctx, CardFullDiscountController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardFullDiscountControllerClient) Update(ctx context.Context, in *CardFullDiscountRequest, opts ...grpc.CallOption) (*CardFullDiscountResponse, error) {
	out := new(CardFullDiscountResponse)
	err := c.cc.Invoke(ctx, CardFullDiscountController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardFullDiscountControllerServer is the server API for CardFullDiscountController service.
// All implementations must embed UnimplementedCardFullDiscountControllerServer
// for forward compatibility
type CardFullDiscountControllerServer interface {
	Create(context.Context, *CardFullDiscountRequest) (*CardFullDiscountResponse, error)
	Destroy(context.Context, *CardFullDiscountDestroyRequest) (*empty.Empty, error)
	List(context.Context, *CardFullDiscountListRequest) (*CardFullDiscountListResponse, error)
	Options(context.Context, *OptionRequest) (*CardFullDiscountOptionResponse, error)
	PartialUpdate(context.Context, *CardFullDiscountPartialUpdateRequest) (*CardFullDiscountResponse, error)
	Retrieve(context.Context, *CardFullDiscountRetrieveRequest) (*CardFullDiscountResponse, error)
	Update(context.Context, *CardFullDiscountRequest) (*CardFullDiscountResponse, error)
	mustEmbedUnimplementedCardFullDiscountControllerServer()
}

// UnimplementedCardFullDiscountControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardFullDiscountControllerServer struct {
}

func (UnimplementedCardFullDiscountControllerServer) Create(context.Context, *CardFullDiscountRequest) (*CardFullDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardFullDiscountControllerServer) Destroy(context.Context, *CardFullDiscountDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardFullDiscountControllerServer) List(context.Context, *CardFullDiscountListRequest) (*CardFullDiscountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardFullDiscountControllerServer) Options(context.Context, *OptionRequest) (*CardFullDiscountOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedCardFullDiscountControllerServer) PartialUpdate(context.Context, *CardFullDiscountPartialUpdateRequest) (*CardFullDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardFullDiscountControllerServer) Retrieve(context.Context, *CardFullDiscountRetrieveRequest) (*CardFullDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardFullDiscountControllerServer) Update(context.Context, *CardFullDiscountRequest) (*CardFullDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardFullDiscountControllerServer) mustEmbedUnimplementedCardFullDiscountControllerServer() {
}

// UnsafeCardFullDiscountControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardFullDiscountControllerServer will
// result in compilation errors.
type UnsafeCardFullDiscountControllerServer interface {
	mustEmbedUnimplementedCardFullDiscountControllerServer()
}

func RegisterCardFullDiscountControllerServer(s grpc.ServiceRegistrar, srv CardFullDiscountControllerServer) {
	s.RegisterService(&CardFullDiscountController_ServiceDesc, srv)
}

func _CardFullDiscountController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardFullDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardFullDiscountControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardFullDiscountController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardFullDiscountControllerServer).Create(ctx, req.(*CardFullDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardFullDiscountController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardFullDiscountDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardFullDiscountControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardFullDiscountController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardFullDiscountControllerServer).Destroy(ctx, req.(*CardFullDiscountDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardFullDiscountController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardFullDiscountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardFullDiscountControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardFullDiscountController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardFullDiscountControllerServer).List(ctx, req.(*CardFullDiscountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardFullDiscountController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardFullDiscountControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardFullDiscountController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardFullDiscountControllerServer).Options(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardFullDiscountController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardFullDiscountPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardFullDiscountControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardFullDiscountController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardFullDiscountControllerServer).PartialUpdate(ctx, req.(*CardFullDiscountPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardFullDiscountController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardFullDiscountRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardFullDiscountControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardFullDiscountController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardFullDiscountControllerServer).Retrieve(ctx, req.(*CardFullDiscountRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardFullDiscountController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardFullDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardFullDiscountControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardFullDiscountController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardFullDiscountControllerServer).Update(ctx, req.(*CardFullDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardFullDiscountController_ServiceDesc is the grpc.ServiceDesc for CardFullDiscountController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardFullDiscountController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardFullDiscountController",
	HandlerType: (*CardFullDiscountControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardFullDiscountController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardFullDiscountController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardFullDiscountController_List_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _CardFullDiscountController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardFullDiscountController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardFullDiscountController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardFullDiscountController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardMemberController_Create_FullMethodName        = "/card_service.card_ito.CardMemberController/Create"
	CardMemberController_Destroy_FullMethodName       = "/card_service.card_ito.CardMemberController/Destroy"
	CardMemberController_List_FullMethodName          = "/card_service.card_ito.CardMemberController/List"
	CardMemberController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardMemberController/PartialUpdate"
	CardMemberController_Retrieve_FullMethodName      = "/card_service.card_ito.CardMemberController/Retrieve"
	CardMemberController_Update_FullMethodName        = "/card_service.card_ito.CardMemberController/Update"
)

// CardMemberControllerClient is the client API for CardMemberController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardMemberControllerClient interface {
	Create(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
	Destroy(ctx context.Context, in *CardMemberDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *CardMemberListRequest, opts ...grpc.CallOption) (*CardMemberListResponse, error)
	PartialUpdate(ctx context.Context, in *CardMemberPartialUpdateRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
	Retrieve(ctx context.Context, in *CardMemberRetrieveRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
	Update(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error)
}

type cardMemberControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardMemberControllerClient(cc grpc.ClientConnInterface) CardMemberControllerClient {
	return &cardMemberControllerClient{cc}
}

func (c *cardMemberControllerClient) Create(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) Destroy(ctx context.Context, in *CardMemberDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CardMemberController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) List(ctx context.Context, in *CardMemberListRequest, opts ...grpc.CallOption) (*CardMemberListResponse, error) {
	out := new(CardMemberListResponse)
	err := c.cc.Invoke(ctx, CardMemberController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) PartialUpdate(ctx context.Context, in *CardMemberPartialUpdateRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) Retrieve(ctx context.Context, in *CardMemberRetrieveRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardMemberControllerClient) Update(ctx context.Context, in *CardMemberRequest, opts ...grpc.CallOption) (*CardMemberResponse, error) {
	out := new(CardMemberResponse)
	err := c.cc.Invoke(ctx, CardMemberController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardMemberControllerServer is the server API for CardMemberController service.
// All implementations must embed UnimplementedCardMemberControllerServer
// for forward compatibility
type CardMemberControllerServer interface {
	Create(context.Context, *CardMemberRequest) (*CardMemberResponse, error)
	Destroy(context.Context, *CardMemberDestroyRequest) (*empty.Empty, error)
	List(context.Context, *CardMemberListRequest) (*CardMemberListResponse, error)
	PartialUpdate(context.Context, *CardMemberPartialUpdateRequest) (*CardMemberResponse, error)
	Retrieve(context.Context, *CardMemberRetrieveRequest) (*CardMemberResponse, error)
	Update(context.Context, *CardMemberRequest) (*CardMemberResponse, error)
	mustEmbedUnimplementedCardMemberControllerServer()
}

// UnimplementedCardMemberControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardMemberControllerServer struct {
}

func (UnimplementedCardMemberControllerServer) Create(context.Context, *CardMemberRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardMemberControllerServer) Destroy(context.Context, *CardMemberDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardMemberControllerServer) List(context.Context, *CardMemberListRequest) (*CardMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardMemberControllerServer) PartialUpdate(context.Context, *CardMemberPartialUpdateRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardMemberControllerServer) Retrieve(context.Context, *CardMemberRetrieveRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardMemberControllerServer) Update(context.Context, *CardMemberRequest) (*CardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardMemberControllerServer) mustEmbedUnimplementedCardMemberControllerServer() {}

// UnsafeCardMemberControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardMemberControllerServer will
// result in compilation errors.
type UnsafeCardMemberControllerServer interface {
	mustEmbedUnimplementedCardMemberControllerServer()
}

func RegisterCardMemberControllerServer(s grpc.ServiceRegistrar, srv CardMemberControllerServer) {
	s.RegisterService(&CardMemberController_ServiceDesc, srv)
}

func _CardMemberController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Create(ctx, req.(*CardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Destroy(ctx, req.(*CardMemberDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).List(ctx, req.(*CardMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).PartialUpdate(ctx, req.(*CardMemberPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Retrieve(ctx, req.(*CardMemberRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardMemberController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardMemberControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardMemberController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardMemberControllerServer).Update(ctx, req.(*CardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardMemberController_ServiceDesc is the grpc.ServiceDesc for CardMemberController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardMemberController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardMemberController",
	HandlerType: (*CardMemberControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardMemberController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardMemberController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardMemberController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardMemberController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardMemberController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardMemberController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardNutController_Create_FullMethodName        = "/card_service.card_ito.CardNutController/Create"
	CardNutController_Destroy_FullMethodName       = "/card_service.card_ito.CardNutController/Destroy"
	CardNutController_List_FullMethodName          = "/card_service.card_ito.CardNutController/List"
	CardNutController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardNutController/PartialUpdate"
	CardNutController_Retrieve_FullMethodName      = "/card_service.card_ito.CardNutController/Retrieve"
	CardNutController_Update_FullMethodName        = "/card_service.card_ito.CardNutController/Update"
)

// CardNutControllerClient is the client API for CardNutController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardNutControllerClient interface {
	Create(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
	Destroy(ctx context.Context, in *CardNutDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *CardNutListRequest, opts ...grpc.CallOption) (*CardNutListResponse, error)
	PartialUpdate(ctx context.Context, in *CardNutPartialUpdateRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
	Retrieve(ctx context.Context, in *CardNutRetrieveRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
	Update(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error)
}

type cardNutControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardNutControllerClient(cc grpc.ClientConnInterface) CardNutControllerClient {
	return &cardNutControllerClient{cc}
}

func (c *cardNutControllerClient) Create(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) Destroy(ctx context.Context, in *CardNutDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CardNutController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) List(ctx context.Context, in *CardNutListRequest, opts ...grpc.CallOption) (*CardNutListResponse, error) {
	out := new(CardNutListResponse)
	err := c.cc.Invoke(ctx, CardNutController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) PartialUpdate(ctx context.Context, in *CardNutPartialUpdateRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) Retrieve(ctx context.Context, in *CardNutRetrieveRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardNutControllerClient) Update(ctx context.Context, in *CardNutRequest, opts ...grpc.CallOption) (*CardNutResponse, error) {
	out := new(CardNutResponse)
	err := c.cc.Invoke(ctx, CardNutController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardNutControllerServer is the server API for CardNutController service.
// All implementations must embed UnimplementedCardNutControllerServer
// for forward compatibility
type CardNutControllerServer interface {
	Create(context.Context, *CardNutRequest) (*CardNutResponse, error)
	Destroy(context.Context, *CardNutDestroyRequest) (*empty.Empty, error)
	List(context.Context, *CardNutListRequest) (*CardNutListResponse, error)
	PartialUpdate(context.Context, *CardNutPartialUpdateRequest) (*CardNutResponse, error)
	Retrieve(context.Context, *CardNutRetrieveRequest) (*CardNutResponse, error)
	Update(context.Context, *CardNutRequest) (*CardNutResponse, error)
	mustEmbedUnimplementedCardNutControllerServer()
}

// UnimplementedCardNutControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardNutControllerServer struct {
}

func (UnimplementedCardNutControllerServer) Create(context.Context, *CardNutRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardNutControllerServer) Destroy(context.Context, *CardNutDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardNutControllerServer) List(context.Context, *CardNutListRequest) (*CardNutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardNutControllerServer) PartialUpdate(context.Context, *CardNutPartialUpdateRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardNutControllerServer) Retrieve(context.Context, *CardNutRetrieveRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardNutControllerServer) Update(context.Context, *CardNutRequest) (*CardNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardNutControllerServer) mustEmbedUnimplementedCardNutControllerServer() {}

// UnsafeCardNutControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardNutControllerServer will
// result in compilation errors.
type UnsafeCardNutControllerServer interface {
	mustEmbedUnimplementedCardNutControllerServer()
}

func RegisterCardNutControllerServer(s grpc.ServiceRegistrar, srv CardNutControllerServer) {
	s.RegisterService(&CardNutController_ServiceDesc, srv)
}

func _CardNutController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Create(ctx, req.(*CardNutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Destroy(ctx, req.(*CardNutDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).List(ctx, req.(*CardNutListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).PartialUpdate(ctx, req.(*CardNutPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Retrieve(ctx, req.(*CardNutRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardNutController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardNutControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardNutController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardNutControllerServer).Update(ctx, req.(*CardNutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardNutController_ServiceDesc is the grpc.ServiceDesc for CardNutController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardNutController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardNutController",
	HandlerType: (*CardNutControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardNutController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardNutController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardNutController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardNutController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardNutController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardNutController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardRenewController_Create_FullMethodName        = "/card_service.card_ito.CardRenewController/Create"
	CardRenewController_Destroy_FullMethodName       = "/card_service.card_ito.CardRenewController/Destroy"
	CardRenewController_List_FullMethodName          = "/card_service.card_ito.CardRenewController/List"
	CardRenewController_Options_FullMethodName       = "/card_service.card_ito.CardRenewController/Options"
	CardRenewController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardRenewController/PartialUpdate"
	CardRenewController_Retrieve_FullMethodName      = "/card_service.card_ito.CardRenewController/Retrieve"
	CardRenewController_Update_FullMethodName        = "/card_service.card_ito.CardRenewController/Update"
)

// CardRenewControllerClient is the client API for CardRenewController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardRenewControllerClient interface {
	Create(ctx context.Context, in *CardRenewRequest, opts ...grpc.CallOption) (*CardRenewResponse, error)
	Destroy(ctx context.Context, in *CardRenewDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *CardRenewListRequest, opts ...grpc.CallOption) (*CardRenewListResponse, error)
	Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardRenewOptionResponse, error)
	PartialUpdate(ctx context.Context, in *CardRenewPartialUpdateRequest, opts ...grpc.CallOption) (*CardRenewResponse, error)
	Retrieve(ctx context.Context, in *CardRenewRetrieveRequest, opts ...grpc.CallOption) (*CardRenewResponse, error)
	Update(ctx context.Context, in *CardRenewRequest, opts ...grpc.CallOption) (*CardRenewResponse, error)
}

type cardRenewControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardRenewControllerClient(cc grpc.ClientConnInterface) CardRenewControllerClient {
	return &cardRenewControllerClient{cc}
}

func (c *cardRenewControllerClient) Create(ctx context.Context, in *CardRenewRequest, opts ...grpc.CallOption) (*CardRenewResponse, error) {
	out := new(CardRenewResponse)
	err := c.cc.Invoke(ctx, CardRenewController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRenewControllerClient) Destroy(ctx context.Context, in *CardRenewDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CardRenewController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRenewControllerClient) List(ctx context.Context, in *CardRenewListRequest, opts ...grpc.CallOption) (*CardRenewListResponse, error) {
	out := new(CardRenewListResponse)
	err := c.cc.Invoke(ctx, CardRenewController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRenewControllerClient) Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardRenewOptionResponse, error) {
	out := new(CardRenewOptionResponse)
	err := c.cc.Invoke(ctx, CardRenewController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRenewControllerClient) PartialUpdate(ctx context.Context, in *CardRenewPartialUpdateRequest, opts ...grpc.CallOption) (*CardRenewResponse, error) {
	out := new(CardRenewResponse)
	err := c.cc.Invoke(ctx, CardRenewController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRenewControllerClient) Retrieve(ctx context.Context, in *CardRenewRetrieveRequest, opts ...grpc.CallOption) (*CardRenewResponse, error) {
	out := new(CardRenewResponse)
	err := c.cc.Invoke(ctx, CardRenewController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRenewControllerClient) Update(ctx context.Context, in *CardRenewRequest, opts ...grpc.CallOption) (*CardRenewResponse, error) {
	out := new(CardRenewResponse)
	err := c.cc.Invoke(ctx, CardRenewController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardRenewControllerServer is the server API for CardRenewController service.
// All implementations must embed UnimplementedCardRenewControllerServer
// for forward compatibility
type CardRenewControllerServer interface {
	Create(context.Context, *CardRenewRequest) (*CardRenewResponse, error)
	Destroy(context.Context, *CardRenewDestroyRequest) (*empty.Empty, error)
	List(context.Context, *CardRenewListRequest) (*CardRenewListResponse, error)
	Options(context.Context, *OptionRequest) (*CardRenewOptionResponse, error)
	PartialUpdate(context.Context, *CardRenewPartialUpdateRequest) (*CardRenewResponse, error)
	Retrieve(context.Context, *CardRenewRetrieveRequest) (*CardRenewResponse, error)
	Update(context.Context, *CardRenewRequest) (*CardRenewResponse, error)
	mustEmbedUnimplementedCardRenewControllerServer()
}

// UnimplementedCardRenewControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardRenewControllerServer struct {
}

func (UnimplementedCardRenewControllerServer) Create(context.Context, *CardRenewRequest) (*CardRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardRenewControllerServer) Destroy(context.Context, *CardRenewDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardRenewControllerServer) List(context.Context, *CardRenewListRequest) (*CardRenewListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardRenewControllerServer) Options(context.Context, *OptionRequest) (*CardRenewOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedCardRenewControllerServer) PartialUpdate(context.Context, *CardRenewPartialUpdateRequest) (*CardRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardRenewControllerServer) Retrieve(context.Context, *CardRenewRetrieveRequest) (*CardRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardRenewControllerServer) Update(context.Context, *CardRenewRequest) (*CardRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardRenewControllerServer) mustEmbedUnimplementedCardRenewControllerServer() {}

// UnsafeCardRenewControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardRenewControllerServer will
// result in compilation errors.
type UnsafeCardRenewControllerServer interface {
	mustEmbedUnimplementedCardRenewControllerServer()
}

func RegisterCardRenewControllerServer(s grpc.ServiceRegistrar, srv CardRenewControllerServer) {
	s.RegisterService(&CardRenewController_ServiceDesc, srv)
}

func _CardRenewController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRenewControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRenewController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRenewControllerServer).Create(ctx, req.(*CardRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRenewController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRenewDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRenewControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRenewController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRenewControllerServer).Destroy(ctx, req.(*CardRenewDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRenewController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRenewListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRenewControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRenewController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRenewControllerServer).List(ctx, req.(*CardRenewListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRenewController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRenewControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRenewController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRenewControllerServer).Options(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRenewController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRenewPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRenewControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRenewController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRenewControllerServer).PartialUpdate(ctx, req.(*CardRenewPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRenewController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRenewRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRenewControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRenewController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRenewControllerServer).Retrieve(ctx, req.(*CardRenewRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRenewController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRenewControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRenewController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRenewControllerServer).Update(ctx, req.(*CardRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardRenewController_ServiceDesc is the grpc.ServiceDesc for CardRenewController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardRenewController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardRenewController",
	HandlerType: (*CardRenewControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardRenewController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardRenewController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardRenewController_List_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _CardRenewController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardRenewController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardRenewController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardRenewController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardRepairController_Create_FullMethodName        = "/card_service.card_ito.CardRepairController/Create"
	CardRepairController_Destroy_FullMethodName       = "/card_service.card_ito.CardRepairController/Destroy"
	CardRepairController_List_FullMethodName          = "/card_service.card_ito.CardRepairController/List"
	CardRepairController_Options_FullMethodName       = "/card_service.card_ito.CardRepairController/Options"
	CardRepairController_PartialUpdate_FullMethodName = "/card_service.card_ito.CardRepairController/PartialUpdate"
	CardRepairController_Retrieve_FullMethodName      = "/card_service.card_ito.CardRepairController/Retrieve"
	CardRepairController_Update_FullMethodName        = "/card_service.card_ito.CardRepairController/Update"
)

// CardRepairControllerClient is the client API for CardRepairController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardRepairControllerClient interface {
	Create(ctx context.Context, in *CardRepairRequest, opts ...grpc.CallOption) (*CardRepairResponse, error)
	Destroy(ctx context.Context, in *CardRepairDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *CardRepairListRequest, opts ...grpc.CallOption) (*CardRepairListResponse, error)
	Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardRepairOptionResponse, error)
	PartialUpdate(ctx context.Context, in *CardRepairPartialUpdateRequest, opts ...grpc.CallOption) (*CardRepairResponse, error)
	Retrieve(ctx context.Context, in *CardRepairRetrieveRequest, opts ...grpc.CallOption) (*CardRepairResponse, error)
	Update(ctx context.Context, in *CardRepairRequest, opts ...grpc.CallOption) (*CardRepairResponse, error)
}

type cardRepairControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardRepairControllerClient(cc grpc.ClientConnInterface) CardRepairControllerClient {
	return &cardRepairControllerClient{cc}
}

func (c *cardRepairControllerClient) Create(ctx context.Context, in *CardRepairRequest, opts ...grpc.CallOption) (*CardRepairResponse, error) {
	out := new(CardRepairResponse)
	err := c.cc.Invoke(ctx, CardRepairController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRepairControllerClient) Destroy(ctx context.Context, in *CardRepairDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CardRepairController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRepairControllerClient) List(ctx context.Context, in *CardRepairListRequest, opts ...grpc.CallOption) (*CardRepairListResponse, error) {
	out := new(CardRepairListResponse)
	err := c.cc.Invoke(ctx, CardRepairController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRepairControllerClient) Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*CardRepairOptionResponse, error) {
	out := new(CardRepairOptionResponse)
	err := c.cc.Invoke(ctx, CardRepairController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRepairControllerClient) PartialUpdate(ctx context.Context, in *CardRepairPartialUpdateRequest, opts ...grpc.CallOption) (*CardRepairResponse, error) {
	out := new(CardRepairResponse)
	err := c.cc.Invoke(ctx, CardRepairController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRepairControllerClient) Retrieve(ctx context.Context, in *CardRepairRetrieveRequest, opts ...grpc.CallOption) (*CardRepairResponse, error) {
	out := new(CardRepairResponse)
	err := c.cc.Invoke(ctx, CardRepairController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardRepairControllerClient) Update(ctx context.Context, in *CardRepairRequest, opts ...grpc.CallOption) (*CardRepairResponse, error) {
	out := new(CardRepairResponse)
	err := c.cc.Invoke(ctx, CardRepairController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardRepairControllerServer is the server API for CardRepairController service.
// All implementations must embed UnimplementedCardRepairControllerServer
// for forward compatibility
type CardRepairControllerServer interface {
	Create(context.Context, *CardRepairRequest) (*CardRepairResponse, error)
	Destroy(context.Context, *CardRepairDestroyRequest) (*empty.Empty, error)
	List(context.Context, *CardRepairListRequest) (*CardRepairListResponse, error)
	Options(context.Context, *OptionRequest) (*CardRepairOptionResponse, error)
	PartialUpdate(context.Context, *CardRepairPartialUpdateRequest) (*CardRepairResponse, error)
	Retrieve(context.Context, *CardRepairRetrieveRequest) (*CardRepairResponse, error)
	Update(context.Context, *CardRepairRequest) (*CardRepairResponse, error)
	mustEmbedUnimplementedCardRepairControllerServer()
}

// UnimplementedCardRepairControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardRepairControllerServer struct {
}

func (UnimplementedCardRepairControllerServer) Create(context.Context, *CardRepairRequest) (*CardRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardRepairControllerServer) Destroy(context.Context, *CardRepairDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCardRepairControllerServer) List(context.Context, *CardRepairListRequest) (*CardRepairListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardRepairControllerServer) Options(context.Context, *OptionRequest) (*CardRepairOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedCardRepairControllerServer) PartialUpdate(context.Context, *CardRepairPartialUpdateRequest) (*CardRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCardRepairControllerServer) Retrieve(context.Context, *CardRepairRetrieveRequest) (*CardRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardRepairControllerServer) Update(context.Context, *CardRepairRequest) (*CardRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardRepairControllerServer) mustEmbedUnimplementedCardRepairControllerServer() {}

// UnsafeCardRepairControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardRepairControllerServer will
// result in compilation errors.
type UnsafeCardRepairControllerServer interface {
	mustEmbedUnimplementedCardRepairControllerServer()
}

func RegisterCardRepairControllerServer(s grpc.ServiceRegistrar, srv CardRepairControllerServer) {
	s.RegisterService(&CardRepairController_ServiceDesc, srv)
}

func _CardRepairController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRepairControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRepairController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRepairControllerServer).Create(ctx, req.(*CardRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRepairController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRepairDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRepairControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRepairController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRepairControllerServer).Destroy(ctx, req.(*CardRepairDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRepairController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRepairListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRepairControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRepairController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRepairControllerServer).List(ctx, req.(*CardRepairListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRepairController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRepairControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRepairController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRepairControllerServer).Options(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRepairController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRepairPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRepairControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRepairController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRepairControllerServer).PartialUpdate(ctx, req.(*CardRepairPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRepairController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRepairRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRepairControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRepairController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRepairControllerServer).Retrieve(ctx, req.(*CardRepairRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardRepairController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRepairControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRepairController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRepairControllerServer).Update(ctx, req.(*CardRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardRepairController_ServiceDesc is the grpc.ServiceDesc for CardRepairController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardRepairController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardRepairController",
	HandlerType: (*CardRepairControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardRepairController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CardRepairController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CardRepairController_List_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _CardRepairController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CardRepairController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardRepairController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CardRepairController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}

const (
	CardTypeController_List_FullMethodName     = "/card_service.card_ito.CardTypeController/List"
	CardTypeController_Retrieve_FullMethodName = "/card_service.card_ito.CardTypeController/Retrieve"
)

// CardTypeControllerClient is the client API for CardTypeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardTypeControllerClient interface {
	List(ctx context.Context, in *CardTypeListRequest, opts ...grpc.CallOption) (*CardTypeListResponse, error)
	Retrieve(ctx context.Context, in *CardTypeRetrieveRequest, opts ...grpc.CallOption) (*CardTypeResponse, error)
}

type cardTypeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardTypeControllerClient(cc grpc.ClientConnInterface) CardTypeControllerClient {
	return &cardTypeControllerClient{cc}
}

func (c *cardTypeControllerClient) List(ctx context.Context, in *CardTypeListRequest, opts ...grpc.CallOption) (*CardTypeListResponse, error) {
	out := new(CardTypeListResponse)
	err := c.cc.Invoke(ctx, CardTypeController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardTypeControllerClient) Retrieve(ctx context.Context, in *CardTypeRetrieveRequest, opts ...grpc.CallOption) (*CardTypeResponse, error) {
	out := new(CardTypeResponse)
	err := c.cc.Invoke(ctx, CardTypeController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardTypeControllerServer is the server API for CardTypeController service.
// All implementations must embed UnimplementedCardTypeControllerServer
// for forward compatibility
type CardTypeControllerServer interface {
	List(context.Context, *CardTypeListRequest) (*CardTypeListResponse, error)
	Retrieve(context.Context, *CardTypeRetrieveRequest) (*CardTypeResponse, error)
	mustEmbedUnimplementedCardTypeControllerServer()
}

// UnimplementedCardTypeControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCardTypeControllerServer struct {
}

func (UnimplementedCardTypeControllerServer) List(context.Context, *CardTypeListRequest) (*CardTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCardTypeControllerServer) Retrieve(context.Context, *CardTypeRetrieveRequest) (*CardTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCardTypeControllerServer) mustEmbedUnimplementedCardTypeControllerServer() {}

// UnsafeCardTypeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardTypeControllerServer will
// result in compilation errors.
type UnsafeCardTypeControllerServer interface {
	mustEmbedUnimplementedCardTypeControllerServer()
}

func RegisterCardTypeControllerServer(s grpc.ServiceRegistrar, srv CardTypeControllerServer) {
	s.RegisterService(&CardTypeController_ServiceDesc, srv)
}

func _CardTypeController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardTypeControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardTypeController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardTypeControllerServer).List(ctx, req.(*CardTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardTypeController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardTypeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardTypeControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardTypeController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardTypeControllerServer).Retrieve(ctx, req.(*CardTypeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardTypeController_ServiceDesc is the grpc.ServiceDesc for CardTypeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardTypeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_service.card_ito.CardTypeController",
	HandlerType: (*CardTypeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CardTypeController_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CardTypeController_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card_ito.proto",
}
