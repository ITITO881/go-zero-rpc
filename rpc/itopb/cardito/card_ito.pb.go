// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: card_ito.proto

package cardito

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardCareDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardCareDestroyRequest) Reset() {
	*x = CardCareDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCareDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCareDestroyRequest) ProtoMessage() {}

func (x *CardCareDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCareDestroyRequest.ProtoReflect.Descriptor instead.
func (*CardCareDestroyRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{0}
}

func (x *CardCareDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardCareListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CardCareListRequest) Reset() {
	*x = CardCareListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCareListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCareListRequest) ProtoMessage() {}

func (x *CardCareListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCareListRequest.ProtoReflect.Descriptor instead.
func (*CardCareListRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{1}
}

func (x *CardCareListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type CardCareListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CardCareResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CardCareListResponse) Reset() {
	*x = CardCareListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCareListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCareListResponse) ProtoMessage() {}

func (x *CardCareListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCareListResponse.ProtoReflect.Descriptor instead.
func (*CardCareListResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{2}
}

func (x *CardCareListResponse) GetResults() []*CardCareResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CardCareListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CardCareOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnits []*LabelValueResponse       `protobuf:"bytes,1,rep,name=time_units,json=timeUnits,proto3" json:"time_units,omitempty"`
	Status    []*LabelValueResponse       `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	Types     []*LabelNumberValueResponse `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *CardCareOptionResponse) Reset() {
	*x = CardCareOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCareOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCareOptionResponse) ProtoMessage() {}

func (x *CardCareOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCareOptionResponse.ProtoReflect.Descriptor instead.
func (*CardCareOptionResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{3}
}

func (x *CardCareOptionResponse) GetTimeUnits() []*LabelValueResponse {
	if x != nil {
		return x.TimeUnits
	}
	return nil
}

func (x *CardCareOptionResponse) GetStatus() []*LabelValueResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CardCareOptionResponse) GetTypes() []*LabelNumberValueResponse {
	if x != nil {
		return x.Types
	}
	return nil
}

type CardCarePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	ExtendTimeDiff       *int32   `protobuf:"varint,6,opt,name=extend_time_diff,json=extendTimeDiff,proto3,oneof" json:"extend_time_diff,omitempty"`
	ActiveTimeDiff       *int32   `protobuf:"varint,7,opt,name=active_time_diff,json=activeTimeDiff,proto3,oneof" json:"active_time_diff,omitempty"`
	ExtendTimeUnit       string   `protobuf:"bytes,8,opt,name=extend_time_unit,json=extendTimeUnit,proto3" json:"extend_time_unit,omitempty"`
	ActiveTimeUnit       string   `protobuf:"bytes,9,opt,name=active_time_unit,json=activeTimeUnit,proto3" json:"active_time_unit,omitempty"`
	IsValid              bool     `protobuf:"varint,10,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark               *string  `protobuf:"bytes,11,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardCarePartialUpdateRequest) Reset() {
	*x = CardCarePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCarePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCarePartialUpdateRequest) ProtoMessage() {}

func (x *CardCarePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCarePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*CardCarePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{4}
}

func (x *CardCarePartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardCarePartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardCarePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *CardCarePartialUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardCarePartialUpdateRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CardCarePartialUpdateRequest) GetExtendTimeDiff() int32 {
	if x != nil && x.ExtendTimeDiff != nil {
		return *x.ExtendTimeDiff
	}
	return 0
}

func (x *CardCarePartialUpdateRequest) GetActiveTimeDiff() int32 {
	if x != nil && x.ActiveTimeDiff != nil {
		return *x.ActiveTimeDiff
	}
	return 0
}

func (x *CardCarePartialUpdateRequest) GetExtendTimeUnit() string {
	if x != nil {
		return x.ExtendTimeUnit
	}
	return ""
}

func (x *CardCarePartialUpdateRequest) GetActiveTimeUnit() string {
	if x != nil {
		return x.ActiveTimeUnit
	}
	return ""
}

func (x *CardCarePartialUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardCarePartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardCareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters        string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Name           *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type           int32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	ExtendTimeDiff *int32  `protobuf:"varint,5,opt,name=extend_time_diff,json=extendTimeDiff,proto3,oneof" json:"extend_time_diff,omitempty"`
	ActiveTimeDiff *int32  `protobuf:"varint,6,opt,name=active_time_diff,json=activeTimeDiff,proto3,oneof" json:"active_time_diff,omitempty"`
	ExtendTimeUnit string  `protobuf:"bytes,7,opt,name=extend_time_unit,json=extendTimeUnit,proto3" json:"extend_time_unit,omitempty"`
	ActiveTimeUnit string  `protobuf:"bytes,8,opt,name=active_time_unit,json=activeTimeUnit,proto3" json:"active_time_unit,omitempty"`
	IsValid        bool    `protobuf:"varint,9,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark         *string `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardCareRequest) Reset() {
	*x = CardCareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCareRequest) ProtoMessage() {}

func (x *CardCareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCareRequest.ProtoReflect.Descriptor instead.
func (*CardCareRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{5}
}

func (x *CardCareRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardCareRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardCareRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardCareRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CardCareRequest) GetExtendTimeDiff() int32 {
	if x != nil && x.ExtendTimeDiff != nil {
		return *x.ExtendTimeDiff
	}
	return 0
}

func (x *CardCareRequest) GetActiveTimeDiff() int32 {
	if x != nil && x.ActiveTimeDiff != nil {
		return *x.ActiveTimeDiff
	}
	return 0
}

func (x *CardCareRequest) GetExtendTimeUnit() string {
	if x != nil {
		return x.ExtendTimeUnit
	}
	return ""
}

func (x *CardCareRequest) GetActiveTimeUnit() string {
	if x != nil {
		return x.ActiveTimeUnit
	}
	return ""
}

func (x *CardCareRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardCareRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardCareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type           int32   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	ExtendTimeDiff *int32  `protobuf:"varint,4,opt,name=extend_time_diff,json=extendTimeDiff,proto3,oneof" json:"extend_time_diff,omitempty"`
	ActiveTimeDiff *int32  `protobuf:"varint,5,opt,name=active_time_diff,json=activeTimeDiff,proto3,oneof" json:"active_time_diff,omitempty"`
	ExtendTimeUnit string  `protobuf:"bytes,6,opt,name=extend_time_unit,json=extendTimeUnit,proto3" json:"extend_time_unit,omitempty"`
	ActiveTimeUnit string  `protobuf:"bytes,7,opt,name=active_time_unit,json=activeTimeUnit,proto3" json:"active_time_unit,omitempty"`
	IsValid        bool    `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark         *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CreateTime     string  `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *CardCareResponse) Reset() {
	*x = CardCareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCareResponse) ProtoMessage() {}

func (x *CardCareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCareResponse.ProtoReflect.Descriptor instead.
func (*CardCareResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{6}
}

func (x *CardCareResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardCareResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardCareResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CardCareResponse) GetExtendTimeDiff() int32 {
	if x != nil && x.ExtendTimeDiff != nil {
		return *x.ExtendTimeDiff
	}
	return 0
}

func (x *CardCareResponse) GetActiveTimeDiff() int32 {
	if x != nil && x.ActiveTimeDiff != nil {
		return *x.ActiveTimeDiff
	}
	return 0
}

func (x *CardCareResponse) GetExtendTimeUnit() string {
	if x != nil {
		return x.ExtendTimeUnit
	}
	return ""
}

func (x *CardCareResponse) GetActiveTimeUnit() string {
	if x != nil {
		return x.ActiveTimeUnit
	}
	return ""
}

func (x *CardCareResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardCareResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CardCareResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CardCareResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CardCareRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardCareRetrieveRequest) Reset() {
	*x = CardCareRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCareRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCareRetrieveRequest) ProtoMessage() {}

func (x *CardCareRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCareRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CardCareRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{7}
}

func (x *CardCareRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardMemberDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardMemberDestroyRequest) Reset() {
	*x = CardMemberDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMemberDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMemberDestroyRequest) ProtoMessage() {}

func (x *CardMemberDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMemberDestroyRequest.ProtoReflect.Descriptor instead.
func (*CardMemberDestroyRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{8}
}

func (x *CardMemberDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardMemberListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,13,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CardMemberListRequest) Reset() {
	*x = CardMemberListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMemberListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMemberListRequest) ProtoMessage() {}

func (x *CardMemberListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMemberListRequest.ProtoReflect.Descriptor instead.
func (*CardMemberListRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{9}
}

func (x *CardMemberListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type CardMemberListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CardMemberResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CardMemberListResponse) Reset() {
	*x = CardMemberListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMemberListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMemberListResponse) ProtoMessage() {}

func (x *CardMemberListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMemberListResponse.ProtoReflect.Descriptor instead.
func (*CardMemberListResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{10}
}

func (x *CardMemberListResponse) GetResults() []*CardMemberResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CardMemberListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CardMemberPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MinPoint             *int32   `protobuf:"varint,4,opt,name=min_point,json=minPoint,proto3,oneof" json:"min_point,omitempty"`
	KeepalivePoint       *int32   `protobuf:"varint,5,opt,name=keepalive_point,json=keepalivePoint,proto3,oneof" json:"keepalive_point,omitempty"`
	Term                 int32    `protobuf:"varint,6,opt,name=term,proto3" json:"term,omitempty"`
	IsValid              bool     `protobuf:"varint,7,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Description          *string  `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Filters              string   `protobuf:"bytes,14,opt,name=filters,proto3" json:"filters,omitempty"`
	Remark               *string  `protobuf:"bytes,16,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardMemberPartialUpdateRequest) Reset() {
	*x = CardMemberPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMemberPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMemberPartialUpdateRequest) ProtoMessage() {}

func (x *CardMemberPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMemberPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*CardMemberPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{11}
}

func (x *CardMemberPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardMemberPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *CardMemberPartialUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardMemberPartialUpdateRequest) GetMinPoint() int32 {
	if x != nil && x.MinPoint != nil {
		return *x.MinPoint
	}
	return 0
}

func (x *CardMemberPartialUpdateRequest) GetKeepalivePoint() int32 {
	if x != nil && x.KeepalivePoint != nil {
		return *x.KeepalivePoint
	}
	return 0
}

func (x *CardMemberPartialUpdateRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *CardMemberPartialUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardMemberPartialUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CardMemberPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardMemberPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinPoint       *int32  `protobuf:"varint,3,opt,name=min_point,json=minPoint,proto3,oneof" json:"min_point,omitempty"`
	KeepalivePoint *int32  `protobuf:"varint,4,opt,name=keepalive_point,json=keepalivePoint,proto3,oneof" json:"keepalive_point,omitempty"`
	Term           int32   `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
	IsValid        bool    `protobuf:"varint,6,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Description    *string `protobuf:"bytes,11,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Filters        string  `protobuf:"bytes,13,opt,name=filters,proto3" json:"filters,omitempty"`
	Remark         *string `protobuf:"bytes,15,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardMemberRequest) Reset() {
	*x = CardMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMemberRequest) ProtoMessage() {}

func (x *CardMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMemberRequest.ProtoReflect.Descriptor instead.
func (*CardMemberRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{12}
}

func (x *CardMemberRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardMemberRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardMemberRequest) GetMinPoint() int32 {
	if x != nil && x.MinPoint != nil {
		return *x.MinPoint
	}
	return 0
}

func (x *CardMemberRequest) GetKeepalivePoint() int32 {
	if x != nil && x.KeepalivePoint != nil {
		return *x.KeepalivePoint
	}
	return 0
}

func (x *CardMemberRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *CardMemberRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardMemberRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CardMemberRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardMemberRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinPoint       *int32  `protobuf:"varint,3,opt,name=min_point,json=minPoint,proto3,oneof" json:"min_point,omitempty"`
	KeepalivePoint *int32  `protobuf:"varint,4,opt,name=keepalive_point,json=keepalivePoint,proto3,oneof" json:"keepalive_point,omitempty"`
	Term           int32   `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
	IsValid        bool    `protobuf:"varint,6,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Description    *string `protobuf:"bytes,11,opt,name=description,proto3,oneof" json:"description,omitempty"`
	CreateTime     string  `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Remark         *string `protobuf:"bytes,16,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardMemberResponse) Reset() {
	*x = CardMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMemberResponse) ProtoMessage() {}

func (x *CardMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMemberResponse.ProtoReflect.Descriptor instead.
func (*CardMemberResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{13}
}

func (x *CardMemberResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardMemberResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardMemberResponse) GetMinPoint() int32 {
	if x != nil && x.MinPoint != nil {
		return *x.MinPoint
	}
	return 0
}

func (x *CardMemberResponse) GetKeepalivePoint() int32 {
	if x != nil && x.KeepalivePoint != nil {
		return *x.KeepalivePoint
	}
	return 0
}

func (x *CardMemberResponse) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *CardMemberResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardMemberResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CardMemberResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CardMemberResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CardMemberResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardMemberRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardMemberRetrieveRequest) Reset() {
	*x = CardMemberRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMemberRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMemberRetrieveRequest) ProtoMessage() {}

func (x *CardMemberRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMemberRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CardMemberRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{14}
}

func (x *CardMemberRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardNutDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardNutDestroyRequest) Reset() {
	*x = CardNutDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutDestroyRequest) ProtoMessage() {}

func (x *CardNutDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutDestroyRequest.ProtoReflect.Descriptor instead.
func (*CardNutDestroyRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{15}
}

func (x *CardNutDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardNutListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,10,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CardNutListRequest) Reset() {
	*x = CardNutListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutListRequest) ProtoMessage() {}

func (x *CardNutListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutListRequest.ProtoReflect.Descriptor instead.
func (*CardNutListRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{16}
}

func (x *CardNutListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type CardNutListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CardNutResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CardNutListResponse) Reset() {
	*x = CardNutListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutListResponse) ProtoMessage() {}

func (x *CardNutListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutListResponse.ProtoReflect.Descriptor instead.
func (*CardNutListResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{17}
}

func (x *CardNutListResponse) GetResults() []*CardNutResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CardNutListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CardNutPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Num                  int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	IsValid              bool     `protobuf:"varint,5,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Filters              string   `protobuf:"bytes,11,opt,name=filters,proto3" json:"filters,omitempty"`
	Remark               *string  `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardNutPartialUpdateRequest) Reset() {
	*x = CardNutPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutPartialUpdateRequest) ProtoMessage() {}

func (x *CardNutPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*CardNutPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{18}
}

func (x *CardNutPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardNutPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *CardNutPartialUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardNutPartialUpdateRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CardNutPartialUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardNutPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardNutPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardNutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Num     int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	IsValid bool    `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Filters string  `protobuf:"bytes,10,opt,name=filters,proto3" json:"filters,omitempty"`
	Remark  *string `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardNutRequest) Reset() {
	*x = CardNutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutRequest) ProtoMessage() {}

func (x *CardNutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutRequest.ProtoReflect.Descriptor instead.
func (*CardNutRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{19}
}

func (x *CardNutRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardNutRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardNutRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CardNutRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardNutRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardNutRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardNutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Num        int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	IsValid    bool    `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	CreateTime string  `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string  `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Remark     *string `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *CardNutResponse) Reset() {
	*x = CardNutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutResponse) ProtoMessage() {}

func (x *CardNutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutResponse.ProtoReflect.Descriptor instead.
func (*CardNutResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{20}
}

func (x *CardNutResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardNutResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardNutResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CardNutResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardNutResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CardNutResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CardNutResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type CardNutRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardNutRetrieveRequest) Reset() {
	*x = CardNutRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutRetrieveRequest) ProtoMessage() {}

func (x *CardNutRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CardNutRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{21}
}

func (x *CardNutRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardVoucherDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardVoucherDestroyRequest) Reset() {
	*x = CardVoucherDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherDestroyRequest) ProtoMessage() {}

func (x *CardVoucherDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherDestroyRequest.ProtoReflect.Descriptor instead.
func (*CardVoucherDestroyRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{22}
}

func (x *CardVoucherDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardVoucherListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CardVoucherListRequest) Reset() {
	*x = CardVoucherListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherListRequest) ProtoMessage() {}

func (x *CardVoucherListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherListRequest.ProtoReflect.Descriptor instead.
func (*CardVoucherListRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{23}
}

func (x *CardVoucherListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type CardVoucherListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CardVoucherResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CardVoucherListResponse) Reset() {
	*x = CardVoucherListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherListResponse) ProtoMessage() {}

func (x *CardVoucherListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherListResponse.ProtoReflect.Descriptor instead.
func (*CardVoucherListResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{24}
}

func (x *CardVoucherListResponse) GetResults() []*CardVoucherResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CardVoucherListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CardVoucherNextSerialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextSerial string `protobuf:"bytes,1,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
}

func (x *CardVoucherNextSerialResponse) Reset() {
	*x = CardVoucherNextSerialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherNextSerialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherNextSerialResponse) ProtoMessage() {}

func (x *CardVoucherNextSerialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherNextSerialResponse.ProtoReflect.Descriptor instead.
func (*CardVoucherNextSerialResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{25}
}

func (x *CardVoucherNextSerialResponse) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

type CardVoucherOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponClasses []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=coupon_classes,json=couponClasses,proto3" json:"coupon_classes,omitempty"`
	CouponTypes   []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=coupon_types,json=couponTypes,proto3" json:"coupon_types,omitempty"`
	CouponNames   []*LabelValueResponse       `protobuf:"bytes,3,rep,name=coupon_names,json=couponNames,proto3" json:"coupon_names,omitempty"`
}

func (x *CardVoucherOptionResponse) Reset() {
	*x = CardVoucherOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherOptionResponse) ProtoMessage() {}

func (x *CardVoucherOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherOptionResponse.ProtoReflect.Descriptor instead.
func (*CardVoucherOptionResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{26}
}

func (x *CardVoucherOptionResponse) GetCouponClasses() []*LabelNumberValueResponse {
	if x != nil {
		return x.CouponClasses
	}
	return nil
}

func (x *CardVoucherOptionResponse) GetCouponTypes() []*LabelNumberValueResponse {
	if x != nil {
		return x.CouponTypes
	}
	return nil
}

func (x *CardVoucherOptionResponse) GetCouponNames() []*LabelValueResponse {
	if x != nil {
		return x.CouponNames
	}
	return nil
}

type CardVoucherPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	IsValid              bool     `protobuf:"varint,11,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark               *string  `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CouponSku            *string  `protobuf:"bytes,13,opt,name=coupon_sku,json=couponSku,proto3,oneof" json:"coupon_sku,omitempty"`
	CouponName           string   `protobuf:"bytes,14,opt,name=coupon_name,json=couponName,proto3" json:"coupon_name,omitempty"`
	CouponIntro          *string  `protobuf:"bytes,15,opt,name=coupon_intro,json=couponIntro,proto3,oneof" json:"coupon_intro,omitempty"`
	CouponClass          int32    `protobuf:"varint,16,opt,name=coupon_class,json=couponClass,proto3" json:"coupon_class,omitempty"`
	CouponType           int32    `protobuf:"varint,17,opt,name=coupon_type,json=couponType,proto3" json:"coupon_type,omitempty"`
	TriggerAmount        *int32   `protobuf:"varint,18,opt,name=trigger_amount,json=triggerAmount,proto3,oneof" json:"trigger_amount,omitempty"`
	DiscountAmount       *int32   `protobuf:"varint,19,opt,name=discount_amount,json=discountAmount,proto3,oneof" json:"discount_amount,omitempty"`
	TriggerQty           *int32   `protobuf:"varint,20,opt,name=trigger_qty,json=triggerQty,proto3,oneof" json:"trigger_qty,omitempty"`
	Discount             *int32   `protobuf:"varint,21,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	CouponSeries         *string  `protobuf:"bytes,22,opt,name=coupon_series,json=couponSeries,proto3,oneof" json:"coupon_series,omitempty"`
	ProdRange            *string  `protobuf:"bytes,23,opt,name=prod_range,json=prodRange,proto3,oneof" json:"prod_range,omitempty"`
	CumulateCount        *int32   `protobuf:"varint,24,opt,name=cumulate_count,json=cumulateCount,proto3,oneof" json:"cumulate_count,omitempty"`
}

func (x *CardVoucherPartialUpdateRequest) Reset() {
	*x = CardVoucherPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherPartialUpdateRequest) ProtoMessage() {}

func (x *CardVoucherPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*CardVoucherPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{27}
}

func (x *CardVoucherPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardVoucherPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardVoucherPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *CardVoucherPartialUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardVoucherPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CardVoucherPartialUpdateRequest) GetCouponSku() string {
	if x != nil && x.CouponSku != nil {
		return *x.CouponSku
	}
	return ""
}

func (x *CardVoucherPartialUpdateRequest) GetCouponName() string {
	if x != nil {
		return x.CouponName
	}
	return ""
}

func (x *CardVoucherPartialUpdateRequest) GetCouponIntro() string {
	if x != nil && x.CouponIntro != nil {
		return *x.CouponIntro
	}
	return ""
}

func (x *CardVoucherPartialUpdateRequest) GetCouponClass() int32 {
	if x != nil {
		return x.CouponClass
	}
	return 0
}

func (x *CardVoucherPartialUpdateRequest) GetCouponType() int32 {
	if x != nil {
		return x.CouponType
	}
	return 0
}

func (x *CardVoucherPartialUpdateRequest) GetTriggerAmount() int32 {
	if x != nil && x.TriggerAmount != nil {
		return *x.TriggerAmount
	}
	return 0
}

func (x *CardVoucherPartialUpdateRequest) GetDiscountAmount() int32 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *CardVoucherPartialUpdateRequest) GetTriggerQty() int32 {
	if x != nil && x.TriggerQty != nil {
		return *x.TriggerQty
	}
	return 0
}

func (x *CardVoucherPartialUpdateRequest) GetDiscount() int32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CardVoucherPartialUpdateRequest) GetCouponSeries() string {
	if x != nil && x.CouponSeries != nil {
		return *x.CouponSeries
	}
	return ""
}

func (x *CardVoucherPartialUpdateRequest) GetProdRange() string {
	if x != nil && x.ProdRange != nil {
		return *x.ProdRange
	}
	return ""
}

func (x *CardVoucherPartialUpdateRequest) GetCumulateCount() int32 {
	if x != nil && x.CumulateCount != nil {
		return *x.CumulateCount
	}
	return 0
}

type CardVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters        string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	IsValid        bool    `protobuf:"varint,10,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark         *string `protobuf:"bytes,11,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CouponSku      *string `protobuf:"bytes,12,opt,name=coupon_sku,json=couponSku,proto3,oneof" json:"coupon_sku,omitempty"`
	CouponName     string  `protobuf:"bytes,13,opt,name=coupon_name,json=couponName,proto3" json:"coupon_name,omitempty"`
	CouponIntro    *string `protobuf:"bytes,14,opt,name=coupon_intro,json=couponIntro,proto3,oneof" json:"coupon_intro,omitempty"`
	CouponClass    int32   `protobuf:"varint,15,opt,name=coupon_class,json=couponClass,proto3" json:"coupon_class,omitempty"`
	CouponType     int32   `protobuf:"varint,16,opt,name=coupon_type,json=couponType,proto3" json:"coupon_type,omitempty"`
	TriggerAmount  *int32  `protobuf:"varint,17,opt,name=trigger_amount,json=triggerAmount,proto3,oneof" json:"trigger_amount,omitempty"`
	DiscountAmount *int32  `protobuf:"varint,18,opt,name=discount_amount,json=discountAmount,proto3,oneof" json:"discount_amount,omitempty"`
	TriggerQty     *int32  `protobuf:"varint,19,opt,name=trigger_qty,json=triggerQty,proto3,oneof" json:"trigger_qty,omitempty"`
	Discount       *int32  `protobuf:"varint,20,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	CouponSeries   *string `protobuf:"bytes,21,opt,name=coupon_series,json=couponSeries,proto3,oneof" json:"coupon_series,omitempty"`
	ProdRange      *string `protobuf:"bytes,22,opt,name=prod_range,json=prodRange,proto3,oneof" json:"prod_range,omitempty"`
	CumulateCount  *int32  `protobuf:"varint,23,opt,name=cumulate_count,json=cumulateCount,proto3,oneof" json:"cumulate_count,omitempty"`
}

func (x *CardVoucherRequest) Reset() {
	*x = CardVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherRequest) ProtoMessage() {}

func (x *CardVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherRequest.ProtoReflect.Descriptor instead.
func (*CardVoucherRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{28}
}

func (x *CardVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardVoucherRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CardVoucherRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardVoucherRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CardVoucherRequest) GetCouponSku() string {
	if x != nil && x.CouponSku != nil {
		return *x.CouponSku
	}
	return ""
}

func (x *CardVoucherRequest) GetCouponName() string {
	if x != nil {
		return x.CouponName
	}
	return ""
}

func (x *CardVoucherRequest) GetCouponIntro() string {
	if x != nil && x.CouponIntro != nil {
		return *x.CouponIntro
	}
	return ""
}

func (x *CardVoucherRequest) GetCouponClass() int32 {
	if x != nil {
		return x.CouponClass
	}
	return 0
}

func (x *CardVoucherRequest) GetCouponType() int32 {
	if x != nil {
		return x.CouponType
	}
	return 0
}

func (x *CardVoucherRequest) GetTriggerAmount() int32 {
	if x != nil && x.TriggerAmount != nil {
		return *x.TriggerAmount
	}
	return 0
}

func (x *CardVoucherRequest) GetDiscountAmount() int32 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *CardVoucherRequest) GetTriggerQty() int32 {
	if x != nil && x.TriggerQty != nil {
		return *x.TriggerQty
	}
	return 0
}

func (x *CardVoucherRequest) GetDiscount() int32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CardVoucherRequest) GetCouponSeries() string {
	if x != nil && x.CouponSeries != nil {
		return *x.CouponSeries
	}
	return ""
}

func (x *CardVoucherRequest) GetProdRange() string {
	if x != nil && x.ProdRange != nil {
		return *x.ProdRange
	}
	return ""
}

func (x *CardVoucherRequest) GetCumulateCount() int32 {
	if x != nil && x.CumulateCount != nil {
		return *x.CumulateCount
	}
	return 0
}

type CardVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsValid        bool    `protobuf:"varint,9,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark         *string `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CreateTime     string  `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CouponSku      *string `protobuf:"bytes,13,opt,name=coupon_sku,json=couponSku,proto3,oneof" json:"coupon_sku,omitempty"`
	CouponName     string  `protobuf:"bytes,14,opt,name=coupon_name,json=couponName,proto3" json:"coupon_name,omitempty"`
	CouponIntro    *string `protobuf:"bytes,15,opt,name=coupon_intro,json=couponIntro,proto3,oneof" json:"coupon_intro,omitempty"`
	CouponClass    int32   `protobuf:"varint,16,opt,name=coupon_class,json=couponClass,proto3" json:"coupon_class,omitempty"`
	CouponType     int32   `protobuf:"varint,17,opt,name=coupon_type,json=couponType,proto3" json:"coupon_type,omitempty"`
	TriggerAmount  *int32  `protobuf:"varint,18,opt,name=trigger_amount,json=triggerAmount,proto3,oneof" json:"trigger_amount,omitempty"`
	DiscountAmount *int32  `protobuf:"varint,19,opt,name=discount_amount,json=discountAmount,proto3,oneof" json:"discount_amount,omitempty"`
	TriggerQty     *int32  `protobuf:"varint,20,opt,name=trigger_qty,json=triggerQty,proto3,oneof" json:"trigger_qty,omitempty"`
	Discount       *int32  `protobuf:"varint,21,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	ClassName      string  `protobuf:"bytes,22,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	TypeName       string  `protobuf:"bytes,23,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	CouponSeries   *string `protobuf:"bytes,24,opt,name=coupon_series,json=couponSeries,proto3,oneof" json:"coupon_series,omitempty"`
	ProdRange      *string `protobuf:"bytes,25,opt,name=prod_range,json=prodRange,proto3,oneof" json:"prod_range,omitempty"`
	CumulateCount  *int32  `protobuf:"varint,26,opt,name=cumulate_count,json=cumulateCount,proto3,oneof" json:"cumulate_count,omitempty"`
}

func (x *CardVoucherResponse) Reset() {
	*x = CardVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherResponse) ProtoMessage() {}

func (x *CardVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherResponse.ProtoReflect.Descriptor instead.
func (*CardVoucherResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{29}
}

func (x *CardVoucherResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardVoucherResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardVoucherResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CardVoucherResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CardVoucherResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponSku() string {
	if x != nil && x.CouponSku != nil {
		return *x.CouponSku
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponName() string {
	if x != nil {
		return x.CouponName
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponIntro() string {
	if x != nil && x.CouponIntro != nil {
		return *x.CouponIntro
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponClass() int32 {
	if x != nil {
		return x.CouponClass
	}
	return 0
}

func (x *CardVoucherResponse) GetCouponType() int32 {
	if x != nil {
		return x.CouponType
	}
	return 0
}

func (x *CardVoucherResponse) GetTriggerAmount() int32 {
	if x != nil && x.TriggerAmount != nil {
		return *x.TriggerAmount
	}
	return 0
}

func (x *CardVoucherResponse) GetDiscountAmount() int32 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *CardVoucherResponse) GetTriggerQty() int32 {
	if x != nil && x.TriggerQty != nil {
		return *x.TriggerQty
	}
	return 0
}

func (x *CardVoucherResponse) GetDiscount() int32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CardVoucherResponse) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *CardVoucherResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponSeries() string {
	if x != nil && x.CouponSeries != nil {
		return *x.CouponSeries
	}
	return ""
}

func (x *CardVoucherResponse) GetProdRange() string {
	if x != nil && x.ProdRange != nil {
		return *x.ProdRange
	}
	return ""
}

func (x *CardVoucherResponse) GetCumulateCount() int32 {
	if x != nil && x.CumulateCount != nil {
		return *x.CumulateCount
	}
	return 0
}

type CardVoucherRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardVoucherRetrieveRequest) Reset() {
	*x = CardVoucherRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherRetrieveRequest) ProtoMessage() {}

func (x *CardVoucherRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CardVoucherRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{30}
}

func (x *CardVoucherRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type LabelNumberValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelNumberValueResponse) Reset() {
	*x = LabelNumberValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueResponse) ProtoMessage() {}

func (x *LabelNumberValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{31}
}

func (x *LabelNumberValueResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LabelNumberValueResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type LabelValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelValueResponse) Reset() {
	*x = LabelValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValueResponse) ProtoMessage() {}

func (x *LabelValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValueResponse.ProtoReflect.Descriptor instead.
func (*LabelValueResponse) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{32}
}

func (x *LabelValueResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LabelValueResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type NextSerialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponClass int32 `protobuf:"varint,1,opt,name=coupon_class,json=couponClass,proto3" json:"coupon_class,omitempty"`
	CouponType  int32 `protobuf:"varint,2,opt,name=coupon_type,json=couponType,proto3" json:"coupon_type,omitempty"`
}

func (x *NextSerialRequest) Reset() {
	*x = NextSerialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextSerialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextSerialRequest) ProtoMessage() {}

func (x *NextSerialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextSerialRequest.ProtoReflect.Descriptor instead.
func (*NextSerialRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{33}
}

func (x *NextSerialRequest) GetCouponClass() int32 {
	if x != nil {
		return x.CouponClass
	}
	return 0
}

func (x *NextSerialRequest) GetCouponType() int32 {
	if x != nil {
		return x.CouponType
	}
	return 0
}

type OptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OptionRequest) Reset() {
	*x = OptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_ito_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionRequest) ProtoMessage() {}

func (x *OptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_ito_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionRequest.ProtoReflect.Descriptor instead.
func (*OptionRequest) Descriptor() ([]byte, []int) {
	return file_card_ito_proto_rawDescGZIP(), []int{34}
}

var File_card_ito_proto protoreflect.FileDescriptor

var file_card_ito_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x6f, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xec, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22,
	0xd2, 0x03, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x10,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x90, 0x03, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb9, 0x03, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0x29, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a,
	0x0a, 0x18, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x43, 0x61,
	0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x73, 0x0a,
	0x16, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x1e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xd1, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x72,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xfa, 0x02, 0x0a,
	0x12, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x61, 0x72,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2e, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x6d, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf3,
	0x01, 0x0a, 0x1b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2b, 0x0a, 0x19, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x16,
	0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x75, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x1d, 0x43, 0x61, 0x72, 0x64, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x95, 0x02, 0x0a, 0x19, 0x43, 0x61,
	0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0xa7, 0x06, 0x0a, 0x1f, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x6b, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73,
	0x6b, 0x75, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x05, 0x0a, 0x12,
	0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73,
	0x6b, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x53, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52,
	0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x71,
	0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xca, 0x06, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x73, 0x6b, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x53, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x2c, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46,
	0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x40, 0x0a, 0x12, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x57, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0xbf, 0x05, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x12, 0x2d, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x2e, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xf5, 0x04, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x5f, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x30, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd1, 0x04, 0x0a,
	0x11, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x59, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x2c, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x2d, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0xd6, 0x06, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x30, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x0a, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x75, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x08, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_card_ito_proto_rawDescOnce sync.Once
	file_card_ito_proto_rawDescData = file_card_ito_proto_rawDesc
)

func file_card_ito_proto_rawDescGZIP() []byte {
	file_card_ito_proto_rawDescOnce.Do(func() {
		file_card_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_card_ito_proto_rawDescData)
	})
	return file_card_ito_proto_rawDescData
}

var file_card_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_card_ito_proto_goTypes = []interface{}{
	(*CardCareDestroyRequest)(nil),          // 0: card_service.card_ito.CardCareDestroyRequest
	(*CardCareListRequest)(nil),             // 1: card_service.card_ito.CardCareListRequest
	(*CardCareListResponse)(nil),            // 2: card_service.card_ito.CardCareListResponse
	(*CardCareOptionResponse)(nil),          // 3: card_service.card_ito.CardCareOptionResponse
	(*CardCarePartialUpdateRequest)(nil),    // 4: card_service.card_ito.CardCarePartialUpdateRequest
	(*CardCareRequest)(nil),                 // 5: card_service.card_ito.CardCareRequest
	(*CardCareResponse)(nil),                // 6: card_service.card_ito.CardCareResponse
	(*CardCareRetrieveRequest)(nil),         // 7: card_service.card_ito.CardCareRetrieveRequest
	(*CardMemberDestroyRequest)(nil),        // 8: card_service.card_ito.CardMemberDestroyRequest
	(*CardMemberListRequest)(nil),           // 9: card_service.card_ito.CardMemberListRequest
	(*CardMemberListResponse)(nil),          // 10: card_service.card_ito.CardMemberListResponse
	(*CardMemberPartialUpdateRequest)(nil),  // 11: card_service.card_ito.CardMemberPartialUpdateRequest
	(*CardMemberRequest)(nil),               // 12: card_service.card_ito.CardMemberRequest
	(*CardMemberResponse)(nil),              // 13: card_service.card_ito.CardMemberResponse
	(*CardMemberRetrieveRequest)(nil),       // 14: card_service.card_ito.CardMemberRetrieveRequest
	(*CardNutDestroyRequest)(nil),           // 15: card_service.card_ito.CardNutDestroyRequest
	(*CardNutListRequest)(nil),              // 16: card_service.card_ito.CardNutListRequest
	(*CardNutListResponse)(nil),             // 17: card_service.card_ito.CardNutListResponse
	(*CardNutPartialUpdateRequest)(nil),     // 18: card_service.card_ito.CardNutPartialUpdateRequest
	(*CardNutRequest)(nil),                  // 19: card_service.card_ito.CardNutRequest
	(*CardNutResponse)(nil),                 // 20: card_service.card_ito.CardNutResponse
	(*CardNutRetrieveRequest)(nil),          // 21: card_service.card_ito.CardNutRetrieveRequest
	(*CardVoucherDestroyRequest)(nil),       // 22: card_service.card_ito.CardVoucherDestroyRequest
	(*CardVoucherListRequest)(nil),          // 23: card_service.card_ito.CardVoucherListRequest
	(*CardVoucherListResponse)(nil),         // 24: card_service.card_ito.CardVoucherListResponse
	(*CardVoucherNextSerialResponse)(nil),   // 25: card_service.card_ito.CardVoucherNextSerialResponse
	(*CardVoucherOptionResponse)(nil),       // 26: card_service.card_ito.CardVoucherOptionResponse
	(*CardVoucherPartialUpdateRequest)(nil), // 27: card_service.card_ito.CardVoucherPartialUpdateRequest
	(*CardVoucherRequest)(nil),              // 28: card_service.card_ito.CardVoucherRequest
	(*CardVoucherResponse)(nil),             // 29: card_service.card_ito.CardVoucherResponse
	(*CardVoucherRetrieveRequest)(nil),      // 30: card_service.card_ito.CardVoucherRetrieveRequest
	(*LabelNumberValueResponse)(nil),        // 31: card_service.card_ito.LabelNumberValueResponse
	(*LabelValueResponse)(nil),              // 32: card_service.card_ito.LabelValueResponse
	(*NextSerialRequest)(nil),               // 33: card_service.card_ito.NextSerialRequest
	(*OptionRequest)(nil),                   // 34: card_service.card_ito.OptionRequest
	(*emptypb.Empty)(nil),                   // 35: google.protobuf.Empty
}
var file_card_ito_proto_depIdxs = []int32{
	6,  // 0: card_service.card_ito.CardCareListResponse.results:type_name -> card_service.card_ito.CardCareResponse
	32, // 1: card_service.card_ito.CardCareOptionResponse.time_units:type_name -> card_service.card_ito.LabelValueResponse
	32, // 2: card_service.card_ito.CardCareOptionResponse.status:type_name -> card_service.card_ito.LabelValueResponse
	31, // 3: card_service.card_ito.CardCareOptionResponse.types:type_name -> card_service.card_ito.LabelNumberValueResponse
	13, // 4: card_service.card_ito.CardMemberListResponse.results:type_name -> card_service.card_ito.CardMemberResponse
	20, // 5: card_service.card_ito.CardNutListResponse.results:type_name -> card_service.card_ito.CardNutResponse
	29, // 6: card_service.card_ito.CardVoucherListResponse.results:type_name -> card_service.card_ito.CardVoucherResponse
	31, // 7: card_service.card_ito.CardVoucherOptionResponse.coupon_classes:type_name -> card_service.card_ito.LabelNumberValueResponse
	31, // 8: card_service.card_ito.CardVoucherOptionResponse.coupon_types:type_name -> card_service.card_ito.LabelNumberValueResponse
	32, // 9: card_service.card_ito.CardVoucherOptionResponse.coupon_names:type_name -> card_service.card_ito.LabelValueResponse
	5,  // 10: card_service.card_ito.CardCareController.Create:input_type -> card_service.card_ito.CardCareRequest
	0,  // 11: card_service.card_ito.CardCareController.Destroy:input_type -> card_service.card_ito.CardCareDestroyRequest
	1,  // 12: card_service.card_ito.CardCareController.List:input_type -> card_service.card_ito.CardCareListRequest
	34, // 13: card_service.card_ito.CardCareController.Options:input_type -> card_service.card_ito.OptionRequest
	4,  // 14: card_service.card_ito.CardCareController.PartialUpdate:input_type -> card_service.card_ito.CardCarePartialUpdateRequest
	7,  // 15: card_service.card_ito.CardCareController.Retrieve:input_type -> card_service.card_ito.CardCareRetrieveRequest
	5,  // 16: card_service.card_ito.CardCareController.Update:input_type -> card_service.card_ito.CardCareRequest
	12, // 17: card_service.card_ito.CardMemberController.Create:input_type -> card_service.card_ito.CardMemberRequest
	8,  // 18: card_service.card_ito.CardMemberController.Destroy:input_type -> card_service.card_ito.CardMemberDestroyRequest
	9,  // 19: card_service.card_ito.CardMemberController.List:input_type -> card_service.card_ito.CardMemberListRequest
	11, // 20: card_service.card_ito.CardMemberController.PartialUpdate:input_type -> card_service.card_ito.CardMemberPartialUpdateRequest
	14, // 21: card_service.card_ito.CardMemberController.Retrieve:input_type -> card_service.card_ito.CardMemberRetrieveRequest
	12, // 22: card_service.card_ito.CardMemberController.Update:input_type -> card_service.card_ito.CardMemberRequest
	19, // 23: card_service.card_ito.CardNutController.Create:input_type -> card_service.card_ito.CardNutRequest
	15, // 24: card_service.card_ito.CardNutController.Destroy:input_type -> card_service.card_ito.CardNutDestroyRequest
	16, // 25: card_service.card_ito.CardNutController.List:input_type -> card_service.card_ito.CardNutListRequest
	18, // 26: card_service.card_ito.CardNutController.PartialUpdate:input_type -> card_service.card_ito.CardNutPartialUpdateRequest
	21, // 27: card_service.card_ito.CardNutController.Retrieve:input_type -> card_service.card_ito.CardNutRetrieveRequest
	19, // 28: card_service.card_ito.CardNutController.Update:input_type -> card_service.card_ito.CardNutRequest
	28, // 29: card_service.card_ito.CardVoucherController.Create:input_type -> card_service.card_ito.CardVoucherRequest
	22, // 30: card_service.card_ito.CardVoucherController.Destroy:input_type -> card_service.card_ito.CardVoucherDestroyRequest
	23, // 31: card_service.card_ito.CardVoucherController.List:input_type -> card_service.card_ito.CardVoucherListRequest
	33, // 32: card_service.card_ito.CardVoucherController.NextSerial:input_type -> card_service.card_ito.NextSerialRequest
	34, // 33: card_service.card_ito.CardVoucherController.Options:input_type -> card_service.card_ito.OptionRequest
	27, // 34: card_service.card_ito.CardVoucherController.PartialUpdate:input_type -> card_service.card_ito.CardVoucherPartialUpdateRequest
	30, // 35: card_service.card_ito.CardVoucherController.Retrieve:input_type -> card_service.card_ito.CardVoucherRetrieveRequest
	28, // 36: card_service.card_ito.CardVoucherController.Update:input_type -> card_service.card_ito.CardVoucherRequest
	6,  // 37: card_service.card_ito.CardCareController.Create:output_type -> card_service.card_ito.CardCareResponse
	35, // 38: card_service.card_ito.CardCareController.Destroy:output_type -> google.protobuf.Empty
	2,  // 39: card_service.card_ito.CardCareController.List:output_type -> card_service.card_ito.CardCareListResponse
	3,  // 40: card_service.card_ito.CardCareController.Options:output_type -> card_service.card_ito.CardCareOptionResponse
	6,  // 41: card_service.card_ito.CardCareController.PartialUpdate:output_type -> card_service.card_ito.CardCareResponse
	6,  // 42: card_service.card_ito.CardCareController.Retrieve:output_type -> card_service.card_ito.CardCareResponse
	6,  // 43: card_service.card_ito.CardCareController.Update:output_type -> card_service.card_ito.CardCareResponse
	13, // 44: card_service.card_ito.CardMemberController.Create:output_type -> card_service.card_ito.CardMemberResponse
	35, // 45: card_service.card_ito.CardMemberController.Destroy:output_type -> google.protobuf.Empty
	10, // 46: card_service.card_ito.CardMemberController.List:output_type -> card_service.card_ito.CardMemberListResponse
	13, // 47: card_service.card_ito.CardMemberController.PartialUpdate:output_type -> card_service.card_ito.CardMemberResponse
	13, // 48: card_service.card_ito.CardMemberController.Retrieve:output_type -> card_service.card_ito.CardMemberResponse
	13, // 49: card_service.card_ito.CardMemberController.Update:output_type -> card_service.card_ito.CardMemberResponse
	20, // 50: card_service.card_ito.CardNutController.Create:output_type -> card_service.card_ito.CardNutResponse
	35, // 51: card_service.card_ito.CardNutController.Destroy:output_type -> google.protobuf.Empty
	17, // 52: card_service.card_ito.CardNutController.List:output_type -> card_service.card_ito.CardNutListResponse
	20, // 53: card_service.card_ito.CardNutController.PartialUpdate:output_type -> card_service.card_ito.CardNutResponse
	20, // 54: card_service.card_ito.CardNutController.Retrieve:output_type -> card_service.card_ito.CardNutResponse
	20, // 55: card_service.card_ito.CardNutController.Update:output_type -> card_service.card_ito.CardNutResponse
	29, // 56: card_service.card_ito.CardVoucherController.Create:output_type -> card_service.card_ito.CardVoucherResponse
	35, // 57: card_service.card_ito.CardVoucherController.Destroy:output_type -> google.protobuf.Empty
	24, // 58: card_service.card_ito.CardVoucherController.List:output_type -> card_service.card_ito.CardVoucherListResponse
	25, // 59: card_service.card_ito.CardVoucherController.NextSerial:output_type -> card_service.card_ito.CardVoucherNextSerialResponse
	26, // 60: card_service.card_ito.CardVoucherController.Options:output_type -> card_service.card_ito.CardVoucherOptionResponse
	29, // 61: card_service.card_ito.CardVoucherController.PartialUpdate:output_type -> card_service.card_ito.CardVoucherResponse
	29, // 62: card_service.card_ito.CardVoucherController.Retrieve:output_type -> card_service.card_ito.CardVoucherResponse
	29, // 63: card_service.card_ito.CardVoucherController.Update:output_type -> card_service.card_ito.CardVoucherResponse
	37, // [37:64] is the sub-list for method output_type
	10, // [10:37] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_card_ito_proto_init() }
func file_card_ito_proto_init() {
	if File_card_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_card_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCareDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCareListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCareListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCareOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCarePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCareRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMemberDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMemberListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMemberListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMemberPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMemberRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherNextSerialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextSerialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_ito_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_card_ito_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_card_ito_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_card_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_card_ito_proto_goTypes,
		DependencyIndexes: file_card_ito_proto_depIdxs,
		MessageInfos:      file_card_ito_proto_msgTypes,
	}.Build()
	File_card_ito_proto = out.File
	file_card_ito_proto_rawDesc = nil
	file_card_ito_proto_goTypes = nil
	file_card_ito_proto_depIdxs = nil
}
