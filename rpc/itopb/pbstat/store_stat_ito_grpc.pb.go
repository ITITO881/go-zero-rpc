// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: store_stat_ito.proto

package pbstat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatHmxSalesController_List_FullMethodName         = "/store_service.store_stat_ito.StatHmxSalesController/List"
	StatHmxSalesController_TradeDetails_FullMethodName = "/store_service.store_stat_ito.StatHmxSalesController/TradeDetails"
)

// StatHmxSalesControllerClient is the client API for StatHmxSalesController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatHmxSalesControllerClient interface {
	List(ctx context.Context, in *StatHmxSalesListRequest, opts ...grpc.CallOption) (*StatHmxSalesListResponse, error)
	TradeDetails(ctx context.Context, in *StoreTradesRequest, opts ...grpc.CallOption) (*StoreTradesListResponse, error)
}

type statHmxSalesControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStatHmxSalesControllerClient(cc grpc.ClientConnInterface) StatHmxSalesControllerClient {
	return &statHmxSalesControllerClient{cc}
}

func (c *statHmxSalesControllerClient) List(ctx context.Context, in *StatHmxSalesListRequest, opts ...grpc.CallOption) (*StatHmxSalesListResponse, error) {
	out := new(StatHmxSalesListResponse)
	err := c.cc.Invoke(ctx, StatHmxSalesController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statHmxSalesControllerClient) TradeDetails(ctx context.Context, in *StoreTradesRequest, opts ...grpc.CallOption) (*StoreTradesListResponse, error) {
	out := new(StoreTradesListResponse)
	err := c.cc.Invoke(ctx, StatHmxSalesController_TradeDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatHmxSalesControllerServer is the server API for StatHmxSalesController service.
// All implementations must embed UnimplementedStatHmxSalesControllerServer
// for forward compatibility
type StatHmxSalesControllerServer interface {
	List(context.Context, *StatHmxSalesListRequest) (*StatHmxSalesListResponse, error)
	TradeDetails(context.Context, *StoreTradesRequest) (*StoreTradesListResponse, error)
	mustEmbedUnimplementedStatHmxSalesControllerServer()
}

// UnimplementedStatHmxSalesControllerServer must be embedded to have forward compatible implementations.
type UnimplementedStatHmxSalesControllerServer struct {
}

func (UnimplementedStatHmxSalesControllerServer) List(context.Context, *StatHmxSalesListRequest) (*StatHmxSalesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStatHmxSalesControllerServer) TradeDetails(context.Context, *StoreTradesRequest) (*StoreTradesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeDetails not implemented")
}
func (UnimplementedStatHmxSalesControllerServer) mustEmbedUnimplementedStatHmxSalesControllerServer() {
}

// UnsafeStatHmxSalesControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatHmxSalesControllerServer will
// result in compilation errors.
type UnsafeStatHmxSalesControllerServer interface {
	mustEmbedUnimplementedStatHmxSalesControllerServer()
}

func RegisterStatHmxSalesControllerServer(s grpc.ServiceRegistrar, srv StatHmxSalesControllerServer) {
	s.RegisterService(&StatHmxSalesController_ServiceDesc, srv)
}

func _StatHmxSalesController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatHmxSalesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatHmxSalesControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatHmxSalesController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatHmxSalesControllerServer).List(ctx, req.(*StatHmxSalesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatHmxSalesController_TradeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatHmxSalesControllerServer).TradeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatHmxSalesController_TradeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatHmxSalesControllerServer).TradeDetails(ctx, req.(*StoreTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatHmxSalesController_ServiceDesc is the grpc.ServiceDesc for StatHmxSalesController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatHmxSalesController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store_service.store_stat_ito.StatHmxSalesController",
	HandlerType: (*StatHmxSalesControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StatHmxSalesController_List_Handler,
		},
		{
			MethodName: "TradeDetails",
			Handler:    _StatHmxSalesController_TradeDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store_stat_ito.proto",
}
