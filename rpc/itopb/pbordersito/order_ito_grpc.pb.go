// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: order_ito.proto

package pbordersito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CtmItoOrderController_ChildrenBatchUpdateRefundReason_FullMethodName = "/customer_service.customer_ito.CtmItoOrderController/ChildrenBatchUpdateRefundReason"
	CtmItoOrderController_Create_FullMethodName                          = "/customer_service.customer_ito.CtmItoOrderController/Create"
	CtmItoOrderController_CreateCoupon_FullMethodName                    = "/customer_service.customer_ito.CtmItoOrderController/CreateCoupon"
	CtmItoOrderController_CreateOrderConf_FullMethodName                 = "/customer_service.customer_ito.CtmItoOrderController/CreateOrderConf"
	CtmItoOrderController_CreateRefundReason_FullMethodName              = "/customer_service.customer_ito.CtmItoOrderController/CreateRefundReason"
	CtmItoOrderController_Destroy_FullMethodName                         = "/customer_service.customer_ito.CtmItoOrderController/Destroy"
	CtmItoOrderController_DestroyCoupon_FullMethodName                   = "/customer_service.customer_ito.CtmItoOrderController/DestroyCoupon"
	CtmItoOrderController_DestroyOrderConf_FullMethodName                = "/customer_service.customer_ito.CtmItoOrderController/DestroyOrderConf"
	CtmItoOrderController_DestroyRefundReason_FullMethodName             = "/customer_service.customer_ito.CtmItoOrderController/DestroyRefundReason"
	CtmItoOrderController_GetCheckListRefundReason_FullMethodName        = "/customer_service.customer_ito.CtmItoOrderController/GetCheckListRefundReason"
	CtmItoOrderController_List_FullMethodName                            = "/customer_service.customer_ito.CtmItoOrderController/List"
	CtmItoOrderController_ListCoupon_FullMethodName                      = "/customer_service.customer_ito.CtmItoOrderController/ListCoupon"
	CtmItoOrderController_ListOrderConf_FullMethodName                   = "/customer_service.customer_ito.CtmItoOrderController/ListOrderConf"
	CtmItoOrderController_ListRefundReason_FullMethodName                = "/customer_service.customer_ito.CtmItoOrderController/ListRefundReason"
	CtmItoOrderController_PartialUpdate_FullMethodName                   = "/customer_service.customer_ito.CtmItoOrderController/PartialUpdate"
	CtmItoOrderController_ReasonTypeOptionsOrderConf_FullMethodName      = "/customer_service.customer_ito.CtmItoOrderController/ReasonTypeOptionsOrderConf"
	CtmItoOrderController_ReasonTypeOptionsRefundReason_FullMethodName   = "/customer_service.customer_ito.CtmItoOrderController/ReasonTypeOptionsRefundReason"
	CtmItoOrderController_Retrieve_FullMethodName                        = "/customer_service.customer_ito.CtmItoOrderController/Retrieve"
	CtmItoOrderController_RetrieveCoupon_FullMethodName                  = "/customer_service.customer_ito.CtmItoOrderController/RetrieveCoupon"
	CtmItoOrderController_RetrieveOrderConf_FullMethodName               = "/customer_service.customer_ito.CtmItoOrderController/RetrieveOrderConf"
	CtmItoOrderController_RetrieveRefundReason_FullMethodName            = "/customer_service.customer_ito.CtmItoOrderController/RetrieveRefundReason"
	CtmItoOrderController_ShopOptionsWdt_FullMethodName                  = "/customer_service.customer_ito.CtmItoOrderController/ShopOptionsWdt"
	CtmItoOrderController_StockOptionsWdt_FullMethodName                 = "/customer_service.customer_ito.CtmItoOrderController/StockOptionsWdt"
	CtmItoOrderController_TradeStatusOptionsOrder_FullMethodName         = "/customer_service.customer_ito.CtmItoOrderController/TradeStatusOptionsOrder"
	CtmItoOrderController_TradeTypeRefundReason_FullMethodName           = "/customer_service.customer_ito.CtmItoOrderController/TradeTypeRefundReason"
	CtmItoOrderController_TypeOptionsRefundReason_FullMethodName         = "/customer_service.customer_ito.CtmItoOrderController/TypeOptionsRefundReason"
	CtmItoOrderController_Update_FullMethodName                          = "/customer_service.customer_ito.CtmItoOrderController/Update"
	CtmItoOrderController_UpdateCoupon_FullMethodName                    = "/customer_service.customer_ito.CtmItoOrderController/UpdateCoupon"
	CtmItoOrderController_UpdateOrderConf_FullMethodName                 = "/customer_service.customer_ito.CtmItoOrderController/UpdateOrderConf"
	CtmItoOrderController_UpdateRefundReason_FullMethodName              = "/customer_service.customer_ito.CtmItoOrderController/UpdateRefundReason"
)

// CtmItoOrderControllerClient is the client API for CtmItoOrderController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CtmItoOrderControllerClient interface {
	ChildrenBatchUpdateRefundReason(ctx context.Context, in *ChildrenBatchUpdateRequest, opts ...grpc.CallOption) (*ChildrenBatchUpdateResponse, error)
	Create(ctx context.Context, in *CtmOrderRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error)
	CreateCoupon(ctx context.Context, in *CtmCouponCreateRequest, opts ...grpc.CallOption) (*CtmCouponResponse, error)
	CreateOrderConf(ctx context.Context, in *CtmOrderConfCreateRequest, opts ...grpc.CallOption) (*CtmOrderConfResponse, error)
	CreateRefundReason(ctx context.Context, in *CtmRefundReasonCreateRequest, opts ...grpc.CallOption) (*CtmRefundReasonResponse, error)
	Destroy(ctx context.Context, in *CtmOrderDestroyRequest, opts ...grpc.CallOption) (*CtmOrderDestroyResponse, error)
	DestroyCoupon(ctx context.Context, in *CtmCouponDestroyRequest, opts ...grpc.CallOption) (*CtmCouponDestroyResponse, error)
	DestroyOrderConf(ctx context.Context, in *CtmOrderConfDestroyRequest, opts ...grpc.CallOption) (*CtmOrderConfDestroyResponse, error)
	DestroyRefundReason(ctx context.Context, in *CtmRefundReasonDestroyRequest, opts ...grpc.CallOption) (*CtmRefundReasonDestroyResponse, error)
	GetCheckListRefundReason(ctx context.Context, in *RefundReasonCheckListRequest, opts ...grpc.CallOption) (*RefundReasonCheckListResponse, error)
	List(ctx context.Context, in *CtmOrderListRequest, opts ...grpc.CallOption) (*CtmOrderListResponse, error)
	ListCoupon(ctx context.Context, in *CtmCouponListRequest, opts ...grpc.CallOption) (*CtmCouponListResponse, error)
	ListOrderConf(ctx context.Context, in *CtmOrderConfListRequest, opts ...grpc.CallOption) (*CtmOrderConfListResponse, error)
	ListRefundReason(ctx context.Context, in *CtmRefundReasonListRequest, opts ...grpc.CallOption) (*CtmRefundReasonListResponse, error)
	PartialUpdate(ctx context.Context, in *CtmOrderPartialUpdateRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error)
	ReasonTypeOptionsOrderConf(ctx context.Context, in *TradeTypeOptionsRequest, opts ...grpc.CallOption) (*TradeTypeOptionListResponse, error)
	ReasonTypeOptionsRefundReason(ctx context.Context, in *RefundReasonOptionsRequest, opts ...grpc.CallOption) (*RefundReasonOptionListResponse, error)
	Retrieve(ctx context.Context, in *CtmOrderRetrieveRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error)
	RetrieveCoupon(ctx context.Context, in *CtmCouponRetrieveRequest, opts ...grpc.CallOption) (*CtmCouponResponse, error)
	RetrieveOrderConf(ctx context.Context, in *CtmOrderConfRetrieveRequest, opts ...grpc.CallOption) (*CtmOrderConfResponse, error)
	RetrieveRefundReason(ctx context.Context, in *CtmRefundReasonRetrieveRequest, opts ...grpc.CallOption) (*CtmRefundReasonResponse, error)
	ShopOptionsWdt(ctx context.Context, in *WdtShopListRequest, opts ...grpc.CallOption) (*WdtShopListResponse, error)
	StockOptionsWdt(ctx context.Context, in *WdtStockListRequest, opts ...grpc.CallOption) (*WdtStockListResponse, error)
	TradeStatusOptionsOrder(ctx context.Context, in *TradeStatusOptionsRequest, opts ...grpc.CallOption) (*TradeStatusOptionsListResponse, error)
	TradeTypeRefundReason(ctx context.Context, in *TradeReasonOptionsRequest, opts ...grpc.CallOption) (*TradeReasonOptionListResponse, error)
	TypeOptionsRefundReason(ctx context.Context, in *ReasonTypeOptionsRequest, opts ...grpc.CallOption) (*ReasonTypeOptionListResponse, error)
	Update(ctx context.Context, in *CtmOrderRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error)
	UpdateCoupon(ctx context.Context, in *CtmCouponUpdateRequest, opts ...grpc.CallOption) (*CtmCouponResponse, error)
	UpdateOrderConf(ctx context.Context, in *CtmOrderConfUpdateRequest, opts ...grpc.CallOption) (*CtmOrderConfResponse, error)
	UpdateRefundReason(ctx context.Context, in *CtmRefundReasonUpdateRequest, opts ...grpc.CallOption) (*CtmRefundReasonResponse, error)
}

type ctmItoOrderControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCtmItoOrderControllerClient(cc grpc.ClientConnInterface) CtmItoOrderControllerClient {
	return &ctmItoOrderControllerClient{cc}
}

func (c *ctmItoOrderControllerClient) ChildrenBatchUpdateRefundReason(ctx context.Context, in *ChildrenBatchUpdateRequest, opts ...grpc.CallOption) (*ChildrenBatchUpdateResponse, error) {
	out := new(ChildrenBatchUpdateResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_ChildrenBatchUpdateRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) Create(ctx context.Context, in *CtmOrderRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error) {
	out := new(CtmOrderResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) CreateCoupon(ctx context.Context, in *CtmCouponCreateRequest, opts ...grpc.CallOption) (*CtmCouponResponse, error) {
	out := new(CtmCouponResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_CreateCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) CreateOrderConf(ctx context.Context, in *CtmOrderConfCreateRequest, opts ...grpc.CallOption) (*CtmOrderConfResponse, error) {
	out := new(CtmOrderConfResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_CreateOrderConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) CreateRefundReason(ctx context.Context, in *CtmRefundReasonCreateRequest, opts ...grpc.CallOption) (*CtmRefundReasonResponse, error) {
	out := new(CtmRefundReasonResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_CreateRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) Destroy(ctx context.Context, in *CtmOrderDestroyRequest, opts ...grpc.CallOption) (*CtmOrderDestroyResponse, error) {
	out := new(CtmOrderDestroyResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) DestroyCoupon(ctx context.Context, in *CtmCouponDestroyRequest, opts ...grpc.CallOption) (*CtmCouponDestroyResponse, error) {
	out := new(CtmCouponDestroyResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_DestroyCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) DestroyOrderConf(ctx context.Context, in *CtmOrderConfDestroyRequest, opts ...grpc.CallOption) (*CtmOrderConfDestroyResponse, error) {
	out := new(CtmOrderConfDestroyResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_DestroyOrderConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) DestroyRefundReason(ctx context.Context, in *CtmRefundReasonDestroyRequest, opts ...grpc.CallOption) (*CtmRefundReasonDestroyResponse, error) {
	out := new(CtmRefundReasonDestroyResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_DestroyRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) GetCheckListRefundReason(ctx context.Context, in *RefundReasonCheckListRequest, opts ...grpc.CallOption) (*RefundReasonCheckListResponse, error) {
	out := new(RefundReasonCheckListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_GetCheckListRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) List(ctx context.Context, in *CtmOrderListRequest, opts ...grpc.CallOption) (*CtmOrderListResponse, error) {
	out := new(CtmOrderListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) ListCoupon(ctx context.Context, in *CtmCouponListRequest, opts ...grpc.CallOption) (*CtmCouponListResponse, error) {
	out := new(CtmCouponListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_ListCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) ListOrderConf(ctx context.Context, in *CtmOrderConfListRequest, opts ...grpc.CallOption) (*CtmOrderConfListResponse, error) {
	out := new(CtmOrderConfListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_ListOrderConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) ListRefundReason(ctx context.Context, in *CtmRefundReasonListRequest, opts ...grpc.CallOption) (*CtmRefundReasonListResponse, error) {
	out := new(CtmRefundReasonListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_ListRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) PartialUpdate(ctx context.Context, in *CtmOrderPartialUpdateRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error) {
	out := new(CtmOrderResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) ReasonTypeOptionsOrderConf(ctx context.Context, in *TradeTypeOptionsRequest, opts ...grpc.CallOption) (*TradeTypeOptionListResponse, error) {
	out := new(TradeTypeOptionListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_ReasonTypeOptionsOrderConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) ReasonTypeOptionsRefundReason(ctx context.Context, in *RefundReasonOptionsRequest, opts ...grpc.CallOption) (*RefundReasonOptionListResponse, error) {
	out := new(RefundReasonOptionListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_ReasonTypeOptionsRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) Retrieve(ctx context.Context, in *CtmOrderRetrieveRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error) {
	out := new(CtmOrderResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) RetrieveCoupon(ctx context.Context, in *CtmCouponRetrieveRequest, opts ...grpc.CallOption) (*CtmCouponResponse, error) {
	out := new(CtmCouponResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_RetrieveCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) RetrieveOrderConf(ctx context.Context, in *CtmOrderConfRetrieveRequest, opts ...grpc.CallOption) (*CtmOrderConfResponse, error) {
	out := new(CtmOrderConfResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_RetrieveOrderConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) RetrieveRefundReason(ctx context.Context, in *CtmRefundReasonRetrieveRequest, opts ...grpc.CallOption) (*CtmRefundReasonResponse, error) {
	out := new(CtmRefundReasonResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_RetrieveRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) ShopOptionsWdt(ctx context.Context, in *WdtShopListRequest, opts ...grpc.CallOption) (*WdtShopListResponse, error) {
	out := new(WdtShopListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_ShopOptionsWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) StockOptionsWdt(ctx context.Context, in *WdtStockListRequest, opts ...grpc.CallOption) (*WdtStockListResponse, error) {
	out := new(WdtStockListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_StockOptionsWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) TradeStatusOptionsOrder(ctx context.Context, in *TradeStatusOptionsRequest, opts ...grpc.CallOption) (*TradeStatusOptionsListResponse, error) {
	out := new(TradeStatusOptionsListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_TradeStatusOptionsOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) TradeTypeRefundReason(ctx context.Context, in *TradeReasonOptionsRequest, opts ...grpc.CallOption) (*TradeReasonOptionListResponse, error) {
	out := new(TradeReasonOptionListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_TradeTypeRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) TypeOptionsRefundReason(ctx context.Context, in *ReasonTypeOptionsRequest, opts ...grpc.CallOption) (*ReasonTypeOptionListResponse, error) {
	out := new(ReasonTypeOptionListResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_TypeOptionsRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) Update(ctx context.Context, in *CtmOrderRequest, opts ...grpc.CallOption) (*CtmOrderResponse, error) {
	out := new(CtmOrderResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) UpdateCoupon(ctx context.Context, in *CtmCouponUpdateRequest, opts ...grpc.CallOption) (*CtmCouponResponse, error) {
	out := new(CtmCouponResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_UpdateCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) UpdateOrderConf(ctx context.Context, in *CtmOrderConfUpdateRequest, opts ...grpc.CallOption) (*CtmOrderConfResponse, error) {
	out := new(CtmOrderConfResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_UpdateOrderConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctmItoOrderControllerClient) UpdateRefundReason(ctx context.Context, in *CtmRefundReasonUpdateRequest, opts ...grpc.CallOption) (*CtmRefundReasonResponse, error) {
	out := new(CtmRefundReasonResponse)
	err := c.cc.Invoke(ctx, CtmItoOrderController_UpdateRefundReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CtmItoOrderControllerServer is the server API for CtmItoOrderController service.
// All implementations must embed UnimplementedCtmItoOrderControllerServer
// for forward compatibility
type CtmItoOrderControllerServer interface {
	ChildrenBatchUpdateRefundReason(context.Context, *ChildrenBatchUpdateRequest) (*ChildrenBatchUpdateResponse, error)
	Create(context.Context, *CtmOrderRequest) (*CtmOrderResponse, error)
	CreateCoupon(context.Context, *CtmCouponCreateRequest) (*CtmCouponResponse, error)
	CreateOrderConf(context.Context, *CtmOrderConfCreateRequest) (*CtmOrderConfResponse, error)
	CreateRefundReason(context.Context, *CtmRefundReasonCreateRequest) (*CtmRefundReasonResponse, error)
	Destroy(context.Context, *CtmOrderDestroyRequest) (*CtmOrderDestroyResponse, error)
	DestroyCoupon(context.Context, *CtmCouponDestroyRequest) (*CtmCouponDestroyResponse, error)
	DestroyOrderConf(context.Context, *CtmOrderConfDestroyRequest) (*CtmOrderConfDestroyResponse, error)
	DestroyRefundReason(context.Context, *CtmRefundReasonDestroyRequest) (*CtmRefundReasonDestroyResponse, error)
	GetCheckListRefundReason(context.Context, *RefundReasonCheckListRequest) (*RefundReasonCheckListResponse, error)
	List(context.Context, *CtmOrderListRequest) (*CtmOrderListResponse, error)
	ListCoupon(context.Context, *CtmCouponListRequest) (*CtmCouponListResponse, error)
	ListOrderConf(context.Context, *CtmOrderConfListRequest) (*CtmOrderConfListResponse, error)
	ListRefundReason(context.Context, *CtmRefundReasonListRequest) (*CtmRefundReasonListResponse, error)
	PartialUpdate(context.Context, *CtmOrderPartialUpdateRequest) (*CtmOrderResponse, error)
	ReasonTypeOptionsOrderConf(context.Context, *TradeTypeOptionsRequest) (*TradeTypeOptionListResponse, error)
	ReasonTypeOptionsRefundReason(context.Context, *RefundReasonOptionsRequest) (*RefundReasonOptionListResponse, error)
	Retrieve(context.Context, *CtmOrderRetrieveRequest) (*CtmOrderResponse, error)
	RetrieveCoupon(context.Context, *CtmCouponRetrieveRequest) (*CtmCouponResponse, error)
	RetrieveOrderConf(context.Context, *CtmOrderConfRetrieveRequest) (*CtmOrderConfResponse, error)
	RetrieveRefundReason(context.Context, *CtmRefundReasonRetrieveRequest) (*CtmRefundReasonResponse, error)
	ShopOptionsWdt(context.Context, *WdtShopListRequest) (*WdtShopListResponse, error)
	StockOptionsWdt(context.Context, *WdtStockListRequest) (*WdtStockListResponse, error)
	TradeStatusOptionsOrder(context.Context, *TradeStatusOptionsRequest) (*TradeStatusOptionsListResponse, error)
	TradeTypeRefundReason(context.Context, *TradeReasonOptionsRequest) (*TradeReasonOptionListResponse, error)
	TypeOptionsRefundReason(context.Context, *ReasonTypeOptionsRequest) (*ReasonTypeOptionListResponse, error)
	Update(context.Context, *CtmOrderRequest) (*CtmOrderResponse, error)
	UpdateCoupon(context.Context, *CtmCouponUpdateRequest) (*CtmCouponResponse, error)
	UpdateOrderConf(context.Context, *CtmOrderConfUpdateRequest) (*CtmOrderConfResponse, error)
	UpdateRefundReason(context.Context, *CtmRefundReasonUpdateRequest) (*CtmRefundReasonResponse, error)
	mustEmbedUnimplementedCtmItoOrderControllerServer()
}

// UnimplementedCtmItoOrderControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCtmItoOrderControllerServer struct {
}

func (UnimplementedCtmItoOrderControllerServer) ChildrenBatchUpdateRefundReason(context.Context, *ChildrenBatchUpdateRequest) (*ChildrenBatchUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildrenBatchUpdateRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) Create(context.Context, *CtmOrderRequest) (*CtmOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) CreateCoupon(context.Context, *CtmCouponCreateRequest) (*CtmCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoupon not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) CreateOrderConf(context.Context, *CtmOrderConfCreateRequest) (*CtmOrderConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderConf not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) CreateRefundReason(context.Context, *CtmRefundReasonCreateRequest) (*CtmRefundReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) Destroy(context.Context, *CtmOrderDestroyRequest) (*CtmOrderDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) DestroyCoupon(context.Context, *CtmCouponDestroyRequest) (*CtmCouponDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCoupon not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) DestroyOrderConf(context.Context, *CtmOrderConfDestroyRequest) (*CtmOrderConfDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyOrderConf not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) DestroyRefundReason(context.Context, *CtmRefundReasonDestroyRequest) (*CtmRefundReasonDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) GetCheckListRefundReason(context.Context, *RefundReasonCheckListRequest) (*RefundReasonCheckListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckListRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) List(context.Context, *CtmOrderListRequest) (*CtmOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) ListCoupon(context.Context, *CtmCouponListRequest) (*CtmCouponListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupon not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) ListOrderConf(context.Context, *CtmOrderConfListRequest) (*CtmOrderConfListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderConf not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) ListRefundReason(context.Context, *CtmRefundReasonListRequest) (*CtmRefundReasonListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) PartialUpdate(context.Context, *CtmOrderPartialUpdateRequest) (*CtmOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) ReasonTypeOptionsOrderConf(context.Context, *TradeTypeOptionsRequest) (*TradeTypeOptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReasonTypeOptionsOrderConf not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) ReasonTypeOptionsRefundReason(context.Context, *RefundReasonOptionsRequest) (*RefundReasonOptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReasonTypeOptionsRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) Retrieve(context.Context, *CtmOrderRetrieveRequest) (*CtmOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) RetrieveCoupon(context.Context, *CtmCouponRetrieveRequest) (*CtmCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCoupon not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) RetrieveOrderConf(context.Context, *CtmOrderConfRetrieveRequest) (*CtmOrderConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOrderConf not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) RetrieveRefundReason(context.Context, *CtmRefundReasonRetrieveRequest) (*CtmRefundReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) ShopOptionsWdt(context.Context, *WdtShopListRequest) (*WdtShopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopOptionsWdt not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) StockOptionsWdt(context.Context, *WdtStockListRequest) (*WdtStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockOptionsWdt not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) TradeStatusOptionsOrder(context.Context, *TradeStatusOptionsRequest) (*TradeStatusOptionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeStatusOptionsOrder not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) TradeTypeRefundReason(context.Context, *TradeReasonOptionsRequest) (*TradeReasonOptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeTypeRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) TypeOptionsRefundReason(context.Context, *ReasonTypeOptionsRequest) (*ReasonTypeOptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeOptionsRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) Update(context.Context, *CtmOrderRequest) (*CtmOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) UpdateCoupon(context.Context, *CtmCouponUpdateRequest) (*CtmCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoupon not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) UpdateOrderConf(context.Context, *CtmOrderConfUpdateRequest) (*CtmOrderConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderConf not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) UpdateRefundReason(context.Context, *CtmRefundReasonUpdateRequest) (*CtmRefundReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundReason not implemented")
}
func (UnimplementedCtmItoOrderControllerServer) mustEmbedUnimplementedCtmItoOrderControllerServer() {}

// UnsafeCtmItoOrderControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CtmItoOrderControllerServer will
// result in compilation errors.
type UnsafeCtmItoOrderControllerServer interface {
	mustEmbedUnimplementedCtmItoOrderControllerServer()
}

func RegisterCtmItoOrderControllerServer(s grpc.ServiceRegistrar, srv CtmItoOrderControllerServer) {
	s.RegisterService(&CtmItoOrderController_ServiceDesc, srv)
}

func _CtmItoOrderController_ChildrenBatchUpdateRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChildrenBatchUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).ChildrenBatchUpdateRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_ChildrenBatchUpdateRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).ChildrenBatchUpdateRefundReason(ctx, req.(*ChildrenBatchUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).Create(ctx, req.(*CtmOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_CreateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmCouponCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).CreateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_CreateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).CreateCoupon(ctx, req.(*CtmCouponCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_CreateOrderConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderConfCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).CreateOrderConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_CreateOrderConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).CreateOrderConf(ctx, req.(*CtmOrderConfCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_CreateRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundReasonCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).CreateRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_CreateRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).CreateRefundReason(ctx, req.(*CtmRefundReasonCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).Destroy(ctx, req.(*CtmOrderDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_DestroyCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmCouponDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).DestroyCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_DestroyCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).DestroyCoupon(ctx, req.(*CtmCouponDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_DestroyOrderConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderConfDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).DestroyOrderConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_DestroyOrderConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).DestroyOrderConf(ctx, req.(*CtmOrderConfDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_DestroyRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundReasonDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).DestroyRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_DestroyRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).DestroyRefundReason(ctx, req.(*CtmRefundReasonDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_GetCheckListRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundReasonCheckListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).GetCheckListRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_GetCheckListRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).GetCheckListRefundReason(ctx, req.(*RefundReasonCheckListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).List(ctx, req.(*CtmOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_ListCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmCouponListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).ListCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_ListCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).ListCoupon(ctx, req.(*CtmCouponListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_ListOrderConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderConfListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).ListOrderConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_ListOrderConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).ListOrderConf(ctx, req.(*CtmOrderConfListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_ListRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundReasonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).ListRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_ListRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).ListRefundReason(ctx, req.(*CtmRefundReasonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).PartialUpdate(ctx, req.(*CtmOrderPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_ReasonTypeOptionsOrderConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeTypeOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).ReasonTypeOptionsOrderConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_ReasonTypeOptionsOrderConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).ReasonTypeOptionsOrderConf(ctx, req.(*TradeTypeOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_ReasonTypeOptionsRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundReasonOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).ReasonTypeOptionsRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_ReasonTypeOptionsRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).ReasonTypeOptionsRefundReason(ctx, req.(*RefundReasonOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).Retrieve(ctx, req.(*CtmOrderRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_RetrieveCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmCouponRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).RetrieveCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_RetrieveCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).RetrieveCoupon(ctx, req.(*CtmCouponRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_RetrieveOrderConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderConfRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).RetrieveOrderConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_RetrieveOrderConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).RetrieveOrderConf(ctx, req.(*CtmOrderConfRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_RetrieveRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundReasonRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).RetrieveRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_RetrieveRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).RetrieveRefundReason(ctx, req.(*CtmRefundReasonRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_ShopOptionsWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtShopListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).ShopOptionsWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_ShopOptionsWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).ShopOptionsWdt(ctx, req.(*WdtShopListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_StockOptionsWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).StockOptionsWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_StockOptionsWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).StockOptionsWdt(ctx, req.(*WdtStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_TradeStatusOptionsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeStatusOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).TradeStatusOptionsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_TradeStatusOptionsOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).TradeStatusOptionsOrder(ctx, req.(*TradeStatusOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_TradeTypeRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeReasonOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).TradeTypeRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_TradeTypeRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).TradeTypeRefundReason(ctx, req.(*TradeReasonOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_TypeOptionsRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReasonTypeOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).TypeOptionsRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_TypeOptionsRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).TypeOptionsRefundReason(ctx, req.(*ReasonTypeOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).Update(ctx, req.(*CtmOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_UpdateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmCouponUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).UpdateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_UpdateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).UpdateCoupon(ctx, req.(*CtmCouponUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_UpdateOrderConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmOrderConfUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).UpdateOrderConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_UpdateOrderConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).UpdateOrderConf(ctx, req.(*CtmOrderConfUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CtmItoOrderController_UpdateRefundReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmRefundReasonUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtmItoOrderControllerServer).UpdateRefundReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CtmItoOrderController_UpdateRefundReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtmItoOrderControllerServer).UpdateRefundReason(ctx, req.(*CtmRefundReasonUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CtmItoOrderController_ServiceDesc is the grpc.ServiceDesc for CtmItoOrderController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CtmItoOrderController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer_service.customer_ito.CtmItoOrderController",
	HandlerType: (*CtmItoOrderControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChildrenBatchUpdateRefundReason",
			Handler:    _CtmItoOrderController_ChildrenBatchUpdateRefundReason_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CtmItoOrderController_Create_Handler,
		},
		{
			MethodName: "CreateCoupon",
			Handler:    _CtmItoOrderController_CreateCoupon_Handler,
		},
		{
			MethodName: "CreateOrderConf",
			Handler:    _CtmItoOrderController_CreateOrderConf_Handler,
		},
		{
			MethodName: "CreateRefundReason",
			Handler:    _CtmItoOrderController_CreateRefundReason_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CtmItoOrderController_Destroy_Handler,
		},
		{
			MethodName: "DestroyCoupon",
			Handler:    _CtmItoOrderController_DestroyCoupon_Handler,
		},
		{
			MethodName: "DestroyOrderConf",
			Handler:    _CtmItoOrderController_DestroyOrderConf_Handler,
		},
		{
			MethodName: "DestroyRefundReason",
			Handler:    _CtmItoOrderController_DestroyRefundReason_Handler,
		},
		{
			MethodName: "GetCheckListRefundReason",
			Handler:    _CtmItoOrderController_GetCheckListRefundReason_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CtmItoOrderController_List_Handler,
		},
		{
			MethodName: "ListCoupon",
			Handler:    _CtmItoOrderController_ListCoupon_Handler,
		},
		{
			MethodName: "ListOrderConf",
			Handler:    _CtmItoOrderController_ListOrderConf_Handler,
		},
		{
			MethodName: "ListRefundReason",
			Handler:    _CtmItoOrderController_ListRefundReason_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CtmItoOrderController_PartialUpdate_Handler,
		},
		{
			MethodName: "ReasonTypeOptionsOrderConf",
			Handler:    _CtmItoOrderController_ReasonTypeOptionsOrderConf_Handler,
		},
		{
			MethodName: "ReasonTypeOptionsRefundReason",
			Handler:    _CtmItoOrderController_ReasonTypeOptionsRefundReason_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CtmItoOrderController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveCoupon",
			Handler:    _CtmItoOrderController_RetrieveCoupon_Handler,
		},
		{
			MethodName: "RetrieveOrderConf",
			Handler:    _CtmItoOrderController_RetrieveOrderConf_Handler,
		},
		{
			MethodName: "RetrieveRefundReason",
			Handler:    _CtmItoOrderController_RetrieveRefundReason_Handler,
		},
		{
			MethodName: "ShopOptionsWdt",
			Handler:    _CtmItoOrderController_ShopOptionsWdt_Handler,
		},
		{
			MethodName: "StockOptionsWdt",
			Handler:    _CtmItoOrderController_StockOptionsWdt_Handler,
		},
		{
			MethodName: "TradeStatusOptionsOrder",
			Handler:    _CtmItoOrderController_TradeStatusOptionsOrder_Handler,
		},
		{
			MethodName: "TradeTypeRefundReason",
			Handler:    _CtmItoOrderController_TradeTypeRefundReason_Handler,
		},
		{
			MethodName: "TypeOptionsRefundReason",
			Handler:    _CtmItoOrderController_TypeOptionsRefundReason_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CtmItoOrderController_Update_Handler,
		},
		{
			MethodName: "UpdateCoupon",
			Handler:    _CtmItoOrderController_UpdateCoupon_Handler,
		},
		{
			MethodName: "UpdateOrderConf",
			Handler:    _CtmItoOrderController_UpdateOrderConf_Handler,
		},
		{
			MethodName: "UpdateRefundReason",
			Handler:    _CtmItoOrderController_UpdateRefundReason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_ito.proto",
}
