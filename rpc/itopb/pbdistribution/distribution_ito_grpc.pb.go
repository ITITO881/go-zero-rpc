// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: distribution_ito.proto

package pbdistribution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DistributionTradesController_Create_FullMethodName              = "/distribution_service.distribution_ito.DistributionTradesController/Create"
	DistributionTradesController_Destroy_FullMethodName             = "/distribution_service.distribution_ito.DistributionTradesController/Destroy"
	DistributionTradesController_DistributionNextTid_FullMethodName = "/distribution_service.distribution_ito.DistributionTradesController/DistributionNextTid"
	DistributionTradesController_List_FullMethodName                = "/distribution_service.distribution_ito.DistributionTradesController/List"
	DistributionTradesController_PartialUpdate_FullMethodName       = "/distribution_service.distribution_ito.DistributionTradesController/PartialUpdate"
	DistributionTradesController_Retrieve_FullMethodName            = "/distribution_service.distribution_ito.DistributionTradesController/Retrieve"
	DistributionTradesController_Update_FullMethodName              = "/distribution_service.distribution_ito.DistributionTradesController/Update"
)

// DistributionTradesControllerClient is the client API for DistributionTradesController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionTradesControllerClient interface {
	Create(ctx context.Context, in *StoreTradesRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error)
	Destroy(ctx context.Context, in *StoreTradesDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DistributionNextTid(ctx context.Context, in *NextTidRequest, opts ...grpc.CallOption) (*NextTidResponse, error)
	List(ctx context.Context, in *StoreTradesListRequest, opts ...grpc.CallOption) (*StoreTradesListResponse, error)
	PartialUpdate(ctx context.Context, in *StoreTradesPartialUpdateRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error)
	Retrieve(ctx context.Context, in *StoreTradesRetrieveRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error)
	Update(ctx context.Context, in *StoreTradesRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error)
}

type distributionTradesControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionTradesControllerClient(cc grpc.ClientConnInterface) DistributionTradesControllerClient {
	return &distributionTradesControllerClient{cc}
}

func (c *distributionTradesControllerClient) Create(ctx context.Context, in *StoreTradesRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error) {
	out := new(StoreTradesResponse)
	err := c.cc.Invoke(ctx, DistributionTradesController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionTradesControllerClient) Destroy(ctx context.Context, in *StoreTradesDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DistributionTradesController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionTradesControllerClient) DistributionNextTid(ctx context.Context, in *NextTidRequest, opts ...grpc.CallOption) (*NextTidResponse, error) {
	out := new(NextTidResponse)
	err := c.cc.Invoke(ctx, DistributionTradesController_DistributionNextTid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionTradesControllerClient) List(ctx context.Context, in *StoreTradesListRequest, opts ...grpc.CallOption) (*StoreTradesListResponse, error) {
	out := new(StoreTradesListResponse)
	err := c.cc.Invoke(ctx, DistributionTradesController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionTradesControllerClient) PartialUpdate(ctx context.Context, in *StoreTradesPartialUpdateRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error) {
	out := new(StoreTradesResponse)
	err := c.cc.Invoke(ctx, DistributionTradesController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionTradesControllerClient) Retrieve(ctx context.Context, in *StoreTradesRetrieveRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error) {
	out := new(StoreTradesResponse)
	err := c.cc.Invoke(ctx, DistributionTradesController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionTradesControllerClient) Update(ctx context.Context, in *StoreTradesRequest, opts ...grpc.CallOption) (*StoreTradesResponse, error) {
	out := new(StoreTradesResponse)
	err := c.cc.Invoke(ctx, DistributionTradesController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionTradesControllerServer is the server API for DistributionTradesController service.
// All implementations must embed UnimplementedDistributionTradesControllerServer
// for forward compatibility
type DistributionTradesControllerServer interface {
	Create(context.Context, *StoreTradesRequest) (*StoreTradesResponse, error)
	Destroy(context.Context, *StoreTradesDestroyRequest) (*emptypb.Empty, error)
	DistributionNextTid(context.Context, *NextTidRequest) (*NextTidResponse, error)
	List(context.Context, *StoreTradesListRequest) (*StoreTradesListResponse, error)
	PartialUpdate(context.Context, *StoreTradesPartialUpdateRequest) (*StoreTradesResponse, error)
	Retrieve(context.Context, *StoreTradesRetrieveRequest) (*StoreTradesResponse, error)
	Update(context.Context, *StoreTradesRequest) (*StoreTradesResponse, error)
	mustEmbedUnimplementedDistributionTradesControllerServer()
}

// UnimplementedDistributionTradesControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionTradesControllerServer struct {
}

func (UnimplementedDistributionTradesControllerServer) Create(context.Context, *StoreTradesRequest) (*StoreTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDistributionTradesControllerServer) Destroy(context.Context, *StoreTradesDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedDistributionTradesControllerServer) DistributionNextTid(context.Context, *NextTidRequest) (*NextTidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributionNextTid not implemented")
}
func (UnimplementedDistributionTradesControllerServer) List(context.Context, *StoreTradesListRequest) (*StoreTradesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDistributionTradesControllerServer) PartialUpdate(context.Context, *StoreTradesPartialUpdateRequest) (*StoreTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedDistributionTradesControllerServer) Retrieve(context.Context, *StoreTradesRetrieveRequest) (*StoreTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedDistributionTradesControllerServer) Update(context.Context, *StoreTradesRequest) (*StoreTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDistributionTradesControllerServer) mustEmbedUnimplementedDistributionTradesControllerServer() {
}

// UnsafeDistributionTradesControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionTradesControllerServer will
// result in compilation errors.
type UnsafeDistributionTradesControllerServer interface {
	mustEmbedUnimplementedDistributionTradesControllerServer()
}

func RegisterDistributionTradesControllerServer(s grpc.ServiceRegistrar, srv DistributionTradesControllerServer) {
	s.RegisterService(&DistributionTradesController_ServiceDesc, srv)
}

func _DistributionTradesController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionTradesControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionTradesController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionTradesControllerServer).Create(ctx, req.(*StoreTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionTradesController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionTradesControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionTradesController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionTradesControllerServer).Destroy(ctx, req.(*StoreTradesDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionTradesController_DistributionNextTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextTidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionTradesControllerServer).DistributionNextTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionTradesController_DistributionNextTid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionTradesControllerServer).DistributionNextTid(ctx, req.(*NextTidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionTradesController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionTradesControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionTradesController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionTradesControllerServer).List(ctx, req.(*StoreTradesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionTradesController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionTradesControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionTradesController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionTradesControllerServer).PartialUpdate(ctx, req.(*StoreTradesPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionTradesController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionTradesControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionTradesController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionTradesControllerServer).Retrieve(ctx, req.(*StoreTradesRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionTradesController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionTradesControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionTradesController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionTradesControllerServer).Update(ctx, req.(*StoreTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributionTradesController_ServiceDesc is the grpc.ServiceDesc for DistributionTradesController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributionTradesController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distribution_service.distribution_ito.DistributionTradesController",
	HandlerType: (*DistributionTradesControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DistributionTradesController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _DistributionTradesController_Destroy_Handler,
		},
		{
			MethodName: "DistributionNextTid",
			Handler:    _DistributionTradesController_DistributionNextTid_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DistributionTradesController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _DistributionTradesController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _DistributionTradesController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DistributionTradesController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distribution_ito.proto",
}
