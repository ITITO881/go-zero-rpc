// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: activity_ito.proto

package activityito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActivityBrandController_BlogCreate_FullMethodName           = "/activity_service.activity_ito.ActivityBrandController/BlogCreate"
	ActivityBrandController_BlogDestroy_FullMethodName          = "/activity_service.activity_ito.ActivityBrandController/BlogDestroy"
	ActivityBrandController_BlogInteractCreate_FullMethodName   = "/activity_service.activity_ito.ActivityBrandController/BlogInteractCreate"
	ActivityBrandController_BlogInteractDestroy_FullMethodName  = "/activity_service.activity_ito.ActivityBrandController/BlogInteractDestroy"
	ActivityBrandController_BlogInteractList_FullMethodName     = "/activity_service.activity_ito.ActivityBrandController/BlogInteractList"
	ActivityBrandController_BlogInteractRetrieve_FullMethodName = "/activity_service.activity_ito.ActivityBrandController/BlogInteractRetrieve"
	ActivityBrandController_BlogInteractUpdate_FullMethodName   = "/activity_service.activity_ito.ActivityBrandController/BlogInteractUpdate"
	ActivityBrandController_BlogList_FullMethodName             = "/activity_service.activity_ito.ActivityBrandController/BlogList"
	ActivityBrandController_BlogRetrieve_FullMethodName         = "/activity_service.activity_ito.ActivityBrandController/BlogRetrieve"
	ActivityBrandController_BlogUpdate_FullMethodName           = "/activity_service.activity_ito.ActivityBrandController/BlogUpdate"
	ActivityBrandController_CaresCreate_FullMethodName          = "/activity_service.activity_ito.ActivityBrandController/CaresCreate"
	ActivityBrandController_CaresDestroy_FullMethodName         = "/activity_service.activity_ito.ActivityBrandController/CaresDestroy"
	ActivityBrandController_CaresList_FullMethodName            = "/activity_service.activity_ito.ActivityBrandController/CaresList"
	ActivityBrandController_CaresRecordCreate_FullMethodName    = "/activity_service.activity_ito.ActivityBrandController/CaresRecordCreate"
	ActivityBrandController_CaresRecordDestroy_FullMethodName   = "/activity_service.activity_ito.ActivityBrandController/CaresRecordDestroy"
	ActivityBrandController_CaresRecordList_FullMethodName      = "/activity_service.activity_ito.ActivityBrandController/CaresRecordList"
	ActivityBrandController_CaresRecordRetrieve_FullMethodName  = "/activity_service.activity_ito.ActivityBrandController/CaresRecordRetrieve"
	ActivityBrandController_CaresRecordUpdate_FullMethodName    = "/activity_service.activity_ito.ActivityBrandController/CaresRecordUpdate"
	ActivityBrandController_CaresRetrieve_FullMethodName        = "/activity_service.activity_ito.ActivityBrandController/CaresRetrieve"
	ActivityBrandController_CaresUpdate_FullMethodName          = "/activity_service.activity_ito.ActivityBrandController/CaresUpdate"
	ActivityBrandController_Create_FullMethodName               = "/activity_service.activity_ito.ActivityBrandController/Create"
	ActivityBrandController_Destroy_FullMethodName              = "/activity_service.activity_ito.ActivityBrandController/Destroy"
	ActivityBrandController_List_FullMethodName                 = "/activity_service.activity_ito.ActivityBrandController/List"
	ActivityBrandController_NutCreate_FullMethodName            = "/activity_service.activity_ito.ActivityBrandController/NutCreate"
	ActivityBrandController_NutDestroy_FullMethodName           = "/activity_service.activity_ito.ActivityBrandController/NutDestroy"
	ActivityBrandController_NutList_FullMethodName              = "/activity_service.activity_ito.ActivityBrandController/NutList"
	ActivityBrandController_NutRecordCreate_FullMethodName      = "/activity_service.activity_ito.ActivityBrandController/NutRecordCreate"
	ActivityBrandController_NutRecordDestroy_FullMethodName     = "/activity_service.activity_ito.ActivityBrandController/NutRecordDestroy"
	ActivityBrandController_NutRecordList_FullMethodName        = "/activity_service.activity_ito.ActivityBrandController/NutRecordList"
	ActivityBrandController_NutRecordRetrieve_FullMethodName    = "/activity_service.activity_ito.ActivityBrandController/NutRecordRetrieve"
	ActivityBrandController_NutRecordUpdate_FullMethodName      = "/activity_service.activity_ito.ActivityBrandController/NutRecordUpdate"
	ActivityBrandController_NutRetrieve_FullMethodName          = "/activity_service.activity_ito.ActivityBrandController/NutRetrieve"
	ActivityBrandController_NutUpdate_FullMethodName            = "/activity_service.activity_ito.ActivityBrandController/NutUpdate"
	ActivityBrandController_PartialUpdate_FullMethodName        = "/activity_service.activity_ito.ActivityBrandController/PartialUpdate"
	ActivityBrandController_RecordCreate_FullMethodName         = "/activity_service.activity_ito.ActivityBrandController/RecordCreate"
	ActivityBrandController_RecordDestroy_FullMethodName        = "/activity_service.activity_ito.ActivityBrandController/RecordDestroy"
	ActivityBrandController_RecordList_FullMethodName           = "/activity_service.activity_ito.ActivityBrandController/RecordList"
	ActivityBrandController_RecordRetrieve_FullMethodName       = "/activity_service.activity_ito.ActivityBrandController/RecordRetrieve"
	ActivityBrandController_RecordUpdate_FullMethodName         = "/activity_service.activity_ito.ActivityBrandController/RecordUpdate"
	ActivityBrandController_Retrieve_FullMethodName             = "/activity_service.activity_ito.ActivityBrandController/Retrieve"
	ActivityBrandController_Update_FullMethodName               = "/activity_service.activity_ito.ActivityBrandController/Update"
	ActivityBrandController_UserApplyCreate_FullMethodName      = "/activity_service.activity_ito.ActivityBrandController/UserApplyCreate"
	ActivityBrandController_UserApplyDestroy_FullMethodName     = "/activity_service.activity_ito.ActivityBrandController/UserApplyDestroy"
	ActivityBrandController_UserApplyList_FullMethodName        = "/activity_service.activity_ito.ActivityBrandController/UserApplyList"
	ActivityBrandController_UserApplyRetrieve_FullMethodName    = "/activity_service.activity_ito.ActivityBrandController/UserApplyRetrieve"
	ActivityBrandController_UserApplyUpdate_FullMethodName      = "/activity_service.activity_ito.ActivityBrandController/UserApplyUpdate"
)

// ActivityBrandControllerClient is the client API for ActivityBrandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityBrandControllerClient interface {
	BlogCreate(ctx context.Context, in *BlogRequest, opts ...grpc.CallOption) (*BlogResponse, error)
	BlogDestroy(ctx context.Context, in *ActivityBrandBlogDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlogInteractCreate(ctx context.Context, in *BlogInteractRequest, opts ...grpc.CallOption) (*BlogInteractResponse, error)
	BlogInteractDestroy(ctx context.Context, in *BlogInteractDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlogInteractList(ctx context.Context, in *BlogInteractListRequest, opts ...grpc.CallOption) (*BlogInteractListResponse, error)
	BlogInteractRetrieve(ctx context.Context, in *BlogInteractRetrieveRequest, opts ...grpc.CallOption) (*BlogInteractResponse, error)
	BlogInteractUpdate(ctx context.Context, in *BlogInteractUpdateRequest, opts ...grpc.CallOption) (*BlogInteractResponse, error)
	BlogList(ctx context.Context, in *BlogListRequest, opts ...grpc.CallOption) (*BlogListResponse, error)
	BlogRetrieve(ctx context.Context, in *BlogRetrieveRequest, opts ...grpc.CallOption) (*BlogResponse, error)
	BlogUpdate(ctx context.Context, in *BlogUpdateRequest, opts ...grpc.CallOption) (*BlogResponse, error)
	CaresCreate(ctx context.Context, in *ActivityBrandCaresRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error)
	CaresDestroy(ctx context.Context, in *ActivityBrandCaresDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CaresList(ctx context.Context, in *ActivityBrandCaresListRequest, opts ...grpc.CallOption) (*ActivityBrandCaresListResponse, error)
	CaresRecordCreate(ctx context.Context, in *ActivityBrandCaresRecordRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordResponse, error)
	CaresRecordDestroy(ctx context.Context, in *ActivityBrandCaresRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CaresRecordList(ctx context.Context, in *ActivityBrandCaresRecordListRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordListResponse, error)
	CaresRecordRetrieve(ctx context.Context, in *ActivityBrandCaresRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordResponse, error)
	CaresRecordUpdate(ctx context.Context, in *ActivityBrandCaresRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordResponse, error)
	CaresRetrieve(ctx context.Context, in *ActivityBrandCaresRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error)
	CaresUpdate(ctx context.Context, in *ActivityBrandCaresUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error)
	Create(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
	Destroy(ctx context.Context, in *ActivityBrandDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ActivityBrandListRequest, opts ...grpc.CallOption) (*ActivityBrandListResponse, error)
	NutCreate(ctx context.Context, in *ActivityBrandNutRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error)
	NutDestroy(ctx context.Context, in *ActivityBrandNutDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NutList(ctx context.Context, in *ActivityBrandNutListRequest, opts ...grpc.CallOption) (*ActivityBrandNutListResponse, error)
	NutRecordCreate(ctx context.Context, in *ActivityBrandNutRecordRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordResponse, error)
	NutRecordDestroy(ctx context.Context, in *ActivityBrandNutRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NutRecordList(ctx context.Context, in *ActivityBrandNutRecordListRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordListResponse, error)
	NutRecordRetrieve(ctx context.Context, in *ActivityBrandNutRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordResponse, error)
	NutRecordUpdate(ctx context.Context, in *ActivityBrandNutRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordResponse, error)
	NutRetrieve(ctx context.Context, in *ActivityBrandNutRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error)
	NutUpdate(ctx context.Context, in *ActivityBrandNutUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error)
	PartialUpdate(ctx context.Context, in *ActivityBrandPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
	RecordCreate(ctx context.Context, in *ActivityBrandRecordRequest, opts ...grpc.CallOption) (*ActivityBrandRecordResponse, error)
	RecordDestroy(ctx context.Context, in *ActivityBrandRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RecordList(ctx context.Context, in *ActivityBrandRecordListRequest, opts ...grpc.CallOption) (*ActivityBrandRecordListResponse, error)
	RecordRetrieve(ctx context.Context, in *ActivityBrandRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandRecordResponse, error)
	RecordUpdate(ctx context.Context, in *ActivityBrandRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandRecordResponse, error)
	Retrieve(ctx context.Context, in *ActivityBrandRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
	Update(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
	UserApplyCreate(ctx context.Context, in *ActivityUserApplyRequest, opts ...grpc.CallOption) (*ActivityUserApplyResponse, error)
	UserApplyDestroy(ctx context.Context, in *ActivityBrandUserApplyDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserApplyList(ctx context.Context, in *ActivityUserApplyListRequest, opts ...grpc.CallOption) (*ActivityUserApplyListResponse, error)
	UserApplyRetrieve(ctx context.Context, in *ActivityUserApplyRetrieveRequest, opts ...grpc.CallOption) (*ActivityUserApplyResponse, error)
	UserApplyUpdate(ctx context.Context, in *ActivityUserApplyUpdateRequest, opts ...grpc.CallOption) (*ActivityUserApplyResponse, error)
}

type activityBrandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityBrandControllerClient(cc grpc.ClientConnInterface) ActivityBrandControllerClient {
	return &activityBrandControllerClient{cc}
}

func (c *activityBrandControllerClient) BlogCreate(ctx context.Context, in *BlogRequest, opts ...grpc.CallOption) (*BlogResponse, error) {
	out := new(BlogResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogDestroy(ctx context.Context, in *ActivityBrandBlogDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogInteractCreate(ctx context.Context, in *BlogInteractRequest, opts ...grpc.CallOption) (*BlogInteractResponse, error) {
	out := new(BlogInteractResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogInteractCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogInteractDestroy(ctx context.Context, in *BlogInteractDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogInteractDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogInteractList(ctx context.Context, in *BlogInteractListRequest, opts ...grpc.CallOption) (*BlogInteractListResponse, error) {
	out := new(BlogInteractListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogInteractList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogInteractRetrieve(ctx context.Context, in *BlogInteractRetrieveRequest, opts ...grpc.CallOption) (*BlogInteractResponse, error) {
	out := new(BlogInteractResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogInteractRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogInteractUpdate(ctx context.Context, in *BlogInteractUpdateRequest, opts ...grpc.CallOption) (*BlogInteractResponse, error) {
	out := new(BlogInteractResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogInteractUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogList(ctx context.Context, in *BlogListRequest, opts ...grpc.CallOption) (*BlogListResponse, error) {
	out := new(BlogListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogRetrieve(ctx context.Context, in *BlogRetrieveRequest, opts ...grpc.CallOption) (*BlogResponse, error) {
	out := new(BlogResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) BlogUpdate(ctx context.Context, in *BlogUpdateRequest, opts ...grpc.CallOption) (*BlogResponse, error) {
	out := new(BlogResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_BlogUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresCreate(ctx context.Context, in *ActivityBrandCaresRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error) {
	out := new(ActivityBrandCaresResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresDestroy(ctx context.Context, in *ActivityBrandCaresDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresList(ctx context.Context, in *ActivityBrandCaresListRequest, opts ...grpc.CallOption) (*ActivityBrandCaresListResponse, error) {
	out := new(ActivityBrandCaresListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresRecordCreate(ctx context.Context, in *ActivityBrandCaresRecordRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordResponse, error) {
	out := new(ActivityBrandCaresRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresRecordCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresRecordDestroy(ctx context.Context, in *ActivityBrandCaresRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresRecordDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresRecordList(ctx context.Context, in *ActivityBrandCaresRecordListRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordListResponse, error) {
	out := new(ActivityBrandCaresRecordListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresRecordRetrieve(ctx context.Context, in *ActivityBrandCaresRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordResponse, error) {
	out := new(ActivityBrandCaresRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresRecordRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresRecordUpdate(ctx context.Context, in *ActivityBrandCaresRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandCaresRecordResponse, error) {
	out := new(ActivityBrandCaresRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresRecordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresRetrieve(ctx context.Context, in *ActivityBrandCaresRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error) {
	out := new(ActivityBrandCaresResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) CaresUpdate(ctx context.Context, in *ActivityBrandCaresUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error) {
	out := new(ActivityBrandCaresResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_CaresUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) Create(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) Destroy(ctx context.Context, in *ActivityBrandDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) List(ctx context.Context, in *ActivityBrandListRequest, opts ...grpc.CallOption) (*ActivityBrandListResponse, error) {
	out := new(ActivityBrandListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutCreate(ctx context.Context, in *ActivityBrandNutRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error) {
	out := new(ActivityBrandNutResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutDestroy(ctx context.Context, in *ActivityBrandNutDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutList(ctx context.Context, in *ActivityBrandNutListRequest, opts ...grpc.CallOption) (*ActivityBrandNutListResponse, error) {
	out := new(ActivityBrandNutListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutRecordCreate(ctx context.Context, in *ActivityBrandNutRecordRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordResponse, error) {
	out := new(ActivityBrandNutRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutRecordCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutRecordDestroy(ctx context.Context, in *ActivityBrandNutRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutRecordDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutRecordList(ctx context.Context, in *ActivityBrandNutRecordListRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordListResponse, error) {
	out := new(ActivityBrandNutRecordListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutRecordRetrieve(ctx context.Context, in *ActivityBrandNutRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordResponse, error) {
	out := new(ActivityBrandNutRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutRecordRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutRecordUpdate(ctx context.Context, in *ActivityBrandNutRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandNutRecordResponse, error) {
	out := new(ActivityBrandNutRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutRecordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutRetrieve(ctx context.Context, in *ActivityBrandNutRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error) {
	out := new(ActivityBrandNutResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) NutUpdate(ctx context.Context, in *ActivityBrandNutUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error) {
	out := new(ActivityBrandNutResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_NutUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) PartialUpdate(ctx context.Context, in *ActivityBrandPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) RecordCreate(ctx context.Context, in *ActivityBrandRecordRequest, opts ...grpc.CallOption) (*ActivityBrandRecordResponse, error) {
	out := new(ActivityBrandRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_RecordCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) RecordDestroy(ctx context.Context, in *ActivityBrandRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_RecordDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) RecordList(ctx context.Context, in *ActivityBrandRecordListRequest, opts ...grpc.CallOption) (*ActivityBrandRecordListResponse, error) {
	out := new(ActivityBrandRecordListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_RecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) RecordRetrieve(ctx context.Context, in *ActivityBrandRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandRecordResponse, error) {
	out := new(ActivityBrandRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_RecordRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) RecordUpdate(ctx context.Context, in *ActivityBrandRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandRecordResponse, error) {
	out := new(ActivityBrandRecordResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_RecordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) Retrieve(ctx context.Context, in *ActivityBrandRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) Update(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) UserApplyCreate(ctx context.Context, in *ActivityUserApplyRequest, opts ...grpc.CallOption) (*ActivityUserApplyResponse, error) {
	out := new(ActivityUserApplyResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_UserApplyCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) UserApplyDestroy(ctx context.Context, in *ActivityBrandUserApplyDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_UserApplyDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) UserApplyList(ctx context.Context, in *ActivityUserApplyListRequest, opts ...grpc.CallOption) (*ActivityUserApplyListResponse, error) {
	out := new(ActivityUserApplyListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_UserApplyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) UserApplyRetrieve(ctx context.Context, in *ActivityUserApplyRetrieveRequest, opts ...grpc.CallOption) (*ActivityUserApplyResponse, error) {
	out := new(ActivityUserApplyResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_UserApplyRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) UserApplyUpdate(ctx context.Context, in *ActivityUserApplyUpdateRequest, opts ...grpc.CallOption) (*ActivityUserApplyResponse, error) {
	out := new(ActivityUserApplyResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_UserApplyUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityBrandControllerServer is the server API for ActivityBrandController service.
// All implementations must embed UnimplementedActivityBrandControllerServer
// for forward compatibility
type ActivityBrandControllerServer interface {
	BlogCreate(context.Context, *BlogRequest) (*BlogResponse, error)
	BlogDestroy(context.Context, *ActivityBrandBlogDestroyRequest) (*emptypb.Empty, error)
	BlogInteractCreate(context.Context, *BlogInteractRequest) (*BlogInteractResponse, error)
	BlogInteractDestroy(context.Context, *BlogInteractDestroyRequest) (*emptypb.Empty, error)
	BlogInteractList(context.Context, *BlogInteractListRequest) (*BlogInteractListResponse, error)
	BlogInteractRetrieve(context.Context, *BlogInteractRetrieveRequest) (*BlogInteractResponse, error)
	BlogInteractUpdate(context.Context, *BlogInteractUpdateRequest) (*BlogInteractResponse, error)
	BlogList(context.Context, *BlogListRequest) (*BlogListResponse, error)
	BlogRetrieve(context.Context, *BlogRetrieveRequest) (*BlogResponse, error)
	BlogUpdate(context.Context, *BlogUpdateRequest) (*BlogResponse, error)
	CaresCreate(context.Context, *ActivityBrandCaresRequest) (*ActivityBrandCaresResponse, error)
	CaresDestroy(context.Context, *ActivityBrandCaresDestroyRequest) (*emptypb.Empty, error)
	CaresList(context.Context, *ActivityBrandCaresListRequest) (*ActivityBrandCaresListResponse, error)
	CaresRecordCreate(context.Context, *ActivityBrandCaresRecordRequest) (*ActivityBrandCaresRecordResponse, error)
	CaresRecordDestroy(context.Context, *ActivityBrandCaresRecordDestroyRequest) (*emptypb.Empty, error)
	CaresRecordList(context.Context, *ActivityBrandCaresRecordListRequest) (*ActivityBrandCaresRecordListResponse, error)
	CaresRecordRetrieve(context.Context, *ActivityBrandCaresRecordRetrieveRequest) (*ActivityBrandCaresRecordResponse, error)
	CaresRecordUpdate(context.Context, *ActivityBrandCaresRecordUpdateRequest) (*ActivityBrandCaresRecordResponse, error)
	CaresRetrieve(context.Context, *ActivityBrandCaresRetrieveRequest) (*ActivityBrandCaresResponse, error)
	CaresUpdate(context.Context, *ActivityBrandCaresUpdateRequest) (*ActivityBrandCaresResponse, error)
	Create(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error)
	Destroy(context.Context, *ActivityBrandDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *ActivityBrandListRequest) (*ActivityBrandListResponse, error)
	NutCreate(context.Context, *ActivityBrandNutRequest) (*ActivityBrandNutResponse, error)
	NutDestroy(context.Context, *ActivityBrandNutDestroyRequest) (*emptypb.Empty, error)
	NutList(context.Context, *ActivityBrandNutListRequest) (*ActivityBrandNutListResponse, error)
	NutRecordCreate(context.Context, *ActivityBrandNutRecordRequest) (*ActivityBrandNutRecordResponse, error)
	NutRecordDestroy(context.Context, *ActivityBrandNutRecordDestroyRequest) (*emptypb.Empty, error)
	NutRecordList(context.Context, *ActivityBrandNutRecordListRequest) (*ActivityBrandNutRecordListResponse, error)
	NutRecordRetrieve(context.Context, *ActivityBrandNutRecordRetrieveRequest) (*ActivityBrandNutRecordResponse, error)
	NutRecordUpdate(context.Context, *ActivityBrandNutRecordUpdateRequest) (*ActivityBrandNutRecordResponse, error)
	NutRetrieve(context.Context, *ActivityBrandNutRetrieveRequest) (*ActivityBrandNutResponse, error)
	NutUpdate(context.Context, *ActivityBrandNutUpdateRequest) (*ActivityBrandNutResponse, error)
	PartialUpdate(context.Context, *ActivityBrandPartialUpdateRequest) (*ActivityBrandResponse, error)
	RecordCreate(context.Context, *ActivityBrandRecordRequest) (*ActivityBrandRecordResponse, error)
	RecordDestroy(context.Context, *ActivityBrandRecordDestroyRequest) (*emptypb.Empty, error)
	RecordList(context.Context, *ActivityBrandRecordListRequest) (*ActivityBrandRecordListResponse, error)
	RecordRetrieve(context.Context, *ActivityBrandRecordRetrieveRequest) (*ActivityBrandRecordResponse, error)
	RecordUpdate(context.Context, *ActivityBrandRecordUpdateRequest) (*ActivityBrandRecordResponse, error)
	Retrieve(context.Context, *ActivityBrandRetrieveRequest) (*ActivityBrandResponse, error)
	Update(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error)
	UserApplyCreate(context.Context, *ActivityUserApplyRequest) (*ActivityUserApplyResponse, error)
	UserApplyDestroy(context.Context, *ActivityBrandUserApplyDestroyRequest) (*emptypb.Empty, error)
	UserApplyList(context.Context, *ActivityUserApplyListRequest) (*ActivityUserApplyListResponse, error)
	UserApplyRetrieve(context.Context, *ActivityUserApplyRetrieveRequest) (*ActivityUserApplyResponse, error)
	UserApplyUpdate(context.Context, *ActivityUserApplyUpdateRequest) (*ActivityUserApplyResponse, error)
	mustEmbedUnimplementedActivityBrandControllerServer()
}

// UnimplementedActivityBrandControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActivityBrandControllerServer struct {
}

func (UnimplementedActivityBrandControllerServer) BlogCreate(context.Context, *BlogRequest) (*BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogDestroy(context.Context, *ActivityBrandBlogDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogInteractCreate(context.Context, *BlogInteractRequest) (*BlogInteractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogInteractCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogInteractDestroy(context.Context, *BlogInteractDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogInteractDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogInteractList(context.Context, *BlogInteractListRequest) (*BlogInteractListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogInteractList not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogInteractRetrieve(context.Context, *BlogInteractRetrieveRequest) (*BlogInteractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogInteractRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogInteractUpdate(context.Context, *BlogInteractUpdateRequest) (*BlogInteractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogInteractUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogList(context.Context, *BlogListRequest) (*BlogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogList not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogRetrieve(context.Context, *BlogRetrieveRequest) (*BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) BlogUpdate(context.Context, *BlogUpdateRequest) (*BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresCreate(context.Context, *ActivityBrandCaresRequest) (*ActivityBrandCaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresDestroy(context.Context, *ActivityBrandCaresDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresList(context.Context, *ActivityBrandCaresListRequest) (*ActivityBrandCaresListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresList not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresRecordCreate(context.Context, *ActivityBrandCaresRecordRequest) (*ActivityBrandCaresRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresRecordCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresRecordDestroy(context.Context, *ActivityBrandCaresRecordDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresRecordDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresRecordList(context.Context, *ActivityBrandCaresRecordListRequest) (*ActivityBrandCaresRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresRecordList not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresRecordRetrieve(context.Context, *ActivityBrandCaresRecordRetrieveRequest) (*ActivityBrandCaresRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresRecordRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresRecordUpdate(context.Context, *ActivityBrandCaresRecordUpdateRequest) (*ActivityBrandCaresRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresRecordUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresRetrieve(context.Context, *ActivityBrandCaresRetrieveRequest) (*ActivityBrandCaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) CaresUpdate(context.Context, *ActivityBrandCaresUpdateRequest) (*ActivityBrandCaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaresUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) Create(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityBrandControllerServer) Destroy(context.Context, *ActivityBrandDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) List(context.Context, *ActivityBrandListRequest) (*ActivityBrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutCreate(context.Context, *ActivityBrandNutRequest) (*ActivityBrandNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutDestroy(context.Context, *ActivityBrandNutDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutList(context.Context, *ActivityBrandNutListRequest) (*ActivityBrandNutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutList not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutRecordCreate(context.Context, *ActivityBrandNutRecordRequest) (*ActivityBrandNutRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutRecordCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutRecordDestroy(context.Context, *ActivityBrandNutRecordDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutRecordDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutRecordList(context.Context, *ActivityBrandNutRecordListRequest) (*ActivityBrandNutRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutRecordList not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutRecordRetrieve(context.Context, *ActivityBrandNutRecordRetrieveRequest) (*ActivityBrandNutRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutRecordRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutRecordUpdate(context.Context, *ActivityBrandNutRecordUpdateRequest) (*ActivityBrandNutRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutRecordUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutRetrieve(context.Context, *ActivityBrandNutRetrieveRequest) (*ActivityBrandNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) NutUpdate(context.Context, *ActivityBrandNutUpdateRequest) (*ActivityBrandNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NutUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) PartialUpdate(context.Context, *ActivityBrandPartialUpdateRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) RecordCreate(context.Context, *ActivityBrandRecordRequest) (*ActivityBrandRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) RecordDestroy(context.Context, *ActivityBrandRecordDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) RecordList(context.Context, *ActivityBrandRecordListRequest) (*ActivityBrandRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordList not implemented")
}
func (UnimplementedActivityBrandControllerServer) RecordRetrieve(context.Context, *ActivityBrandRecordRetrieveRequest) (*ActivityBrandRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) RecordUpdate(context.Context, *ActivityBrandRecordUpdateRequest) (*ActivityBrandRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) Retrieve(context.Context, *ActivityBrandRetrieveRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) Update(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityBrandControllerServer) UserApplyCreate(context.Context, *ActivityUserApplyRequest) (*ActivityUserApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplyCreate not implemented")
}
func (UnimplementedActivityBrandControllerServer) UserApplyDestroy(context.Context, *ActivityBrandUserApplyDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplyDestroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) UserApplyList(context.Context, *ActivityUserApplyListRequest) (*ActivityUserApplyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplyList not implemented")
}
func (UnimplementedActivityBrandControllerServer) UserApplyRetrieve(context.Context, *ActivityUserApplyRetrieveRequest) (*ActivityUserApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplyRetrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) UserApplyUpdate(context.Context, *ActivityUserApplyUpdateRequest) (*ActivityUserApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplyUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) mustEmbedUnimplementedActivityBrandControllerServer() {
}

// UnsafeActivityBrandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityBrandControllerServer will
// result in compilation errors.
type UnsafeActivityBrandControllerServer interface {
	mustEmbedUnimplementedActivityBrandControllerServer()
}

func RegisterActivityBrandControllerServer(s grpc.ServiceRegistrar, srv ActivityBrandControllerServer) {
	s.RegisterService(&ActivityBrandController_ServiceDesc, srv)
}

func _ActivityBrandController_BlogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogCreate(ctx, req.(*BlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandBlogDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogDestroy(ctx, req.(*ActivityBrandBlogDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogInteractCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogInteractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogInteractCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogInteractCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogInteractCreate(ctx, req.(*BlogInteractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogInteractDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogInteractDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogInteractDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogInteractDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogInteractDestroy(ctx, req.(*BlogInteractDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogInteractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogInteractListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogInteractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogInteractList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogInteractList(ctx, req.(*BlogInteractListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogInteractRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogInteractRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogInteractRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogInteractRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogInteractRetrieve(ctx, req.(*BlogInteractRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogInteractUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogInteractUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogInteractUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogInteractUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogInteractUpdate(ctx, req.(*BlogInteractUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogList(ctx, req.(*BlogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogRetrieve(ctx, req.(*BlogRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_BlogUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).BlogUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_BlogUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).BlogUpdate(ctx, req.(*BlogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresCreate(ctx, req.(*ActivityBrandCaresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresDestroy(ctx, req.(*ActivityBrandCaresDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresList(ctx, req.(*ActivityBrandCaresListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresRecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresRecordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresRecordCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresRecordCreate(ctx, req.(*ActivityBrandCaresRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresRecordDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRecordDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresRecordDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresRecordDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresRecordDestroy(ctx, req.(*ActivityBrandCaresRecordDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresRecordList(ctx, req.(*ActivityBrandCaresRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresRecordRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRecordRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresRecordRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresRecordRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresRecordRetrieve(ctx, req.(*ActivityBrandCaresRecordRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRecordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresRecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresRecordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresRecordUpdate(ctx, req.(*ActivityBrandCaresRecordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresRetrieve(ctx, req.(*ActivityBrandCaresRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_CaresUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).CaresUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_CaresUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).CaresUpdate(ctx, req.(*ActivityBrandCaresUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Create(ctx, req.(*ActivityBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Destroy(ctx, req.(*ActivityBrandDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).List(ctx, req.(*ActivityBrandListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutCreate(ctx, req.(*ActivityBrandNutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutDestroy(ctx, req.(*ActivityBrandNutDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutList(ctx, req.(*ActivityBrandNutListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutRecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutRecordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutRecordCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutRecordCreate(ctx, req.(*ActivityBrandNutRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutRecordDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRecordDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutRecordDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutRecordDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutRecordDestroy(ctx, req.(*ActivityBrandNutRecordDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutRecordList(ctx, req.(*ActivityBrandNutRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutRecordRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRecordRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutRecordRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutRecordRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutRecordRetrieve(ctx, req.(*ActivityBrandNutRecordRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRecordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutRecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutRecordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutRecordUpdate(ctx, req.(*ActivityBrandNutRecordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutRetrieve(ctx, req.(*ActivityBrandNutRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_NutUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).NutUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_NutUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).NutUpdate(ctx, req.(*ActivityBrandNutUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).PartialUpdate(ctx, req.(*ActivityBrandPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_RecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).RecordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_RecordCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).RecordCreate(ctx, req.(*ActivityBrandRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_RecordDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRecordDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).RecordDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_RecordDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).RecordDestroy(ctx, req.(*ActivityBrandRecordDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_RecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).RecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_RecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).RecordList(ctx, req.(*ActivityBrandRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_RecordRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRecordRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).RecordRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_RecordRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).RecordRetrieve(ctx, req.(*ActivityBrandRecordRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_RecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRecordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).RecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_RecordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).RecordUpdate(ctx, req.(*ActivityBrandRecordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Retrieve(ctx, req.(*ActivityBrandRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Update(ctx, req.(*ActivityBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_UserApplyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityUserApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).UserApplyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_UserApplyCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).UserApplyCreate(ctx, req.(*ActivityUserApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_UserApplyDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandUserApplyDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).UserApplyDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_UserApplyDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).UserApplyDestroy(ctx, req.(*ActivityBrandUserApplyDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_UserApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityUserApplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).UserApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_UserApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).UserApplyList(ctx, req.(*ActivityUserApplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_UserApplyRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityUserApplyRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).UserApplyRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_UserApplyRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).UserApplyRetrieve(ctx, req.(*ActivityUserApplyRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_UserApplyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityUserApplyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).UserApplyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_UserApplyUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).UserApplyUpdate(ctx, req.(*ActivityUserApplyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityBrandController_ServiceDesc is the grpc.ServiceDesc for ActivityBrandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityBrandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_service.activity_ito.ActivityBrandController",
	HandlerType: (*ActivityBrandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlogCreate",
			Handler:    _ActivityBrandController_BlogCreate_Handler,
		},
		{
			MethodName: "BlogDestroy",
			Handler:    _ActivityBrandController_BlogDestroy_Handler,
		},
		{
			MethodName: "BlogInteractCreate",
			Handler:    _ActivityBrandController_BlogInteractCreate_Handler,
		},
		{
			MethodName: "BlogInteractDestroy",
			Handler:    _ActivityBrandController_BlogInteractDestroy_Handler,
		},
		{
			MethodName: "BlogInteractList",
			Handler:    _ActivityBrandController_BlogInteractList_Handler,
		},
		{
			MethodName: "BlogInteractRetrieve",
			Handler:    _ActivityBrandController_BlogInteractRetrieve_Handler,
		},
		{
			MethodName: "BlogInteractUpdate",
			Handler:    _ActivityBrandController_BlogInteractUpdate_Handler,
		},
		{
			MethodName: "BlogList",
			Handler:    _ActivityBrandController_BlogList_Handler,
		},
		{
			MethodName: "BlogRetrieve",
			Handler:    _ActivityBrandController_BlogRetrieve_Handler,
		},
		{
			MethodName: "BlogUpdate",
			Handler:    _ActivityBrandController_BlogUpdate_Handler,
		},
		{
			MethodName: "CaresCreate",
			Handler:    _ActivityBrandController_CaresCreate_Handler,
		},
		{
			MethodName: "CaresDestroy",
			Handler:    _ActivityBrandController_CaresDestroy_Handler,
		},
		{
			MethodName: "CaresList",
			Handler:    _ActivityBrandController_CaresList_Handler,
		},
		{
			MethodName: "CaresRecordCreate",
			Handler:    _ActivityBrandController_CaresRecordCreate_Handler,
		},
		{
			MethodName: "CaresRecordDestroy",
			Handler:    _ActivityBrandController_CaresRecordDestroy_Handler,
		},
		{
			MethodName: "CaresRecordList",
			Handler:    _ActivityBrandController_CaresRecordList_Handler,
		},
		{
			MethodName: "CaresRecordRetrieve",
			Handler:    _ActivityBrandController_CaresRecordRetrieve_Handler,
		},
		{
			MethodName: "CaresRecordUpdate",
			Handler:    _ActivityBrandController_CaresRecordUpdate_Handler,
		},
		{
			MethodName: "CaresRetrieve",
			Handler:    _ActivityBrandController_CaresRetrieve_Handler,
		},
		{
			MethodName: "CaresUpdate",
			Handler:    _ActivityBrandController_CaresUpdate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ActivityBrandController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ActivityBrandController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActivityBrandController_List_Handler,
		},
		{
			MethodName: "NutCreate",
			Handler:    _ActivityBrandController_NutCreate_Handler,
		},
		{
			MethodName: "NutDestroy",
			Handler:    _ActivityBrandController_NutDestroy_Handler,
		},
		{
			MethodName: "NutList",
			Handler:    _ActivityBrandController_NutList_Handler,
		},
		{
			MethodName: "NutRecordCreate",
			Handler:    _ActivityBrandController_NutRecordCreate_Handler,
		},
		{
			MethodName: "NutRecordDestroy",
			Handler:    _ActivityBrandController_NutRecordDestroy_Handler,
		},
		{
			MethodName: "NutRecordList",
			Handler:    _ActivityBrandController_NutRecordList_Handler,
		},
		{
			MethodName: "NutRecordRetrieve",
			Handler:    _ActivityBrandController_NutRecordRetrieve_Handler,
		},
		{
			MethodName: "NutRecordUpdate",
			Handler:    _ActivityBrandController_NutRecordUpdate_Handler,
		},
		{
			MethodName: "NutRetrieve",
			Handler:    _ActivityBrandController_NutRetrieve_Handler,
		},
		{
			MethodName: "NutUpdate",
			Handler:    _ActivityBrandController_NutUpdate_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ActivityBrandController_PartialUpdate_Handler,
		},
		{
			MethodName: "RecordCreate",
			Handler:    _ActivityBrandController_RecordCreate_Handler,
		},
		{
			MethodName: "RecordDestroy",
			Handler:    _ActivityBrandController_RecordDestroy_Handler,
		},
		{
			MethodName: "RecordList",
			Handler:    _ActivityBrandController_RecordList_Handler,
		},
		{
			MethodName: "RecordRetrieve",
			Handler:    _ActivityBrandController_RecordRetrieve_Handler,
		},
		{
			MethodName: "RecordUpdate",
			Handler:    _ActivityBrandController_RecordUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ActivityBrandController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityBrandController_Update_Handler,
		},
		{
			MethodName: "UserApplyCreate",
			Handler:    _ActivityBrandController_UserApplyCreate_Handler,
		},
		{
			MethodName: "UserApplyDestroy",
			Handler:    _ActivityBrandController_UserApplyDestroy_Handler,
		},
		{
			MethodName: "UserApplyList",
			Handler:    _ActivityBrandController_UserApplyList_Handler,
		},
		{
			MethodName: "UserApplyRetrieve",
			Handler:    _ActivityBrandController_UserApplyRetrieve_Handler,
		},
		{
			MethodName: "UserApplyUpdate",
			Handler:    _ActivityBrandController_UserApplyUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity_ito.proto",
}

const (
	ActivityDiscountController_Create_FullMethodName                  = "/activity_service.activity_ito.ActivityDiscountController/Create"
	ActivityDiscountController_Destroy_FullMethodName                 = "/activity_service.activity_ito.ActivityDiscountController/Destroy"
	ActivityDiscountController_List_FullMethodName                    = "/activity_service.activity_ito.ActivityDiscountController/List"
	ActivityDiscountController_NextSerial_FullMethodName              = "/activity_service.activity_ito.ActivityDiscountController/NextSerial"
	ActivityDiscountController_Options_FullMethodName                 = "/activity_service.activity_ito.ActivityDiscountController/Options"
	ActivityDiscountController_PartialUpdate_FullMethodName           = "/activity_service.activity_ito.ActivityDiscountController/PartialUpdate"
	ActivityDiscountController_ProductCreate_FullMethodName           = "/activity_service.activity_ito.ActivityDiscountController/ProductCreate"
	ActivityDiscountController_ProductCreateBatch_FullMethodName      = "/activity_service.activity_ito.ActivityDiscountController/ProductCreateBatch"
	ActivityDiscountController_ProductDestroy_FullMethodName          = "/activity_service.activity_ito.ActivityDiscountController/ProductDestroy"
	ActivityDiscountController_ProductList_FullMethodName             = "/activity_service.activity_ito.ActivityDiscountController/ProductList"
	ActivityDiscountController_ProductUpdate_FullMethodName           = "/activity_service.activity_ito.ActivityDiscountController/ProductUpdate"
	ActivityDiscountController_Retrieve_FullMethodName                = "/activity_service.activity_ito.ActivityDiscountController/Retrieve"
	ActivityDiscountController_Update_FullMethodName                  = "/activity_service.activity_ito.ActivityDiscountController/Update"
	ActivityDiscountController_VoucherCreate_FullMethodName           = "/activity_service.activity_ito.ActivityDiscountController/VoucherCreate"
	ActivityDiscountController_VoucherDestroy_FullMethodName          = "/activity_service.activity_ito.ActivityDiscountController/VoucherDestroy"
	ActivityDiscountController_VoucherList_FullMethodName             = "/activity_service.activity_ito.ActivityDiscountController/VoucherList"
	ActivityDiscountController_VoucherRecordCreate_FullMethodName     = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordCreate"
	ActivityDiscountController_VoucherRecordDestroy_FullMethodName    = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordDestroy"
	ActivityDiscountController_VoucherRecordList_FullMethodName       = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordList"
	ActivityDiscountController_VoucherRecordNextSerial_FullMethodName = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordNextSerial"
	ActivityDiscountController_VoucherRecordRetrieve_FullMethodName   = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordRetrieve"
	ActivityDiscountController_VoucherRecordUpdate_FullMethodName     = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordUpdate"
	ActivityDiscountController_VoucherRetrieve_FullMethodName         = "/activity_service.activity_ito.ActivityDiscountController/VoucherRetrieve"
	ActivityDiscountController_VoucherUpdate_FullMethodName           = "/activity_service.activity_ito.ActivityDiscountController/VoucherUpdate"
)

// ActivityDiscountControllerClient is the client API for ActivityDiscountController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityDiscountControllerClient interface {
	Create(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	Destroy(ctx context.Context, in *ActivityDiscountDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ActivityDiscountListRequest, opts ...grpc.CallOption) (*ActivityDiscountListResponse, error)
	NextSerial(ctx context.Context, in *NextSerialRequest, opts ...grpc.CallOption) (*ActivityDiscountNextSerialResponse, error)
	Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*ActVoucherOptionResponse, error)
	PartialUpdate(ctx context.Context, in *ActivityDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	ProductCreate(ctx context.Context, in *ActivityDiscountProductRequest, opts ...grpc.CallOption) (*ActivityDiscountProductResponse, error)
	ProductCreateBatch(ctx context.Context, in *ActivityDiscountProductCreateBatchListRequest, opts ...grpc.CallOption) (*ActivityDiscountProductResponse, error)
	ProductDestroy(ctx context.Context, in *ActivityDiscountProductDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProductList(ctx context.Context, in *ActivityDiscountProductListRequest, opts ...grpc.CallOption) (*ActivityDiscountProductListResponse, error)
	ProductUpdate(ctx context.Context, in *ActivityDiscountProductUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountProductResponse, error)
	Retrieve(ctx context.Context, in *ActivityDiscountRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	Update(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	VoucherCreate(ctx context.Context, in *ActivityDiscountVoucherRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error)
	VoucherDestroy(ctx context.Context, in *ActivityDiscountVoucherDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VoucherList(ctx context.Context, in *ActivityDiscountVoucherListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherListResponse, error)
	VoucherRecordCreate(ctx context.Context, in *ActivityDiscountVoucherRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordDestroy(ctx context.Context, in *ActivityDiscountVoucherRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VoucherRecordList(ctx context.Context, in *ActivityDiscountVoucherRecordListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordListResponse, error)
	VoucherRecordNextSerial(ctx context.Context, in *NextRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordNextSerialResponse, error)
	VoucherRecordRetrieve(ctx context.Context, in *ActivityDiscountVoucherRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordUpdate(ctx context.Context, in *VoucherRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRetrieve(ctx context.Context, in *ActivityDiscountVoucherRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error)
	VoucherUpdate(ctx context.Context, in *VoucherUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error)
}

type activityDiscountControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityDiscountControllerClient(cc grpc.ClientConnInterface) ActivityDiscountControllerClient {
	return &activityDiscountControllerClient{cc}
}

func (c *activityDiscountControllerClient) Create(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) Destroy(ctx context.Context, in *ActivityDiscountDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) List(ctx context.Context, in *ActivityDiscountListRequest, opts ...grpc.CallOption) (*ActivityDiscountListResponse, error) {
	out := new(ActivityDiscountListResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) NextSerial(ctx context.Context, in *NextSerialRequest, opts ...grpc.CallOption) (*ActivityDiscountNextSerialResponse, error) {
	out := new(ActivityDiscountNextSerialResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_NextSerial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) Options(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*ActVoucherOptionResponse, error) {
	out := new(ActVoucherOptionResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) PartialUpdate(ctx context.Context, in *ActivityDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) ProductCreate(ctx context.Context, in *ActivityDiscountProductRequest, opts ...grpc.CallOption) (*ActivityDiscountProductResponse, error) {
	out := new(ActivityDiscountProductResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_ProductCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) ProductCreateBatch(ctx context.Context, in *ActivityDiscountProductCreateBatchListRequest, opts ...grpc.CallOption) (*ActivityDiscountProductResponse, error) {
	out := new(ActivityDiscountProductResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_ProductCreateBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) ProductDestroy(ctx context.Context, in *ActivityDiscountProductDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityDiscountController_ProductDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) ProductList(ctx context.Context, in *ActivityDiscountProductListRequest, opts ...grpc.CallOption) (*ActivityDiscountProductListResponse, error) {
	out := new(ActivityDiscountProductListResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_ProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) ProductUpdate(ctx context.Context, in *ActivityDiscountProductUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountProductResponse, error) {
	out := new(ActivityDiscountProductResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_ProductUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) Retrieve(ctx context.Context, in *ActivityDiscountRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) Update(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherCreate(ctx context.Context, in *ActivityDiscountVoucherRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error) {
	out := new(ActivityDiscountVoucherResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherDestroy(ctx context.Context, in *ActivityDiscountVoucherDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherList(ctx context.Context, in *ActivityDiscountVoucherListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherListResponse, error) {
	out := new(ActivityDiscountVoucherListResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordCreate(ctx context.Context, in *ActivityDiscountVoucherRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error) {
	out := new(ActivityDiscountVoucherRecordResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordDestroy(ctx context.Context, in *ActivityDiscountVoucherRecordDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordList(ctx context.Context, in *ActivityDiscountVoucherRecordListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordListResponse, error) {
	out := new(ActivityDiscountVoucherRecordListResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordNextSerial(ctx context.Context, in *NextRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordNextSerialResponse, error) {
	out := new(ActivityDiscountVoucherRecordNextSerialResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordNextSerial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordRetrieve(ctx context.Context, in *ActivityDiscountVoucherRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error) {
	out := new(ActivityDiscountVoucherRecordResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordUpdate(ctx context.Context, in *VoucherRecordUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error) {
	out := new(ActivityDiscountVoucherRecordResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRetrieve(ctx context.Context, in *ActivityDiscountVoucherRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error) {
	out := new(ActivityDiscountVoucherResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherUpdate(ctx context.Context, in *VoucherUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error) {
	out := new(ActivityDiscountVoucherResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityDiscountControllerServer is the server API for ActivityDiscountController service.
// All implementations must embed UnimplementedActivityDiscountControllerServer
// for forward compatibility
type ActivityDiscountControllerServer interface {
	Create(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error)
	Destroy(context.Context, *ActivityDiscountDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *ActivityDiscountListRequest) (*ActivityDiscountListResponse, error)
	NextSerial(context.Context, *NextSerialRequest) (*ActivityDiscountNextSerialResponse, error)
	Options(context.Context, *OptionRequest) (*ActVoucherOptionResponse, error)
	PartialUpdate(context.Context, *ActivityDiscountPartialUpdateRequest) (*ActivityDiscountResponse, error)
	ProductCreate(context.Context, *ActivityDiscountProductRequest) (*ActivityDiscountProductResponse, error)
	ProductCreateBatch(context.Context, *ActivityDiscountProductCreateBatchListRequest) (*ActivityDiscountProductResponse, error)
	ProductDestroy(context.Context, *ActivityDiscountProductDestroyRequest) (*emptypb.Empty, error)
	ProductList(context.Context, *ActivityDiscountProductListRequest) (*ActivityDiscountProductListResponse, error)
	ProductUpdate(context.Context, *ActivityDiscountProductUpdateRequest) (*ActivityDiscountProductResponse, error)
	Retrieve(context.Context, *ActivityDiscountRetrieveRequest) (*ActivityDiscountResponse, error)
	Update(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error)
	VoucherCreate(context.Context, *ActivityDiscountVoucherRequest) (*ActivityDiscountVoucherResponse, error)
	VoucherDestroy(context.Context, *ActivityDiscountVoucherDestroyRequest) (*emptypb.Empty, error)
	VoucherList(context.Context, *ActivityDiscountVoucherListRequest) (*ActivityDiscountVoucherListResponse, error)
	VoucherRecordCreate(context.Context, *ActivityDiscountVoucherRecordRequest) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordDestroy(context.Context, *ActivityDiscountVoucherRecordDestroyRequest) (*emptypb.Empty, error)
	VoucherRecordList(context.Context, *ActivityDiscountVoucherRecordListRequest) (*ActivityDiscountVoucherRecordListResponse, error)
	VoucherRecordNextSerial(context.Context, *NextRecordRequest) (*ActivityDiscountVoucherRecordNextSerialResponse, error)
	VoucherRecordRetrieve(context.Context, *ActivityDiscountVoucherRecordRetrieveRequest) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordUpdate(context.Context, *VoucherRecordUpdateRequest) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRetrieve(context.Context, *ActivityDiscountVoucherRetrieveRequest) (*ActivityDiscountVoucherResponse, error)
	VoucherUpdate(context.Context, *VoucherUpdateRequest) (*ActivityDiscountVoucherResponse, error)
	mustEmbedUnimplementedActivityDiscountControllerServer()
}

// UnimplementedActivityDiscountControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActivityDiscountControllerServer struct {
}

func (UnimplementedActivityDiscountControllerServer) Create(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityDiscountControllerServer) Destroy(context.Context, *ActivityDiscountDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedActivityDiscountControllerServer) List(context.Context, *ActivityDiscountListRequest) (*ActivityDiscountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActivityDiscountControllerServer) NextSerial(context.Context, *NextSerialRequest) (*ActivityDiscountNextSerialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSerial not implemented")
}
func (UnimplementedActivityDiscountControllerServer) Options(context.Context, *OptionRequest) (*ActVoucherOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedActivityDiscountControllerServer) PartialUpdate(context.Context, *ActivityDiscountPartialUpdateRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) ProductCreate(context.Context, *ActivityDiscountProductRequest) (*ActivityDiscountProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCreate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) ProductCreateBatch(context.Context, *ActivityDiscountProductCreateBatchListRequest) (*ActivityDiscountProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCreateBatch not implemented")
}
func (UnimplementedActivityDiscountControllerServer) ProductDestroy(context.Context, *ActivityDiscountProductDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDestroy not implemented")
}
func (UnimplementedActivityDiscountControllerServer) ProductList(context.Context, *ActivityDiscountProductListRequest) (*ActivityDiscountProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedActivityDiscountControllerServer) ProductUpdate(context.Context, *ActivityDiscountProductUpdateRequest) (*ActivityDiscountProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) Retrieve(context.Context, *ActivityDiscountRetrieveRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedActivityDiscountControllerServer) Update(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherCreate(context.Context, *ActivityDiscountVoucherRequest) (*ActivityDiscountVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherCreate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherDestroy(context.Context, *ActivityDiscountVoucherDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherDestroy not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherList(context.Context, *ActivityDiscountVoucherListRequest) (*ActivityDiscountVoucherListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherList not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordCreate(context.Context, *ActivityDiscountVoucherRecordRequest) (*ActivityDiscountVoucherRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordCreate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordDestroy(context.Context, *ActivityDiscountVoucherRecordDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordDestroy not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordList(context.Context, *ActivityDiscountVoucherRecordListRequest) (*ActivityDiscountVoucherRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordList not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordNextSerial(context.Context, *NextRecordRequest) (*ActivityDiscountVoucherRecordNextSerialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordNextSerial not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordRetrieve(context.Context, *ActivityDiscountVoucherRecordRetrieveRequest) (*ActivityDiscountVoucherRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordRetrieve not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordUpdate(context.Context, *VoucherRecordUpdateRequest) (*ActivityDiscountVoucherRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordUpdate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRetrieve(context.Context, *ActivityDiscountVoucherRetrieveRequest) (*ActivityDiscountVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRetrieve not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherUpdate(context.Context, *VoucherUpdateRequest) (*ActivityDiscountVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherUpdate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) mustEmbedUnimplementedActivityDiscountControllerServer() {
}

// UnsafeActivityDiscountControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityDiscountControllerServer will
// result in compilation errors.
type UnsafeActivityDiscountControllerServer interface {
	mustEmbedUnimplementedActivityDiscountControllerServer()
}

func RegisterActivityDiscountControllerServer(s grpc.ServiceRegistrar, srv ActivityDiscountControllerServer) {
	s.RegisterService(&ActivityDiscountController_ServiceDesc, srv)
}

func _ActivityDiscountController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Create(ctx, req.(*ActivityDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Destroy(ctx, req.(*ActivityDiscountDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).List(ctx, req.(*ActivityDiscountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_NextSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).NextSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_NextSerial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).NextSerial(ctx, req.(*NextSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Options(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).PartialUpdate(ctx, req.(*ActivityDiscountPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_ProductCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).ProductCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_ProductCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).ProductCreate(ctx, req.(*ActivityDiscountProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_ProductCreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountProductCreateBatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).ProductCreateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_ProductCreateBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).ProductCreateBatch(ctx, req.(*ActivityDiscountProductCreateBatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_ProductDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountProductDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).ProductDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_ProductDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).ProductDestroy(ctx, req.(*ActivityDiscountProductDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_ProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).ProductList(ctx, req.(*ActivityDiscountProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_ProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).ProductUpdate(ctx, req.(*ActivityDiscountProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Retrieve(ctx, req.(*ActivityDiscountRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Update(ctx, req.(*ActivityDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherCreate(ctx, req.(*ActivityDiscountVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherDestroy(ctx, req.(*ActivityDiscountVoucherDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherList(ctx, req.(*ActivityDiscountVoucherListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordCreate(ctx, req.(*ActivityDiscountVoucherRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordDestroy(ctx, req.(*ActivityDiscountVoucherRecordDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordList(ctx, req.(*ActivityDiscountVoucherRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordNextSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordNextSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordNextSerial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordNextSerial(ctx, req.(*NextRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordRetrieve(ctx, req.(*ActivityDiscountVoucherRecordRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoucherRecordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordUpdate(ctx, req.(*VoucherRecordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRetrieve(ctx, req.(*ActivityDiscountVoucherRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoucherUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherUpdate(ctx, req.(*VoucherUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityDiscountController_ServiceDesc is the grpc.ServiceDesc for ActivityDiscountController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityDiscountController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_service.activity_ito.ActivityDiscountController",
	HandlerType: (*ActivityDiscountControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActivityDiscountController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ActivityDiscountController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActivityDiscountController_List_Handler,
		},
		{
			MethodName: "NextSerial",
			Handler:    _ActivityDiscountController_NextSerial_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _ActivityDiscountController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ActivityDiscountController_PartialUpdate_Handler,
		},
		{
			MethodName: "ProductCreate",
			Handler:    _ActivityDiscountController_ProductCreate_Handler,
		},
		{
			MethodName: "ProductCreateBatch",
			Handler:    _ActivityDiscountController_ProductCreateBatch_Handler,
		},
		{
			MethodName: "ProductDestroy",
			Handler:    _ActivityDiscountController_ProductDestroy_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _ActivityDiscountController_ProductList_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _ActivityDiscountController_ProductUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ActivityDiscountController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityDiscountController_Update_Handler,
		},
		{
			MethodName: "VoucherCreate",
			Handler:    _ActivityDiscountController_VoucherCreate_Handler,
		},
		{
			MethodName: "VoucherDestroy",
			Handler:    _ActivityDiscountController_VoucherDestroy_Handler,
		},
		{
			MethodName: "VoucherList",
			Handler:    _ActivityDiscountController_VoucherList_Handler,
		},
		{
			MethodName: "VoucherRecordCreate",
			Handler:    _ActivityDiscountController_VoucherRecordCreate_Handler,
		},
		{
			MethodName: "VoucherRecordDestroy",
			Handler:    _ActivityDiscountController_VoucherRecordDestroy_Handler,
		},
		{
			MethodName: "VoucherRecordList",
			Handler:    _ActivityDiscountController_VoucherRecordList_Handler,
		},
		{
			MethodName: "VoucherRecordNextSerial",
			Handler:    _ActivityDiscountController_VoucherRecordNextSerial_Handler,
		},
		{
			MethodName: "VoucherRecordRetrieve",
			Handler:    _ActivityDiscountController_VoucherRecordRetrieve_Handler,
		},
		{
			MethodName: "VoucherRecordUpdate",
			Handler:    _ActivityDiscountController_VoucherRecordUpdate_Handler,
		},
		{
			MethodName: "VoucherRetrieve",
			Handler:    _ActivityDiscountController_VoucherRetrieve_Handler,
		},
		{
			MethodName: "VoucherUpdate",
			Handler:    _ActivityDiscountController_VoucherUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity_ito.proto",
}
