// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: activity_ito.proto

package activityito

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActivityBrandCaresController_Create_FullMethodName        = "/activity_service.activity_ito.ActivityBrandCaresController/Create"
	ActivityBrandCaresController_Destroy_FullMethodName       = "/activity_service.activity_ito.ActivityBrandCaresController/Destroy"
	ActivityBrandCaresController_List_FullMethodName          = "/activity_service.activity_ito.ActivityBrandCaresController/List"
	ActivityBrandCaresController_PartialUpdate_FullMethodName = "/activity_service.activity_ito.ActivityBrandCaresController/PartialUpdate"
	ActivityBrandCaresController_Retrieve_FullMethodName      = "/activity_service.activity_ito.ActivityBrandCaresController/Retrieve"
	ActivityBrandCaresController_Update_FullMethodName        = "/activity_service.activity_ito.ActivityBrandCaresController/Update"
)

// ActivityBrandCaresControllerClient is the client API for ActivityBrandCaresController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityBrandCaresControllerClient interface {
	Create(ctx context.Context, in *ActivityBrandCaresRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error)
	Destroy(ctx context.Context, in *ActivityBrandCaresDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ActivityBrandCaresListRequest, opts ...grpc.CallOption) (*ActivityBrandCaresListResponse, error)
	PartialUpdate(ctx context.Context, in *ActivityBrandCaresPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error)
	Retrieve(ctx context.Context, in *ActivityBrandCaresRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error)
	Update(ctx context.Context, in *ActivityBrandCaresRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error)
}

type activityBrandCaresControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityBrandCaresControllerClient(cc grpc.ClientConnInterface) ActivityBrandCaresControllerClient {
	return &activityBrandCaresControllerClient{cc}
}

func (c *activityBrandCaresControllerClient) Create(ctx context.Context, in *ActivityBrandCaresRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error) {
	out := new(ActivityBrandCaresResponse)
	err := c.cc.Invoke(ctx, ActivityBrandCaresController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandCaresControllerClient) Destroy(ctx context.Context, in *ActivityBrandCaresDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandCaresController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandCaresControllerClient) List(ctx context.Context, in *ActivityBrandCaresListRequest, opts ...grpc.CallOption) (*ActivityBrandCaresListResponse, error) {
	out := new(ActivityBrandCaresListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandCaresController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandCaresControllerClient) PartialUpdate(ctx context.Context, in *ActivityBrandCaresPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error) {
	out := new(ActivityBrandCaresResponse)
	err := c.cc.Invoke(ctx, ActivityBrandCaresController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandCaresControllerClient) Retrieve(ctx context.Context, in *ActivityBrandCaresRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error) {
	out := new(ActivityBrandCaresResponse)
	err := c.cc.Invoke(ctx, ActivityBrandCaresController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandCaresControllerClient) Update(ctx context.Context, in *ActivityBrandCaresRequest, opts ...grpc.CallOption) (*ActivityBrandCaresResponse, error) {
	out := new(ActivityBrandCaresResponse)
	err := c.cc.Invoke(ctx, ActivityBrandCaresController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityBrandCaresControllerServer is the server API for ActivityBrandCaresController service.
// All implementations must embed UnimplementedActivityBrandCaresControllerServer
// for forward compatibility
type ActivityBrandCaresControllerServer interface {
	Create(context.Context, *ActivityBrandCaresRequest) (*ActivityBrandCaresResponse, error)
	Destroy(context.Context, *ActivityBrandCaresDestroyRequest) (*empty.Empty, error)
	List(context.Context, *ActivityBrandCaresListRequest) (*ActivityBrandCaresListResponse, error)
	PartialUpdate(context.Context, *ActivityBrandCaresPartialUpdateRequest) (*ActivityBrandCaresResponse, error)
	Retrieve(context.Context, *ActivityBrandCaresRetrieveRequest) (*ActivityBrandCaresResponse, error)
	Update(context.Context, *ActivityBrandCaresRequest) (*ActivityBrandCaresResponse, error)
	mustEmbedUnimplementedActivityBrandCaresControllerServer()
}

// UnimplementedActivityBrandCaresControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActivityBrandCaresControllerServer struct {
}

func (UnimplementedActivityBrandCaresControllerServer) Create(context.Context, *ActivityBrandCaresRequest) (*ActivityBrandCaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityBrandCaresControllerServer) Destroy(context.Context, *ActivityBrandCaresDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedActivityBrandCaresControllerServer) List(context.Context, *ActivityBrandCaresListRequest) (*ActivityBrandCaresListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActivityBrandCaresControllerServer) PartialUpdate(context.Context, *ActivityBrandCaresPartialUpdateRequest) (*ActivityBrandCaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedActivityBrandCaresControllerServer) Retrieve(context.Context, *ActivityBrandCaresRetrieveRequest) (*ActivityBrandCaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedActivityBrandCaresControllerServer) Update(context.Context, *ActivityBrandCaresRequest) (*ActivityBrandCaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityBrandCaresControllerServer) mustEmbedUnimplementedActivityBrandCaresControllerServer() {
}

// UnsafeActivityBrandCaresControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityBrandCaresControllerServer will
// result in compilation errors.
type UnsafeActivityBrandCaresControllerServer interface {
	mustEmbedUnimplementedActivityBrandCaresControllerServer()
}

func RegisterActivityBrandCaresControllerServer(s grpc.ServiceRegistrar, srv ActivityBrandCaresControllerServer) {
	s.RegisterService(&ActivityBrandCaresController_ServiceDesc, srv)
}

func _ActivityBrandCaresController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandCaresControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandCaresController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandCaresControllerServer).Create(ctx, req.(*ActivityBrandCaresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandCaresController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandCaresControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandCaresController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandCaresControllerServer).Destroy(ctx, req.(*ActivityBrandCaresDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandCaresController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandCaresControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandCaresController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandCaresControllerServer).List(ctx, req.(*ActivityBrandCaresListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandCaresController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandCaresControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandCaresController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandCaresControllerServer).PartialUpdate(ctx, req.(*ActivityBrandCaresPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandCaresController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandCaresControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandCaresController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandCaresControllerServer).Retrieve(ctx, req.(*ActivityBrandCaresRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandCaresController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandCaresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandCaresControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandCaresController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandCaresControllerServer).Update(ctx, req.(*ActivityBrandCaresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityBrandCaresController_ServiceDesc is the grpc.ServiceDesc for ActivityBrandCaresController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityBrandCaresController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_service.activity_ito.ActivityBrandCaresController",
	HandlerType: (*ActivityBrandCaresControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActivityBrandCaresController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ActivityBrandCaresController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActivityBrandCaresController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ActivityBrandCaresController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ActivityBrandCaresController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityBrandCaresController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity_ito.proto",
}

const (
	ActivityBrandController_Create_FullMethodName        = "/activity_service.activity_ito.ActivityBrandController/Create"
	ActivityBrandController_Destroy_FullMethodName       = "/activity_service.activity_ito.ActivityBrandController/Destroy"
	ActivityBrandController_List_FullMethodName          = "/activity_service.activity_ito.ActivityBrandController/List"
	ActivityBrandController_PartialUpdate_FullMethodName = "/activity_service.activity_ito.ActivityBrandController/PartialUpdate"
	ActivityBrandController_Retrieve_FullMethodName      = "/activity_service.activity_ito.ActivityBrandController/Retrieve"
	ActivityBrandController_Update_FullMethodName        = "/activity_service.activity_ito.ActivityBrandController/Update"
)

// ActivityBrandControllerClient is the client API for ActivityBrandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityBrandControllerClient interface {
	Create(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
	Destroy(ctx context.Context, in *ActivityBrandDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ActivityBrandListRequest, opts ...grpc.CallOption) (*ActivityBrandListResponse, error)
	PartialUpdate(ctx context.Context, in *ActivityBrandPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
	Retrieve(ctx context.Context, in *ActivityBrandRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
	Update(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error)
}

type activityBrandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityBrandControllerClient(cc grpc.ClientConnInterface) ActivityBrandControllerClient {
	return &activityBrandControllerClient{cc}
}

func (c *activityBrandControllerClient) Create(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) Destroy(ctx context.Context, in *ActivityBrandDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) List(ctx context.Context, in *ActivityBrandListRequest, opts ...grpc.CallOption) (*ActivityBrandListResponse, error) {
	out := new(ActivityBrandListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) PartialUpdate(ctx context.Context, in *ActivityBrandPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) Retrieve(ctx context.Context, in *ActivityBrandRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandControllerClient) Update(ctx context.Context, in *ActivityBrandRequest, opts ...grpc.CallOption) (*ActivityBrandResponse, error) {
	out := new(ActivityBrandResponse)
	err := c.cc.Invoke(ctx, ActivityBrandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityBrandControllerServer is the server API for ActivityBrandController service.
// All implementations must embed UnimplementedActivityBrandControllerServer
// for forward compatibility
type ActivityBrandControllerServer interface {
	Create(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error)
	Destroy(context.Context, *ActivityBrandDestroyRequest) (*empty.Empty, error)
	List(context.Context, *ActivityBrandListRequest) (*ActivityBrandListResponse, error)
	PartialUpdate(context.Context, *ActivityBrandPartialUpdateRequest) (*ActivityBrandResponse, error)
	Retrieve(context.Context, *ActivityBrandRetrieveRequest) (*ActivityBrandResponse, error)
	Update(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error)
	mustEmbedUnimplementedActivityBrandControllerServer()
}

// UnimplementedActivityBrandControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActivityBrandControllerServer struct {
}

func (UnimplementedActivityBrandControllerServer) Create(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityBrandControllerServer) Destroy(context.Context, *ActivityBrandDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedActivityBrandControllerServer) List(context.Context, *ActivityBrandListRequest) (*ActivityBrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActivityBrandControllerServer) PartialUpdate(context.Context, *ActivityBrandPartialUpdateRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedActivityBrandControllerServer) Retrieve(context.Context, *ActivityBrandRetrieveRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedActivityBrandControllerServer) Update(context.Context, *ActivityBrandRequest) (*ActivityBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityBrandControllerServer) mustEmbedUnimplementedActivityBrandControllerServer() {
}

// UnsafeActivityBrandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityBrandControllerServer will
// result in compilation errors.
type UnsafeActivityBrandControllerServer interface {
	mustEmbedUnimplementedActivityBrandControllerServer()
}

func RegisterActivityBrandControllerServer(s grpc.ServiceRegistrar, srv ActivityBrandControllerServer) {
	s.RegisterService(&ActivityBrandController_ServiceDesc, srv)
}

func _ActivityBrandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Create(ctx, req.(*ActivityBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Destroy(ctx, req.(*ActivityBrandDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).List(ctx, req.(*ActivityBrandListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).PartialUpdate(ctx, req.(*ActivityBrandPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Retrieve(ctx, req.(*ActivityBrandRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandControllerServer).Update(ctx, req.(*ActivityBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityBrandController_ServiceDesc is the grpc.ServiceDesc for ActivityBrandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityBrandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_service.activity_ito.ActivityBrandController",
	HandlerType: (*ActivityBrandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActivityBrandController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ActivityBrandController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActivityBrandController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ActivityBrandController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ActivityBrandController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityBrandController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity_ito.proto",
}

const (
	ActivityBrandNutController_Create_FullMethodName        = "/activity_service.activity_ito.ActivityBrandNutController/Create"
	ActivityBrandNutController_Destroy_FullMethodName       = "/activity_service.activity_ito.ActivityBrandNutController/Destroy"
	ActivityBrandNutController_List_FullMethodName          = "/activity_service.activity_ito.ActivityBrandNutController/List"
	ActivityBrandNutController_PartialUpdate_FullMethodName = "/activity_service.activity_ito.ActivityBrandNutController/PartialUpdate"
	ActivityBrandNutController_Retrieve_FullMethodName      = "/activity_service.activity_ito.ActivityBrandNutController/Retrieve"
	ActivityBrandNutController_Update_FullMethodName        = "/activity_service.activity_ito.ActivityBrandNutController/Update"
)

// ActivityBrandNutControllerClient is the client API for ActivityBrandNutController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityBrandNutControllerClient interface {
	Create(ctx context.Context, in *ActivityBrandNutRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error)
	Destroy(ctx context.Context, in *ActivityBrandNutDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ActivityBrandNutListRequest, opts ...grpc.CallOption) (*ActivityBrandNutListResponse, error)
	PartialUpdate(ctx context.Context, in *ActivityBrandNutPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error)
	Retrieve(ctx context.Context, in *ActivityBrandNutRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error)
	Update(ctx context.Context, in *ActivityBrandNutRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error)
}

type activityBrandNutControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityBrandNutControllerClient(cc grpc.ClientConnInterface) ActivityBrandNutControllerClient {
	return &activityBrandNutControllerClient{cc}
}

func (c *activityBrandNutControllerClient) Create(ctx context.Context, in *ActivityBrandNutRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error) {
	out := new(ActivityBrandNutResponse)
	err := c.cc.Invoke(ctx, ActivityBrandNutController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandNutControllerClient) Destroy(ctx context.Context, in *ActivityBrandNutDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ActivityBrandNutController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandNutControllerClient) List(ctx context.Context, in *ActivityBrandNutListRequest, opts ...grpc.CallOption) (*ActivityBrandNutListResponse, error) {
	out := new(ActivityBrandNutListResponse)
	err := c.cc.Invoke(ctx, ActivityBrandNutController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandNutControllerClient) PartialUpdate(ctx context.Context, in *ActivityBrandNutPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error) {
	out := new(ActivityBrandNutResponse)
	err := c.cc.Invoke(ctx, ActivityBrandNutController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandNutControllerClient) Retrieve(ctx context.Context, in *ActivityBrandNutRetrieveRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error) {
	out := new(ActivityBrandNutResponse)
	err := c.cc.Invoke(ctx, ActivityBrandNutController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityBrandNutControllerClient) Update(ctx context.Context, in *ActivityBrandNutRequest, opts ...grpc.CallOption) (*ActivityBrandNutResponse, error) {
	out := new(ActivityBrandNutResponse)
	err := c.cc.Invoke(ctx, ActivityBrandNutController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityBrandNutControllerServer is the server API for ActivityBrandNutController service.
// All implementations must embed UnimplementedActivityBrandNutControllerServer
// for forward compatibility
type ActivityBrandNutControllerServer interface {
	Create(context.Context, *ActivityBrandNutRequest) (*ActivityBrandNutResponse, error)
	Destroy(context.Context, *ActivityBrandNutDestroyRequest) (*empty.Empty, error)
	List(context.Context, *ActivityBrandNutListRequest) (*ActivityBrandNutListResponse, error)
	PartialUpdate(context.Context, *ActivityBrandNutPartialUpdateRequest) (*ActivityBrandNutResponse, error)
	Retrieve(context.Context, *ActivityBrandNutRetrieveRequest) (*ActivityBrandNutResponse, error)
	Update(context.Context, *ActivityBrandNutRequest) (*ActivityBrandNutResponse, error)
	mustEmbedUnimplementedActivityBrandNutControllerServer()
}

// UnimplementedActivityBrandNutControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActivityBrandNutControllerServer struct {
}

func (UnimplementedActivityBrandNutControllerServer) Create(context.Context, *ActivityBrandNutRequest) (*ActivityBrandNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityBrandNutControllerServer) Destroy(context.Context, *ActivityBrandNutDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedActivityBrandNutControllerServer) List(context.Context, *ActivityBrandNutListRequest) (*ActivityBrandNutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActivityBrandNutControllerServer) PartialUpdate(context.Context, *ActivityBrandNutPartialUpdateRequest) (*ActivityBrandNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedActivityBrandNutControllerServer) Retrieve(context.Context, *ActivityBrandNutRetrieveRequest) (*ActivityBrandNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedActivityBrandNutControllerServer) Update(context.Context, *ActivityBrandNutRequest) (*ActivityBrandNutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityBrandNutControllerServer) mustEmbedUnimplementedActivityBrandNutControllerServer() {
}

// UnsafeActivityBrandNutControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityBrandNutControllerServer will
// result in compilation errors.
type UnsafeActivityBrandNutControllerServer interface {
	mustEmbedUnimplementedActivityBrandNutControllerServer()
}

func RegisterActivityBrandNutControllerServer(s grpc.ServiceRegistrar, srv ActivityBrandNutControllerServer) {
	s.RegisterService(&ActivityBrandNutController_ServiceDesc, srv)
}

func _ActivityBrandNutController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandNutControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandNutController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandNutControllerServer).Create(ctx, req.(*ActivityBrandNutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandNutController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandNutControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandNutController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandNutControllerServer).Destroy(ctx, req.(*ActivityBrandNutDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandNutController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandNutControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandNutController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandNutControllerServer).List(ctx, req.(*ActivityBrandNutListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandNutController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandNutControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandNutController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandNutControllerServer).PartialUpdate(ctx, req.(*ActivityBrandNutPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandNutController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandNutControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandNutController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandNutControllerServer).Retrieve(ctx, req.(*ActivityBrandNutRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityBrandNutController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityBrandNutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityBrandNutControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityBrandNutController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityBrandNutControllerServer).Update(ctx, req.(*ActivityBrandNutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityBrandNutController_ServiceDesc is the grpc.ServiceDesc for ActivityBrandNutController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityBrandNutController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_service.activity_ito.ActivityBrandNutController",
	HandlerType: (*ActivityBrandNutControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActivityBrandNutController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ActivityBrandNutController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActivityBrandNutController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ActivityBrandNutController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ActivityBrandNutController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityBrandNutController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity_ito.proto",
}

const (
	ActivityDiscountController_Create_FullMethodName                = "/activity_service.activity_ito.ActivityDiscountController/Create"
	ActivityDiscountController_Destroy_FullMethodName               = "/activity_service.activity_ito.ActivityDiscountController/Destroy"
	ActivityDiscountController_List_FullMethodName                  = "/activity_service.activity_ito.ActivityDiscountController/List"
	ActivityDiscountController_PartialUpdate_FullMethodName         = "/activity_service.activity_ito.ActivityDiscountController/PartialUpdate"
	ActivityDiscountController_Retrieve_FullMethodName              = "/activity_service.activity_ito.ActivityDiscountController/Retrieve"
	ActivityDiscountController_Update_FullMethodName                = "/activity_service.activity_ito.ActivityDiscountController/Update"
	ActivityDiscountController_VoucherCreate_FullMethodName         = "/activity_service.activity_ito.ActivityDiscountController/VoucherCreate"
	ActivityDiscountController_VoucherDestroy_FullMethodName        = "/activity_service.activity_ito.ActivityDiscountController/VoucherDestroy"
	ActivityDiscountController_VoucherList_FullMethodName           = "/activity_service.activity_ito.ActivityDiscountController/VoucherList"
	ActivityDiscountController_VoucherRecordCreate_FullMethodName   = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordCreate"
	ActivityDiscountController_VoucherRecordDestroy_FullMethodName  = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordDestroy"
	ActivityDiscountController_VoucherRecordList_FullMethodName     = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordList"
	ActivityDiscountController_VoucherRecordRetrieve_FullMethodName = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordRetrieve"
	ActivityDiscountController_VoucherRecordUpdate_FullMethodName   = "/activity_service.activity_ito.ActivityDiscountController/VoucherRecordUpdate"
	ActivityDiscountController_VoucherRetrieve_FullMethodName       = "/activity_service.activity_ito.ActivityDiscountController/VoucherRetrieve"
	ActivityDiscountController_VoucherUpdate_FullMethodName         = "/activity_service.activity_ito.ActivityDiscountController/VoucherUpdate"
)

// ActivityDiscountControllerClient is the client API for ActivityDiscountController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityDiscountControllerClient interface {
	Create(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	Destroy(ctx context.Context, in *ActivityDiscountDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ActivityDiscountListRequest, opts ...grpc.CallOption) (*ActivityDiscountListResponse, error)
	PartialUpdate(ctx context.Context, in *ActivityDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	Retrieve(ctx context.Context, in *ActivityDiscountRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	Update(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error)
	VoucherCreate(ctx context.Context, in *ActivityDiscountVoucherRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error)
	VoucherDestroy(ctx context.Context, in *ActivityDiscountVoucherDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	VoucherList(ctx context.Context, in *ActivityDiscountVoucherListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherListResponse, error)
	VoucherRecordCreate(ctx context.Context, in *ActivityDiscountVoucherRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordDestroy(ctx context.Context, in *ActivityDiscountVoucherRecordDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	VoucherRecordList(ctx context.Context, in *ActivityDiscountVoucherRecordListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordListResponse, error)
	VoucherRecordRetrieve(ctx context.Context, in *ActivityDiscountVoucherRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordUpdate(ctx context.Context, in *ActivityDiscountVoucherRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRetrieve(ctx context.Context, in *ActivityDiscountVoucherRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error)
	VoucherUpdate(ctx context.Context, in *ActivityDiscountVoucherRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error)
}

type activityDiscountControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityDiscountControllerClient(cc grpc.ClientConnInterface) ActivityDiscountControllerClient {
	return &activityDiscountControllerClient{cc}
}

func (c *activityDiscountControllerClient) Create(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) Destroy(ctx context.Context, in *ActivityDiscountDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) List(ctx context.Context, in *ActivityDiscountListRequest, opts ...grpc.CallOption) (*ActivityDiscountListResponse, error) {
	out := new(ActivityDiscountListResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) PartialUpdate(ctx context.Context, in *ActivityDiscountPartialUpdateRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) Retrieve(ctx context.Context, in *ActivityDiscountRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) Update(ctx context.Context, in *ActivityDiscountRequest, opts ...grpc.CallOption) (*ActivityDiscountResponse, error) {
	out := new(ActivityDiscountResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherCreate(ctx context.Context, in *ActivityDiscountVoucherRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error) {
	out := new(ActivityDiscountVoucherResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherDestroy(ctx context.Context, in *ActivityDiscountVoucherDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherList(ctx context.Context, in *ActivityDiscountVoucherListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherListResponse, error) {
	out := new(ActivityDiscountVoucherListResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordCreate(ctx context.Context, in *ActivityDiscountVoucherRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error) {
	out := new(ActivityDiscountVoucherRecordResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordDestroy(ctx context.Context, in *ActivityDiscountVoucherRecordDestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordList(ctx context.Context, in *ActivityDiscountVoucherRecordListRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordListResponse, error) {
	out := new(ActivityDiscountVoucherRecordListResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordRetrieve(ctx context.Context, in *ActivityDiscountVoucherRecordRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error) {
	out := new(ActivityDiscountVoucherRecordResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRecordUpdate(ctx context.Context, in *ActivityDiscountVoucherRecordRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherRecordResponse, error) {
	out := new(ActivityDiscountVoucherRecordResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRecordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherRetrieve(ctx context.Context, in *ActivityDiscountVoucherRetrieveRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error) {
	out := new(ActivityDiscountVoucherResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDiscountControllerClient) VoucherUpdate(ctx context.Context, in *ActivityDiscountVoucherRequest, opts ...grpc.CallOption) (*ActivityDiscountVoucherResponse, error) {
	out := new(ActivityDiscountVoucherResponse)
	err := c.cc.Invoke(ctx, ActivityDiscountController_VoucherUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityDiscountControllerServer is the server API for ActivityDiscountController service.
// All implementations must embed UnimplementedActivityDiscountControllerServer
// for forward compatibility
type ActivityDiscountControllerServer interface {
	Create(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error)
	Destroy(context.Context, *ActivityDiscountDestroyRequest) (*empty.Empty, error)
	List(context.Context, *ActivityDiscountListRequest) (*ActivityDiscountListResponse, error)
	PartialUpdate(context.Context, *ActivityDiscountPartialUpdateRequest) (*ActivityDiscountResponse, error)
	Retrieve(context.Context, *ActivityDiscountRetrieveRequest) (*ActivityDiscountResponse, error)
	Update(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error)
	VoucherCreate(context.Context, *ActivityDiscountVoucherRequest) (*ActivityDiscountVoucherResponse, error)
	VoucherDestroy(context.Context, *ActivityDiscountVoucherDestroyRequest) (*empty.Empty, error)
	VoucherList(context.Context, *ActivityDiscountVoucherListRequest) (*ActivityDiscountVoucherListResponse, error)
	VoucherRecordCreate(context.Context, *ActivityDiscountVoucherRecordRequest) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordDestroy(context.Context, *ActivityDiscountVoucherRecordDestroyRequest) (*empty.Empty, error)
	VoucherRecordList(context.Context, *ActivityDiscountVoucherRecordListRequest) (*ActivityDiscountVoucherRecordListResponse, error)
	VoucherRecordRetrieve(context.Context, *ActivityDiscountVoucherRecordRetrieveRequest) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRecordUpdate(context.Context, *ActivityDiscountVoucherRecordRequest) (*ActivityDiscountVoucherRecordResponse, error)
	VoucherRetrieve(context.Context, *ActivityDiscountVoucherRetrieveRequest) (*ActivityDiscountVoucherResponse, error)
	VoucherUpdate(context.Context, *ActivityDiscountVoucherRequest) (*ActivityDiscountVoucherResponse, error)
	mustEmbedUnimplementedActivityDiscountControllerServer()
}

// UnimplementedActivityDiscountControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActivityDiscountControllerServer struct {
}

func (UnimplementedActivityDiscountControllerServer) Create(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityDiscountControllerServer) Destroy(context.Context, *ActivityDiscountDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedActivityDiscountControllerServer) List(context.Context, *ActivityDiscountListRequest) (*ActivityDiscountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActivityDiscountControllerServer) PartialUpdate(context.Context, *ActivityDiscountPartialUpdateRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) Retrieve(context.Context, *ActivityDiscountRetrieveRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedActivityDiscountControllerServer) Update(context.Context, *ActivityDiscountRequest) (*ActivityDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherCreate(context.Context, *ActivityDiscountVoucherRequest) (*ActivityDiscountVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherCreate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherDestroy(context.Context, *ActivityDiscountVoucherDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherDestroy not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherList(context.Context, *ActivityDiscountVoucherListRequest) (*ActivityDiscountVoucherListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherList not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordCreate(context.Context, *ActivityDiscountVoucherRecordRequest) (*ActivityDiscountVoucherRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordCreate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordDestroy(context.Context, *ActivityDiscountVoucherRecordDestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordDestroy not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordList(context.Context, *ActivityDiscountVoucherRecordListRequest) (*ActivityDiscountVoucherRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordList not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordRetrieve(context.Context, *ActivityDiscountVoucherRecordRetrieveRequest) (*ActivityDiscountVoucherRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordRetrieve not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRecordUpdate(context.Context, *ActivityDiscountVoucherRecordRequest) (*ActivityDiscountVoucherRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRecordUpdate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherRetrieve(context.Context, *ActivityDiscountVoucherRetrieveRequest) (*ActivityDiscountVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherRetrieve not implemented")
}
func (UnimplementedActivityDiscountControllerServer) VoucherUpdate(context.Context, *ActivityDiscountVoucherRequest) (*ActivityDiscountVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherUpdate not implemented")
}
func (UnimplementedActivityDiscountControllerServer) mustEmbedUnimplementedActivityDiscountControllerServer() {
}

// UnsafeActivityDiscountControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityDiscountControllerServer will
// result in compilation errors.
type UnsafeActivityDiscountControllerServer interface {
	mustEmbedUnimplementedActivityDiscountControllerServer()
}

func RegisterActivityDiscountControllerServer(s grpc.ServiceRegistrar, srv ActivityDiscountControllerServer) {
	s.RegisterService(&ActivityDiscountController_ServiceDesc, srv)
}

func _ActivityDiscountController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Create(ctx, req.(*ActivityDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Destroy(ctx, req.(*ActivityDiscountDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).List(ctx, req.(*ActivityDiscountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).PartialUpdate(ctx, req.(*ActivityDiscountPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Retrieve(ctx, req.(*ActivityDiscountRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).Update(ctx, req.(*ActivityDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherCreate(ctx, req.(*ActivityDiscountVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherDestroy(ctx, req.(*ActivityDiscountVoucherDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherList(ctx, req.(*ActivityDiscountVoucherListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordCreate(ctx, req.(*ActivityDiscountVoucherRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordDestroy(ctx, req.(*ActivityDiscountVoucherRecordDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordList(ctx, req.(*ActivityDiscountVoucherRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordRetrieve(ctx, req.(*ActivityDiscountVoucherRecordRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRecordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRecordUpdate(ctx, req.(*ActivityDiscountVoucherRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherRetrieve(ctx, req.(*ActivityDiscountVoucherRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDiscountController_VoucherUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDiscountVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDiscountControllerServer).VoucherUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityDiscountController_VoucherUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDiscountControllerServer).VoucherUpdate(ctx, req.(*ActivityDiscountVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityDiscountController_ServiceDesc is the grpc.ServiceDesc for ActivityDiscountController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityDiscountController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_service.activity_ito.ActivityDiscountController",
	HandlerType: (*ActivityDiscountControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActivityDiscountController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ActivityDiscountController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActivityDiscountController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ActivityDiscountController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ActivityDiscountController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityDiscountController_Update_Handler,
		},
		{
			MethodName: "VoucherCreate",
			Handler:    _ActivityDiscountController_VoucherCreate_Handler,
		},
		{
			MethodName: "VoucherDestroy",
			Handler:    _ActivityDiscountController_VoucherDestroy_Handler,
		},
		{
			MethodName: "VoucherList",
			Handler:    _ActivityDiscountController_VoucherList_Handler,
		},
		{
			MethodName: "VoucherRecordCreate",
			Handler:    _ActivityDiscountController_VoucherRecordCreate_Handler,
		},
		{
			MethodName: "VoucherRecordDestroy",
			Handler:    _ActivityDiscountController_VoucherRecordDestroy_Handler,
		},
		{
			MethodName: "VoucherRecordList",
			Handler:    _ActivityDiscountController_VoucherRecordList_Handler,
		},
		{
			MethodName: "VoucherRecordRetrieve",
			Handler:    _ActivityDiscountController_VoucherRecordRetrieve_Handler,
		},
		{
			MethodName: "VoucherRecordUpdate",
			Handler:    _ActivityDiscountController_VoucherRecordUpdate_Handler,
		},
		{
			MethodName: "VoucherRetrieve",
			Handler:    _ActivityDiscountController_VoucherRetrieve_Handler,
		},
		{
			MethodName: "VoucherUpdate",
			Handler:    _ActivityDiscountController_VoucherUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity_ito.proto",
}
