// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: activity_ito.proto

package activityito

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActVoucherOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Titles   []*LabelValueResponse       `protobuf:"bytes,1,rep,name=titles,proto3" json:"titles,omitempty"`
	ActTypes []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=act_types,json=actTypes,proto3" json:"act_types,omitempty"`
	SubTypes []*LabelNumberValueResponse `protobuf:"bytes,3,rep,name=sub_types,json=subTypes,proto3" json:"sub_types,omitempty"`
}

func (x *ActVoucherOptionResponse) Reset() {
	*x = ActVoucherOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActVoucherOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActVoucherOptionResponse) ProtoMessage() {}

func (x *ActVoucherOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActVoucherOptionResponse.ProtoReflect.Descriptor instead.
func (*ActVoucherOptionResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{0}
}

func (x *ActVoucherOptionResponse) GetTitles() []*LabelValueResponse {
	if x != nil {
		return x.Titles
	}
	return nil
}

func (x *ActVoucherOptionResponse) GetActTypes() []*LabelNumberValueResponse {
	if x != nil {
		return x.ActTypes
	}
	return nil
}

func (x *ActVoucherOptionResponse) GetSubTypes() []*LabelNumberValueResponse {
	if x != nil {
		return x.SubTypes
	}
	return nil
}

type ActivityBrandBlogDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandBlogDestroyRequest) Reset() {
	*x = ActivityBrandBlogDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandBlogDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandBlogDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandBlogDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandBlogDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandBlogDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityBrandBlogDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandCaresDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandCaresDestroyRequest) Reset() {
	*x = ActivityBrandCaresDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandCaresDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityBrandCaresDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandCaresListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityBrandCaresListRequest) Reset() {
	*x = ActivityBrandCaresListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresListRequest) ProtoMessage() {}

func (x *ActivityBrandCaresListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresListRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{3}
}

func (x *ActivityBrandCaresListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityBrandCaresListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityBrandCaresResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityBrandCaresListResponse) Reset() {
	*x = ActivityBrandCaresListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresListResponse) ProtoMessage() {}

func (x *ActivityBrandCaresListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresListResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{4}
}

func (x *ActivityBrandCaresListResponse) GetResults() []*ActivityBrandCaresResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityBrandCaresListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityBrandCaresRecordDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandCaresRecordDestroyRequest) Reset() {
	*x = ActivityBrandCaresRecordDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRecordDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRecordDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandCaresRecordDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRecordDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRecordDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{5}
}

func (x *ActivityBrandCaresRecordDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandCaresRecordListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityBrandCaresRecordListRequest) Reset() {
	*x = ActivityBrandCaresRecordListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRecordListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRecordListRequest) ProtoMessage() {}

func (x *ActivityBrandCaresRecordListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRecordListRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRecordListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{6}
}

func (x *ActivityBrandCaresRecordListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityBrandCaresRecordListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityBrandCaresRecordResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityBrandCaresRecordListResponse) Reset() {
	*x = ActivityBrandCaresRecordListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRecordListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRecordListResponse) ProtoMessage() {}

func (x *ActivityBrandCaresRecordListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRecordListResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRecordListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{7}
}

func (x *ActivityBrandCaresRecordListResponse) GetResults() []*ActivityBrandCaresRecordResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityBrandCaresRecordListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityBrandCaresRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId         int32   `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	CardNo        string  `protobuf:"bytes,4,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	Status        int32   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	AcceptTime    *string `protobuf:"bytes,6,opt,name=accept_time,json=acceptTime,proto3,oneof" json:"accept_time,omitempty"`
	PhoneNumber   *string `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Remark        *string `protobuf:"bytes,8,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName     *string `protobuf:"bytes,9,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	ActivityCares int64   `protobuf:"varint,10,opt,name=activity_cares,json=activityCares,proto3" json:"activity_cares,omitempty"`
	Ctm           *int64  `protobuf:"varint,11,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *ActivityBrandCaresRecordRequest) Reset() {
	*x = ActivityBrandCaresRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRecordRequest) ProtoMessage() {}

func (x *ActivityBrandCaresRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRecordRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRecordRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{8}
}

func (x *ActivityBrandCaresRecordRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandCaresRecordRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandCaresRecordRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandCaresRecordRequest) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *ActivityBrandCaresRecordRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandCaresRecordRequest) GetAcceptTime() string {
	if x != nil && x.AcceptTime != nil {
		return *x.AcceptTime
	}
	return ""
}

func (x *ActivityBrandCaresRecordRequest) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *ActivityBrandCaresRecordRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandCaresRecordRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityBrandCaresRecordRequest) GetActivityCares() int64 {
	if x != nil {
		return x.ActivityCares
	}
	return 0
}

func (x *ActivityBrandCaresRecordRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type ActivityBrandCaresRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CtmId         int32   `protobuf:"varint,2,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	StatusName    string  `protobuf:"bytes,3,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	Nickname      string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	CaresId       int32   `protobuf:"varint,5,opt,name=cares_id,json=caresId,proto3" json:"cares_id,omitempty"`
	CardNo        string  `protobuf:"bytes,6,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	Status        int32   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	AcceptTime    *string `protobuf:"bytes,8,opt,name=accept_time,json=acceptTime,proto3,oneof" json:"accept_time,omitempty"`
	PhoneNumber   *string `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Remark        *string `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName     *string `protobuf:"bytes,11,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CreateTime    string  `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string  `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ActivityCares int64   `protobuf:"varint,14,opt,name=activity_cares,json=activityCares,proto3" json:"activity_cares,omitempty"`
	Ctm           *int64  `protobuf:"varint,15,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *ActivityBrandCaresRecordResponse) Reset() {
	*x = ActivityBrandCaresRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRecordResponse) ProtoMessage() {}

func (x *ActivityBrandCaresRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRecordResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRecordResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{9}
}

func (x *ActivityBrandCaresRecordResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandCaresRecordResponse) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandCaresRecordResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetCaresId() int32 {
	if x != nil {
		return x.CaresId
	}
	return 0
}

func (x *ActivityBrandCaresRecordResponse) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandCaresRecordResponse) GetAcceptTime() string {
	if x != nil && x.AcceptTime != nil {
		return *x.AcceptTime
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityBrandCaresRecordResponse) GetActivityCares() int64 {
	if x != nil {
		return x.ActivityCares
	}
	return 0
}

func (x *ActivityBrandCaresRecordResponse) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type ActivityBrandCaresRecordRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandCaresRecordRetrieveRequest) Reset() {
	*x = ActivityBrandCaresRecordRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRecordRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRecordRetrieveRequest) ProtoMessage() {}

func (x *ActivityBrandCaresRecordRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRecordRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRecordRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{10}
}

func (x *ActivityBrandCaresRecordRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandCaresRecordUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId                int32    `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CardNo               string   `protobuf:"bytes,5,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	Status               int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	AcceptTime           *string  `protobuf:"bytes,7,opt,name=accept_time,json=acceptTime,proto3,oneof" json:"accept_time,omitempty"`
	PhoneNumber          *string  `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Remark               *string  `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName            *string  `protobuf:"bytes,10,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	ActivityCares        int64    `protobuf:"varint,11,opt,name=activity_cares,json=activityCares,proto3" json:"activity_cares,omitempty"`
	Ctm                  *int64   `protobuf:"varint,12,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *ActivityBrandCaresRecordUpdateRequest) Reset() {
	*x = ActivityBrandCaresRecordUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRecordUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRecordUpdateRequest) ProtoMessage() {}

func (x *ActivityBrandCaresRecordUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRecordUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRecordUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{11}
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetAcceptTime() string {
	if x != nil && x.AcceptTime != nil {
		return *x.AcceptTime
	}
	return ""
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetActivityCares() int64 {
	if x != nil {
		return x.ActivityCares
	}
	return 0
}

func (x *ActivityBrandCaresRecordUpdateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type ActivityBrandCaresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters  string `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CaresId  int32  `protobuf:"varint,3,opt,name=cares_id,json=caresId,proto3" json:"cares_id,omitempty"`
	Count    int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Limit    int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Balance  int32  `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
	Activity int64  `protobuf:"varint,7,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityBrandCaresRequest) Reset() {
	*x = ActivityBrandCaresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRequest) ProtoMessage() {}

func (x *ActivityBrandCaresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{12}
}

func (x *ActivityBrandCaresRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandCaresRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandCaresRequest) GetCaresId() int32 {
	if x != nil {
		return x.CaresId
	}
	return 0
}

func (x *ActivityBrandCaresRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityBrandCaresRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ActivityBrandCaresRequest) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ActivityBrandCaresRequest) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityBrandCaresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cares      *CardCaresResponse `protobuf:"bytes,2,opt,name=cares,proto3" json:"cares,omitempty"`
	Deletable  bool               `protobuf:"varint,3,opt,name=deletable,proto3" json:"deletable,omitempty"`
	CaresId    int32              `protobuf:"varint,4,opt,name=cares_id,json=caresId,proto3" json:"cares_id,omitempty"`
	Count      int32              `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Limit      int32              `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Balance    int32              `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	CreateTime string             `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string             `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Activity   int64              `protobuf:"varint,10,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityBrandCaresResponse) Reset() {
	*x = ActivityBrandCaresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresResponse) ProtoMessage() {}

func (x *ActivityBrandCaresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{13}
}

func (x *ActivityBrandCaresResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandCaresResponse) GetCares() *CardCaresResponse {
	if x != nil {
		return x.Cares
	}
	return nil
}

func (x *ActivityBrandCaresResponse) GetDeletable() bool {
	if x != nil {
		return x.Deletable
	}
	return false
}

func (x *ActivityBrandCaresResponse) GetCaresId() int32 {
	if x != nil {
		return x.CaresId
	}
	return 0
}

func (x *ActivityBrandCaresResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityBrandCaresResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ActivityBrandCaresResponse) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ActivityBrandCaresResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityBrandCaresResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityBrandCaresResponse) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityBrandCaresRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandCaresRetrieveRequest) Reset() {
	*x = ActivityBrandCaresRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresRetrieveRequest) ProtoMessage() {}

func (x *ActivityBrandCaresRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{14}
}

func (x *ActivityBrandCaresRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandCaresUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CaresId              int32    `protobuf:"varint,3,opt,name=cares_id,json=caresId,proto3" json:"cares_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Count                int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Limit                int32    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Balance              int32    `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	Activity             int64    `protobuf:"varint,8,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityBrandCaresUpdateRequest) Reset() {
	*x = ActivityBrandCaresUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandCaresUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandCaresUpdateRequest) ProtoMessage() {}

func (x *ActivityBrandCaresUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandCaresUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandCaresUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{15}
}

func (x *ActivityBrandCaresUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandCaresUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandCaresUpdateRequest) GetCaresId() int32 {
	if x != nil {
		return x.CaresId
	}
	return 0
}

func (x *ActivityBrandCaresUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityBrandCaresUpdateRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityBrandCaresUpdateRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ActivityBrandCaresUpdateRequest) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ActivityBrandCaresUpdateRequest) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityBrandDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandDestroyRequest) Reset() {
	*x = ActivityBrandDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{16}
}

func (x *ActivityBrandDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityBrandListRequest) Reset() {
	*x = ActivityBrandListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandListRequest) ProtoMessage() {}

func (x *ActivityBrandListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandListRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{17}
}

func (x *ActivityBrandListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityBrandListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityBrandResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityBrandListResponse) Reset() {
	*x = ActivityBrandListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandListResponse) ProtoMessage() {}

func (x *ActivityBrandListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandListResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{18}
}

func (x *ActivityBrandListResponse) GetResults() []*ActivityBrandResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityBrandListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityBrandNutDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandNutDestroyRequest) Reset() {
	*x = ActivityBrandNutDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandNutDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{19}
}

func (x *ActivityBrandNutDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandNutListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityBrandNutListRequest) Reset() {
	*x = ActivityBrandNutListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutListRequest) ProtoMessage() {}

func (x *ActivityBrandNutListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutListRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{20}
}

func (x *ActivityBrandNutListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityBrandNutListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityBrandNutResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityBrandNutListResponse) Reset() {
	*x = ActivityBrandNutListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutListResponse) ProtoMessage() {}

func (x *ActivityBrandNutListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutListResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{21}
}

func (x *ActivityBrandNutListResponse) GetResults() []*ActivityBrandNutResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityBrandNutListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityBrandNutRecordDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandNutRecordDestroyRequest) Reset() {
	*x = ActivityBrandNutRecordDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRecordDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRecordDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandNutRecordDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRecordDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRecordDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{22}
}

func (x *ActivityBrandNutRecordDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandNutRecordListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityBrandNutRecordListRequest) Reset() {
	*x = ActivityBrandNutRecordListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRecordListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRecordListRequest) ProtoMessage() {}

func (x *ActivityBrandNutRecordListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRecordListRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRecordListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{23}
}

func (x *ActivityBrandNutRecordListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityBrandNutRecordListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityBrandNutRecordResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityBrandNutRecordListResponse) Reset() {
	*x = ActivityBrandNutRecordListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRecordListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRecordListResponse) ProtoMessage() {}

func (x *ActivityBrandNutRecordListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRecordListResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRecordListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{24}
}

func (x *ActivityBrandNutRecordListResponse) GetResults() []*ActivityBrandNutRecordResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityBrandNutRecordListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityBrandNutRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters     string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId       int32   `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	CardNo      string  `protobuf:"bytes,4,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	Status      int32   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	AcceptTime  *string `protobuf:"bytes,6,opt,name=accept_time,json=acceptTime,proto3,oneof" json:"accept_time,omitempty"`
	PhoneNumber *string `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Remark      *string `protobuf:"bytes,8,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName   *string `protobuf:"bytes,9,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	ActivityNut int64   `protobuf:"varint,10,opt,name=activity_nut,json=activityNut,proto3" json:"activity_nut,omitempty"`
	Ctm         *int64  `protobuf:"varint,11,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *ActivityBrandNutRecordRequest) Reset() {
	*x = ActivityBrandNutRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRecordRequest) ProtoMessage() {}

func (x *ActivityBrandNutRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRecordRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRecordRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{25}
}

func (x *ActivityBrandNutRecordRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandNutRecordRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandNutRecordRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandNutRecordRequest) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *ActivityBrandNutRecordRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandNutRecordRequest) GetAcceptTime() string {
	if x != nil && x.AcceptTime != nil {
		return *x.AcceptTime
	}
	return ""
}

func (x *ActivityBrandNutRecordRequest) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *ActivityBrandNutRecordRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandNutRecordRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityBrandNutRecordRequest) GetActivityNut() int64 {
	if x != nil {
		return x.ActivityNut
	}
	return 0
}

func (x *ActivityBrandNutRecordRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type ActivityBrandNutRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CtmId       int32   `protobuf:"varint,2,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	StatusName  string  `protobuf:"bytes,3,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	Nickname    string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	NutId       int32   `protobuf:"varint,5,opt,name=nut_id,json=nutId,proto3" json:"nut_id,omitempty"`
	CardNo      string  `protobuf:"bytes,6,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	Status      int32   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	AcceptTime  *string `protobuf:"bytes,8,opt,name=accept_time,json=acceptTime,proto3,oneof" json:"accept_time,omitempty"`
	PhoneNumber *string `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Remark      *string `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName   *string `protobuf:"bytes,11,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CreateTime  string  `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  string  `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ActivityNut int64   `protobuf:"varint,14,opt,name=activity_nut,json=activityNut,proto3" json:"activity_nut,omitempty"`
	Ctm         *int64  `protobuf:"varint,15,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *ActivityBrandNutRecordResponse) Reset() {
	*x = ActivityBrandNutRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRecordResponse) ProtoMessage() {}

func (x *ActivityBrandNutRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRecordResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRecordResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{26}
}

func (x *ActivityBrandNutRecordResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandNutRecordResponse) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandNutRecordResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetNutId() int32 {
	if x != nil {
		return x.NutId
	}
	return 0
}

func (x *ActivityBrandNutRecordResponse) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandNutRecordResponse) GetAcceptTime() string {
	if x != nil && x.AcceptTime != nil {
		return *x.AcceptTime
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityBrandNutRecordResponse) GetActivityNut() int64 {
	if x != nil {
		return x.ActivityNut
	}
	return 0
}

func (x *ActivityBrandNutRecordResponse) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type ActivityBrandNutRecordRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandNutRecordRetrieveRequest) Reset() {
	*x = ActivityBrandNutRecordRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRecordRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRecordRetrieveRequest) ProtoMessage() {}

func (x *ActivityBrandNutRecordRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRecordRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRecordRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{27}
}

func (x *ActivityBrandNutRecordRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandNutRecordUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId                int32    `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CardNo               string   `protobuf:"bytes,5,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	Status               int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	AcceptTime           *string  `protobuf:"bytes,7,opt,name=accept_time,json=acceptTime,proto3,oneof" json:"accept_time,omitempty"`
	PhoneNumber          *string  `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Remark               *string  `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName            *string  `protobuf:"bytes,10,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	ActivityNut          int64    `protobuf:"varint,11,opt,name=activity_nut,json=activityNut,proto3" json:"activity_nut,omitempty"`
	Ctm                  *int64   `protobuf:"varint,12,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *ActivityBrandNutRecordUpdateRequest) Reset() {
	*x = ActivityBrandNutRecordUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRecordUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRecordUpdateRequest) ProtoMessage() {}

func (x *ActivityBrandNutRecordUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRecordUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRecordUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{28}
}

func (x *ActivityBrandNutRecordUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandNutRecordUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandNutRecordUpdateRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandNutRecordUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityBrandNutRecordUpdateRequest) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *ActivityBrandNutRecordUpdateRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandNutRecordUpdateRequest) GetAcceptTime() string {
	if x != nil && x.AcceptTime != nil {
		return *x.AcceptTime
	}
	return ""
}

func (x *ActivityBrandNutRecordUpdateRequest) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *ActivityBrandNutRecordUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandNutRecordUpdateRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityBrandNutRecordUpdateRequest) GetActivityNut() int64 {
	if x != nil {
		return x.ActivityNut
	}
	return 0
}

func (x *ActivityBrandNutRecordUpdateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type ActivityBrandNutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters  string `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	NutId    int32  `protobuf:"varint,3,opt,name=nut_id,json=nutId,proto3" json:"nut_id,omitempty"`
	Count    int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Limit    int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Balance  int32  `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
	IsValid  bool   `protobuf:"varint,7,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Activity int64  `protobuf:"varint,8,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityBrandNutRequest) Reset() {
	*x = ActivityBrandNutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRequest) ProtoMessage() {}

func (x *ActivityBrandNutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{29}
}

func (x *ActivityBrandNutRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandNutRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandNutRequest) GetNutId() int32 {
	if x != nil {
		return x.NutId
	}
	return 0
}

func (x *ActivityBrandNutRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityBrandNutRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ActivityBrandNutRequest) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ActivityBrandNutRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityBrandNutRequest) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityBrandNutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NutId      int32            `protobuf:"varint,2,opt,name=nut_id,json=nutId,proto3" json:"nut_id,omitempty"`
	Nut        *CardNutResponse `protobuf:"bytes,3,opt,name=nut,proto3" json:"nut,omitempty"`
	Deletable  bool             `protobuf:"varint,4,opt,name=deletable,proto3" json:"deletable,omitempty"`
	Count      int32            `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Limit      int32            `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Balance    int32            `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	IsValid    bool             `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	CreateTime string           `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string           `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Activity   int64            `protobuf:"varint,11,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityBrandNutResponse) Reset() {
	*x = ActivityBrandNutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutResponse) ProtoMessage() {}

func (x *ActivityBrandNutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{30}
}

func (x *ActivityBrandNutResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandNutResponse) GetNutId() int32 {
	if x != nil {
		return x.NutId
	}
	return 0
}

func (x *ActivityBrandNutResponse) GetNut() *CardNutResponse {
	if x != nil {
		return x.Nut
	}
	return nil
}

func (x *ActivityBrandNutResponse) GetDeletable() bool {
	if x != nil {
		return x.Deletable
	}
	return false
}

func (x *ActivityBrandNutResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityBrandNutResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ActivityBrandNutResponse) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ActivityBrandNutResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityBrandNutResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityBrandNutResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityBrandNutResponse) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityBrandNutRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandNutRetrieveRequest) Reset() {
	*x = ActivityBrandNutRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutRetrieveRequest) ProtoMessage() {}

func (x *ActivityBrandNutRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{31}
}

func (x *ActivityBrandNutRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandNutUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	NutId                int32    `protobuf:"varint,3,opt,name=nut_id,json=nutId,proto3" json:"nut_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Count                int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Limit                int32    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Balance              int32    `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	IsValid              bool     `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Activity             int64    `protobuf:"varint,9,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityBrandNutUpdateRequest) Reset() {
	*x = ActivityBrandNutUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandNutUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandNutUpdateRequest) ProtoMessage() {}

func (x *ActivityBrandNutUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandNutUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandNutUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{32}
}

func (x *ActivityBrandNutUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandNutUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandNutUpdateRequest) GetNutId() int32 {
	if x != nil {
		return x.NutId
	}
	return 0
}

func (x *ActivityBrandNutUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityBrandNutUpdateRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityBrandNutUpdateRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ActivityBrandNutUpdateRequest) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ActivityBrandNutUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityBrandNutUpdateRequest) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityBrandOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=type,proto3" json:"type,omitempty"`
	ApproveStatus []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=approve_status,json=approveStatus,proto3" json:"approve_status,omitempty"`
	CardStatus    []*LabelNumberValueResponse `protobuf:"bytes,3,rep,name=card_status,json=cardStatus,proto3" json:"card_status,omitempty"`
	BlogType      []*LabelNumberValueResponse `protobuf:"bytes,4,rep,name=blog_type,json=blogType,proto3" json:"blog_type,omitempty"`
	Platform      []*LabelNumberValueResponse `protobuf:"bytes,5,rep,name=platform,proto3" json:"platform,omitempty"`
}

func (x *ActivityBrandOptionsResponse) Reset() {
	*x = ActivityBrandOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandOptionsResponse) ProtoMessage() {}

func (x *ActivityBrandOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandOptionsResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandOptionsResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{33}
}

func (x *ActivityBrandOptionsResponse) GetType() []*LabelNumberValueResponse {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ActivityBrandOptionsResponse) GetApproveStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.ApproveStatus
	}
	return nil
}

func (x *ActivityBrandOptionsResponse) GetCardStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.CardStatus
	}
	return nil
}

func (x *ActivityBrandOptionsResponse) GetBlogType() []*LabelNumberValueResponse {
	if x != nil {
		return x.BlogType
	}
	return nil
}

func (x *ActivityBrandOptionsResponse) GetPlatform() []*LabelNumberValueResponse {
	if x != nil {
		return x.Platform
	}
	return nil
}

type ActivityBrandPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ActivityNo           string   `protobuf:"bytes,4,opt,name=activity_no,json=activityNo,proto3" json:"activity_no,omitempty"`
	Title                string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Theme                *string  `protobuf:"bytes,6,opt,name=theme,proto3,oneof" json:"theme,omitempty"`
	Type                 int32    `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	StartTime            *string  `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime              *string  `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Place                *string  `protobuf:"bytes,10,opt,name=place,proto3,oneof" json:"place,omitempty"`
	IsValid              bool     `protobuf:"varint,11,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	AllowApply           *bool    `protobuf:"varint,12,opt,name=allow_apply,json=allowApply,proto3,oneof" json:"allow_apply,omitempty"`
	Repeatable           bool     `protobuf:"varint,13,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
	Remark               *string  `protobuf:"bytes,14,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Description          *string  `protobuf:"bytes,15,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AdminId              *int32   `protobuf:"varint,16,opt,name=admin_id,json=adminId,proto3,oneof" json:"admin_id,omitempty"`
	AdminName            *string  `protobuf:"bytes,17,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
}

func (x *ActivityBrandPartialUpdateRequest) Reset() {
	*x = ActivityBrandPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandPartialUpdateRequest) ProtoMessage() {}

func (x *ActivityBrandPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{34}
}

func (x *ActivityBrandPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityBrandPartialUpdateRequest) GetActivityNo() string {
	if x != nil {
		return x.ActivityNo
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetTheme() string {
	if x != nil && x.Theme != nil {
		return *x.Theme
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ActivityBrandPartialUpdateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetPlace() string {
	if x != nil && x.Place != nil {
		return *x.Place
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityBrandPartialUpdateRequest) GetAllowApply() bool {
	if x != nil && x.AllowApply != nil {
		return *x.AllowApply
	}
	return false
}

func (x *ActivityBrandPartialUpdateRequest) GetRepeatable() bool {
	if x != nil {
		return x.Repeatable
	}
	return false
}

func (x *ActivityBrandPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ActivityBrandPartialUpdateRequest) GetAdminId() int32 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *ActivityBrandPartialUpdateRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

type ActivityBrandRecordDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandRecordDestroyRequest) Reset() {
	*x = ActivityBrandRecordDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRecordDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRecordDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandRecordDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRecordDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandRecordDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{35}
}

func (x *ActivityBrandRecordDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandRecordListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityBrandRecordListRequest) Reset() {
	*x = ActivityBrandRecordListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRecordListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRecordListRequest) ProtoMessage() {}

func (x *ActivityBrandRecordListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRecordListRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandRecordListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{36}
}

func (x *ActivityBrandRecordListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityBrandRecordListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityBrandRecordResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityBrandRecordListResponse) Reset() {
	*x = ActivityBrandRecordListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRecordListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRecordListResponse) ProtoMessage() {}

func (x *ActivityBrandRecordListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRecordListResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandRecordListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{37}
}

func (x *ActivityBrandRecordListResponse) GetResults() []*ActivityBrandRecordResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityBrandRecordListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityBrandRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters     string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId       int32   `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	ActivityId  int32   `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Name        *string `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile      *string `protobuf:"bytes,6,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
	Province    *string `protobuf:"bytes,7,opt,name=province,proto3,oneof" json:"province,omitempty"`
	City        *string `protobuf:"bytes,8,opt,name=city,proto3,oneof" json:"city,omitempty"`
	District    *string `protobuf:"bytes,9,opt,name=district,proto3,oneof" json:"district,omitempty"`
	AddrDetail  *string `protobuf:"bytes,10,opt,name=addr_detail,json=addrDetail,proto3,oneof" json:"addr_detail,omitempty"`
	ApplyDesc   *string `protobuf:"bytes,11,opt,name=apply_desc,json=applyDesc,proto3,oneof" json:"apply_desc,omitempty"`
	Status      int32   `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	ReviewTime  *string `protobuf:"bytes,13,opt,name=review_time,json=reviewTime,proto3,oneof" json:"review_time,omitempty"`
	SignTime    *string `protobuf:"bytes,14,opt,name=sign_time,json=signTime,proto3,oneof" json:"sign_time,omitempty"`
	ReviewAdmin *string `protobuf:"bytes,15,opt,name=review_admin,json=reviewAdmin,proto3,oneof" json:"review_admin,omitempty"`
	ReviewDesc  *string `protobuf:"bytes,16,opt,name=review_desc,json=reviewDesc,proto3,oneof" json:"review_desc,omitempty"`
	Remark      *string `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *ActivityBrandRecordRequest) Reset() {
	*x = ActivityBrandRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRecordRequest) ProtoMessage() {}

func (x *ActivityBrandRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRecordRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandRecordRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{38}
}

func (x *ActivityBrandRecordRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandRecordRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandRecordRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityBrandRecordRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetAddrDetail() string {
	if x != nil && x.AddrDetail != nil {
		return *x.AddrDetail
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetApplyDesc() string {
	if x != nil && x.ApplyDesc != nil {
		return *x.ApplyDesc
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandRecordRequest) GetReviewTime() string {
	if x != nil && x.ReviewTime != nil {
		return *x.ReviewTime
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetSignTime() string {
	if x != nil && x.SignTime != nil {
		return *x.SignTime
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetReviewAdmin() string {
	if x != nil && x.ReviewAdmin != nil {
		return *x.ReviewAdmin
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetReviewDesc() string {
	if x != nil && x.ReviewDesc != nil {
		return *x.ReviewDesc
	}
	return ""
}

func (x *ActivityBrandRecordRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type ActivityBrandRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CtmId       int32                  `protobuf:"varint,2,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	StatusName  string                 `protobuf:"bytes,3,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	Nickname    string                 `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Activity    *ActivityBrandResponse `protobuf:"bytes,5,opt,name=activity,proto3" json:"activity,omitempty"`
	ActivityId  int32                  `protobuf:"varint,6,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Ctm         *CtmResponse           `protobuf:"bytes,7,opt,name=ctm,proto3" json:"ctm,omitempty"`
	Name        *string                `protobuf:"bytes,8,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile      *string                `protobuf:"bytes,9,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
	Province    *string                `protobuf:"bytes,10,opt,name=province,proto3,oneof" json:"province,omitempty"`
	City        *string                `protobuf:"bytes,11,opt,name=city,proto3,oneof" json:"city,omitempty"`
	District    *string                `protobuf:"bytes,12,opt,name=district,proto3,oneof" json:"district,omitempty"`
	AddrDetail  *string                `protobuf:"bytes,13,opt,name=addr_detail,json=addrDetail,proto3,oneof" json:"addr_detail,omitempty"`
	ApplyDesc   *string                `protobuf:"bytes,14,opt,name=apply_desc,json=applyDesc,proto3,oneof" json:"apply_desc,omitempty"`
	Status      int32                  `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	ReviewTime  *string                `protobuf:"bytes,16,opt,name=review_time,json=reviewTime,proto3,oneof" json:"review_time,omitempty"`
	SignTime    *string                `protobuf:"bytes,17,opt,name=sign_time,json=signTime,proto3,oneof" json:"sign_time,omitempty"`
	ReviewAdmin *string                `protobuf:"bytes,18,opt,name=review_admin,json=reviewAdmin,proto3,oneof" json:"review_admin,omitempty"`
	ReviewDesc  *string                `protobuf:"bytes,19,opt,name=review_desc,json=reviewDesc,proto3,oneof" json:"review_desc,omitempty"`
	Remark      *string                `protobuf:"bytes,20,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CreateTime  string                 `protobuf:"bytes,21,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  string                 `protobuf:"bytes,22,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ActivityBrandRecordResponse) Reset() {
	*x = ActivityBrandRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRecordResponse) ProtoMessage() {}

func (x *ActivityBrandRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRecordResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandRecordResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{39}
}

func (x *ActivityBrandRecordResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandRecordResponse) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandRecordResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetActivity() *ActivityBrandResponse {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ActivityBrandRecordResponse) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityBrandRecordResponse) GetCtm() *CtmResponse {
	if x != nil {
		return x.Ctm
	}
	return nil
}

func (x *ActivityBrandRecordResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetAddrDetail() string {
	if x != nil && x.AddrDetail != nil {
		return *x.AddrDetail
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetApplyDesc() string {
	if x != nil && x.ApplyDesc != nil {
		return *x.ApplyDesc
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandRecordResponse) GetReviewTime() string {
	if x != nil && x.ReviewTime != nil {
		return *x.ReviewTime
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetSignTime() string {
	if x != nil && x.SignTime != nil {
		return *x.SignTime
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetReviewAdmin() string {
	if x != nil && x.ReviewAdmin != nil {
		return *x.ReviewAdmin
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetReviewDesc() string {
	if x != nil && x.ReviewDesc != nil {
		return *x.ReviewDesc
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityBrandRecordResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ActivityBrandRecordRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandRecordRetrieveRequest) Reset() {
	*x = ActivityBrandRecordRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRecordRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRecordRetrieveRequest) ProtoMessage() {}

func (x *ActivityBrandRecordRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRecordRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandRecordRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{40}
}

func (x *ActivityBrandRecordRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandRecordUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId                int32    `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	ActivityId           int32    `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 *string  `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile               *string  `protobuf:"bytes,7,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
	Province             *string  `protobuf:"bytes,8,opt,name=province,proto3,oneof" json:"province,omitempty"`
	City                 *string  `protobuf:"bytes,9,opt,name=city,proto3,oneof" json:"city,omitempty"`
	District             *string  `protobuf:"bytes,10,opt,name=district,proto3,oneof" json:"district,omitempty"`
	AddrDetail           *string  `protobuf:"bytes,11,opt,name=addr_detail,json=addrDetail,proto3,oneof" json:"addr_detail,omitempty"`
	ApplyDesc            *string  `protobuf:"bytes,12,opt,name=apply_desc,json=applyDesc,proto3,oneof" json:"apply_desc,omitempty"`
	Status               int32    `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	ReviewTime           *string  `protobuf:"bytes,14,opt,name=review_time,json=reviewTime,proto3,oneof" json:"review_time,omitempty"`
	SignTime             *string  `protobuf:"bytes,15,opt,name=sign_time,json=signTime,proto3,oneof" json:"sign_time,omitempty"`
	ReviewAdmin          *string  `protobuf:"bytes,16,opt,name=review_admin,json=reviewAdmin,proto3,oneof" json:"review_admin,omitempty"`
	ReviewDesc           *string  `protobuf:"bytes,17,opt,name=review_desc,json=reviewDesc,proto3,oneof" json:"review_desc,omitempty"`
	Remark               *string  `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *ActivityBrandRecordUpdateRequest) Reset() {
	*x = ActivityBrandRecordUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRecordUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRecordUpdateRequest) ProtoMessage() {}

func (x *ActivityBrandRecordUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRecordUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandRecordUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{41}
}

func (x *ActivityBrandRecordUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandRecordUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityBrandRecordUpdateRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityBrandRecordUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityBrandRecordUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetAddrDetail() string {
	if x != nil && x.AddrDetail != nil {
		return *x.AddrDetail
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetApplyDesc() string {
	if x != nil && x.ApplyDesc != nil {
		return *x.ApplyDesc
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityBrandRecordUpdateRequest) GetReviewTime() string {
	if x != nil && x.ReviewTime != nil {
		return *x.ReviewTime
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetSignTime() string {
	if x != nil && x.SignTime != nil {
		return *x.SignTime
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetReviewAdmin() string {
	if x != nil && x.ReviewAdmin != nil {
		return *x.ReviewAdmin
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetReviewDesc() string {
	if x != nil && x.ReviewDesc != nil {
		return *x.ReviewDesc
	}
	return ""
}

func (x *ActivityBrandRecordUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type ActivityBrandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters     string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ActivityNo  string  `protobuf:"bytes,3,opt,name=activity_no,json=activityNo,proto3" json:"activity_no,omitempty"`
	Title       string  `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Theme       *string `protobuf:"bytes,5,opt,name=theme,proto3,oneof" json:"theme,omitempty"`
	Type        int32   `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *string `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime     *string `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Place       *string `protobuf:"bytes,9,opt,name=place,proto3,oneof" json:"place,omitempty"`
	IsValid     bool    `protobuf:"varint,10,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	AllowApply  *bool   `protobuf:"varint,11,opt,name=allow_apply,json=allowApply,proto3,oneof" json:"allow_apply,omitempty"`
	Repeatable  bool    `protobuf:"varint,12,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
	Remark      *string `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Description *string `protobuf:"bytes,14,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AdminId     *int32  `protobuf:"varint,15,opt,name=admin_id,json=adminId,proto3,oneof" json:"admin_id,omitempty"`
	AdminName   *string `protobuf:"bytes,16,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
}

func (x *ActivityBrandRequest) Reset() {
	*x = ActivityBrandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRequest) ProtoMessage() {}

func (x *ActivityBrandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{42}
}

func (x *ActivityBrandRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityBrandRequest) GetActivityNo() string {
	if x != nil {
		return x.ActivityNo
	}
	return ""
}

func (x *ActivityBrandRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActivityBrandRequest) GetTheme() string {
	if x != nil && x.Theme != nil {
		return *x.Theme
	}
	return ""
}

func (x *ActivityBrandRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ActivityBrandRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ActivityBrandRequest) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ActivityBrandRequest) GetPlace() string {
	if x != nil && x.Place != nil {
		return *x.Place
	}
	return ""
}

func (x *ActivityBrandRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityBrandRequest) GetAllowApply() bool {
	if x != nil && x.AllowApply != nil {
		return *x.AllowApply
	}
	return false
}

func (x *ActivityBrandRequest) GetRepeatable() bool {
	if x != nil {
		return x.Repeatable
	}
	return false
}

func (x *ActivityBrandRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ActivityBrandRequest) GetAdminId() int32 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *ActivityBrandRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

type ActivityBrandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Deletable   bool    `protobuf:"varint,2,opt,name=deletable,proto3" json:"deletable,omitempty"`
	TypeName    string  `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	ActivityNo  string  `protobuf:"bytes,4,opt,name=activity_no,json=activityNo,proto3" json:"activity_no,omitempty"`
	Title       string  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Theme       *string `protobuf:"bytes,6,opt,name=theme,proto3,oneof" json:"theme,omitempty"`
	Type        int32   `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *string `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime     *string `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Place       *string `protobuf:"bytes,10,opt,name=place,proto3,oneof" json:"place,omitempty"`
	IsValid     bool    `protobuf:"varint,11,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	AllowApply  *bool   `protobuf:"varint,12,opt,name=allow_apply,json=allowApply,proto3,oneof" json:"allow_apply,omitempty"`
	Repeatable  bool    `protobuf:"varint,13,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
	Remark      *string `protobuf:"bytes,14,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Description *string `protobuf:"bytes,15,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AdminId     *int32  `protobuf:"varint,16,opt,name=admin_id,json=adminId,proto3,oneof" json:"admin_id,omitempty"`
	AdminName   *string `protobuf:"bytes,17,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	CreateTime  string  `protobuf:"bytes,18,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  string  `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ActivityBrandResponse) Reset() {
	*x = ActivityBrandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandResponse) ProtoMessage() {}

func (x *ActivityBrandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandResponse.ProtoReflect.Descriptor instead.
func (*ActivityBrandResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{43}
}

func (x *ActivityBrandResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityBrandResponse) GetDeletable() bool {
	if x != nil {
		return x.Deletable
	}
	return false
}

func (x *ActivityBrandResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ActivityBrandResponse) GetActivityNo() string {
	if x != nil {
		return x.ActivityNo
	}
	return ""
}

func (x *ActivityBrandResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActivityBrandResponse) GetTheme() string {
	if x != nil && x.Theme != nil {
		return *x.Theme
	}
	return ""
}

func (x *ActivityBrandResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ActivityBrandResponse) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ActivityBrandResponse) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ActivityBrandResponse) GetPlace() string {
	if x != nil && x.Place != nil {
		return *x.Place
	}
	return ""
}

func (x *ActivityBrandResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityBrandResponse) GetAllowApply() bool {
	if x != nil && x.AllowApply != nil {
		return *x.AllowApply
	}
	return false
}

func (x *ActivityBrandResponse) GetRepeatable() bool {
	if x != nil {
		return x.Repeatable
	}
	return false
}

func (x *ActivityBrandResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityBrandResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ActivityBrandResponse) GetAdminId() int32 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *ActivityBrandResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityBrandResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityBrandResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ActivityBrandRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandRetrieveRequest) Reset() {
	*x = ActivityBrandRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandRetrieveRequest) ProtoMessage() {}

func (x *ActivityBrandRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{44}
}

func (x *ActivityBrandRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityBrandUserApplyDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityBrandUserApplyDestroyRequest) Reset() {
	*x = ActivityBrandUserApplyDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBrandUserApplyDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBrandUserApplyDestroyRequest) ProtoMessage() {}

func (x *ActivityBrandUserApplyDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBrandUserApplyDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityBrandUserApplyDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{45}
}

func (x *ActivityBrandUserApplyDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityDiscountDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityDiscountDestroyRequest) Reset() {
	*x = ActivityDiscountDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountDestroyRequest) ProtoMessage() {}

func (x *ActivityDiscountDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{46}
}

func (x *ActivityDiscountDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityDiscountListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityDiscountListRequest) Reset() {
	*x = ActivityDiscountListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountListRequest) ProtoMessage() {}

func (x *ActivityDiscountListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountListRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{47}
}

func (x *ActivityDiscountListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityDiscountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityDiscountResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityDiscountListResponse) Reset() {
	*x = ActivityDiscountListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountListResponse) ProtoMessage() {}

func (x *ActivityDiscountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountListResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{48}
}

func (x *ActivityDiscountListResponse) GetResults() []*ActivityDiscountResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityDiscountListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityDiscountNextSerialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextSerial string `protobuf:"bytes,1,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
}

func (x *ActivityDiscountNextSerialResponse) Reset() {
	*x = ActivityDiscountNextSerialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountNextSerialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountNextSerialResponse) ProtoMessage() {}

func (x *ActivityDiscountNextSerialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountNextSerialResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountNextSerialResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{49}
}

func (x *ActivityDiscountNextSerialResponse) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

type ActivityDiscountPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	IsValid              bool     `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	ActType              int32    `protobuf:"varint,5,opt,name=act_type,json=actType,proto3" json:"act_type,omitempty"`
	SubType              int32    `protobuf:"varint,6,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	Title                string   `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	ActivityNo           string   `protobuf:"bytes,8,opt,name=activity_no,json=activityNo,proto3" json:"activity_no,omitempty"`
	Description          *string  `protobuf:"bytes,9,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Remark               *string  `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StartTime            *string  `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime              *string  `protobuf:"bytes,12,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	AdminId              *int32   `protobuf:"varint,13,opt,name=admin_id,json=adminId,proto3,oneof" json:"admin_id,omitempty"`
	AdminName            *string  `protobuf:"bytes,14,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	GiftRange            *string  `protobuf:"bytes,15,opt,name=gift_range,json=giftRange,proto3,oneof" json:"gift_range,omitempty"`
	ProdRange            *string  `protobuf:"bytes,16,opt,name=prod_range,json=prodRange,proto3,oneof" json:"prod_range,omitempty"`
}

func (x *ActivityDiscountPartialUpdateRequest) Reset() {
	*x = ActivityDiscountPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountPartialUpdateRequest) ProtoMessage() {}

func (x *ActivityDiscountPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{50}
}

func (x *ActivityDiscountPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityDiscountPartialUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityDiscountPartialUpdateRequest) GetActType() int32 {
	if x != nil {
		return x.ActType
	}
	return 0
}

func (x *ActivityDiscountPartialUpdateRequest) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *ActivityDiscountPartialUpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetActivityNo() string {
	if x != nil {
		return x.ActivityNo
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetAdminId() int32 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *ActivityDiscountPartialUpdateRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetGiftRange() string {
	if x != nil && x.GiftRange != nil {
		return *x.GiftRange
	}
	return ""
}

func (x *ActivityDiscountPartialUpdateRequest) GetProdRange() string {
	if x != nil && x.ProdRange != nil {
		return *x.ProdRange
	}
	return ""
}

type ActivityDiscountProductCreateBatchListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityDiscountProductCreateBatchRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityDiscountProductCreateBatchListRequest) Reset() {
	*x = ActivityDiscountProductCreateBatchListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductCreateBatchListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductCreateBatchListRequest) ProtoMessage() {}

func (x *ActivityDiscountProductCreateBatchListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductCreateBatchListRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductCreateBatchListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{51}
}

func (x *ActivityDiscountProductCreateBatchListRequest) GetResults() []*ActivityDiscountProductCreateBatchRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityDiscountProductCreateBatchListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityDiscountProductCreateBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters        string                               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ActSubProducts []*ActivityDiscountSubProductRequest `protobuf:"bytes,3,rep,name=act_sub_products,json=actSubProducts,proto3" json:"act_sub_products,omitempty"`
	ActivityId     int32                                `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	GoodsSpu       *string                              `protobuf:"bytes,5,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo        *string                              `protobuf:"bytes,6,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	LimitNum       int32                                `protobuf:"varint,7,opt,name=limit_num,json=limitNum,proto3" json:"limit_num,omitempty"`
	Optional       bool                                 `protobuf:"varint,8,opt,name=optional,proto3" json:"optional,omitempty"`
	Customizable   bool                                 `protobuf:"varint,9,opt,name=customizable,proto3" json:"customizable,omitempty"`
	LimitWord      int32                                `protobuf:"varint,10,opt,name=limit_word,json=limitWord,proto3" json:"limit_word,omitempty"`
	Regular        *string                              `protobuf:"bytes,11,opt,name=regular,proto3,oneof" json:"regular,omitempty"`
	Title          *string                              `protobuf:"bytes,12,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Remark         *string                              `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName      *string                              `protobuf:"bytes,14,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Parent         *int64                               `protobuf:"varint,15,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ActivityDiscountProductCreateBatchRequest) Reset() {
	*x = ActivityDiscountProductCreateBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductCreateBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductCreateBatchRequest) ProtoMessage() {}

func (x *ActivityDiscountProductCreateBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductCreateBatchRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductCreateBatchRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{52}
}

func (x *ActivityDiscountProductCreateBatchRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountProductCreateBatchRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityDiscountProductCreateBatchRequest) GetActSubProducts() []*ActivityDiscountSubProductRequest {
	if x != nil {
		return x.ActSubProducts
	}
	return nil
}

func (x *ActivityDiscountProductCreateBatchRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityDiscountProductCreateBatchRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ActivityDiscountProductCreateBatchRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ActivityDiscountProductCreateBatchRequest) GetLimitNum() int32 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *ActivityDiscountProductCreateBatchRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ActivityDiscountProductCreateBatchRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

func (x *ActivityDiscountProductCreateBatchRequest) GetLimitWord() int32 {
	if x != nil {
		return x.LimitWord
	}
	return 0
}

func (x *ActivityDiscountProductCreateBatchRequest) GetRegular() string {
	if x != nil && x.Regular != nil {
		return *x.Regular
	}
	return ""
}

func (x *ActivityDiscountProductCreateBatchRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityDiscountProductCreateBatchRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountProductCreateBatchRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountProductCreateBatchRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ActivityDiscountProductDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityDiscountProductDestroyRequest) Reset() {
	*x = ActivityDiscountProductDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductDestroyRequest) ProtoMessage() {}

func (x *ActivityDiscountProductDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{53}
}

func (x *ActivityDiscountProductDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityDiscountProductListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityDiscountProductListRequest) Reset() {
	*x = ActivityDiscountProductListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductListRequest) ProtoMessage() {}

func (x *ActivityDiscountProductListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductListRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{54}
}

func (x *ActivityDiscountProductListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityDiscountProductListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityDiscountProductResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityDiscountProductListResponse) Reset() {
	*x = ActivityDiscountProductListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductListResponse) ProtoMessage() {}

func (x *ActivityDiscountProductListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductListResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{55}
}

func (x *ActivityDiscountProductListResponse) GetResults() []*ActivityDiscountProductResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityDiscountProductListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityDiscountProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters        string                               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ActSubProducts []*ActivityDiscountSubProductRequest `protobuf:"bytes,3,rep,name=act_sub_products,json=actSubProducts,proto3" json:"act_sub_products,omitempty"`
	ActivityId     int32                                `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	GoodsSpu       *string                              `protobuf:"bytes,5,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo        *string                              `protobuf:"bytes,6,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	LimitNum       int32                                `protobuf:"varint,7,opt,name=limit_num,json=limitNum,proto3" json:"limit_num,omitempty"`
	Optional       bool                                 `protobuf:"varint,8,opt,name=optional,proto3" json:"optional,omitempty"`
	Customizable   bool                                 `protobuf:"varint,9,opt,name=customizable,proto3" json:"customizable,omitempty"`
	LimitWord      int32                                `protobuf:"varint,10,opt,name=limit_word,json=limitWord,proto3" json:"limit_word,omitempty"`
	Regular        *string                              `protobuf:"bytes,11,opt,name=regular,proto3,oneof" json:"regular,omitempty"`
	Title          *string                              `protobuf:"bytes,12,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Remark         *string                              `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName      *string                              `protobuf:"bytes,14,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Parent         *int64                               `protobuf:"varint,15,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ActivityDiscountProductRequest) Reset() {
	*x = ActivityDiscountProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductRequest) ProtoMessage() {}

func (x *ActivityDiscountProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{56}
}

func (x *ActivityDiscountProductRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountProductRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityDiscountProductRequest) GetActSubProducts() []*ActivityDiscountSubProductRequest {
	if x != nil {
		return x.ActSubProducts
	}
	return nil
}

func (x *ActivityDiscountProductRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityDiscountProductRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ActivityDiscountProductRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ActivityDiscountProductRequest) GetLimitNum() int32 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *ActivityDiscountProductRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ActivityDiscountProductRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

func (x *ActivityDiscountProductRequest) GetLimitWord() int32 {
	if x != nil {
		return x.LimitWord
	}
	return 0
}

func (x *ActivityDiscountProductRequest) GetRegular() string {
	if x != nil && x.Regular != nil {
		return *x.Regular
	}
	return ""
}

func (x *ActivityDiscountProductRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityDiscountProductRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountProductRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountProductRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ActivityDiscountProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActSubProducts []*ActivityDiscountSubProductResponse `protobuf:"bytes,2,rep,name=act_sub_products,json=actSubProducts,proto3" json:"act_sub_products,omitempty"`
	ActivityId     int32                                 `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Activity       *ActivityDiscountResponse             `protobuf:"bytes,4,opt,name=activity,proto3,oneof" json:"activity,omitempty"`
	CreateTime     string                                `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string                                `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	GoodsSpu       *string                               `protobuf:"bytes,7,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo        *string                               `protobuf:"bytes,8,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	LimitNum       int32                                 `protobuf:"varint,9,opt,name=limit_num,json=limitNum,proto3" json:"limit_num,omitempty"`
	Optional       bool                                  `protobuf:"varint,10,opt,name=optional,proto3" json:"optional,omitempty"`
	Customizable   bool                                  `protobuf:"varint,11,opt,name=customizable,proto3" json:"customizable,omitempty"`
	LimitWord      int32                                 `protobuf:"varint,12,opt,name=limit_word,json=limitWord,proto3" json:"limit_word,omitempty"`
	Regular        *string                               `protobuf:"bytes,13,opt,name=regular,proto3,oneof" json:"regular,omitempty"`
	Title          *string                               `protobuf:"bytes,14,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Remark         *string                               `protobuf:"bytes,15,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName      *string                               `protobuf:"bytes,16,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Parent         *int64                                `protobuf:"varint,17,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ActivityDiscountProductResponse) Reset() {
	*x = ActivityDiscountProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductResponse) ProtoMessage() {}

func (x *ActivityDiscountProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{57}
}

func (x *ActivityDiscountProductResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountProductResponse) GetActSubProducts() []*ActivityDiscountSubProductResponse {
	if x != nil {
		return x.ActSubProducts
	}
	return nil
}

func (x *ActivityDiscountProductResponse) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityDiscountProductResponse) GetActivity() *ActivityDiscountResponse {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ActivityDiscountProductResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetLimitNum() int32 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *ActivityDiscountProductResponse) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ActivityDiscountProductResponse) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

func (x *ActivityDiscountProductResponse) GetLimitWord() int32 {
	if x != nil {
		return x.LimitWord
	}
	return 0
}

func (x *ActivityDiscountProductResponse) GetRegular() string {
	if x != nil && x.Regular != nil {
		return *x.Regular
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountProductResponse) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ActivityDiscountProductUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string                               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ActSubProducts       []*ActivityDiscountSubProductRequest `protobuf:"bytes,3,rep,name=act_sub_products,json=actSubProducts,proto3" json:"act_sub_products,omitempty"`
	ActivityId           int32                                `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	XPartialUpdateFields []string                             `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	GoodsSpu             *string                              `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo              *string                              `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	LimitNum             int32                                `protobuf:"varint,8,opt,name=limit_num,json=limitNum,proto3" json:"limit_num,omitempty"`
	Optional             bool                                 `protobuf:"varint,9,opt,name=optional,proto3" json:"optional,omitempty"`
	Customizable         bool                                 `protobuf:"varint,10,opt,name=customizable,proto3" json:"customizable,omitempty"`
	LimitWord            int32                                `protobuf:"varint,11,opt,name=limit_word,json=limitWord,proto3" json:"limit_word,omitempty"`
	Regular              *string                              `protobuf:"bytes,12,opt,name=regular,proto3,oneof" json:"regular,omitempty"`
	Title                *string                              `protobuf:"bytes,13,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Remark               *string                              `protobuf:"bytes,14,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName            *string                              `protobuf:"bytes,15,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Parent               *int64                               `protobuf:"varint,16,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ActivityDiscountProductUpdateRequest) Reset() {
	*x = ActivityDiscountProductUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountProductUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountProductUpdateRequest) ProtoMessage() {}

func (x *ActivityDiscountProductUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountProductUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountProductUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{58}
}

func (x *ActivityDiscountProductUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountProductUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityDiscountProductUpdateRequest) GetActSubProducts() []*ActivityDiscountSubProductRequest {
	if x != nil {
		return x.ActSubProducts
	}
	return nil
}

func (x *ActivityDiscountProductUpdateRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityDiscountProductUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityDiscountProductUpdateRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ActivityDiscountProductUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ActivityDiscountProductUpdateRequest) GetLimitNum() int32 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *ActivityDiscountProductUpdateRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ActivityDiscountProductUpdateRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

func (x *ActivityDiscountProductUpdateRequest) GetLimitWord() int32 {
	if x != nil {
		return x.LimitWord
	}
	return 0
}

func (x *ActivityDiscountProductUpdateRequest) GetRegular() string {
	if x != nil && x.Regular != nil {
		return *x.Regular
	}
	return ""
}

func (x *ActivityDiscountProductUpdateRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityDiscountProductUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountProductUpdateRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountProductUpdateRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ActivityDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters     string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	IsValid     bool    `protobuf:"varint,3,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	ActType     int32   `protobuf:"varint,4,opt,name=act_type,json=actType,proto3" json:"act_type,omitempty"`
	SubType     int32   `protobuf:"varint,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	Title       string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ActivityNo  string  `protobuf:"bytes,7,opt,name=activity_no,json=activityNo,proto3" json:"activity_no,omitempty"`
	Description *string `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Remark      *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StartTime   *string `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime     *string `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	AdminId     *int32  `protobuf:"varint,12,opt,name=admin_id,json=adminId,proto3,oneof" json:"admin_id,omitempty"`
	AdminName   *string `protobuf:"bytes,13,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	GiftRange   *string `protobuf:"bytes,14,opt,name=gift_range,json=giftRange,proto3,oneof" json:"gift_range,omitempty"`
	ProdRange   *string `protobuf:"bytes,15,opt,name=prod_range,json=prodRange,proto3,oneof" json:"prod_range,omitempty"`
}

func (x *ActivityDiscountRequest) Reset() {
	*x = ActivityDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountRequest) ProtoMessage() {}

func (x *ActivityDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{59}
}

func (x *ActivityDiscountRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityDiscountRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityDiscountRequest) GetActType() int32 {
	if x != nil {
		return x.ActType
	}
	return 0
}

func (x *ActivityDiscountRequest) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *ActivityDiscountRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActivityDiscountRequest) GetActivityNo() string {
	if x != nil {
		return x.ActivityNo
	}
	return ""
}

func (x *ActivityDiscountRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ActivityDiscountRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ActivityDiscountRequest) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ActivityDiscountRequest) GetAdminId() int32 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *ActivityDiscountRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountRequest) GetGiftRange() string {
	if x != nil && x.GiftRange != nil {
		return *x.GiftRange
	}
	return ""
}

func (x *ActivityDiscountRequest) GetProdRange() string {
	if x != nil && x.ProdRange != nil {
		return *x.ProdRange
	}
	return ""
}

type ActivityDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsExpired   bool    `protobuf:"varint,2,opt,name=is_expired,json=isExpired,proto3" json:"is_expired,omitempty"`
	ActTypeName string  `protobuf:"bytes,3,opt,name=act_type_name,json=actTypeName,proto3" json:"act_type_name,omitempty"`
	SubTypeName string  `protobuf:"bytes,4,opt,name=sub_type_name,json=subTypeName,proto3" json:"sub_type_name,omitempty"`
	CreateTime  string  `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  string  `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	IsValid     bool    `protobuf:"varint,7,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	ActType     int32   `protobuf:"varint,8,opt,name=act_type,json=actType,proto3" json:"act_type,omitempty"`
	SubType     int32   `protobuf:"varint,9,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	Title       string  `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ActivityNo  string  `protobuf:"bytes,11,opt,name=activity_no,json=activityNo,proto3" json:"activity_no,omitempty"`
	Description *string `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Remark      *string `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StartTime   *string `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime     *string `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	AdminId     *int32  `protobuf:"varint,16,opt,name=admin_id,json=adminId,proto3,oneof" json:"admin_id,omitempty"`
	AdminName   *string `protobuf:"bytes,17,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	GiftRange   *string `protobuf:"bytes,18,opt,name=gift_range,json=giftRange,proto3,oneof" json:"gift_range,omitempty"`
	ProdRange   *string `protobuf:"bytes,19,opt,name=prod_range,json=prodRange,proto3,oneof" json:"prod_range,omitempty"`
}

func (x *ActivityDiscountResponse) Reset() {
	*x = ActivityDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountResponse) ProtoMessage() {}

func (x *ActivityDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{60}
}

func (x *ActivityDiscountResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountResponse) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *ActivityDiscountResponse) GetActTypeName() string {
	if x != nil {
		return x.ActTypeName
	}
	return ""
}

func (x *ActivityDiscountResponse) GetSubTypeName() string {
	if x != nil {
		return x.SubTypeName
	}
	return ""
}

func (x *ActivityDiscountResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityDiscountResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityDiscountResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ActivityDiscountResponse) GetActType() int32 {
	if x != nil {
		return x.ActType
	}
	return 0
}

func (x *ActivityDiscountResponse) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *ActivityDiscountResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActivityDiscountResponse) GetActivityNo() string {
	if x != nil {
		return x.ActivityNo
	}
	return ""
}

func (x *ActivityDiscountResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ActivityDiscountResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountResponse) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ActivityDiscountResponse) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ActivityDiscountResponse) GetAdminId() int32 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *ActivityDiscountResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountResponse) GetGiftRange() string {
	if x != nil && x.GiftRange != nil {
		return *x.GiftRange
	}
	return ""
}

func (x *ActivityDiscountResponse) GetProdRange() string {
	if x != nil && x.ProdRange != nil {
		return *x.ProdRange
	}
	return ""
}

type ActivityDiscountRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityDiscountRetrieveRequest) Reset() {
	*x = ActivityDiscountRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountRetrieveRequest) ProtoMessage() {}

func (x *ActivityDiscountRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{61}
}

func (x *ActivityDiscountRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityDiscountSubProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId   int32   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	GoodsSpu     *string `protobuf:"bytes,3,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo      *string `protobuf:"bytes,4,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	LimitNum     int32   `protobuf:"varint,5,opt,name=limit_num,json=limitNum,proto3" json:"limit_num,omitempty"`
	Optional     bool    `protobuf:"varint,6,opt,name=optional,proto3" json:"optional,omitempty"`
	Customizable bool    `protobuf:"varint,7,opt,name=customizable,proto3" json:"customizable,omitempty"`
	LimitWord    int32   `protobuf:"varint,8,opt,name=limit_word,json=limitWord,proto3" json:"limit_word,omitempty"`
	Regular      *string `protobuf:"bytes,9,opt,name=regular,proto3,oneof" json:"regular,omitempty"`
	Title        *string `protobuf:"bytes,10,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Remark       *string `protobuf:"bytes,11,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName    *string `protobuf:"bytes,12,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Parent       *int64  `protobuf:"varint,13,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ActivityDiscountSubProductRequest) Reset() {
	*x = ActivityDiscountSubProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountSubProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountSubProductRequest) ProtoMessage() {}

func (x *ActivityDiscountSubProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountSubProductRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountSubProductRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{62}
}

func (x *ActivityDiscountSubProductRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountSubProductRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityDiscountSubProductRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ActivityDiscountSubProductRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ActivityDiscountSubProductRequest) GetLimitNum() int32 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *ActivityDiscountSubProductRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ActivityDiscountSubProductRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

func (x *ActivityDiscountSubProductRequest) GetLimitWord() int32 {
	if x != nil {
		return x.LimitWord
	}
	return 0
}

func (x *ActivityDiscountSubProductRequest) GetRegular() string {
	if x != nil && x.Regular != nil {
		return *x.Regular
	}
	return ""
}

func (x *ActivityDiscountSubProductRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityDiscountSubProductRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountSubProductRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountSubProductRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ActivityDiscountSubProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId   int32                     `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Activity     *ActivityDiscountResponse `protobuf:"bytes,3,opt,name=activity,proto3,oneof" json:"activity,omitempty"`
	CreateTime   string                    `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string                    `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	GoodsSpu     *string                   `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo      *string                   `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	LimitNum     int32                     `protobuf:"varint,8,opt,name=limit_num,json=limitNum,proto3" json:"limit_num,omitempty"`
	Optional     bool                      `protobuf:"varint,9,opt,name=optional,proto3" json:"optional,omitempty"`
	Customizable bool                      `protobuf:"varint,10,opt,name=customizable,proto3" json:"customizable,omitempty"`
	LimitWord    int32                     `protobuf:"varint,11,opt,name=limit_word,json=limitWord,proto3" json:"limit_word,omitempty"`
	Regular      *string                   `protobuf:"bytes,12,opt,name=regular,proto3,oneof" json:"regular,omitempty"`
	Title        *string                   `protobuf:"bytes,13,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Remark       *string                   `protobuf:"bytes,14,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdminName    *string                   `protobuf:"bytes,15,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Parent       *int64                    `protobuf:"varint,16,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ActivityDiscountSubProductResponse) Reset() {
	*x = ActivityDiscountSubProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountSubProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountSubProductResponse) ProtoMessage() {}

func (x *ActivityDiscountSubProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountSubProductResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountSubProductResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{63}
}

func (x *ActivityDiscountSubProductResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountSubProductResponse) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityDiscountSubProductResponse) GetActivity() *ActivityDiscountResponse {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ActivityDiscountSubProductResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetLimitNum() int32 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *ActivityDiscountSubProductResponse) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ActivityDiscountSubProductResponse) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

func (x *ActivityDiscountSubProductResponse) GetLimitWord() int32 {
	if x != nil {
		return x.LimitWord
	}
	return 0
}

func (x *ActivityDiscountSubProductResponse) GetRegular() string {
	if x != nil && x.Regular != nil {
		return *x.Regular
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *ActivityDiscountSubProductResponse) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ActivityDiscountVoucherDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityDiscountVoucherDestroyRequest) Reset() {
	*x = ActivityDiscountVoucherDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherDestroyRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{64}
}

func (x *ActivityDiscountVoucherDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityDiscountVoucherListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityDiscountVoucherListRequest) Reset() {
	*x = ActivityDiscountVoucherListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherListRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherListRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{65}
}

func (x *ActivityDiscountVoucherListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityDiscountVoucherListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityDiscountVoucherResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityDiscountVoucherListResponse) Reset() {
	*x = ActivityDiscountVoucherListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherListResponse) ProtoMessage() {}

func (x *ActivityDiscountVoucherListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherListResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{66}
}

func (x *ActivityDiscountVoucherListResponse) GetResults() []*ActivityDiscountVoucherResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityDiscountVoucherListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityDiscountVoucherRecordDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityDiscountVoucherRecordDestroyRequest) Reset() {
	*x = ActivityDiscountVoucherRecordDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRecordDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRecordDestroyRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherRecordDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRecordDestroyRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRecordDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{67}
}

func (x *ActivityDiscountVoucherRecordDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityDiscountVoucherRecordListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityDiscountVoucherRecordListRequest) Reset() {
	*x = ActivityDiscountVoucherRecordListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRecordListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRecordListRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherRecordListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRecordListRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRecordListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{68}
}

func (x *ActivityDiscountVoucherRecordListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityDiscountVoucherRecordListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityDiscountVoucherRecordResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityDiscountVoucherRecordListResponse) Reset() {
	*x = ActivityDiscountVoucherRecordListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRecordListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRecordListResponse) ProtoMessage() {}

func (x *ActivityDiscountVoucherRecordListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRecordListResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRecordListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{69}
}

func (x *ActivityDiscountVoucherRecordListResponse) GetResults() []*ActivityDiscountVoucherRecordResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityDiscountVoucherRecordListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityDiscountVoucherRecordNextSerialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRecord string `protobuf:"bytes,1,opt,name=next_record,json=nextRecord,proto3" json:"next_record,omitempty"`
}

func (x *ActivityDiscountVoucherRecordNextSerialResponse) Reset() {
	*x = ActivityDiscountVoucherRecordNextSerialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRecordNextSerialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRecordNextSerialResponse) ProtoMessage() {}

func (x *ActivityDiscountVoucherRecordNextSerialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRecordNextSerialResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRecordNextSerialResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{70}
}

func (x *ActivityDiscountVoucherRecordNextSerialResponse) GetNextRecord() string {
	if x != nil {
		return x.NextRecord
	}
	return ""
}

type ActivityDiscountVoucherRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters      string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CouponCode   string  `protobuf:"bytes,3,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty"`
	IsRegistered bool    `protobuf:"varint,4,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	CtmId        int32   `protobuf:"varint,5,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	Platform     *int32  `protobuf:"varint,6,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	OrderId      *int32  `protobuf:"varint,7,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	OffsetTime   *string `protobuf:"bytes,8,opt,name=offset_time,json=offsetTime,proto3,oneof" json:"offset_time,omitempty"`
	RefundId     *int32  `protobuf:"varint,9,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	RefundTime   *string `protobuf:"bytes,10,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	ActVoucher   *int64  `protobuf:"varint,11,opt,name=act_voucher,json=actVoucher,proto3,oneof" json:"act_voucher,omitempty"`
}

func (x *ActivityDiscountVoucherRecordRequest) Reset() {
	*x = ActivityDiscountVoucherRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRecordRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRecordRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRecordRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{71}
}

func (x *ActivityDiscountVoucherRecordRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordRequest) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordRequest) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

func (x *ActivityDiscountVoucherRecordRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordRequest) GetPlatform() int32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordRequest) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordRequest) GetOffsetTime() string {
	if x != nil && x.OffsetTime != nil {
		return *x.OffsetTime
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordRequest) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordRequest) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordRequest) GetActVoucher() int64 {
	if x != nil && x.ActVoucher != nil {
		return *x.ActVoucher
	}
	return 0
}

type ActivityDiscountVoucherRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime   string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CouponCode   string  `protobuf:"bytes,4,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty"`
	IsRegistered bool    `protobuf:"varint,5,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	CtmId        int32   `protobuf:"varint,6,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	Platform     *int32  `protobuf:"varint,7,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	OrderId      *int32  `protobuf:"varint,8,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	OffsetTime   *string `protobuf:"bytes,9,opt,name=offset_time,json=offsetTime,proto3,oneof" json:"offset_time,omitempty"`
	RefundId     *int32  `protobuf:"varint,10,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	RefundTime   *string `protobuf:"bytes,11,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	ActVoucher   *int64  `protobuf:"varint,12,opt,name=act_voucher,json=actVoucher,proto3,oneof" json:"act_voucher,omitempty"`
}

func (x *ActivityDiscountVoucherRecordResponse) Reset() {
	*x = ActivityDiscountVoucherRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRecordResponse) ProtoMessage() {}

func (x *ActivityDiscountVoucherRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRecordResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRecordResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{72}
}

func (x *ActivityDiscountVoucherRecordResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordResponse) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordResponse) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

func (x *ActivityDiscountVoucherRecordResponse) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordResponse) GetPlatform() int32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordResponse) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordResponse) GetOffsetTime() string {
	if x != nil && x.OffsetTime != nil {
		return *x.OffsetTime
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordResponse) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *ActivityDiscountVoucherRecordResponse) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *ActivityDiscountVoucherRecordResponse) GetActVoucher() int64 {
	if x != nil && x.ActVoucher != nil {
		return *x.ActVoucher
	}
	return 0
}

type ActivityDiscountVoucherRecordRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityDiscountVoucherRecordRetrieveRequest) Reset() {
	*x = ActivityDiscountVoucherRecordRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRecordRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRecordRetrieveRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherRecordRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRecordRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRecordRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{73}
}

func (x *ActivityDiscountVoucherRecordRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityDiscountVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters   string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	VoucherId int32   `protobuf:"varint,3,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Count     *int32  `protobuf:"varint,4,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Balance   *int32  `protobuf:"varint,5,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	Limit     *int32  `protobuf:"varint,6,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	CanStack  bool    `protobuf:"varint,7,opt,name=can_stack,json=canStack,proto3" json:"can_stack,omitempty"`
	MpUrl     *string `protobuf:"bytes,8,opt,name=mp_url,json=mpUrl,proto3,oneof" json:"mp_url,omitempty"`
	Remark    *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Activity  int64   `protobuf:"varint,10,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityDiscountVoucherRequest) Reset() {
	*x = ActivityDiscountVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{74}
}

func (x *ActivityDiscountVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountVoucherRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityDiscountVoucherRequest) GetVoucherId() int32 {
	if x != nil {
		return x.VoucherId
	}
	return 0
}

func (x *ActivityDiscountVoucherRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ActivityDiscountVoucherRequest) GetBalance() int32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *ActivityDiscountVoucherRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ActivityDiscountVoucherRequest) GetCanStack() bool {
	if x != nil {
		return x.CanStack
	}
	return false
}

func (x *ActivityDiscountVoucherRequest) GetMpUrl() string {
	if x != nil && x.MpUrl != nil {
		return *x.MpUrl
	}
	return ""
}

func (x *ActivityDiscountVoucherRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountVoucherRequest) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityDiscountVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityInfo *ActivityDiscountResponse `protobuf:"bytes,2,opt,name=activity_info,json=activityInfo,proto3" json:"activity_info,omitempty"`
	VoucherInfo  *CardVoucherResponse      `protobuf:"bytes,3,opt,name=voucher_info,json=voucherInfo,proto3" json:"voucher_info,omitempty"`
	CreateTime   string                    `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string                    `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	VoucherId    int32                     `protobuf:"varint,6,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Count        *int32                    `protobuf:"varint,7,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Balance      *int32                    `protobuf:"varint,8,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	Limit        *int32                    `protobuf:"varint,9,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	CanStack     bool                      `protobuf:"varint,10,opt,name=can_stack,json=canStack,proto3" json:"can_stack,omitempty"`
	MpUrl        *string                   `protobuf:"bytes,11,opt,name=mp_url,json=mpUrl,proto3,oneof" json:"mp_url,omitempty"`
	Remark       *string                   `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Activity     int64                     `protobuf:"varint,13,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ActivityDiscountVoucherResponse) Reset() {
	*x = ActivityDiscountVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherResponse) ProtoMessage() {}

func (x *ActivityDiscountVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherResponse.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{75}
}

func (x *ActivityDiscountVoucherResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityDiscountVoucherResponse) GetActivityInfo() *ActivityDiscountResponse {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *ActivityDiscountVoucherResponse) GetVoucherInfo() *CardVoucherResponse {
	if x != nil {
		return x.VoucherInfo
	}
	return nil
}

func (x *ActivityDiscountVoucherResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityDiscountVoucherResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ActivityDiscountVoucherResponse) GetVoucherId() int32 {
	if x != nil {
		return x.VoucherId
	}
	return 0
}

func (x *ActivityDiscountVoucherResponse) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ActivityDiscountVoucherResponse) GetBalance() int32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *ActivityDiscountVoucherResponse) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ActivityDiscountVoucherResponse) GetCanStack() bool {
	if x != nil {
		return x.CanStack
	}
	return false
}

func (x *ActivityDiscountVoucherResponse) GetMpUrl() string {
	if x != nil && x.MpUrl != nil {
		return *x.MpUrl
	}
	return ""
}

func (x *ActivityDiscountVoucherResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityDiscountVoucherResponse) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ActivityDiscountVoucherRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityDiscountVoucherRetrieveRequest) Reset() {
	*x = ActivityDiscountVoucherRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDiscountVoucherRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDiscountVoucherRetrieveRequest) ProtoMessage() {}

func (x *ActivityDiscountVoucherRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDiscountVoucherRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityDiscountVoucherRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{76}
}

func (x *ActivityDiscountVoucherRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityUserApplyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ActivityUserApplyListRequest) Reset() {
	*x = ActivityUserApplyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUserApplyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUserApplyListRequest) ProtoMessage() {}

func (x *ActivityUserApplyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUserApplyListRequest.ProtoReflect.Descriptor instead.
func (*ActivityUserApplyListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{77}
}

func (x *ActivityUserApplyListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ActivityUserApplyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ActivityUserApplyResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActivityUserApplyListResponse) Reset() {
	*x = ActivityUserApplyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUserApplyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUserApplyListResponse) ProtoMessage() {}

func (x *ActivityUserApplyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUserApplyListResponse.ProtoReflect.Descriptor instead.
func (*ActivityUserApplyListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{78}
}

func (x *ActivityUserApplyListResponse) GetResults() []*ActivityUserApplyResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ActivityUserApplyListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityUserApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters     string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId       int32   `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	ActivityId  int32   `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Title       *string `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content     *string `protobuf:"bytes,6,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Link        string  `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
	Status      int32   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	ReviewTime  *string `protobuf:"bytes,9,opt,name=review_time,json=reviewTime,proto3,oneof" json:"review_time,omitempty"`
	ReviewAdmin *string `protobuf:"bytes,10,opt,name=review_admin,json=reviewAdmin,proto3,oneof" json:"review_admin,omitempty"`
	ReviewDesc  *string `protobuf:"bytes,11,opt,name=review_desc,json=reviewDesc,proto3,oneof" json:"review_desc,omitempty"`
	Remark      *string `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *ActivityUserApplyRequest) Reset() {
	*x = ActivityUserApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUserApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUserApplyRequest) ProtoMessage() {}

func (x *ActivityUserApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUserApplyRequest.ProtoReflect.Descriptor instead.
func (*ActivityUserApplyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{79}
}

func (x *ActivityUserApplyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityUserApplyRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityUserApplyRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityUserApplyRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityUserApplyRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityUserApplyRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ActivityUserApplyRequest) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ActivityUserApplyRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityUserApplyRequest) GetReviewTime() string {
	if x != nil && x.ReviewTime != nil {
		return *x.ReviewTime
	}
	return ""
}

func (x *ActivityUserApplyRequest) GetReviewAdmin() string {
	if x != nil && x.ReviewAdmin != nil {
		return *x.ReviewAdmin
	}
	return ""
}

func (x *ActivityUserApplyRequest) GetReviewDesc() string {
	if x != nil && x.ReviewDesc != nil {
		return *x.ReviewDesc
	}
	return ""
}

func (x *ActivityUserApplyRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type ActivityUserApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CtmId       int32                  `protobuf:"varint,2,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	StatusName  string                 `protobuf:"bytes,3,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	Activity    *ActivityBrandResponse `protobuf:"bytes,4,opt,name=activity,proto3" json:"activity,omitempty"`
	ActivityId  int32                  `protobuf:"varint,5,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Ctm         *CtmResponse           `protobuf:"bytes,6,opt,name=ctm,proto3" json:"ctm,omitempty"`
	Links       []string               `protobuf:"bytes,7,rep,name=links,proto3" json:"links,omitempty"`
	Title       *string                `protobuf:"bytes,8,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content     *string                `protobuf:"bytes,9,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Link        string                 `protobuf:"bytes,10,opt,name=link,proto3" json:"link,omitempty"`
	Status      int32                  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	ReviewTime  *string                `protobuf:"bytes,12,opt,name=review_time,json=reviewTime,proto3,oneof" json:"review_time,omitempty"`
	ReviewAdmin *string                `protobuf:"bytes,13,opt,name=review_admin,json=reviewAdmin,proto3,oneof" json:"review_admin,omitempty"`
	ReviewDesc  *string                `protobuf:"bytes,14,opt,name=review_desc,json=reviewDesc,proto3,oneof" json:"review_desc,omitempty"`
	Remark      *string                `protobuf:"bytes,15,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CreateTime  string                 `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  string                 `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ActivityUserApplyResponse) Reset() {
	*x = ActivityUserApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUserApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUserApplyResponse) ProtoMessage() {}

func (x *ActivityUserApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUserApplyResponse.ProtoReflect.Descriptor instead.
func (*ActivityUserApplyResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{80}
}

func (x *ActivityUserApplyResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityUserApplyResponse) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityUserApplyResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetActivity() *ActivityBrandResponse {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ActivityUserApplyResponse) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityUserApplyResponse) GetCtm() *CtmResponse {
	if x != nil {
		return x.Ctm
	}
	return nil
}

func (x *ActivityUserApplyResponse) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ActivityUserApplyResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityUserApplyResponse) GetReviewTime() string {
	if x != nil && x.ReviewTime != nil {
		return *x.ReviewTime
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetReviewAdmin() string {
	if x != nil && x.ReviewAdmin != nil {
		return *x.ReviewAdmin
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetReviewDesc() string {
	if x != nil && x.ReviewDesc != nil {
		return *x.ReviewDesc
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityUserApplyResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ActivityUserApplyRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivityUserApplyRetrieveRequest) Reset() {
	*x = ActivityUserApplyRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUserApplyRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUserApplyRetrieveRequest) ProtoMessage() {}

func (x *ActivityUserApplyRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUserApplyRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ActivityUserApplyRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{81}
}

func (x *ActivityUserApplyRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivityUserApplyUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId                int32    `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	ActivityId           int32    `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Title                *string  `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content              *string  `protobuf:"bytes,7,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Link                 string   `protobuf:"bytes,8,opt,name=link,proto3" json:"link,omitempty"`
	Status               int32    `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	ReviewTime           *string  `protobuf:"bytes,10,opt,name=review_time,json=reviewTime,proto3,oneof" json:"review_time,omitempty"`
	ReviewAdmin          *string  `protobuf:"bytes,11,opt,name=review_admin,json=reviewAdmin,proto3,oneof" json:"review_admin,omitempty"`
	ReviewDesc           *string  `protobuf:"bytes,12,opt,name=review_desc,json=reviewDesc,proto3,oneof" json:"review_desc,omitempty"`
	Remark               *string  `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *ActivityUserApplyUpdateRequest) Reset() {
	*x = ActivityUserApplyUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUserApplyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUserApplyUpdateRequest) ProtoMessage() {}

func (x *ActivityUserApplyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUserApplyUpdateRequest.ProtoReflect.Descriptor instead.
func (*ActivityUserApplyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{82}
}

func (x *ActivityUserApplyUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityUserApplyUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ActivityUserApplyUpdateRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *ActivityUserApplyUpdateRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityUserApplyUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ActivityUserApplyUpdateRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActivityUserApplyUpdateRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ActivityUserApplyUpdateRequest) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ActivityUserApplyUpdateRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityUserApplyUpdateRequest) GetReviewTime() string {
	if x != nil && x.ReviewTime != nil {
		return *x.ReviewTime
	}
	return ""
}

func (x *ActivityUserApplyUpdateRequest) GetReviewAdmin() string {
	if x != nil && x.ReviewAdmin != nil {
		return *x.ReviewAdmin
	}
	return ""
}

func (x *ActivityUserApplyUpdateRequest) GetReviewDesc() string {
	if x != nil && x.ReviewDesc != nil {
		return *x.ReviewDesc
	}
	return ""
}

func (x *ActivityUserApplyUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type BlogContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters    string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CoverImage *string `protobuf:"bytes,3,opt,name=cover_image,json=coverImage,proto3,oneof" json:"cover_image,omitempty"`
	Template   *string `protobuf:"bytes,4,opt,name=template,proto3,oneof" json:"template,omitempty"`
	Link       *string `protobuf:"bytes,5,opt,name=link,proto3,oneof" json:"link,omitempty"`
	Title      *string `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
	SubTitle   *string `protobuf:"bytes,7,opt,name=sub_title,json=subTitle,proto3,oneof" json:"sub_title,omitempty"`
	Content    *string `protobuf:"bytes,8,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Blog       *int64  `protobuf:"varint,9,opt,name=blog,proto3,oneof" json:"blog,omitempty"`
}

func (x *BlogContentRequest) Reset() {
	*x = BlogContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogContentRequest) ProtoMessage() {}

func (x *BlogContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogContentRequest.ProtoReflect.Descriptor instead.
func (*BlogContentRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{83}
}

func (x *BlogContentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogContentRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BlogContentRequest) GetCoverImage() string {
	if x != nil && x.CoverImage != nil {
		return *x.CoverImage
	}
	return ""
}

func (x *BlogContentRequest) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *BlogContentRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *BlogContentRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BlogContentRequest) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *BlogContentRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *BlogContentRequest) GetBlog() int64 {
	if x != nil && x.Blog != nil {
		return *x.Blog
	}
	return 0
}

type BlogContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Links      []string `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
	CoverImage *string  `protobuf:"bytes,3,opt,name=cover_image,json=coverImage,proto3,oneof" json:"cover_image,omitempty"`
	Template   *string  `protobuf:"bytes,4,opt,name=template,proto3,oneof" json:"template,omitempty"`
	Link       *string  `protobuf:"bytes,5,opt,name=link,proto3,oneof" json:"link,omitempty"`
	Title      *string  `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
	SubTitle   *string  `protobuf:"bytes,7,opt,name=sub_title,json=subTitle,proto3,oneof" json:"sub_title,omitempty"`
	Content    *string  `protobuf:"bytes,8,opt,name=content,proto3,oneof" json:"content,omitempty"`
	CreateTime string   `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string   `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Blog       *int64   `protobuf:"varint,11,opt,name=blog,proto3,oneof" json:"blog,omitempty"`
}

func (x *BlogContentResponse) Reset() {
	*x = BlogContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogContentResponse) ProtoMessage() {}

func (x *BlogContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogContentResponse.ProtoReflect.Descriptor instead.
func (*BlogContentResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{84}
}

func (x *BlogContentResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogContentResponse) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *BlogContentResponse) GetCoverImage() string {
	if x != nil && x.CoverImage != nil {
		return *x.CoverImage
	}
	return ""
}

func (x *BlogContentResponse) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *BlogContentResponse) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *BlogContentResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BlogContentResponse) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *BlogContentResponse) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *BlogContentResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *BlogContentResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *BlogContentResponse) GetBlog() int64 {
	if x != nil && x.Blog != nil {
		return *x.Blog
	}
	return 0
}

type BlogInteractDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlogInteractDestroyRequest) Reset() {
	*x = BlogInteractDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogInteractDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogInteractDestroyRequest) ProtoMessage() {}

func (x *BlogInteractDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogInteractDestroyRequest.ProtoReflect.Descriptor instead.
func (*BlogInteractDestroyRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{85}
}

func (x *BlogInteractDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BlogInteractListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *BlogInteractListRequest) Reset() {
	*x = BlogInteractListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogInteractListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogInteractListRequest) ProtoMessage() {}

func (x *BlogInteractListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogInteractListRequest.ProtoReflect.Descriptor instead.
func (*BlogInteractListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{86}
}

func (x *BlogInteractListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type BlogInteractListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BlogInteractResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BlogInteractListResponse) Reset() {
	*x = BlogInteractListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogInteractListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogInteractListResponse) ProtoMessage() {}

func (x *BlogInteractListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogInteractListResponse.ProtoReflect.Descriptor instead.
func (*BlogInteractListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{87}
}

func (x *BlogInteractListResponse) GetResults() []*BlogInteractResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BlogInteractListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BlogInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters      string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId        int32   `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	BlogId       int32   `protobuf:"varint,4,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	ViewCount    *int32  `protobuf:"varint,5,opt,name=view_count,json=viewCount,proto3,oneof" json:"view_count,omitempty"`
	IsLike       *bool   `protobuf:"varint,6,opt,name=is_like,json=isLike,proto3,oneof" json:"is_like,omitempty"`
	ShareCount   *int32  `protobuf:"varint,7,opt,name=share_count,json=shareCount,proto3,oneof" json:"share_count,omitempty"`
	IsFavorite   *bool   `protobuf:"varint,8,opt,name=is_favorite,json=isFavorite,proto3,oneof" json:"is_favorite,omitempty"`
	ViewDate     *string `protobuf:"bytes,9,opt,name=view_date,json=viewDate,proto3,oneof" json:"view_date,omitempty"`
	LikeDate     *string `protobuf:"bytes,10,opt,name=like_date,json=likeDate,proto3,oneof" json:"like_date,omitempty"`
	FavoriteDate *string `protobuf:"bytes,11,opt,name=favorite_date,json=favoriteDate,proto3,oneof" json:"favorite_date,omitempty"`
	ShareDate    *string `protobuf:"bytes,12,opt,name=share_date,json=shareDate,proto3,oneof" json:"share_date,omitempty"`
	Ctm          *int64  `protobuf:"varint,13,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Blog         *int64  `protobuf:"varint,14,opt,name=blog,proto3,oneof" json:"blog,omitempty"`
	Comment      *int64  `protobuf:"varint,15,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *BlogInteractRequest) Reset() {
	*x = BlogInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogInteractRequest) ProtoMessage() {}

func (x *BlogInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogInteractRequest.ProtoReflect.Descriptor instead.
func (*BlogInteractRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{88}
}

func (x *BlogInteractRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogInteractRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BlogInteractRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *BlogInteractRequest) GetBlogId() int32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *BlogInteractRequest) GetViewCount() int32 {
	if x != nil && x.ViewCount != nil {
		return *x.ViewCount
	}
	return 0
}

func (x *BlogInteractRequest) GetIsLike() bool {
	if x != nil && x.IsLike != nil {
		return *x.IsLike
	}
	return false
}

func (x *BlogInteractRequest) GetShareCount() int32 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *BlogInteractRequest) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

func (x *BlogInteractRequest) GetViewDate() string {
	if x != nil && x.ViewDate != nil {
		return *x.ViewDate
	}
	return ""
}

func (x *BlogInteractRequest) GetLikeDate() string {
	if x != nil && x.LikeDate != nil {
		return *x.LikeDate
	}
	return ""
}

func (x *BlogInteractRequest) GetFavoriteDate() string {
	if x != nil && x.FavoriteDate != nil {
		return *x.FavoriteDate
	}
	return ""
}

func (x *BlogInteractRequest) GetShareDate() string {
	if x != nil && x.ShareDate != nil {
		return *x.ShareDate
	}
	return ""
}

func (x *BlogInteractRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *BlogInteractRequest) GetBlog() int64 {
	if x != nil && x.Blog != nil {
		return *x.Blog
	}
	return 0
}

func (x *BlogInteractRequest) GetComment() int64 {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return 0
}

type BlogInteractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CtmId        int32   `protobuf:"varint,2,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	Nickname     string  `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar       string  `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	BlogId       int32   `protobuf:"varint,5,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	ViewCount    *int32  `protobuf:"varint,6,opt,name=view_count,json=viewCount,proto3,oneof" json:"view_count,omitempty"`
	IsLike       *bool   `protobuf:"varint,7,opt,name=is_like,json=isLike,proto3,oneof" json:"is_like,omitempty"`
	ShareCount   *int32  `protobuf:"varint,8,opt,name=share_count,json=shareCount,proto3,oneof" json:"share_count,omitempty"`
	IsFavorite   *bool   `protobuf:"varint,9,opt,name=is_favorite,json=isFavorite,proto3,oneof" json:"is_favorite,omitempty"`
	ViewDate     *string `protobuf:"bytes,10,opt,name=view_date,json=viewDate,proto3,oneof" json:"view_date,omitempty"`
	LikeDate     *string `protobuf:"bytes,11,opt,name=like_date,json=likeDate,proto3,oneof" json:"like_date,omitempty"`
	FavoriteDate *string `protobuf:"bytes,12,opt,name=favorite_date,json=favoriteDate,proto3,oneof" json:"favorite_date,omitempty"`
	ShareDate    *string `protobuf:"bytes,13,opt,name=share_date,json=shareDate,proto3,oneof" json:"share_date,omitempty"`
	CreateTime   string  `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string  `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Ctm          *int64  `protobuf:"varint,16,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Blog         *int64  `protobuf:"varint,17,opt,name=blog,proto3,oneof" json:"blog,omitempty"`
	Comment      *int64  `protobuf:"varint,18,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *BlogInteractResponse) Reset() {
	*x = BlogInteractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogInteractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogInteractResponse) ProtoMessage() {}

func (x *BlogInteractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogInteractResponse.ProtoReflect.Descriptor instead.
func (*BlogInteractResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{89}
}

func (x *BlogInteractResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogInteractResponse) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *BlogInteractResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BlogInteractResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *BlogInteractResponse) GetBlogId() int32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *BlogInteractResponse) GetViewCount() int32 {
	if x != nil && x.ViewCount != nil {
		return *x.ViewCount
	}
	return 0
}

func (x *BlogInteractResponse) GetIsLike() bool {
	if x != nil && x.IsLike != nil {
		return *x.IsLike
	}
	return false
}

func (x *BlogInteractResponse) GetShareCount() int32 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *BlogInteractResponse) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

func (x *BlogInteractResponse) GetViewDate() string {
	if x != nil && x.ViewDate != nil {
		return *x.ViewDate
	}
	return ""
}

func (x *BlogInteractResponse) GetLikeDate() string {
	if x != nil && x.LikeDate != nil {
		return *x.LikeDate
	}
	return ""
}

func (x *BlogInteractResponse) GetFavoriteDate() string {
	if x != nil && x.FavoriteDate != nil {
		return *x.FavoriteDate
	}
	return ""
}

func (x *BlogInteractResponse) GetShareDate() string {
	if x != nil && x.ShareDate != nil {
		return *x.ShareDate
	}
	return ""
}

func (x *BlogInteractResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *BlogInteractResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *BlogInteractResponse) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *BlogInteractResponse) GetBlog() int64 {
	if x != nil && x.Blog != nil {
		return *x.Blog
	}
	return 0
}

func (x *BlogInteractResponse) GetComment() int64 {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return 0
}

type BlogInteractRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlogInteractRetrieveRequest) Reset() {
	*x = BlogInteractRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogInteractRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogInteractRetrieveRequest) ProtoMessage() {}

func (x *BlogInteractRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogInteractRetrieveRequest.ProtoReflect.Descriptor instead.
func (*BlogInteractRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{90}
}

func (x *BlogInteractRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BlogInteractUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CtmId                int32    `protobuf:"varint,3,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	BlogId               int32    `protobuf:"varint,4,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ViewCount            *int32   `protobuf:"varint,6,opt,name=view_count,json=viewCount,proto3,oneof" json:"view_count,omitempty"`
	IsLike               *bool    `protobuf:"varint,7,opt,name=is_like,json=isLike,proto3,oneof" json:"is_like,omitempty"`
	ShareCount           *int32   `protobuf:"varint,8,opt,name=share_count,json=shareCount,proto3,oneof" json:"share_count,omitempty"`
	IsFavorite           *bool    `protobuf:"varint,9,opt,name=is_favorite,json=isFavorite,proto3,oneof" json:"is_favorite,omitempty"`
	ViewDate             *string  `protobuf:"bytes,10,opt,name=view_date,json=viewDate,proto3,oneof" json:"view_date,omitempty"`
	LikeDate             *string  `protobuf:"bytes,11,opt,name=like_date,json=likeDate,proto3,oneof" json:"like_date,omitempty"`
	FavoriteDate         *string  `protobuf:"bytes,12,opt,name=favorite_date,json=favoriteDate,proto3,oneof" json:"favorite_date,omitempty"`
	ShareDate            *string  `protobuf:"bytes,13,opt,name=share_date,json=shareDate,proto3,oneof" json:"share_date,omitempty"`
	Ctm                  *int64   `protobuf:"varint,14,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Blog                 *int64   `protobuf:"varint,15,opt,name=blog,proto3,oneof" json:"blog,omitempty"`
	Comment              *int64   `protobuf:"varint,16,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *BlogInteractUpdateRequest) Reset() {
	*x = BlogInteractUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogInteractUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogInteractUpdateRequest) ProtoMessage() {}

func (x *BlogInteractUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogInteractUpdateRequest.ProtoReflect.Descriptor instead.
func (*BlogInteractUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{91}
}

func (x *BlogInteractUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogInteractUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BlogInteractUpdateRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *BlogInteractUpdateRequest) GetBlogId() int32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *BlogInteractUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *BlogInteractUpdateRequest) GetViewCount() int32 {
	if x != nil && x.ViewCount != nil {
		return *x.ViewCount
	}
	return 0
}

func (x *BlogInteractUpdateRequest) GetIsLike() bool {
	if x != nil && x.IsLike != nil {
		return *x.IsLike
	}
	return false
}

func (x *BlogInteractUpdateRequest) GetShareCount() int32 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *BlogInteractUpdateRequest) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

func (x *BlogInteractUpdateRequest) GetViewDate() string {
	if x != nil && x.ViewDate != nil {
		return *x.ViewDate
	}
	return ""
}

func (x *BlogInteractUpdateRequest) GetLikeDate() string {
	if x != nil && x.LikeDate != nil {
		return *x.LikeDate
	}
	return ""
}

func (x *BlogInteractUpdateRequest) GetFavoriteDate() string {
	if x != nil && x.FavoriteDate != nil {
		return *x.FavoriteDate
	}
	return ""
}

func (x *BlogInteractUpdateRequest) GetShareDate() string {
	if x != nil && x.ShareDate != nil {
		return *x.ShareDate
	}
	return ""
}

func (x *BlogInteractUpdateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *BlogInteractUpdateRequest) GetBlog() int64 {
	if x != nil && x.Blog != nil {
		return *x.Blog
	}
	return 0
}

func (x *BlogInteractUpdateRequest) GetComment() int64 {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return 0
}

type BlogListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *BlogListRequest) Reset() {
	*x = BlogListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogListRequest) ProtoMessage() {}

func (x *BlogListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogListRequest.ProtoReflect.Descriptor instead.
func (*BlogListRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{92}
}

func (x *BlogListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type BlogListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BlogResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BlogListResponse) Reset() {
	*x = BlogListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogListResponse) ProtoMessage() {}

func (x *BlogListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogListResponse.ProtoReflect.Descriptor instead.
func (*BlogListResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{93}
}

func (x *BlogListResponse) GetResults() []*BlogResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BlogListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BlogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string              `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ActivityId    int32               `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	CtmId         int32               `protobuf:"varint,4,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	Content       *BlogContentRequest `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	BlogType      int32               `protobuf:"varint,6,opt,name=blog_type,json=blogType,proto3" json:"blog_type,omitempty"`
	IsValid       bool                `protobuf:"varint,7,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Status        int32               `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	CoverImage    *string             `protobuf:"bytes,9,opt,name=cover_image,json=coverImage,proto3,oneof" json:"cover_image,omitempty"`
	Template      *string             `protobuf:"bytes,10,opt,name=template,proto3,oneof" json:"template,omitempty"`
	Link          *string             `protobuf:"bytes,11,opt,name=link,proto3,oneof" json:"link,omitempty"`
	Title         *string             `protobuf:"bytes,12,opt,name=title,proto3,oneof" json:"title,omitempty"`
	SubTitle      *string             `protobuf:"bytes,13,opt,name=sub_title,json=subTitle,proto3,oneof" json:"sub_title,omitempty"`
	ShareCount    *int32              `protobuf:"varint,14,opt,name=share_count,json=shareCount,proto3,oneof" json:"share_count,omitempty"`
	ViewCount     *int32              `protobuf:"varint,15,opt,name=view_count,json=viewCount,proto3,oneof" json:"view_count,omitempty"`
	LikeCount     *int32              `protobuf:"varint,16,opt,name=like_count,json=likeCount,proto3,oneof" json:"like_count,omitempty"`
	CommentCount  *int32              `protobuf:"varint,17,opt,name=comment_count,json=commentCount,proto3,oneof" json:"comment_count,omitempty"`
	FavoriteCount *int32              `protobuf:"varint,18,opt,name=favorite_count,json=favoriteCount,proto3,oneof" json:"favorite_count,omitempty"`
	Address       *string             `protobuf:"bytes,19,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Ip            *string             `protobuf:"bytes,20,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Platform      *string             `protobuf:"bytes,21,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	Tags          *string             `protobuf:"bytes,22,opt,name=tags,proto3,oneof" json:"tags,omitempty"`
	Index         *int32              `protobuf:"varint,23,opt,name=index,proto3,oneof" json:"index,omitempty"`
	AdminName     *string             `protobuf:"bytes,24,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Remark        *string             `protobuf:"bytes,25,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Ctm           *int64              `protobuf:"varint,26,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *BlogRequest) Reset() {
	*x = BlogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogRequest) ProtoMessage() {}

func (x *BlogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogRequest.ProtoReflect.Descriptor instead.
func (*BlogRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{94}
}

func (x *BlogRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BlogRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *BlogRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *BlogRequest) GetContent() *BlogContentRequest {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *BlogRequest) GetBlogType() int32 {
	if x != nil {
		return x.BlogType
	}
	return 0
}

func (x *BlogRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *BlogRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BlogRequest) GetCoverImage() string {
	if x != nil && x.CoverImage != nil {
		return *x.CoverImage
	}
	return ""
}

func (x *BlogRequest) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *BlogRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *BlogRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BlogRequest) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *BlogRequest) GetShareCount() int32 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *BlogRequest) GetViewCount() int32 {
	if x != nil && x.ViewCount != nil {
		return *x.ViewCount
	}
	return 0
}

func (x *BlogRequest) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *BlogRequest) GetCommentCount() int32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *BlogRequest) GetFavoriteCount() int32 {
	if x != nil && x.FavoriteCount != nil {
		return *x.FavoriteCount
	}
	return 0
}

func (x *BlogRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *BlogRequest) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *BlogRequest) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *BlogRequest) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *BlogRequest) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *BlogRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *BlogRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *BlogRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type BlogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityNo    string                 `protobuf:"bytes,2,opt,name=activity_no,json=activityNo,proto3" json:"activity_no,omitempty"`
	Nickname      string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar        string                 `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ActivityId    int32                  `protobuf:"varint,5,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	CtmId         int32                  `protobuf:"varint,6,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	StatusName    string                 `protobuf:"bytes,7,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	Activity      *ActivityBrandResponse `protobuf:"bytes,8,opt,name=activity,proto3" json:"activity,omitempty"`
	IsLike        bool                   `protobuf:"varint,9,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	Content       *BlogContentResponse   `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	BlogType      int32                  `protobuf:"varint,11,opt,name=blog_type,json=blogType,proto3" json:"blog_type,omitempty"`
	IsValid       bool                   `protobuf:"varint,12,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Status        int32                  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	CoverImage    *string                `protobuf:"bytes,14,opt,name=cover_image,json=coverImage,proto3,oneof" json:"cover_image,omitempty"`
	Template      *string                `protobuf:"bytes,15,opt,name=template,proto3,oneof" json:"template,omitempty"`
	Link          *string                `protobuf:"bytes,16,opt,name=link,proto3,oneof" json:"link,omitempty"`
	Title         *string                `protobuf:"bytes,17,opt,name=title,proto3,oneof" json:"title,omitempty"`
	SubTitle      *string                `protobuf:"bytes,18,opt,name=sub_title,json=subTitle,proto3,oneof" json:"sub_title,omitempty"`
	ShareCount    *int32                 `protobuf:"varint,19,opt,name=share_count,json=shareCount,proto3,oneof" json:"share_count,omitempty"`
	ViewCount     *int32                 `protobuf:"varint,20,opt,name=view_count,json=viewCount,proto3,oneof" json:"view_count,omitempty"`
	LikeCount     *int32                 `protobuf:"varint,21,opt,name=like_count,json=likeCount,proto3,oneof" json:"like_count,omitempty"`
	CommentCount  *int32                 `protobuf:"varint,22,opt,name=comment_count,json=commentCount,proto3,oneof" json:"comment_count,omitempty"`
	FavoriteCount *int32                 `protobuf:"varint,23,opt,name=favorite_count,json=favoriteCount,proto3,oneof" json:"favorite_count,omitempty"`
	Address       *string                `protobuf:"bytes,24,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Ip            *string                `protobuf:"bytes,25,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Platform      *string                `protobuf:"bytes,26,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	Tags          *string                `protobuf:"bytes,27,opt,name=tags,proto3,oneof" json:"tags,omitempty"`
	Index         *int32                 `protobuf:"varint,28,opt,name=index,proto3,oneof" json:"index,omitempty"`
	AdminName     *string                `protobuf:"bytes,29,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Remark        *string                `protobuf:"bytes,30,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CreateTime    string                 `protobuf:"bytes,31,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string                 `protobuf:"bytes,32,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Ctm           *int64                 `protobuf:"varint,33,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *BlogResponse) Reset() {
	*x = BlogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogResponse) ProtoMessage() {}

func (x *BlogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogResponse.ProtoReflect.Descriptor instead.
func (*BlogResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{95}
}

func (x *BlogResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogResponse) GetActivityNo() string {
	if x != nil {
		return x.ActivityNo
	}
	return ""
}

func (x *BlogResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BlogResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *BlogResponse) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *BlogResponse) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *BlogResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *BlogResponse) GetActivity() *ActivityBrandResponse {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *BlogResponse) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

func (x *BlogResponse) GetContent() *BlogContentResponse {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *BlogResponse) GetBlogType() int32 {
	if x != nil {
		return x.BlogType
	}
	return 0
}

func (x *BlogResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *BlogResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BlogResponse) GetCoverImage() string {
	if x != nil && x.CoverImage != nil {
		return *x.CoverImage
	}
	return ""
}

func (x *BlogResponse) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *BlogResponse) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *BlogResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BlogResponse) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *BlogResponse) GetShareCount() int32 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *BlogResponse) GetViewCount() int32 {
	if x != nil && x.ViewCount != nil {
		return *x.ViewCount
	}
	return 0
}

func (x *BlogResponse) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *BlogResponse) GetCommentCount() int32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *BlogResponse) GetFavoriteCount() int32 {
	if x != nil && x.FavoriteCount != nil {
		return *x.FavoriteCount
	}
	return 0
}

func (x *BlogResponse) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *BlogResponse) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *BlogResponse) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *BlogResponse) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *BlogResponse) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *BlogResponse) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *BlogResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *BlogResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *BlogResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *BlogResponse) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type BlogRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlogRetrieveRequest) Reset() {
	*x = BlogRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogRetrieveRequest) ProtoMessage() {}

func (x *BlogRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogRetrieveRequest.ProtoReflect.Descriptor instead.
func (*BlogRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{96}
}

func (x *BlogRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BlogUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string              `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ActivityId           int32               `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	CtmId                int32               `protobuf:"varint,4,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	Content              *BlogContentRequest `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	XPartialUpdateFields []string            `protobuf:"bytes,6,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	BlogType             int32               `protobuf:"varint,7,opt,name=blog_type,json=blogType,proto3" json:"blog_type,omitempty"`
	IsValid              bool                `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Status               int32               `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CoverImage           *string             `protobuf:"bytes,10,opt,name=cover_image,json=coverImage,proto3,oneof" json:"cover_image,omitempty"`
	Template             *string             `protobuf:"bytes,11,opt,name=template,proto3,oneof" json:"template,omitempty"`
	Link                 *string             `protobuf:"bytes,12,opt,name=link,proto3,oneof" json:"link,omitempty"`
	Title                *string             `protobuf:"bytes,13,opt,name=title,proto3,oneof" json:"title,omitempty"`
	SubTitle             *string             `protobuf:"bytes,14,opt,name=sub_title,json=subTitle,proto3,oneof" json:"sub_title,omitempty"`
	ShareCount           *int32              `protobuf:"varint,15,opt,name=share_count,json=shareCount,proto3,oneof" json:"share_count,omitempty"`
	ViewCount            *int32              `protobuf:"varint,16,opt,name=view_count,json=viewCount,proto3,oneof" json:"view_count,omitempty"`
	LikeCount            *int32              `protobuf:"varint,17,opt,name=like_count,json=likeCount,proto3,oneof" json:"like_count,omitempty"`
	CommentCount         *int32              `protobuf:"varint,18,opt,name=comment_count,json=commentCount,proto3,oneof" json:"comment_count,omitempty"`
	FavoriteCount        *int32              `protobuf:"varint,19,opt,name=favorite_count,json=favoriteCount,proto3,oneof" json:"favorite_count,omitempty"`
	Address              *string             `protobuf:"bytes,20,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Ip                   *string             `protobuf:"bytes,21,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Platform             *string             `protobuf:"bytes,22,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	Tags                 *string             `protobuf:"bytes,23,opt,name=tags,proto3,oneof" json:"tags,omitempty"`
	Index                *int32              `protobuf:"varint,24,opt,name=index,proto3,oneof" json:"index,omitempty"`
	AdminName            *string             `protobuf:"bytes,25,opt,name=admin_name,json=adminName,proto3,oneof" json:"admin_name,omitempty"`
	Remark               *string             `protobuf:"bytes,26,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Ctm                  *int64              `protobuf:"varint,27,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
}

func (x *BlogUpdateRequest) Reset() {
	*x = BlogUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlogUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlogUpdateRequest) ProtoMessage() {}

func (x *BlogUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlogUpdateRequest.ProtoReflect.Descriptor instead.
func (*BlogUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{97}
}

func (x *BlogUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlogUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BlogUpdateRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *BlogUpdateRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *BlogUpdateRequest) GetContent() *BlogContentRequest {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *BlogUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *BlogUpdateRequest) GetBlogType() int32 {
	if x != nil {
		return x.BlogType
	}
	return 0
}

func (x *BlogUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *BlogUpdateRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BlogUpdateRequest) GetCoverImage() string {
	if x != nil && x.CoverImage != nil {
		return *x.CoverImage
	}
	return ""
}

func (x *BlogUpdateRequest) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *BlogUpdateRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *BlogUpdateRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BlogUpdateRequest) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *BlogUpdateRequest) GetShareCount() int32 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *BlogUpdateRequest) GetViewCount() int32 {
	if x != nil && x.ViewCount != nil {
		return *x.ViewCount
	}
	return 0
}

func (x *BlogUpdateRequest) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *BlogUpdateRequest) GetCommentCount() int32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *BlogUpdateRequest) GetFavoriteCount() int32 {
	if x != nil && x.FavoriteCount != nil {
		return *x.FavoriteCount
	}
	return 0
}

func (x *BlogUpdateRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *BlogUpdateRequest) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *BlogUpdateRequest) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *BlogUpdateRequest) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *BlogUpdateRequest) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *BlogUpdateRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *BlogUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *BlogUpdateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

type CardCaresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type           int32   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	ExtendTimeDiff *int32  `protobuf:"varint,4,opt,name=extend_time_diff,json=extendTimeDiff,proto3,oneof" json:"extend_time_diff,omitempty"`
	ActiveTimeDiff *int32  `protobuf:"varint,5,opt,name=active_time_diff,json=activeTimeDiff,proto3,oneof" json:"active_time_diff,omitempty"`
	ExtendTimeUnit string  `protobuf:"bytes,6,opt,name=extend_time_unit,json=extendTimeUnit,proto3" json:"extend_time_unit,omitempty"`
	ActiveTimeUnit string  `protobuf:"bytes,7,opt,name=active_time_unit,json=activeTimeUnit,proto3" json:"active_time_unit,omitempty"`
	IsValid        bool    `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark         *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CreateTime     string  `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *CardCaresResponse) Reset() {
	*x = CardCaresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCaresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCaresResponse) ProtoMessage() {}

func (x *CardCaresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCaresResponse.ProtoReflect.Descriptor instead.
func (*CardCaresResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{98}
}

func (x *CardCaresResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardCaresResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardCaresResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CardCaresResponse) GetExtendTimeDiff() int32 {
	if x != nil && x.ExtendTimeDiff != nil {
		return *x.ExtendTimeDiff
	}
	return 0
}

func (x *CardCaresResponse) GetActiveTimeDiff() int32 {
	if x != nil && x.ActiveTimeDiff != nil {
		return *x.ActiveTimeDiff
	}
	return 0
}

func (x *CardCaresResponse) GetExtendTimeUnit() string {
	if x != nil {
		return x.ExtendTimeUnit
	}
	return ""
}

func (x *CardCaresResponse) GetActiveTimeUnit() string {
	if x != nil {
		return x.ActiveTimeUnit
	}
	return ""
}

func (x *CardCaresResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardCaresResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CardCaresResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CardCaresResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CardNutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Num        int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	IsValid    bool    `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Remark     *string `protobuf:"bytes,5,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CreateTime string  `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string  `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *CardNutResponse) Reset() {
	*x = CardNutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNutResponse) ProtoMessage() {}

func (x *CardNutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNutResponse.ProtoReflect.Descriptor instead.
func (*CardNutResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{99}
}

func (x *CardNutResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardNutResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CardNutResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CardNutResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CardNutResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CardNutResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CardNutResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CardVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClassName      string  `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	TypeName       string  `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	CreateTime     string  `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CouponSku      *string `protobuf:"bytes,6,opt,name=coupon_sku,json=couponSku,proto3,oneof" json:"coupon_sku,omitempty"`
	CouponSeries   *string `protobuf:"bytes,7,opt,name=coupon_series,json=couponSeries,proto3,oneof" json:"coupon_series,omitempty"`
	CouponName     string  `protobuf:"bytes,8,opt,name=coupon_name,json=couponName,proto3" json:"coupon_name,omitempty"`
	CouponIntro    *string `protobuf:"bytes,9,opt,name=coupon_intro,json=couponIntro,proto3,oneof" json:"coupon_intro,omitempty"`
	Remark         *string `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CouponClass    int32   `protobuf:"varint,11,opt,name=coupon_class,json=couponClass,proto3" json:"coupon_class,omitempty"`
	CouponType     int32   `protobuf:"varint,12,opt,name=coupon_type,json=couponType,proto3" json:"coupon_type,omitempty"`
	TriggerAmount  *int32  `protobuf:"varint,13,opt,name=trigger_amount,json=triggerAmount,proto3,oneof" json:"trigger_amount,omitempty"`
	TriggerQty     *int32  `protobuf:"varint,14,opt,name=trigger_qty,json=triggerQty,proto3,oneof" json:"trigger_qty,omitempty"`
	CumulateCount  *int32  `protobuf:"varint,15,opt,name=cumulate_count,json=cumulateCount,proto3,oneof" json:"cumulate_count,omitempty"`
	ProdRange      *string `protobuf:"bytes,16,opt,name=prod_range,json=prodRange,proto3,oneof" json:"prod_range,omitempty"`
	DiscountAmount *int32  `protobuf:"varint,17,opt,name=discount_amount,json=discountAmount,proto3,oneof" json:"discount_amount,omitempty"`
	Discount       *int32  `protobuf:"varint,18,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	IsValid        bool    `protobuf:"varint,19,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *CardVoucherResponse) Reset() {
	*x = CardVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVoucherResponse) ProtoMessage() {}

func (x *CardVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVoucherResponse.ProtoReflect.Descriptor instead.
func (*CardVoucherResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{100}
}

func (x *CardVoucherResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardVoucherResponse) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *CardVoucherResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CardVoucherResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CardVoucherResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponSku() string {
	if x != nil && x.CouponSku != nil {
		return *x.CouponSku
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponSeries() string {
	if x != nil && x.CouponSeries != nil {
		return *x.CouponSeries
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponName() string {
	if x != nil {
		return x.CouponName
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponIntro() string {
	if x != nil && x.CouponIntro != nil {
		return *x.CouponIntro
	}
	return ""
}

func (x *CardVoucherResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CardVoucherResponse) GetCouponClass() int32 {
	if x != nil {
		return x.CouponClass
	}
	return 0
}

func (x *CardVoucherResponse) GetCouponType() int32 {
	if x != nil {
		return x.CouponType
	}
	return 0
}

func (x *CardVoucherResponse) GetTriggerAmount() int32 {
	if x != nil && x.TriggerAmount != nil {
		return *x.TriggerAmount
	}
	return 0
}

func (x *CardVoucherResponse) GetTriggerQty() int32 {
	if x != nil && x.TriggerQty != nil {
		return *x.TriggerQty
	}
	return 0
}

func (x *CardVoucherResponse) GetCumulateCount() int32 {
	if x != nil && x.CumulateCount != nil {
		return *x.CumulateCount
	}
	return 0
}

func (x *CardVoucherResponse) GetProdRange() string {
	if x != nil && x.ProdRange != nil {
		return *x.ProdRange
	}
	return ""
}

func (x *CardVoucherResponse) GetDiscountAmount() int32 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *CardVoucherResponse) GetDiscount() int32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CardVoucherResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type CtmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GenderName   string  `protobuf:"bytes,2,opt,name=gender_name,json=genderName,proto3" json:"gender_name,omitempty"`
	CreateTime   string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string  `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Avatar       *string `protobuf:"bytes,5,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	Name         *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile       *string `protobuf:"bytes,7,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
	Gender       *int32  `protobuf:"varint,8,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	Birthday     *string `protobuf:"bytes,9,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	Describe     *string `protobuf:"bytes,10,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	DwMemId      *string `protobuf:"bytes,11,opt,name=dw_memId,json=dwMemId,proto3,oneof" json:"dw_memId,omitempty"`
	PlatformName *string `protobuf:"bytes,12,opt,name=platform_name,json=platformName,proto3,oneof" json:"platform_name,omitempty"`
	PlatUnionId  *string `protobuf:"bytes,13,opt,name=plat_unionId,json=platUnionId,proto3,oneof" json:"plat_unionId,omitempty"`
	MpOpenId     string  `protobuf:"bytes,14,opt,name=mp_openId,json=mpOpenId,proto3" json:"mp_openId,omitempty"`
	Nickname     *string `protobuf:"bytes,15,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	ChannelCode  *string `protobuf:"bytes,16,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	Property     *string `protobuf:"bytes,17,opt,name=property,proto3,oneof" json:"property,omitempty"`
	Area         *string `protobuf:"bytes,18,opt,name=area,proto3,oneof" json:"area,omitempty"`
}

func (x *CtmResponse) Reset() {
	*x = CtmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmResponse) ProtoMessage() {}

func (x *CtmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmResponse.ProtoReflect.Descriptor instead.
func (*CtmResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{101}
}

func (x *CtmResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmResponse) GetGenderName() string {
	if x != nil {
		return x.GenderName
	}
	return ""
}

func (x *CtmResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CtmResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CtmResponse) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *CtmResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CtmResponse) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *CtmResponse) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *CtmResponse) GetBirthday() string {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return ""
}

func (x *CtmResponse) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *CtmResponse) GetDwMemId() string {
	if x != nil && x.DwMemId != nil {
		return *x.DwMemId
	}
	return ""
}

func (x *CtmResponse) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *CtmResponse) GetPlatUnionId() string {
	if x != nil && x.PlatUnionId != nil {
		return *x.PlatUnionId
	}
	return ""
}

func (x *CtmResponse) GetMpOpenId() string {
	if x != nil {
		return x.MpOpenId
	}
	return ""
}

func (x *CtmResponse) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *CtmResponse) GetChannelCode() string {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return ""
}

func (x *CtmResponse) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *CtmResponse) GetArea() string {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return ""
}

type LabelNumberValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelNumberValueResponse) Reset() {
	*x = LabelNumberValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueResponse) ProtoMessage() {}

func (x *LabelNumberValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{102}
}

func (x *LabelNumberValueResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LabelNumberValueResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type LabelValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelValueResponse) Reset() {
	*x = LabelValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValueResponse) ProtoMessage() {}

func (x *LabelValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValueResponse.ProtoReflect.Descriptor instead.
func (*LabelValueResponse) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{103}
}

func (x *LabelValueResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LabelValueResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type NextRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NextRecordRequest) Reset() {
	*x = NextRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextRecordRequest) ProtoMessage() {}

func (x *NextRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextRecordRequest.ProtoReflect.Descriptor instead.
func (*NextRecordRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{104}
}

type NextSerialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NextSerialRequest) Reset() {
	*x = NextSerialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextSerialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextSerialRequest) ProtoMessage() {}

func (x *NextSerialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextSerialRequest.ProtoReflect.Descriptor instead.
func (*NextSerialRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{105}
}

type OptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OptionRequest) Reset() {
	*x = OptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionRequest) ProtoMessage() {}

func (x *OptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionRequest.ProtoReflect.Descriptor instead.
func (*OptionRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{106}
}

type VoucherRecordUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CouponCode           string   `protobuf:"bytes,4,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty"`
	IsRegistered         bool     `protobuf:"varint,5,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	CtmId                int32    `protobuf:"varint,6,opt,name=ctm_id,json=ctmId,proto3" json:"ctm_id,omitempty"`
	Platform             *int32   `protobuf:"varint,7,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	OrderId              *int32   `protobuf:"varint,8,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	OffsetTime           *string  `protobuf:"bytes,9,opt,name=offset_time,json=offsetTime,proto3,oneof" json:"offset_time,omitempty"`
	RefundId             *int32   `protobuf:"varint,10,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	RefundTime           *string  `protobuf:"bytes,11,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	ActVoucher           *int64   `protobuf:"varint,12,opt,name=act_voucher,json=actVoucher,proto3,oneof" json:"act_voucher,omitempty"`
}

func (x *VoucherRecordUpdateRequest) Reset() {
	*x = VoucherRecordUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoucherRecordUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoucherRecordUpdateRequest) ProtoMessage() {}

func (x *VoucherRecordUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoucherRecordUpdateRequest.ProtoReflect.Descriptor instead.
func (*VoucherRecordUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{107}
}

func (x *VoucherRecordUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VoucherRecordUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *VoucherRecordUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *VoucherRecordUpdateRequest) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *VoucherRecordUpdateRequest) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

func (x *VoucherRecordUpdateRequest) GetCtmId() int32 {
	if x != nil {
		return x.CtmId
	}
	return 0
}

func (x *VoucherRecordUpdateRequest) GetPlatform() int32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *VoucherRecordUpdateRequest) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *VoucherRecordUpdateRequest) GetOffsetTime() string {
	if x != nil && x.OffsetTime != nil {
		return *x.OffsetTime
	}
	return ""
}

func (x *VoucherRecordUpdateRequest) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *VoucherRecordUpdateRequest) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *VoucherRecordUpdateRequest) GetActVoucher() int64 {
	if x != nil && x.ActVoucher != nil {
		return *x.ActVoucher
	}
	return 0
}

type VoucherUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	VoucherId            int32    `protobuf:"varint,4,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Count                *int32   `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Balance              *int32   `protobuf:"varint,6,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	Limit                *int32   `protobuf:"varint,7,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	CanStack             bool     `protobuf:"varint,8,opt,name=can_stack,json=canStack,proto3" json:"can_stack,omitempty"`
	MpUrl                *string  `protobuf:"bytes,9,opt,name=mp_url,json=mpUrl,proto3,oneof" json:"mp_url,omitempty"`
	Remark               *string  `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Activity             int64    `protobuf:"varint,11,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *VoucherUpdateRequest) Reset() {
	*x = VoucherUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_ito_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoucherUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoucherUpdateRequest) ProtoMessage() {}

func (x *VoucherUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_ito_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoucherUpdateRequest.ProtoReflect.Descriptor instead.
func (*VoucherUpdateRequest) Descriptor() ([]byte, []int) {
	return file_activity_ito_proto_rawDescGZIP(), []int{108}
}

func (x *VoucherUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VoucherUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *VoucherUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *VoucherUpdateRequest) GetVoucherId() int32 {
	if x != nil {
		return x.VoucherId
	}
	return 0
}

func (x *VoucherUpdateRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *VoucherUpdateRequest) GetBalance() int32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *VoucherUpdateRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *VoucherUpdateRequest) GetCanStack() bool {
	if x != nil {
		return x.CanStack
	}
	return false
}

func (x *VoucherUpdateRequest) GetMpUrl() string {
	if x != nil && x.MpUrl != nil {
		return *x.MpUrl
	}
	return ""
}

func (x *VoucherUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *VoucherUpdateRequest) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

var File_activity_ito_proto protoreflect.FileDescriptor

var file_activity_ito_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x91, 0x02, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x54,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1d, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x26, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f,
	0x0a, 0x23, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x97, 0x01, 0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x03, 0x0a, 0x1f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x61, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x22,
	0xa4, 0x04, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x72, 0x65,
	0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x03,
	0x63, 0x74, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x03, 0x63, 0x74, 0x6d,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x22, 0x39, 0x0a, 0x27, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xde, 0x03, 0x0a, 0x25, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61,
	0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63,
	0x74, 0x6d, 0x22, 0xc2, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61,
	0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61,
	0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xd1, 0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x61, 0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x33, 0x0a, 0x21, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xfd, 0x01, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x2d, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x34, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x1e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x1b, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36,
	0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x1d,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x75,
	0x74, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x22, 0x9a, 0x04, 0x0a, 0x1e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6e, 0x75, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x74, 0x12, 0x15,
	0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x03, 0x63,
	0x74, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x22, 0x37, 0x0a, 0x25, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xd8, 0x03, 0x0a, 0x23, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x75, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x04, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x22, 0xd7, 0x01, 0x0a,
	0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6e, 0x75, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xe0, 0x02, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x75, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x03, 0x6e, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x6e, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x31, 0x0a, 0x1f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x02, 0x0a,
	0x1d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x75, 0x74, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x22, 0xd0, 0x03, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x5e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x58, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x62, 0x6c, 0x6f,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x53, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x22, 0xa7, 0x05, 0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33,
	0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x8d, 0x01, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xc4, 0x05, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xba, 0x07, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x03, 0x63, 0x74, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0x34, 0x0a, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xff, 0x05, 0x0a, 0x20, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xe5, 0x04, 0x0a, 0x14,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x07, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xc9, 0x05, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x2e, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x1b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x22,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x22, 0x92, 0x05, 0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x2d, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x05, 0x0a, 0x29, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x53, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x06, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x25, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e,
	0x0a, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x23, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x05, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x06, 0x0a,
	0x1f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x6b, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x58,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x22, 0xbe, 0x05, 0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x22, 0xd0, 0x04, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xe0, 0x05, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x1f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x80, 0x04,
	0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70,
	0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0xaa, 0x05, 0x0a, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70,
	0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a,
	0x25, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x23, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d,
	0x0a, 0x2b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a,
	0x28, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x29, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x2f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xda, 0x03, 0x0a, 0x24,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74,
	0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x83, 0x04, 0x0a, 0x25, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x3e,
	0x0a, 0x2c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe6,
	0x02, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x06,
	0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc4, 0x04, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x0c, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0b, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x70, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x38,
	0x0a, 0x26, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5,
	0x03, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb5, 0x05, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x32,
	0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x80, 0x04, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xe6, 0x02, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x06, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x22, 0xa5,
	0x03, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c,
	0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x22, 0x2c, 0x0a, 0x1a, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x18, 0x42, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf3, 0x04, 0x0a, 0x13, 0x42,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x63, 0x74, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x03, 0x63, 0x74, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x09, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69,
	0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x62, 0x6c, 0x6f, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xd0, 0x05, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x03,
	0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0a, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xae, 0x05, 0x0a, 0x19, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x22, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x03,
	0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0a, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x6f, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb4, 0x08, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74,
	0x6d, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52,
	0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x02,
	0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x74, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x22, 0xbf, 0x0a, 0x0a, 0x0c, 0x42, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69,
	0x6b, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52,
	0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x02,
	0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a,
	0x03, 0x63, 0x74, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x03, 0x63, 0x74,
	0x6d, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x22, 0x25, 0x0a, 0x13, 0x42, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xef, 0x08, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x63, 0x74, 0x6d, 0x22, 0xba, 0x03, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xda, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xca, 0x06,
	0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x73, 0x6b,
	0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x53, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xec, 0x05, 0x0a, 0x0b, 0x43,
	0x74, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x64, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x07, 0x64, 0x77, 0x4d, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x77, 0x5f, 0x6d, 0x65, 0x6d,
	0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x22, 0x46, 0x0a, 0x18, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x40, 0x0a, 0x12, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0x13, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a,
	0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85,
	0x04, 0x0a, 0x1a, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x5f,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x91, 0x03, 0x0a, 0x14, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x06, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x32, 0xbb, 0x30, 0x0a, 0x17, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x3e,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x67,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x42, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x12, 0x39, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x42, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x71, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x12, 0x32, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x43, 0x61, 0x72,
	0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x3f, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x43, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x12, 0x45, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xa0, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x46, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x12, 0x40, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x12, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x09, 0x4e, 0x75, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x4e, 0x75, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x12, 0x3d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x75, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a,
	0x07, 0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x4e, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x43, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x4e, 0x75,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x44, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x96, 0x01, 0x0a, 0x0f, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x4e, 0x75, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x4e, 0x75, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x75, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3b, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x12, 0x40, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x8d, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x12, 0x41, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12,
	0x3b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x43, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x3f, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf0, 0x1a, 0x0a, 0x1a, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12,
	0x3d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a,
	0x0a, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x30, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x4c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x42, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x44, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x43, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x90, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x3d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x0e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x12, 0x44, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01,
	0x0a, 0x13, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x43, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7c, 0x0a, 0x14, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x4a, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0xa8, 0x01, 0x0a, 0x11, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x48, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x17,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x65, 0x78,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x30, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x15,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x4b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x45, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e,
	0x2e, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_activity_ito_proto_rawDescOnce sync.Once
	file_activity_ito_proto_rawDescData = file_activity_ito_proto_rawDesc
)

func file_activity_ito_proto_rawDescGZIP() []byte {
	file_activity_ito_proto_rawDescOnce.Do(func() {
		file_activity_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_activity_ito_proto_rawDescData)
	})
	return file_activity_ito_proto_rawDescData
}

var file_activity_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 109)
var file_activity_ito_proto_goTypes = []interface{}{
	(*ActVoucherOptionResponse)(nil),                        // 0: activity_service.activity_ito.ActVoucherOptionResponse
	(*ActivityBrandBlogDestroyRequest)(nil),                 // 1: activity_service.activity_ito.ActivityBrandBlogDestroyRequest
	(*ActivityBrandCaresDestroyRequest)(nil),                // 2: activity_service.activity_ito.ActivityBrandCaresDestroyRequest
	(*ActivityBrandCaresListRequest)(nil),                   // 3: activity_service.activity_ito.ActivityBrandCaresListRequest
	(*ActivityBrandCaresListResponse)(nil),                  // 4: activity_service.activity_ito.ActivityBrandCaresListResponse
	(*ActivityBrandCaresRecordDestroyRequest)(nil),          // 5: activity_service.activity_ito.ActivityBrandCaresRecordDestroyRequest
	(*ActivityBrandCaresRecordListRequest)(nil),             // 6: activity_service.activity_ito.ActivityBrandCaresRecordListRequest
	(*ActivityBrandCaresRecordListResponse)(nil),            // 7: activity_service.activity_ito.ActivityBrandCaresRecordListResponse
	(*ActivityBrandCaresRecordRequest)(nil),                 // 8: activity_service.activity_ito.ActivityBrandCaresRecordRequest
	(*ActivityBrandCaresRecordResponse)(nil),                // 9: activity_service.activity_ito.ActivityBrandCaresRecordResponse
	(*ActivityBrandCaresRecordRetrieveRequest)(nil),         // 10: activity_service.activity_ito.ActivityBrandCaresRecordRetrieveRequest
	(*ActivityBrandCaresRecordUpdateRequest)(nil),           // 11: activity_service.activity_ito.ActivityBrandCaresRecordUpdateRequest
	(*ActivityBrandCaresRequest)(nil),                       // 12: activity_service.activity_ito.ActivityBrandCaresRequest
	(*ActivityBrandCaresResponse)(nil),                      // 13: activity_service.activity_ito.ActivityBrandCaresResponse
	(*ActivityBrandCaresRetrieveRequest)(nil),               // 14: activity_service.activity_ito.ActivityBrandCaresRetrieveRequest
	(*ActivityBrandCaresUpdateRequest)(nil),                 // 15: activity_service.activity_ito.ActivityBrandCaresUpdateRequest
	(*ActivityBrandDestroyRequest)(nil),                     // 16: activity_service.activity_ito.ActivityBrandDestroyRequest
	(*ActivityBrandListRequest)(nil),                        // 17: activity_service.activity_ito.ActivityBrandListRequest
	(*ActivityBrandListResponse)(nil),                       // 18: activity_service.activity_ito.ActivityBrandListResponse
	(*ActivityBrandNutDestroyRequest)(nil),                  // 19: activity_service.activity_ito.ActivityBrandNutDestroyRequest
	(*ActivityBrandNutListRequest)(nil),                     // 20: activity_service.activity_ito.ActivityBrandNutListRequest
	(*ActivityBrandNutListResponse)(nil),                    // 21: activity_service.activity_ito.ActivityBrandNutListResponse
	(*ActivityBrandNutRecordDestroyRequest)(nil),            // 22: activity_service.activity_ito.ActivityBrandNutRecordDestroyRequest
	(*ActivityBrandNutRecordListRequest)(nil),               // 23: activity_service.activity_ito.ActivityBrandNutRecordListRequest
	(*ActivityBrandNutRecordListResponse)(nil),              // 24: activity_service.activity_ito.ActivityBrandNutRecordListResponse
	(*ActivityBrandNutRecordRequest)(nil),                   // 25: activity_service.activity_ito.ActivityBrandNutRecordRequest
	(*ActivityBrandNutRecordResponse)(nil),                  // 26: activity_service.activity_ito.ActivityBrandNutRecordResponse
	(*ActivityBrandNutRecordRetrieveRequest)(nil),           // 27: activity_service.activity_ito.ActivityBrandNutRecordRetrieveRequest
	(*ActivityBrandNutRecordUpdateRequest)(nil),             // 28: activity_service.activity_ito.ActivityBrandNutRecordUpdateRequest
	(*ActivityBrandNutRequest)(nil),                         // 29: activity_service.activity_ito.ActivityBrandNutRequest
	(*ActivityBrandNutResponse)(nil),                        // 30: activity_service.activity_ito.ActivityBrandNutResponse
	(*ActivityBrandNutRetrieveRequest)(nil),                 // 31: activity_service.activity_ito.ActivityBrandNutRetrieveRequest
	(*ActivityBrandNutUpdateRequest)(nil),                   // 32: activity_service.activity_ito.ActivityBrandNutUpdateRequest
	(*ActivityBrandOptionsResponse)(nil),                    // 33: activity_service.activity_ito.ActivityBrandOptionsResponse
	(*ActivityBrandPartialUpdateRequest)(nil),               // 34: activity_service.activity_ito.ActivityBrandPartialUpdateRequest
	(*ActivityBrandRecordDestroyRequest)(nil),               // 35: activity_service.activity_ito.ActivityBrandRecordDestroyRequest
	(*ActivityBrandRecordListRequest)(nil),                  // 36: activity_service.activity_ito.ActivityBrandRecordListRequest
	(*ActivityBrandRecordListResponse)(nil),                 // 37: activity_service.activity_ito.ActivityBrandRecordListResponse
	(*ActivityBrandRecordRequest)(nil),                      // 38: activity_service.activity_ito.ActivityBrandRecordRequest
	(*ActivityBrandRecordResponse)(nil),                     // 39: activity_service.activity_ito.ActivityBrandRecordResponse
	(*ActivityBrandRecordRetrieveRequest)(nil),              // 40: activity_service.activity_ito.ActivityBrandRecordRetrieveRequest
	(*ActivityBrandRecordUpdateRequest)(nil),                // 41: activity_service.activity_ito.ActivityBrandRecordUpdateRequest
	(*ActivityBrandRequest)(nil),                            // 42: activity_service.activity_ito.ActivityBrandRequest
	(*ActivityBrandResponse)(nil),                           // 43: activity_service.activity_ito.ActivityBrandResponse
	(*ActivityBrandRetrieveRequest)(nil),                    // 44: activity_service.activity_ito.ActivityBrandRetrieveRequest
	(*ActivityBrandUserApplyDestroyRequest)(nil),            // 45: activity_service.activity_ito.ActivityBrandUserApplyDestroyRequest
	(*ActivityDiscountDestroyRequest)(nil),                  // 46: activity_service.activity_ito.ActivityDiscountDestroyRequest
	(*ActivityDiscountListRequest)(nil),                     // 47: activity_service.activity_ito.ActivityDiscountListRequest
	(*ActivityDiscountListResponse)(nil),                    // 48: activity_service.activity_ito.ActivityDiscountListResponse
	(*ActivityDiscountNextSerialResponse)(nil),              // 49: activity_service.activity_ito.ActivityDiscountNextSerialResponse
	(*ActivityDiscountPartialUpdateRequest)(nil),            // 50: activity_service.activity_ito.ActivityDiscountPartialUpdateRequest
	(*ActivityDiscountProductCreateBatchListRequest)(nil),   // 51: activity_service.activity_ito.ActivityDiscountProductCreateBatchListRequest
	(*ActivityDiscountProductCreateBatchRequest)(nil),       // 52: activity_service.activity_ito.ActivityDiscountProductCreateBatchRequest
	(*ActivityDiscountProductDestroyRequest)(nil),           // 53: activity_service.activity_ito.ActivityDiscountProductDestroyRequest
	(*ActivityDiscountProductListRequest)(nil),              // 54: activity_service.activity_ito.ActivityDiscountProductListRequest
	(*ActivityDiscountProductListResponse)(nil),             // 55: activity_service.activity_ito.ActivityDiscountProductListResponse
	(*ActivityDiscountProductRequest)(nil),                  // 56: activity_service.activity_ito.ActivityDiscountProductRequest
	(*ActivityDiscountProductResponse)(nil),                 // 57: activity_service.activity_ito.ActivityDiscountProductResponse
	(*ActivityDiscountProductUpdateRequest)(nil),            // 58: activity_service.activity_ito.ActivityDiscountProductUpdateRequest
	(*ActivityDiscountRequest)(nil),                         // 59: activity_service.activity_ito.ActivityDiscountRequest
	(*ActivityDiscountResponse)(nil),                        // 60: activity_service.activity_ito.ActivityDiscountResponse
	(*ActivityDiscountRetrieveRequest)(nil),                 // 61: activity_service.activity_ito.ActivityDiscountRetrieveRequest
	(*ActivityDiscountSubProductRequest)(nil),               // 62: activity_service.activity_ito.ActivityDiscountSubProductRequest
	(*ActivityDiscountSubProductResponse)(nil),              // 63: activity_service.activity_ito.ActivityDiscountSubProductResponse
	(*ActivityDiscountVoucherDestroyRequest)(nil),           // 64: activity_service.activity_ito.ActivityDiscountVoucherDestroyRequest
	(*ActivityDiscountVoucherListRequest)(nil),              // 65: activity_service.activity_ito.ActivityDiscountVoucherListRequest
	(*ActivityDiscountVoucherListResponse)(nil),             // 66: activity_service.activity_ito.ActivityDiscountVoucherListResponse
	(*ActivityDiscountVoucherRecordDestroyRequest)(nil),     // 67: activity_service.activity_ito.ActivityDiscountVoucherRecordDestroyRequest
	(*ActivityDiscountVoucherRecordListRequest)(nil),        // 68: activity_service.activity_ito.ActivityDiscountVoucherRecordListRequest
	(*ActivityDiscountVoucherRecordListResponse)(nil),       // 69: activity_service.activity_ito.ActivityDiscountVoucherRecordListResponse
	(*ActivityDiscountVoucherRecordNextSerialResponse)(nil), // 70: activity_service.activity_ito.ActivityDiscountVoucherRecordNextSerialResponse
	(*ActivityDiscountVoucherRecordRequest)(nil),            // 71: activity_service.activity_ito.ActivityDiscountVoucherRecordRequest
	(*ActivityDiscountVoucherRecordResponse)(nil),           // 72: activity_service.activity_ito.ActivityDiscountVoucherRecordResponse
	(*ActivityDiscountVoucherRecordRetrieveRequest)(nil),    // 73: activity_service.activity_ito.ActivityDiscountVoucherRecordRetrieveRequest
	(*ActivityDiscountVoucherRequest)(nil),                  // 74: activity_service.activity_ito.ActivityDiscountVoucherRequest
	(*ActivityDiscountVoucherResponse)(nil),                 // 75: activity_service.activity_ito.ActivityDiscountVoucherResponse
	(*ActivityDiscountVoucherRetrieveRequest)(nil),          // 76: activity_service.activity_ito.ActivityDiscountVoucherRetrieveRequest
	(*ActivityUserApplyListRequest)(nil),                    // 77: activity_service.activity_ito.ActivityUserApplyListRequest
	(*ActivityUserApplyListResponse)(nil),                   // 78: activity_service.activity_ito.ActivityUserApplyListResponse
	(*ActivityUserApplyRequest)(nil),                        // 79: activity_service.activity_ito.ActivityUserApplyRequest
	(*ActivityUserApplyResponse)(nil),                       // 80: activity_service.activity_ito.ActivityUserApplyResponse
	(*ActivityUserApplyRetrieveRequest)(nil),                // 81: activity_service.activity_ito.ActivityUserApplyRetrieveRequest
	(*ActivityUserApplyUpdateRequest)(nil),                  // 82: activity_service.activity_ito.ActivityUserApplyUpdateRequest
	(*BlogContentRequest)(nil),                              // 83: activity_service.activity_ito.BlogContentRequest
	(*BlogContentResponse)(nil),                             // 84: activity_service.activity_ito.BlogContentResponse
	(*BlogInteractDestroyRequest)(nil),                      // 85: activity_service.activity_ito.BlogInteractDestroyRequest
	(*BlogInteractListRequest)(nil),                         // 86: activity_service.activity_ito.BlogInteractListRequest
	(*BlogInteractListResponse)(nil),                        // 87: activity_service.activity_ito.BlogInteractListResponse
	(*BlogInteractRequest)(nil),                             // 88: activity_service.activity_ito.BlogInteractRequest
	(*BlogInteractResponse)(nil),                            // 89: activity_service.activity_ito.BlogInteractResponse
	(*BlogInteractRetrieveRequest)(nil),                     // 90: activity_service.activity_ito.BlogInteractRetrieveRequest
	(*BlogInteractUpdateRequest)(nil),                       // 91: activity_service.activity_ito.BlogInteractUpdateRequest
	(*BlogListRequest)(nil),                                 // 92: activity_service.activity_ito.BlogListRequest
	(*BlogListResponse)(nil),                                // 93: activity_service.activity_ito.BlogListResponse
	(*BlogRequest)(nil),                                     // 94: activity_service.activity_ito.BlogRequest
	(*BlogResponse)(nil),                                    // 95: activity_service.activity_ito.BlogResponse
	(*BlogRetrieveRequest)(nil),                             // 96: activity_service.activity_ito.BlogRetrieveRequest
	(*BlogUpdateRequest)(nil),                               // 97: activity_service.activity_ito.BlogUpdateRequest
	(*CardCaresResponse)(nil),                               // 98: activity_service.activity_ito.CardCaresResponse
	(*CardNutResponse)(nil),                                 // 99: activity_service.activity_ito.CardNutResponse
	(*CardVoucherResponse)(nil),                             // 100: activity_service.activity_ito.CardVoucherResponse
	(*CtmResponse)(nil),                                     // 101: activity_service.activity_ito.CtmResponse
	(*LabelNumberValueResponse)(nil),                        // 102: activity_service.activity_ito.LabelNumberValueResponse
	(*LabelValueResponse)(nil),                              // 103: activity_service.activity_ito.LabelValueResponse
	(*NextRecordRequest)(nil),                               // 104: activity_service.activity_ito.NextRecordRequest
	(*NextSerialRequest)(nil),                               // 105: activity_service.activity_ito.NextSerialRequest
	(*OptionRequest)(nil),                                   // 106: activity_service.activity_ito.OptionRequest
	(*VoucherRecordUpdateRequest)(nil),                      // 107: activity_service.activity_ito.VoucherRecordUpdateRequest
	(*VoucherUpdateRequest)(nil),                            // 108: activity_service.activity_ito.VoucherUpdateRequest
	(*emptypb.Empty)(nil),                                   // 109: google.protobuf.Empty
}
var file_activity_ito_proto_depIdxs = []int32{
	103, // 0: activity_service.activity_ito.ActVoucherOptionResponse.titles:type_name -> activity_service.activity_ito.LabelValueResponse
	102, // 1: activity_service.activity_ito.ActVoucherOptionResponse.act_types:type_name -> activity_service.activity_ito.LabelNumberValueResponse
	102, // 2: activity_service.activity_ito.ActVoucherOptionResponse.sub_types:type_name -> activity_service.activity_ito.LabelNumberValueResponse
	13,  // 3: activity_service.activity_ito.ActivityBrandCaresListResponse.results:type_name -> activity_service.activity_ito.ActivityBrandCaresResponse
	9,   // 4: activity_service.activity_ito.ActivityBrandCaresRecordListResponse.results:type_name -> activity_service.activity_ito.ActivityBrandCaresRecordResponse
	98,  // 5: activity_service.activity_ito.ActivityBrandCaresResponse.cares:type_name -> activity_service.activity_ito.CardCaresResponse
	43,  // 6: activity_service.activity_ito.ActivityBrandListResponse.results:type_name -> activity_service.activity_ito.ActivityBrandResponse
	30,  // 7: activity_service.activity_ito.ActivityBrandNutListResponse.results:type_name -> activity_service.activity_ito.ActivityBrandNutResponse
	26,  // 8: activity_service.activity_ito.ActivityBrandNutRecordListResponse.results:type_name -> activity_service.activity_ito.ActivityBrandNutRecordResponse
	99,  // 9: activity_service.activity_ito.ActivityBrandNutResponse.nut:type_name -> activity_service.activity_ito.CardNutResponse
	102, // 10: activity_service.activity_ito.ActivityBrandOptionsResponse.type:type_name -> activity_service.activity_ito.LabelNumberValueResponse
	102, // 11: activity_service.activity_ito.ActivityBrandOptionsResponse.approve_status:type_name -> activity_service.activity_ito.LabelNumberValueResponse
	102, // 12: activity_service.activity_ito.ActivityBrandOptionsResponse.card_status:type_name -> activity_service.activity_ito.LabelNumberValueResponse
	102, // 13: activity_service.activity_ito.ActivityBrandOptionsResponse.blog_type:type_name -> activity_service.activity_ito.LabelNumberValueResponse
	102, // 14: activity_service.activity_ito.ActivityBrandOptionsResponse.platform:type_name -> activity_service.activity_ito.LabelNumberValueResponse
	39,  // 15: activity_service.activity_ito.ActivityBrandRecordListResponse.results:type_name -> activity_service.activity_ito.ActivityBrandRecordResponse
	43,  // 16: activity_service.activity_ito.ActivityBrandRecordResponse.activity:type_name -> activity_service.activity_ito.ActivityBrandResponse
	101, // 17: activity_service.activity_ito.ActivityBrandRecordResponse.ctm:type_name -> activity_service.activity_ito.CtmResponse
	60,  // 18: activity_service.activity_ito.ActivityDiscountListResponse.results:type_name -> activity_service.activity_ito.ActivityDiscountResponse
	52,  // 19: activity_service.activity_ito.ActivityDiscountProductCreateBatchListRequest.results:type_name -> activity_service.activity_ito.ActivityDiscountProductCreateBatchRequest
	62,  // 20: activity_service.activity_ito.ActivityDiscountProductCreateBatchRequest.act_sub_products:type_name -> activity_service.activity_ito.ActivityDiscountSubProductRequest
	57,  // 21: activity_service.activity_ito.ActivityDiscountProductListResponse.results:type_name -> activity_service.activity_ito.ActivityDiscountProductResponse
	62,  // 22: activity_service.activity_ito.ActivityDiscountProductRequest.act_sub_products:type_name -> activity_service.activity_ito.ActivityDiscountSubProductRequest
	63,  // 23: activity_service.activity_ito.ActivityDiscountProductResponse.act_sub_products:type_name -> activity_service.activity_ito.ActivityDiscountSubProductResponse
	60,  // 24: activity_service.activity_ito.ActivityDiscountProductResponse.activity:type_name -> activity_service.activity_ito.ActivityDiscountResponse
	62,  // 25: activity_service.activity_ito.ActivityDiscountProductUpdateRequest.act_sub_products:type_name -> activity_service.activity_ito.ActivityDiscountSubProductRequest
	60,  // 26: activity_service.activity_ito.ActivityDiscountSubProductResponse.activity:type_name -> activity_service.activity_ito.ActivityDiscountResponse
	75,  // 27: activity_service.activity_ito.ActivityDiscountVoucherListResponse.results:type_name -> activity_service.activity_ito.ActivityDiscountVoucherResponse
	72,  // 28: activity_service.activity_ito.ActivityDiscountVoucherRecordListResponse.results:type_name -> activity_service.activity_ito.ActivityDiscountVoucherRecordResponse
	60,  // 29: activity_service.activity_ito.ActivityDiscountVoucherResponse.activity_info:type_name -> activity_service.activity_ito.ActivityDiscountResponse
	100, // 30: activity_service.activity_ito.ActivityDiscountVoucherResponse.voucher_info:type_name -> activity_service.activity_ito.CardVoucherResponse
	80,  // 31: activity_service.activity_ito.ActivityUserApplyListResponse.results:type_name -> activity_service.activity_ito.ActivityUserApplyResponse
	43,  // 32: activity_service.activity_ito.ActivityUserApplyResponse.activity:type_name -> activity_service.activity_ito.ActivityBrandResponse
	101, // 33: activity_service.activity_ito.ActivityUserApplyResponse.ctm:type_name -> activity_service.activity_ito.CtmResponse
	89,  // 34: activity_service.activity_ito.BlogInteractListResponse.results:type_name -> activity_service.activity_ito.BlogInteractResponse
	95,  // 35: activity_service.activity_ito.BlogListResponse.results:type_name -> activity_service.activity_ito.BlogResponse
	83,  // 36: activity_service.activity_ito.BlogRequest.content:type_name -> activity_service.activity_ito.BlogContentRequest
	43,  // 37: activity_service.activity_ito.BlogResponse.activity:type_name -> activity_service.activity_ito.ActivityBrandResponse
	84,  // 38: activity_service.activity_ito.BlogResponse.content:type_name -> activity_service.activity_ito.BlogContentResponse
	83,  // 39: activity_service.activity_ito.BlogUpdateRequest.content:type_name -> activity_service.activity_ito.BlogContentRequest
	94,  // 40: activity_service.activity_ito.ActivityBrandController.BlogCreate:input_type -> activity_service.activity_ito.BlogRequest
	1,   // 41: activity_service.activity_ito.ActivityBrandController.BlogDestroy:input_type -> activity_service.activity_ito.ActivityBrandBlogDestroyRequest
	88,  // 42: activity_service.activity_ito.ActivityBrandController.BlogInteractCreate:input_type -> activity_service.activity_ito.BlogInteractRequest
	85,  // 43: activity_service.activity_ito.ActivityBrandController.BlogInteractDestroy:input_type -> activity_service.activity_ito.BlogInteractDestroyRequest
	86,  // 44: activity_service.activity_ito.ActivityBrandController.BlogInteractList:input_type -> activity_service.activity_ito.BlogInteractListRequest
	90,  // 45: activity_service.activity_ito.ActivityBrandController.BlogInteractRetrieve:input_type -> activity_service.activity_ito.BlogInteractRetrieveRequest
	91,  // 46: activity_service.activity_ito.ActivityBrandController.BlogInteractUpdate:input_type -> activity_service.activity_ito.BlogInteractUpdateRequest
	92,  // 47: activity_service.activity_ito.ActivityBrandController.BlogList:input_type -> activity_service.activity_ito.BlogListRequest
	96,  // 48: activity_service.activity_ito.ActivityBrandController.BlogRetrieve:input_type -> activity_service.activity_ito.BlogRetrieveRequest
	97,  // 49: activity_service.activity_ito.ActivityBrandController.BlogUpdate:input_type -> activity_service.activity_ito.BlogUpdateRequest
	12,  // 50: activity_service.activity_ito.ActivityBrandController.CaresCreate:input_type -> activity_service.activity_ito.ActivityBrandCaresRequest
	2,   // 51: activity_service.activity_ito.ActivityBrandController.CaresDestroy:input_type -> activity_service.activity_ito.ActivityBrandCaresDestroyRequest
	3,   // 52: activity_service.activity_ito.ActivityBrandController.CaresList:input_type -> activity_service.activity_ito.ActivityBrandCaresListRequest
	8,   // 53: activity_service.activity_ito.ActivityBrandController.CaresRecordCreate:input_type -> activity_service.activity_ito.ActivityBrandCaresRecordRequest
	5,   // 54: activity_service.activity_ito.ActivityBrandController.CaresRecordDestroy:input_type -> activity_service.activity_ito.ActivityBrandCaresRecordDestroyRequest
	6,   // 55: activity_service.activity_ito.ActivityBrandController.CaresRecordList:input_type -> activity_service.activity_ito.ActivityBrandCaresRecordListRequest
	10,  // 56: activity_service.activity_ito.ActivityBrandController.CaresRecordRetrieve:input_type -> activity_service.activity_ito.ActivityBrandCaresRecordRetrieveRequest
	11,  // 57: activity_service.activity_ito.ActivityBrandController.CaresRecordUpdate:input_type -> activity_service.activity_ito.ActivityBrandCaresRecordUpdateRequest
	14,  // 58: activity_service.activity_ito.ActivityBrandController.CaresRetrieve:input_type -> activity_service.activity_ito.ActivityBrandCaresRetrieveRequest
	15,  // 59: activity_service.activity_ito.ActivityBrandController.CaresUpdate:input_type -> activity_service.activity_ito.ActivityBrandCaresUpdateRequest
	42,  // 60: activity_service.activity_ito.ActivityBrandController.Create:input_type -> activity_service.activity_ito.ActivityBrandRequest
	16,  // 61: activity_service.activity_ito.ActivityBrandController.Destroy:input_type -> activity_service.activity_ito.ActivityBrandDestroyRequest
	17,  // 62: activity_service.activity_ito.ActivityBrandController.List:input_type -> activity_service.activity_ito.ActivityBrandListRequest
	29,  // 63: activity_service.activity_ito.ActivityBrandController.NutCreate:input_type -> activity_service.activity_ito.ActivityBrandNutRequest
	19,  // 64: activity_service.activity_ito.ActivityBrandController.NutDestroy:input_type -> activity_service.activity_ito.ActivityBrandNutDestroyRequest
	20,  // 65: activity_service.activity_ito.ActivityBrandController.NutList:input_type -> activity_service.activity_ito.ActivityBrandNutListRequest
	25,  // 66: activity_service.activity_ito.ActivityBrandController.NutRecordCreate:input_type -> activity_service.activity_ito.ActivityBrandNutRecordRequest
	22,  // 67: activity_service.activity_ito.ActivityBrandController.NutRecordDestroy:input_type -> activity_service.activity_ito.ActivityBrandNutRecordDestroyRequest
	23,  // 68: activity_service.activity_ito.ActivityBrandController.NutRecordList:input_type -> activity_service.activity_ito.ActivityBrandNutRecordListRequest
	27,  // 69: activity_service.activity_ito.ActivityBrandController.NutRecordRetrieve:input_type -> activity_service.activity_ito.ActivityBrandNutRecordRetrieveRequest
	28,  // 70: activity_service.activity_ito.ActivityBrandController.NutRecordUpdate:input_type -> activity_service.activity_ito.ActivityBrandNutRecordUpdateRequest
	31,  // 71: activity_service.activity_ito.ActivityBrandController.NutRetrieve:input_type -> activity_service.activity_ito.ActivityBrandNutRetrieveRequest
	32,  // 72: activity_service.activity_ito.ActivityBrandController.NutUpdate:input_type -> activity_service.activity_ito.ActivityBrandNutUpdateRequest
	109, // 73: activity_service.activity_ito.ActivityBrandController.Options:input_type -> google.protobuf.Empty
	34,  // 74: activity_service.activity_ito.ActivityBrandController.PartialUpdate:input_type -> activity_service.activity_ito.ActivityBrandPartialUpdateRequest
	38,  // 75: activity_service.activity_ito.ActivityBrandController.RecordCreate:input_type -> activity_service.activity_ito.ActivityBrandRecordRequest
	35,  // 76: activity_service.activity_ito.ActivityBrandController.RecordDestroy:input_type -> activity_service.activity_ito.ActivityBrandRecordDestroyRequest
	36,  // 77: activity_service.activity_ito.ActivityBrandController.RecordList:input_type -> activity_service.activity_ito.ActivityBrandRecordListRequest
	40,  // 78: activity_service.activity_ito.ActivityBrandController.RecordRetrieve:input_type -> activity_service.activity_ito.ActivityBrandRecordRetrieveRequest
	41,  // 79: activity_service.activity_ito.ActivityBrandController.RecordUpdate:input_type -> activity_service.activity_ito.ActivityBrandRecordUpdateRequest
	44,  // 80: activity_service.activity_ito.ActivityBrandController.Retrieve:input_type -> activity_service.activity_ito.ActivityBrandRetrieveRequest
	42,  // 81: activity_service.activity_ito.ActivityBrandController.Update:input_type -> activity_service.activity_ito.ActivityBrandRequest
	79,  // 82: activity_service.activity_ito.ActivityBrandController.UserApplyCreate:input_type -> activity_service.activity_ito.ActivityUserApplyRequest
	45,  // 83: activity_service.activity_ito.ActivityBrandController.UserApplyDestroy:input_type -> activity_service.activity_ito.ActivityBrandUserApplyDestroyRequest
	77,  // 84: activity_service.activity_ito.ActivityBrandController.UserApplyList:input_type -> activity_service.activity_ito.ActivityUserApplyListRequest
	81,  // 85: activity_service.activity_ito.ActivityBrandController.UserApplyRetrieve:input_type -> activity_service.activity_ito.ActivityUserApplyRetrieveRequest
	82,  // 86: activity_service.activity_ito.ActivityBrandController.UserApplyUpdate:input_type -> activity_service.activity_ito.ActivityUserApplyUpdateRequest
	59,  // 87: activity_service.activity_ito.ActivityDiscountController.Create:input_type -> activity_service.activity_ito.ActivityDiscountRequest
	46,  // 88: activity_service.activity_ito.ActivityDiscountController.Destroy:input_type -> activity_service.activity_ito.ActivityDiscountDestroyRequest
	47,  // 89: activity_service.activity_ito.ActivityDiscountController.List:input_type -> activity_service.activity_ito.ActivityDiscountListRequest
	105, // 90: activity_service.activity_ito.ActivityDiscountController.NextSerial:input_type -> activity_service.activity_ito.NextSerialRequest
	106, // 91: activity_service.activity_ito.ActivityDiscountController.Options:input_type -> activity_service.activity_ito.OptionRequest
	50,  // 92: activity_service.activity_ito.ActivityDiscountController.PartialUpdate:input_type -> activity_service.activity_ito.ActivityDiscountPartialUpdateRequest
	56,  // 93: activity_service.activity_ito.ActivityDiscountController.ProductCreate:input_type -> activity_service.activity_ito.ActivityDiscountProductRequest
	51,  // 94: activity_service.activity_ito.ActivityDiscountController.ProductCreateBatch:input_type -> activity_service.activity_ito.ActivityDiscountProductCreateBatchListRequest
	53,  // 95: activity_service.activity_ito.ActivityDiscountController.ProductDestroy:input_type -> activity_service.activity_ito.ActivityDiscountProductDestroyRequest
	54,  // 96: activity_service.activity_ito.ActivityDiscountController.ProductList:input_type -> activity_service.activity_ito.ActivityDiscountProductListRequest
	58,  // 97: activity_service.activity_ito.ActivityDiscountController.ProductUpdate:input_type -> activity_service.activity_ito.ActivityDiscountProductUpdateRequest
	61,  // 98: activity_service.activity_ito.ActivityDiscountController.Retrieve:input_type -> activity_service.activity_ito.ActivityDiscountRetrieveRequest
	59,  // 99: activity_service.activity_ito.ActivityDiscountController.Update:input_type -> activity_service.activity_ito.ActivityDiscountRequest
	74,  // 100: activity_service.activity_ito.ActivityDiscountController.VoucherCreate:input_type -> activity_service.activity_ito.ActivityDiscountVoucherRequest
	64,  // 101: activity_service.activity_ito.ActivityDiscountController.VoucherDestroy:input_type -> activity_service.activity_ito.ActivityDiscountVoucherDestroyRequest
	65,  // 102: activity_service.activity_ito.ActivityDiscountController.VoucherList:input_type -> activity_service.activity_ito.ActivityDiscountVoucherListRequest
	71,  // 103: activity_service.activity_ito.ActivityDiscountController.VoucherRecordCreate:input_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordRequest
	67,  // 104: activity_service.activity_ito.ActivityDiscountController.VoucherRecordDestroy:input_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordDestroyRequest
	68,  // 105: activity_service.activity_ito.ActivityDiscountController.VoucherRecordList:input_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordListRequest
	104, // 106: activity_service.activity_ito.ActivityDiscountController.VoucherRecordNextSerial:input_type -> activity_service.activity_ito.NextRecordRequest
	73,  // 107: activity_service.activity_ito.ActivityDiscountController.VoucherRecordRetrieve:input_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordRetrieveRequest
	107, // 108: activity_service.activity_ito.ActivityDiscountController.VoucherRecordUpdate:input_type -> activity_service.activity_ito.VoucherRecordUpdateRequest
	76,  // 109: activity_service.activity_ito.ActivityDiscountController.VoucherRetrieve:input_type -> activity_service.activity_ito.ActivityDiscountVoucherRetrieveRequest
	108, // 110: activity_service.activity_ito.ActivityDiscountController.VoucherUpdate:input_type -> activity_service.activity_ito.VoucherUpdateRequest
	95,  // 111: activity_service.activity_ito.ActivityBrandController.BlogCreate:output_type -> activity_service.activity_ito.BlogResponse
	109, // 112: activity_service.activity_ito.ActivityBrandController.BlogDestroy:output_type -> google.protobuf.Empty
	89,  // 113: activity_service.activity_ito.ActivityBrandController.BlogInteractCreate:output_type -> activity_service.activity_ito.BlogInteractResponse
	109, // 114: activity_service.activity_ito.ActivityBrandController.BlogInteractDestroy:output_type -> google.protobuf.Empty
	87,  // 115: activity_service.activity_ito.ActivityBrandController.BlogInteractList:output_type -> activity_service.activity_ito.BlogInteractListResponse
	89,  // 116: activity_service.activity_ito.ActivityBrandController.BlogInteractRetrieve:output_type -> activity_service.activity_ito.BlogInteractResponse
	89,  // 117: activity_service.activity_ito.ActivityBrandController.BlogInteractUpdate:output_type -> activity_service.activity_ito.BlogInteractResponse
	93,  // 118: activity_service.activity_ito.ActivityBrandController.BlogList:output_type -> activity_service.activity_ito.BlogListResponse
	95,  // 119: activity_service.activity_ito.ActivityBrandController.BlogRetrieve:output_type -> activity_service.activity_ito.BlogResponse
	95,  // 120: activity_service.activity_ito.ActivityBrandController.BlogUpdate:output_type -> activity_service.activity_ito.BlogResponse
	13,  // 121: activity_service.activity_ito.ActivityBrandController.CaresCreate:output_type -> activity_service.activity_ito.ActivityBrandCaresResponse
	109, // 122: activity_service.activity_ito.ActivityBrandController.CaresDestroy:output_type -> google.protobuf.Empty
	4,   // 123: activity_service.activity_ito.ActivityBrandController.CaresList:output_type -> activity_service.activity_ito.ActivityBrandCaresListResponse
	9,   // 124: activity_service.activity_ito.ActivityBrandController.CaresRecordCreate:output_type -> activity_service.activity_ito.ActivityBrandCaresRecordResponse
	109, // 125: activity_service.activity_ito.ActivityBrandController.CaresRecordDestroy:output_type -> google.protobuf.Empty
	7,   // 126: activity_service.activity_ito.ActivityBrandController.CaresRecordList:output_type -> activity_service.activity_ito.ActivityBrandCaresRecordListResponse
	9,   // 127: activity_service.activity_ito.ActivityBrandController.CaresRecordRetrieve:output_type -> activity_service.activity_ito.ActivityBrandCaresRecordResponse
	9,   // 128: activity_service.activity_ito.ActivityBrandController.CaresRecordUpdate:output_type -> activity_service.activity_ito.ActivityBrandCaresRecordResponse
	13,  // 129: activity_service.activity_ito.ActivityBrandController.CaresRetrieve:output_type -> activity_service.activity_ito.ActivityBrandCaresResponse
	13,  // 130: activity_service.activity_ito.ActivityBrandController.CaresUpdate:output_type -> activity_service.activity_ito.ActivityBrandCaresResponse
	43,  // 131: activity_service.activity_ito.ActivityBrandController.Create:output_type -> activity_service.activity_ito.ActivityBrandResponse
	109, // 132: activity_service.activity_ito.ActivityBrandController.Destroy:output_type -> google.protobuf.Empty
	18,  // 133: activity_service.activity_ito.ActivityBrandController.List:output_type -> activity_service.activity_ito.ActivityBrandListResponse
	30,  // 134: activity_service.activity_ito.ActivityBrandController.NutCreate:output_type -> activity_service.activity_ito.ActivityBrandNutResponse
	109, // 135: activity_service.activity_ito.ActivityBrandController.NutDestroy:output_type -> google.protobuf.Empty
	21,  // 136: activity_service.activity_ito.ActivityBrandController.NutList:output_type -> activity_service.activity_ito.ActivityBrandNutListResponse
	26,  // 137: activity_service.activity_ito.ActivityBrandController.NutRecordCreate:output_type -> activity_service.activity_ito.ActivityBrandNutRecordResponse
	109, // 138: activity_service.activity_ito.ActivityBrandController.NutRecordDestroy:output_type -> google.protobuf.Empty
	24,  // 139: activity_service.activity_ito.ActivityBrandController.NutRecordList:output_type -> activity_service.activity_ito.ActivityBrandNutRecordListResponse
	26,  // 140: activity_service.activity_ito.ActivityBrandController.NutRecordRetrieve:output_type -> activity_service.activity_ito.ActivityBrandNutRecordResponse
	26,  // 141: activity_service.activity_ito.ActivityBrandController.NutRecordUpdate:output_type -> activity_service.activity_ito.ActivityBrandNutRecordResponse
	30,  // 142: activity_service.activity_ito.ActivityBrandController.NutRetrieve:output_type -> activity_service.activity_ito.ActivityBrandNutResponse
	30,  // 143: activity_service.activity_ito.ActivityBrandController.NutUpdate:output_type -> activity_service.activity_ito.ActivityBrandNutResponse
	33,  // 144: activity_service.activity_ito.ActivityBrandController.Options:output_type -> activity_service.activity_ito.ActivityBrandOptionsResponse
	43,  // 145: activity_service.activity_ito.ActivityBrandController.PartialUpdate:output_type -> activity_service.activity_ito.ActivityBrandResponse
	39,  // 146: activity_service.activity_ito.ActivityBrandController.RecordCreate:output_type -> activity_service.activity_ito.ActivityBrandRecordResponse
	109, // 147: activity_service.activity_ito.ActivityBrandController.RecordDestroy:output_type -> google.protobuf.Empty
	37,  // 148: activity_service.activity_ito.ActivityBrandController.RecordList:output_type -> activity_service.activity_ito.ActivityBrandRecordListResponse
	39,  // 149: activity_service.activity_ito.ActivityBrandController.RecordRetrieve:output_type -> activity_service.activity_ito.ActivityBrandRecordResponse
	39,  // 150: activity_service.activity_ito.ActivityBrandController.RecordUpdate:output_type -> activity_service.activity_ito.ActivityBrandRecordResponse
	43,  // 151: activity_service.activity_ito.ActivityBrandController.Retrieve:output_type -> activity_service.activity_ito.ActivityBrandResponse
	43,  // 152: activity_service.activity_ito.ActivityBrandController.Update:output_type -> activity_service.activity_ito.ActivityBrandResponse
	80,  // 153: activity_service.activity_ito.ActivityBrandController.UserApplyCreate:output_type -> activity_service.activity_ito.ActivityUserApplyResponse
	109, // 154: activity_service.activity_ito.ActivityBrandController.UserApplyDestroy:output_type -> google.protobuf.Empty
	78,  // 155: activity_service.activity_ito.ActivityBrandController.UserApplyList:output_type -> activity_service.activity_ito.ActivityUserApplyListResponse
	80,  // 156: activity_service.activity_ito.ActivityBrandController.UserApplyRetrieve:output_type -> activity_service.activity_ito.ActivityUserApplyResponse
	80,  // 157: activity_service.activity_ito.ActivityBrandController.UserApplyUpdate:output_type -> activity_service.activity_ito.ActivityUserApplyResponse
	60,  // 158: activity_service.activity_ito.ActivityDiscountController.Create:output_type -> activity_service.activity_ito.ActivityDiscountResponse
	109, // 159: activity_service.activity_ito.ActivityDiscountController.Destroy:output_type -> google.protobuf.Empty
	48,  // 160: activity_service.activity_ito.ActivityDiscountController.List:output_type -> activity_service.activity_ito.ActivityDiscountListResponse
	49,  // 161: activity_service.activity_ito.ActivityDiscountController.NextSerial:output_type -> activity_service.activity_ito.ActivityDiscountNextSerialResponse
	0,   // 162: activity_service.activity_ito.ActivityDiscountController.Options:output_type -> activity_service.activity_ito.ActVoucherOptionResponse
	60,  // 163: activity_service.activity_ito.ActivityDiscountController.PartialUpdate:output_type -> activity_service.activity_ito.ActivityDiscountResponse
	57,  // 164: activity_service.activity_ito.ActivityDiscountController.ProductCreate:output_type -> activity_service.activity_ito.ActivityDiscountProductResponse
	55,  // 165: activity_service.activity_ito.ActivityDiscountController.ProductCreateBatch:output_type -> activity_service.activity_ito.ActivityDiscountProductListResponse
	109, // 166: activity_service.activity_ito.ActivityDiscountController.ProductDestroy:output_type -> google.protobuf.Empty
	55,  // 167: activity_service.activity_ito.ActivityDiscountController.ProductList:output_type -> activity_service.activity_ito.ActivityDiscountProductListResponse
	57,  // 168: activity_service.activity_ito.ActivityDiscountController.ProductUpdate:output_type -> activity_service.activity_ito.ActivityDiscountProductResponse
	60,  // 169: activity_service.activity_ito.ActivityDiscountController.Retrieve:output_type -> activity_service.activity_ito.ActivityDiscountResponse
	60,  // 170: activity_service.activity_ito.ActivityDiscountController.Update:output_type -> activity_service.activity_ito.ActivityDiscountResponse
	75,  // 171: activity_service.activity_ito.ActivityDiscountController.VoucherCreate:output_type -> activity_service.activity_ito.ActivityDiscountVoucherResponse
	109, // 172: activity_service.activity_ito.ActivityDiscountController.VoucherDestroy:output_type -> google.protobuf.Empty
	66,  // 173: activity_service.activity_ito.ActivityDiscountController.VoucherList:output_type -> activity_service.activity_ito.ActivityDiscountVoucherListResponse
	72,  // 174: activity_service.activity_ito.ActivityDiscountController.VoucherRecordCreate:output_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordResponse
	109, // 175: activity_service.activity_ito.ActivityDiscountController.VoucherRecordDestroy:output_type -> google.protobuf.Empty
	69,  // 176: activity_service.activity_ito.ActivityDiscountController.VoucherRecordList:output_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordListResponse
	70,  // 177: activity_service.activity_ito.ActivityDiscountController.VoucherRecordNextSerial:output_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordNextSerialResponse
	72,  // 178: activity_service.activity_ito.ActivityDiscountController.VoucherRecordRetrieve:output_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordResponse
	72,  // 179: activity_service.activity_ito.ActivityDiscountController.VoucherRecordUpdate:output_type -> activity_service.activity_ito.ActivityDiscountVoucherRecordResponse
	75,  // 180: activity_service.activity_ito.ActivityDiscountController.VoucherRetrieve:output_type -> activity_service.activity_ito.ActivityDiscountVoucherResponse
	75,  // 181: activity_service.activity_ito.ActivityDiscountController.VoucherUpdate:output_type -> activity_service.activity_ito.ActivityDiscountVoucherResponse
	111, // [111:182] is the sub-list for method output_type
	40,  // [40:111] is the sub-list for method input_type
	40,  // [40:40] is the sub-list for extension type_name
	40,  // [40:40] is the sub-list for extension extendee
	0,   // [0:40] is the sub-list for field type_name
}

func init() { file_activity_ito_proto_init() }
func file_activity_ito_proto_init() {
	if File_activity_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_activity_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActVoucherOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandBlogDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRecordDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRecordListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRecordListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRecordRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRecordUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandCaresUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRecordDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRecordListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRecordListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRecordRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRecordUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandNutUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRecordDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRecordListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRecordListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRecordRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRecordUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBrandUserApplyDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountNextSerialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductCreateBatchListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductCreateBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountProductUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountSubProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountSubProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRecordDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRecordListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRecordListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRecordNextSerialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRecordRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDiscountVoucherRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUserApplyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUserApplyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUserApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUserApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUserApplyRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUserApplyUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogInteractDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogInteractListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogInteractListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogInteractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogInteractRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogInteractUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlogUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCaresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextSerialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoucherRecordUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_ito_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoucherUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_activity_ito_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[89].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[91].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[97].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[99].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[101].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[107].OneofWrappers = []interface{}{}
	file_activity_ito_proto_msgTypes[108].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_activity_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   109,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_activity_ito_proto_goTypes,
		DependencyIndexes: file_activity_ito_proto_depIdxs,
		MessageInfos:      file_activity_ito_proto_msgTypes,
	}.Build()
	File_activity_ito_proto = out.File
	file_activity_ito_proto_rawDesc = nil
	file_activity_ito_proto_goTypes = nil
	file_activity_ito_proto_depIdxs = nil
}
