// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rawgoods.proto

package pbrawgoodsito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProdPropertiesController_List_FullMethodName = "/product_service.prod_ito.ProdPropertiesController/List"
)

// ProdPropertiesControllerClient is the client API for ProdPropertiesController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdPropertiesControllerClient interface {
	List(ctx context.Context, in *ProdPropertiesListRequest, opts ...grpc.CallOption) (*ProdPropertiesListResponse, error)
}

type prodPropertiesControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProdPropertiesControllerClient(cc grpc.ClientConnInterface) ProdPropertiesControllerClient {
	return &prodPropertiesControllerClient{cc}
}

func (c *prodPropertiesControllerClient) List(ctx context.Context, in *ProdPropertiesListRequest, opts ...grpc.CallOption) (*ProdPropertiesListResponse, error) {
	out := new(ProdPropertiesListResponse)
	err := c.cc.Invoke(ctx, ProdPropertiesController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdPropertiesControllerServer is the server API for ProdPropertiesController service.
// All implementations must embed UnimplementedProdPropertiesControllerServer
// for forward compatibility
type ProdPropertiesControllerServer interface {
	List(context.Context, *ProdPropertiesListRequest) (*ProdPropertiesListResponse, error)
	mustEmbedUnimplementedProdPropertiesControllerServer()
}

// UnimplementedProdPropertiesControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProdPropertiesControllerServer struct {
}

func (UnimplementedProdPropertiesControllerServer) List(context.Context, *ProdPropertiesListRequest) (*ProdPropertiesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProdPropertiesControllerServer) mustEmbedUnimplementedProdPropertiesControllerServer() {
}

// UnsafeProdPropertiesControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdPropertiesControllerServer will
// result in compilation errors.
type UnsafeProdPropertiesControllerServer interface {
	mustEmbedUnimplementedProdPropertiesControllerServer()
}

func RegisterProdPropertiesControllerServer(s grpc.ServiceRegistrar, srv ProdPropertiesControllerServer) {
	s.RegisterService(&ProdPropertiesController_ServiceDesc, srv)
}

func _ProdPropertiesController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdPropertiesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdPropertiesControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdPropertiesController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdPropertiesControllerServer).List(ctx, req.(*ProdPropertiesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdPropertiesController_ServiceDesc is the grpc.ServiceDesc for ProdPropertiesController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdPropertiesController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.prod_ito.ProdPropertiesController",
	HandlerType: (*ProdPropertiesControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProdPropertiesController_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawgoods.proto",
}

const (
	ProductController_List_FullMethodName = "/product_service.prod_ito.ProductController/List"
)

// ProductControllerClient is the client API for ProductController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductControllerClient interface {
	List(ctx context.Context, in *ProductModelListRequest, opts ...grpc.CallOption) (*ProductModelListResponse, error)
}

type productControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductControllerClient(cc grpc.ClientConnInterface) ProductControllerClient {
	return &productControllerClient{cc}
}

func (c *productControllerClient) List(ctx context.Context, in *ProductModelListRequest, opts ...grpc.CallOption) (*ProductModelListResponse, error) {
	out := new(ProductModelListResponse)
	err := c.cc.Invoke(ctx, ProductController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductControllerServer is the server API for ProductController service.
// All implementations must embed UnimplementedProductControllerServer
// for forward compatibility
type ProductControllerServer interface {
	List(context.Context, *ProductModelListRequest) (*ProductModelListResponse, error)
	mustEmbedUnimplementedProductControllerServer()
}

// UnimplementedProductControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProductControllerServer struct {
}

func (UnimplementedProductControllerServer) List(context.Context, *ProductModelListRequest) (*ProductModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductControllerServer) mustEmbedUnimplementedProductControllerServer() {}

// UnsafeProductControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductControllerServer will
// result in compilation errors.
type UnsafeProductControllerServer interface {
	mustEmbedUnimplementedProductControllerServer()
}

func RegisterProductControllerServer(s grpc.ServiceRegistrar, srv ProductControllerServer) {
	s.RegisterService(&ProductController_ServiceDesc, srv)
}

func _ProductController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).List(ctx, req.(*ProductModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductController_ServiceDesc is the grpc.ServiceDesc for ProductController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.prod_ito.ProductController",
	HandlerType: (*ProductControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProductController_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawgoods.proto",
}
