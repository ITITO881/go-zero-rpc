// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rfid_ito.proto

package pbrfid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RfidSystemController_Create_FullMethodName        = "/rfid_service.rfid_ito.RfidSystemController/Create"
	RfidSystemController_Destroy_FullMethodName       = "/rfid_service.rfid_ito.RfidSystemController/Destroy"
	RfidSystemController_List_FullMethodName          = "/rfid_service.rfid_ito.RfidSystemController/List"
	RfidSystemController_PartialUpdate_FullMethodName = "/rfid_service.rfid_ito.RfidSystemController/PartialUpdate"
	RfidSystemController_Retrieve_FullMethodName      = "/rfid_service.rfid_ito.RfidSystemController/Retrieve"
	RfidSystemController_Update_FullMethodName        = "/rfid_service.rfid_ito.RfidSystemController/Update"
	RfidSystemController_UserWarehouse_FullMethodName = "/rfid_service.rfid_ito.RfidSystemController/UserWarehouse"
)

// RfidSystemControllerClient is the client API for RfidSystemController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RfidSystemControllerClient interface {
	Create(ctx context.Context, in *KeyCustomerModelRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error)
	Destroy(ctx context.Context, in *KeyCustomerModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *KeyCustomerModelListRequest, opts ...grpc.CallOption) (*KeyCustomerModelListResponse, error)
	PartialUpdate(ctx context.Context, in *KeyCustomerModelPartialUpdateRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error)
	Retrieve(ctx context.Context, in *KeyCustomerModelRetrieveRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error)
	Update(ctx context.Context, in *KeyCustomerModelRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error)
	UserWarehouse(ctx context.Context, in *SysUserWarehouseRequest, opts ...grpc.CallOption) (*SysUserWarehouseResponse, error)
}

type rfidSystemControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRfidSystemControllerClient(cc grpc.ClientConnInterface) RfidSystemControllerClient {
	return &rfidSystemControllerClient{cc}
}

func (c *rfidSystemControllerClient) Create(ctx context.Context, in *KeyCustomerModelRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error) {
	out := new(KeyCustomerModelResponse)
	err := c.cc.Invoke(ctx, RfidSystemController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidSystemControllerClient) Destroy(ctx context.Context, in *KeyCustomerModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RfidSystemController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidSystemControllerClient) List(ctx context.Context, in *KeyCustomerModelListRequest, opts ...grpc.CallOption) (*KeyCustomerModelListResponse, error) {
	out := new(KeyCustomerModelListResponse)
	err := c.cc.Invoke(ctx, RfidSystemController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidSystemControllerClient) PartialUpdate(ctx context.Context, in *KeyCustomerModelPartialUpdateRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error) {
	out := new(KeyCustomerModelResponse)
	err := c.cc.Invoke(ctx, RfidSystemController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidSystemControllerClient) Retrieve(ctx context.Context, in *KeyCustomerModelRetrieveRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error) {
	out := new(KeyCustomerModelResponse)
	err := c.cc.Invoke(ctx, RfidSystemController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidSystemControllerClient) Update(ctx context.Context, in *KeyCustomerModelRequest, opts ...grpc.CallOption) (*KeyCustomerModelResponse, error) {
	out := new(KeyCustomerModelResponse)
	err := c.cc.Invoke(ctx, RfidSystemController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidSystemControllerClient) UserWarehouse(ctx context.Context, in *SysUserWarehouseRequest, opts ...grpc.CallOption) (*SysUserWarehouseResponse, error) {
	out := new(SysUserWarehouseResponse)
	err := c.cc.Invoke(ctx, RfidSystemController_UserWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RfidSystemControllerServer is the server API for RfidSystemController service.
// All implementations must embed UnimplementedRfidSystemControllerServer
// for forward compatibility
type RfidSystemControllerServer interface {
	Create(context.Context, *KeyCustomerModelRequest) (*KeyCustomerModelResponse, error)
	Destroy(context.Context, *KeyCustomerModelDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *KeyCustomerModelListRequest) (*KeyCustomerModelListResponse, error)
	PartialUpdate(context.Context, *KeyCustomerModelPartialUpdateRequest) (*KeyCustomerModelResponse, error)
	Retrieve(context.Context, *KeyCustomerModelRetrieveRequest) (*KeyCustomerModelResponse, error)
	Update(context.Context, *KeyCustomerModelRequest) (*KeyCustomerModelResponse, error)
	UserWarehouse(context.Context, *SysUserWarehouseRequest) (*SysUserWarehouseResponse, error)
	mustEmbedUnimplementedRfidSystemControllerServer()
}

// UnimplementedRfidSystemControllerServer must be embedded to have forward compatible implementations.
type UnimplementedRfidSystemControllerServer struct {
}

func (UnimplementedRfidSystemControllerServer) Create(context.Context, *KeyCustomerModelRequest) (*KeyCustomerModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRfidSystemControllerServer) Destroy(context.Context, *KeyCustomerModelDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedRfidSystemControllerServer) List(context.Context, *KeyCustomerModelListRequest) (*KeyCustomerModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRfidSystemControllerServer) PartialUpdate(context.Context, *KeyCustomerModelPartialUpdateRequest) (*KeyCustomerModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedRfidSystemControllerServer) Retrieve(context.Context, *KeyCustomerModelRetrieveRequest) (*KeyCustomerModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedRfidSystemControllerServer) Update(context.Context, *KeyCustomerModelRequest) (*KeyCustomerModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRfidSystemControllerServer) UserWarehouse(context.Context, *SysUserWarehouseRequest) (*SysUserWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWarehouse not implemented")
}
func (UnimplementedRfidSystemControllerServer) mustEmbedUnimplementedRfidSystemControllerServer() {}

// UnsafeRfidSystemControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RfidSystemControllerServer will
// result in compilation errors.
type UnsafeRfidSystemControllerServer interface {
	mustEmbedUnimplementedRfidSystemControllerServer()
}

func RegisterRfidSystemControllerServer(s grpc.ServiceRegistrar, srv RfidSystemControllerServer) {
	s.RegisterService(&RfidSystemController_ServiceDesc, srv)
}

func _RfidSystemController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCustomerModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidSystemControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidSystemController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidSystemControllerServer).Create(ctx, req.(*KeyCustomerModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidSystemController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCustomerModelDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidSystemControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidSystemController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidSystemControllerServer).Destroy(ctx, req.(*KeyCustomerModelDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidSystemController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCustomerModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidSystemControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidSystemController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidSystemControllerServer).List(ctx, req.(*KeyCustomerModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidSystemController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCustomerModelPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidSystemControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidSystemController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidSystemControllerServer).PartialUpdate(ctx, req.(*KeyCustomerModelPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidSystemController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCustomerModelRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidSystemControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidSystemController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidSystemControllerServer).Retrieve(ctx, req.(*KeyCustomerModelRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidSystemController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCustomerModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidSystemControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidSystemController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidSystemControllerServer).Update(ctx, req.(*KeyCustomerModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidSystemController_UserWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidSystemControllerServer).UserWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidSystemController_UserWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidSystemControllerServer).UserWarehouse(ctx, req.(*SysUserWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RfidSystemController_ServiceDesc is the grpc.ServiceDesc for RfidSystemController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RfidSystemController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfid_service.rfid_ito.RfidSystemController",
	HandlerType: (*RfidSystemControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RfidSystemController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _RfidSystemController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RfidSystemController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _RfidSystemController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _RfidSystemController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RfidSystemController_Update_Handler,
		},
		{
			MethodName: "UserWarehouse",
			Handler:    _RfidSystemController_UserWarehouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rfid_ito.proto",
}

const (
	RfidWarehouseController_Create_FullMethodName            = "/rfid_service.rfid_ito.RfidWarehouseController/Create"
	RfidWarehouseController_Destroy_FullMethodName           = "/rfid_service.rfid_ito.RfidWarehouseController/Destroy"
	RfidWarehouseController_List_FullMethodName              = "/rfid_service.rfid_ito.RfidWarehouseController/List"
	RfidWarehouseController_PartialUpdate_FullMethodName     = "/rfid_service.rfid_ito.RfidWarehouseController/PartialUpdate"
	RfidWarehouseController_Retrieve_FullMethodName          = "/rfid_service.rfid_ito.RfidWarehouseController/Retrieve"
	RfidWarehouseController_TradeNextTid_FullMethodName      = "/rfid_service.rfid_ito.RfidWarehouseController/TradeNextTid"
	RfidWarehouseController_TradeStatusChange_FullMethodName = "/rfid_service.rfid_ito.RfidWarehouseController/TradeStatusChange"
	RfidWarehouseController_Update_FullMethodName            = "/rfid_service.rfid_ito.RfidWarehouseController/Update"
)

// RfidWarehouseControllerClient is the client API for RfidWarehouseController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RfidWarehouseControllerClient interface {
	Create(ctx context.Context, in *ProviderTradeModelRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error)
	Destroy(ctx context.Context, in *ProviderTradeModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ProviderTradeModelListRequest, opts ...grpc.CallOption) (*ProviderTradeModelListResponse, error)
	PartialUpdate(ctx context.Context, in *ProviderTradeModelPartialUpdateRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error)
	Retrieve(ctx context.Context, in *ProviderTradeModelRetrieveRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error)
	TradeNextTid(ctx context.Context, in *TradeNextTidRequest, opts ...grpc.CallOption) (*TradeNextTidResponse, error)
	TradeStatusChange(ctx context.Context, in *TradeStatusChangeRequest, opts ...grpc.CallOption) (*TradeStatusChangeResponse, error)
	Update(ctx context.Context, in *ProviderTradeModelRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error)
}

type rfidWarehouseControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRfidWarehouseControllerClient(cc grpc.ClientConnInterface) RfidWarehouseControllerClient {
	return &rfidWarehouseControllerClient{cc}
}

func (c *rfidWarehouseControllerClient) Create(ctx context.Context, in *ProviderTradeModelRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error) {
	out := new(ProviderTradeModelResponse)
	err := c.cc.Invoke(ctx, RfidWarehouseController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidWarehouseControllerClient) Destroy(ctx context.Context, in *ProviderTradeModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RfidWarehouseController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidWarehouseControllerClient) List(ctx context.Context, in *ProviderTradeModelListRequest, opts ...grpc.CallOption) (*ProviderTradeModelListResponse, error) {
	out := new(ProviderTradeModelListResponse)
	err := c.cc.Invoke(ctx, RfidWarehouseController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidWarehouseControllerClient) PartialUpdate(ctx context.Context, in *ProviderTradeModelPartialUpdateRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error) {
	out := new(ProviderTradeModelResponse)
	err := c.cc.Invoke(ctx, RfidWarehouseController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidWarehouseControllerClient) Retrieve(ctx context.Context, in *ProviderTradeModelRetrieveRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error) {
	out := new(ProviderTradeModelResponse)
	err := c.cc.Invoke(ctx, RfidWarehouseController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidWarehouseControllerClient) TradeNextTid(ctx context.Context, in *TradeNextTidRequest, opts ...grpc.CallOption) (*TradeNextTidResponse, error) {
	out := new(TradeNextTidResponse)
	err := c.cc.Invoke(ctx, RfidWarehouseController_TradeNextTid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidWarehouseControllerClient) TradeStatusChange(ctx context.Context, in *TradeStatusChangeRequest, opts ...grpc.CallOption) (*TradeStatusChangeResponse, error) {
	out := new(TradeStatusChangeResponse)
	err := c.cc.Invoke(ctx, RfidWarehouseController_TradeStatusChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfidWarehouseControllerClient) Update(ctx context.Context, in *ProviderTradeModelRequest, opts ...grpc.CallOption) (*ProviderTradeModelResponse, error) {
	out := new(ProviderTradeModelResponse)
	err := c.cc.Invoke(ctx, RfidWarehouseController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RfidWarehouseControllerServer is the server API for RfidWarehouseController service.
// All implementations must embed UnimplementedRfidWarehouseControllerServer
// for forward compatibility
type RfidWarehouseControllerServer interface {
	Create(context.Context, *ProviderTradeModelRequest) (*ProviderTradeModelResponse, error)
	Destroy(context.Context, *ProviderTradeModelDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *ProviderTradeModelListRequest) (*ProviderTradeModelListResponse, error)
	PartialUpdate(context.Context, *ProviderTradeModelPartialUpdateRequest) (*ProviderTradeModelResponse, error)
	Retrieve(context.Context, *ProviderTradeModelRetrieveRequest) (*ProviderTradeModelResponse, error)
	TradeNextTid(context.Context, *TradeNextTidRequest) (*TradeNextTidResponse, error)
	TradeStatusChange(context.Context, *TradeStatusChangeRequest) (*TradeStatusChangeResponse, error)
	Update(context.Context, *ProviderTradeModelRequest) (*ProviderTradeModelResponse, error)
	mustEmbedUnimplementedRfidWarehouseControllerServer()
}

// UnimplementedRfidWarehouseControllerServer must be embedded to have forward compatible implementations.
type UnimplementedRfidWarehouseControllerServer struct {
}

func (UnimplementedRfidWarehouseControllerServer) Create(context.Context, *ProviderTradeModelRequest) (*ProviderTradeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) Destroy(context.Context, *ProviderTradeModelDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) List(context.Context, *ProviderTradeModelListRequest) (*ProviderTradeModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) PartialUpdate(context.Context, *ProviderTradeModelPartialUpdateRequest) (*ProviderTradeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) Retrieve(context.Context, *ProviderTradeModelRetrieveRequest) (*ProviderTradeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) TradeNextTid(context.Context, *TradeNextTidRequest) (*TradeNextTidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeNextTid not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) TradeStatusChange(context.Context, *TradeStatusChangeRequest) (*TradeStatusChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeStatusChange not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) Update(context.Context, *ProviderTradeModelRequest) (*ProviderTradeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRfidWarehouseControllerServer) mustEmbedUnimplementedRfidWarehouseControllerServer() {
}

// UnsafeRfidWarehouseControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RfidWarehouseControllerServer will
// result in compilation errors.
type UnsafeRfidWarehouseControllerServer interface {
	mustEmbedUnimplementedRfidWarehouseControllerServer()
}

func RegisterRfidWarehouseControllerServer(s grpc.ServiceRegistrar, srv RfidWarehouseControllerServer) {
	s.RegisterService(&RfidWarehouseController_ServiceDesc, srv)
}

func _RfidWarehouseController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderTradeModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).Create(ctx, req.(*ProviderTradeModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidWarehouseController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderTradeModelDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).Destroy(ctx, req.(*ProviderTradeModelDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidWarehouseController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderTradeModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).List(ctx, req.(*ProviderTradeModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidWarehouseController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderTradeModelPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).PartialUpdate(ctx, req.(*ProviderTradeModelPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidWarehouseController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderTradeModelRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).Retrieve(ctx, req.(*ProviderTradeModelRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidWarehouseController_TradeNextTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeNextTidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).TradeNextTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_TradeNextTid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).TradeNextTid(ctx, req.(*TradeNextTidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidWarehouseController_TradeStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeStatusChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).TradeStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_TradeStatusChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).TradeStatusChange(ctx, req.(*TradeStatusChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfidWarehouseController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderTradeModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfidWarehouseControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RfidWarehouseController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfidWarehouseControllerServer).Update(ctx, req.(*ProviderTradeModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RfidWarehouseController_ServiceDesc is the grpc.ServiceDesc for RfidWarehouseController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RfidWarehouseController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfid_service.rfid_ito.RfidWarehouseController",
	HandlerType: (*RfidWarehouseControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RfidWarehouseController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _RfidWarehouseController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RfidWarehouseController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _RfidWarehouseController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _RfidWarehouseController_Retrieve_Handler,
		},
		{
			MethodName: "TradeNextTid",
			Handler:    _RfidWarehouseController_TradeNextTid_Handler,
		},
		{
			MethodName: "TradeStatusChange",
			Handler:    _RfidWarehouseController_TradeStatusChange_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RfidWarehouseController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rfid_ito.proto",
}
