// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: kingdee_ito.proto

package pbKingdeeIto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlipayBillAggResultController_AggAliPayBySrcTid_FullMethodName    = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/AggAliPayBySrcTid"
	AlipayBillAggResultController_AlipayBillOptions_FullMethodName    = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/AlipayBillOptions"
	AlipayBillAggResultController_Create_FullMethodName               = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/Create"
	AlipayBillAggResultController_Destroy_FullMethodName              = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/Destroy"
	AlipayBillAggResultController_DestroyAggBillResult_FullMethodName = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/DestroyAggBillResult"
	AlipayBillAggResultController_FetchAlipayBillAsync_FullMethodName = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/FetchAlipayBillAsync"
	AlipayBillAggResultController_FetchAlipayBillTask_FullMethodName  = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/FetchAlipayBillTask"
	AlipayBillAggResultController_FetchSrcTrade_FullMethodName        = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/FetchSrcTrade"
	AlipayBillAggResultController_FetchSrcTradeTask_FullMethodName    = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/FetchSrcTradeTask"
	AlipayBillAggResultController_List_FullMethodName                 = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/List"
	AlipayBillAggResultController_ListAlipayBill_FullMethodName       = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/ListAlipayBill"
	AlipayBillAggResultController_ListBillEntities_FullMethodName     = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/ListBillEntities"
	AlipayBillAggResultController_PartialUpdate_FullMethodName        = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/PartialUpdate"
	AlipayBillAggResultController_Retrieve_FullMethodName             = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/Retrieve"
	AlipayBillAggResultController_RetrieveAlipayBill_FullMethodName   = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/RetrieveAlipayBill"
	AlipayBillAggResultController_RetrieveBillEntities_FullMethodName = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/RetrieveBillEntities"
	AlipayBillAggResultController_TaskSigAggAlipayBill_FullMethodName = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/TaskSigAggAlipayBill"
	AlipayBillAggResultController_Update_FullMethodName               = "/kingdee_service.kingdee_ito.AlipayBillAggResultController/Update"
)

// AlipayBillAggResultControllerClient is the client API for AlipayBillAggResultController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlipayBillAggResultControllerClient interface {
	AggAliPayBySrcTid(ctx context.Context, in *AggAliPayBySrcTidRequest, opts ...grpc.CallOption) (*AggAliPayBySrcTidResponse, error)
	AlipayBillOptions(ctx context.Context, in *AlipayBillOptionsRequest, opts ...grpc.CallOption) (*AlipayBillOptionsResponse, error)
	Create(ctx context.Context, in *AlipayBillAggResultRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error)
	Destroy(ctx context.Context, in *AlipayBillAggResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyAggBillResult(ctx context.Context, in *DestroyAggBillResultRequest, opts ...grpc.CallOption) (*DestroyAggBillResultResponse, error)
	FetchAlipayBillAsync(ctx context.Context, in *FetchAlipayLogAsyncRequest, opts ...grpc.CallOption) (*FetchAlipayLogAsyncResponse, error)
	FetchAlipayBillTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchAlipayBillTaskResponse, error)
	FetchSrcTrade(ctx context.Context, in *FetchSrcTradeRequest, opts ...grpc.CallOption) (*FetchSrcTradeResponse, error)
	FetchSrcTradeTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchSrcTradeTaskResponse, error)
	List(ctx context.Context, in *AlipayBillAggResultListRequest, opts ...grpc.CallOption) (*AlipayBillAggResultListResponse, error)
	ListAlipayBill(ctx context.Context, in *AlipayBillListRequest, opts ...grpc.CallOption) (*AlipayBillListResponse, error)
	ListBillEntities(ctx context.Context, in *AlipayBillEntitiesListRequest, opts ...grpc.CallOption) (*AlipayBillEntitiesListResponse, error)
	PartialUpdate(ctx context.Context, in *AlipayBillAggResultPartialUpdateRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error)
	Retrieve(ctx context.Context, in *AlipayBillAggResultRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error)
	RetrieveAlipayBill(ctx context.Context, in *AlipayBillRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillResponse, error)
	RetrieveBillEntities(ctx context.Context, in *BillEntitiesRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillEntitiesResponse, error)
	TaskSigAggAlipayBill(ctx context.Context, in *TaskSigAggAlipayBillRequest, opts ...grpc.CallOption) (*TaskSigAggAlipayBillResponse, error)
	Update(ctx context.Context, in *AlipayBillAggResultRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error)
}

type alipayBillAggResultControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewAlipayBillAggResultControllerClient(cc grpc.ClientConnInterface) AlipayBillAggResultControllerClient {
	return &alipayBillAggResultControllerClient{cc}
}

func (c *alipayBillAggResultControllerClient) AggAliPayBySrcTid(ctx context.Context, in *AggAliPayBySrcTidRequest, opts ...grpc.CallOption) (*AggAliPayBySrcTidResponse, error) {
	out := new(AggAliPayBySrcTidResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_AggAliPayBySrcTid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) AlipayBillOptions(ctx context.Context, in *AlipayBillOptionsRequest, opts ...grpc.CallOption) (*AlipayBillOptionsResponse, error) {
	out := new(AlipayBillOptionsResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_AlipayBillOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) Create(ctx context.Context, in *AlipayBillAggResultRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error) {
	out := new(AlipayBillAggResultResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) Destroy(ctx context.Context, in *AlipayBillAggResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) DestroyAggBillResult(ctx context.Context, in *DestroyAggBillResultRequest, opts ...grpc.CallOption) (*DestroyAggBillResultResponse, error) {
	out := new(DestroyAggBillResultResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_DestroyAggBillResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) FetchAlipayBillAsync(ctx context.Context, in *FetchAlipayLogAsyncRequest, opts ...grpc.CallOption) (*FetchAlipayLogAsyncResponse, error) {
	out := new(FetchAlipayLogAsyncResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_FetchAlipayBillAsync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) FetchAlipayBillTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchAlipayBillTaskResponse, error) {
	out := new(FetchAlipayBillTaskResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_FetchAlipayBillTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) FetchSrcTrade(ctx context.Context, in *FetchSrcTradeRequest, opts ...grpc.CallOption) (*FetchSrcTradeResponse, error) {
	out := new(FetchSrcTradeResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_FetchSrcTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) FetchSrcTradeTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchSrcTradeTaskResponse, error) {
	out := new(FetchSrcTradeTaskResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_FetchSrcTradeTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) List(ctx context.Context, in *AlipayBillAggResultListRequest, opts ...grpc.CallOption) (*AlipayBillAggResultListResponse, error) {
	out := new(AlipayBillAggResultListResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) ListAlipayBill(ctx context.Context, in *AlipayBillListRequest, opts ...grpc.CallOption) (*AlipayBillListResponse, error) {
	out := new(AlipayBillListResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_ListAlipayBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) ListBillEntities(ctx context.Context, in *AlipayBillEntitiesListRequest, opts ...grpc.CallOption) (*AlipayBillEntitiesListResponse, error) {
	out := new(AlipayBillEntitiesListResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_ListBillEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) PartialUpdate(ctx context.Context, in *AlipayBillAggResultPartialUpdateRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error) {
	out := new(AlipayBillAggResultResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) Retrieve(ctx context.Context, in *AlipayBillAggResultRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error) {
	out := new(AlipayBillAggResultResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) RetrieveAlipayBill(ctx context.Context, in *AlipayBillRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillResponse, error) {
	out := new(AlipayBillResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_RetrieveAlipayBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) RetrieveBillEntities(ctx context.Context, in *BillEntitiesRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillEntitiesResponse, error) {
	out := new(AlipayBillEntitiesResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_RetrieveBillEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) TaskSigAggAlipayBill(ctx context.Context, in *TaskSigAggAlipayBillRequest, opts ...grpc.CallOption) (*TaskSigAggAlipayBillResponse, error) {
	out := new(TaskSigAggAlipayBillResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_TaskSigAggAlipayBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillAggResultControllerClient) Update(ctx context.Context, in *AlipayBillAggResultRequest, opts ...grpc.CallOption) (*AlipayBillAggResultResponse, error) {
	out := new(AlipayBillAggResultResponse)
	err := c.cc.Invoke(ctx, AlipayBillAggResultController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlipayBillAggResultControllerServer is the server API for AlipayBillAggResultController service.
// All implementations must embed UnimplementedAlipayBillAggResultControllerServer
// for forward compatibility
type AlipayBillAggResultControllerServer interface {
	AggAliPayBySrcTid(context.Context, *AggAliPayBySrcTidRequest) (*AggAliPayBySrcTidResponse, error)
	AlipayBillOptions(context.Context, *AlipayBillOptionsRequest) (*AlipayBillOptionsResponse, error)
	Create(context.Context, *AlipayBillAggResultRequest) (*AlipayBillAggResultResponse, error)
	Destroy(context.Context, *AlipayBillAggResultDestroyRequest) (*emptypb.Empty, error)
	DestroyAggBillResult(context.Context, *DestroyAggBillResultRequest) (*DestroyAggBillResultResponse, error)
	FetchAlipayBillAsync(context.Context, *FetchAlipayLogAsyncRequest) (*FetchAlipayLogAsyncResponse, error)
	FetchAlipayBillTask(context.Context, *FetchTaskRequest) (*FetchAlipayBillTaskResponse, error)
	FetchSrcTrade(context.Context, *FetchSrcTradeRequest) (*FetchSrcTradeResponse, error)
	FetchSrcTradeTask(context.Context, *FetchTaskRequest) (*FetchSrcTradeTaskResponse, error)
	List(context.Context, *AlipayBillAggResultListRequest) (*AlipayBillAggResultListResponse, error)
	ListAlipayBill(context.Context, *AlipayBillListRequest) (*AlipayBillListResponse, error)
	ListBillEntities(context.Context, *AlipayBillEntitiesListRequest) (*AlipayBillEntitiesListResponse, error)
	PartialUpdate(context.Context, *AlipayBillAggResultPartialUpdateRequest) (*AlipayBillAggResultResponse, error)
	Retrieve(context.Context, *AlipayBillAggResultRetrieveRequest) (*AlipayBillAggResultResponse, error)
	RetrieveAlipayBill(context.Context, *AlipayBillRetrieveRequest) (*AlipayBillResponse, error)
	RetrieveBillEntities(context.Context, *BillEntitiesRetrieveRequest) (*AlipayBillEntitiesResponse, error)
	TaskSigAggAlipayBill(context.Context, *TaskSigAggAlipayBillRequest) (*TaskSigAggAlipayBillResponse, error)
	Update(context.Context, *AlipayBillAggResultRequest) (*AlipayBillAggResultResponse, error)
	mustEmbedUnimplementedAlipayBillAggResultControllerServer()
}

// UnimplementedAlipayBillAggResultControllerServer must be embedded to have forward compatible implementations.
type UnimplementedAlipayBillAggResultControllerServer struct {
}

func (UnimplementedAlipayBillAggResultControllerServer) AggAliPayBySrcTid(context.Context, *AggAliPayBySrcTidRequest) (*AggAliPayBySrcTidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggAliPayBySrcTid not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) AlipayBillOptions(context.Context, *AlipayBillOptionsRequest) (*AlipayBillOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlipayBillOptions not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) Create(context.Context, *AlipayBillAggResultRequest) (*AlipayBillAggResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) Destroy(context.Context, *AlipayBillAggResultDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) DestroyAggBillResult(context.Context, *DestroyAggBillResultRequest) (*DestroyAggBillResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggBillResult not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) FetchAlipayBillAsync(context.Context, *FetchAlipayLogAsyncRequest) (*FetchAlipayLogAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAlipayBillAsync not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) FetchAlipayBillTask(context.Context, *FetchTaskRequest) (*FetchAlipayBillTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAlipayBillTask not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) FetchSrcTrade(context.Context, *FetchSrcTradeRequest) (*FetchSrcTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSrcTrade not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) FetchSrcTradeTask(context.Context, *FetchTaskRequest) (*FetchSrcTradeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSrcTradeTask not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) List(context.Context, *AlipayBillAggResultListRequest) (*AlipayBillAggResultListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) ListAlipayBill(context.Context, *AlipayBillListRequest) (*AlipayBillListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlipayBill not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) ListBillEntities(context.Context, *AlipayBillEntitiesListRequest) (*AlipayBillEntitiesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillEntities not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) PartialUpdate(context.Context, *AlipayBillAggResultPartialUpdateRequest) (*AlipayBillAggResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) Retrieve(context.Context, *AlipayBillAggResultRetrieveRequest) (*AlipayBillAggResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) RetrieveAlipayBill(context.Context, *AlipayBillRetrieveRequest) (*AlipayBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAlipayBill not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) RetrieveBillEntities(context.Context, *BillEntitiesRetrieveRequest) (*AlipayBillEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBillEntities not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) TaskSigAggAlipayBill(context.Context, *TaskSigAggAlipayBillRequest) (*TaskSigAggAlipayBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggAlipayBill not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) Update(context.Context, *AlipayBillAggResultRequest) (*AlipayBillAggResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAlipayBillAggResultControllerServer) mustEmbedUnimplementedAlipayBillAggResultControllerServer() {
}

// UnsafeAlipayBillAggResultControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlipayBillAggResultControllerServer will
// result in compilation errors.
type UnsafeAlipayBillAggResultControllerServer interface {
	mustEmbedUnimplementedAlipayBillAggResultControllerServer()
}

func RegisterAlipayBillAggResultControllerServer(s grpc.ServiceRegistrar, srv AlipayBillAggResultControllerServer) {
	s.RegisterService(&AlipayBillAggResultController_ServiceDesc, srv)
}

func _AlipayBillAggResultController_AggAliPayBySrcTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggAliPayBySrcTidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).AggAliPayBySrcTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_AggAliPayBySrcTid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).AggAliPayBySrcTid(ctx, req.(*AggAliPayBySrcTidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_AlipayBillOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).AlipayBillOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_AlipayBillOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).AlipayBillOptions(ctx, req.(*AlipayBillOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAggResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).Create(ctx, req.(*AlipayBillAggResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAggResultDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).Destroy(ctx, req.(*AlipayBillAggResultDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_DestroyAggBillResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggBillResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).DestroyAggBillResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_DestroyAggBillResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).DestroyAggBillResult(ctx, req.(*DestroyAggBillResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_FetchAlipayBillAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAlipayLogAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).FetchAlipayBillAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_FetchAlipayBillAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).FetchAlipayBillAsync(ctx, req.(*FetchAlipayLogAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_FetchAlipayBillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).FetchAlipayBillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_FetchAlipayBillTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).FetchAlipayBillTask(ctx, req.(*FetchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_FetchSrcTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSrcTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).FetchSrcTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_FetchSrcTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).FetchSrcTrade(ctx, req.(*FetchSrcTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_FetchSrcTradeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).FetchSrcTradeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_FetchSrcTradeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).FetchSrcTradeTask(ctx, req.(*FetchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAggResultListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).List(ctx, req.(*AlipayBillAggResultListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_ListAlipayBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).ListAlipayBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_ListAlipayBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).ListAlipayBill(ctx, req.(*AlipayBillListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_ListBillEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillEntitiesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).ListBillEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_ListBillEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).ListBillEntities(ctx, req.(*AlipayBillEntitiesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAggResultPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).PartialUpdate(ctx, req.(*AlipayBillAggResultPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAggResultRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).Retrieve(ctx, req.(*AlipayBillAggResultRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_RetrieveAlipayBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).RetrieveAlipayBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_RetrieveAlipayBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).RetrieveAlipayBill(ctx, req.(*AlipayBillRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_RetrieveBillEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillEntitiesRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).RetrieveBillEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_RetrieveBillEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).RetrieveBillEntities(ctx, req.(*BillEntitiesRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_TaskSigAggAlipayBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggAlipayBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).TaskSigAggAlipayBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_TaskSigAggAlipayBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).TaskSigAggAlipayBill(ctx, req.(*TaskSigAggAlipayBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillAggResultController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAggResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillAggResultControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillAggResultController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillAggResultControllerServer).Update(ctx, req.(*AlipayBillAggResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlipayBillAggResultController_ServiceDesc is the grpc.ServiceDesc for AlipayBillAggResultController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlipayBillAggResultController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.AlipayBillAggResultController",
	HandlerType: (*AlipayBillAggResultControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggAliPayBySrcTid",
			Handler:    _AlipayBillAggResultController_AggAliPayBySrcTid_Handler,
		},
		{
			MethodName: "AlipayBillOptions",
			Handler:    _AlipayBillAggResultController_AlipayBillOptions_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AlipayBillAggResultController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _AlipayBillAggResultController_Destroy_Handler,
		},
		{
			MethodName: "DestroyAggBillResult",
			Handler:    _AlipayBillAggResultController_DestroyAggBillResult_Handler,
		},
		{
			MethodName: "FetchAlipayBillAsync",
			Handler:    _AlipayBillAggResultController_FetchAlipayBillAsync_Handler,
		},
		{
			MethodName: "FetchAlipayBillTask",
			Handler:    _AlipayBillAggResultController_FetchAlipayBillTask_Handler,
		},
		{
			MethodName: "FetchSrcTrade",
			Handler:    _AlipayBillAggResultController_FetchSrcTrade_Handler,
		},
		{
			MethodName: "FetchSrcTradeTask",
			Handler:    _AlipayBillAggResultController_FetchSrcTradeTask_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AlipayBillAggResultController_List_Handler,
		},
		{
			MethodName: "ListAlipayBill",
			Handler:    _AlipayBillAggResultController_ListAlipayBill_Handler,
		},
		{
			MethodName: "ListBillEntities",
			Handler:    _AlipayBillAggResultController_ListBillEntities_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _AlipayBillAggResultController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _AlipayBillAggResultController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveAlipayBill",
			Handler:    _AlipayBillAggResultController_RetrieveAlipayBill_Handler,
		},
		{
			MethodName: "RetrieveBillEntities",
			Handler:    _AlipayBillAggResultController_RetrieveBillEntities_Handler,
		},
		{
			MethodName: "TaskSigAggAlipayBill",
			Handler:    _AlipayBillAggResultController_TaskSigAggAlipayBill_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AlipayBillAggResultController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	CeleryTaskController_CreateClockedSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateClockedSchedule"
	CeleryTaskController_CreateCrontabSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateCrontabSchedule"
	CeleryTaskController_CreateIntervalSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateIntervalSchedule"
	CeleryTaskController_CreatePeriodicTask_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/CreatePeriodicTask"
	CeleryTaskController_CreateTaskProgress_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateTaskProgress"
	CeleryTaskController_CreateTaskResult_FullMethodName              = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateTaskResult"
	CeleryTaskController_DestroyClockedSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyClockedSchedule"
	CeleryTaskController_DestroyCrontabSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyCrontabSchedule"
	CeleryTaskController_DestroyIntervalSchedule_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyIntervalSchedule"
	CeleryTaskController_DestroyPeriodicTask_FullMethodName           = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyPeriodicTask"
	CeleryTaskController_DestroyTaskProgress_FullMethodName           = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyTaskProgress"
	CeleryTaskController_DestroyTaskResult_FullMethodName             = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyTaskResult"
	CeleryTaskController_ListCeleryTasks_FullMethodName               = "/kingdee_service.kingdee_ito.CeleryTaskController/ListCeleryTasks"
	CeleryTaskController_ListClockedSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.CeleryTaskController/ListClockedSchedule"
	CeleryTaskController_ListCrontabSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.CeleryTaskController/ListCrontabSchedule"
	CeleryTaskController_ListIntervalSchedule_FullMethodName          = "/kingdee_service.kingdee_ito.CeleryTaskController/ListIntervalSchedule"
	CeleryTaskController_ListPeriodicTask_FullMethodName              = "/kingdee_service.kingdee_ito.CeleryTaskController/ListPeriodicTask"
	CeleryTaskController_ListTaskProgress_FullMethodName              = "/kingdee_service.kingdee_ito.CeleryTaskController/ListTaskProgress"
	CeleryTaskController_ListTaskResult_FullMethodName                = "/kingdee_service.kingdee_ito.CeleryTaskController/ListTaskResult"
	CeleryTaskController_PartialUpdateClockedSchedule_FullMethodName  = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateClockedSchedule"
	CeleryTaskController_PartialUpdateCrontabSchedule_FullMethodName  = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateCrontabSchedule"
	CeleryTaskController_PartialUpdateIntervalSchedule_FullMethodName = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateIntervalSchedule"
	CeleryTaskController_PartialUpdatePeriodicTask_FullMethodName     = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdatePeriodicTask"
	CeleryTaskController_PartialUpdateTaskProgress_FullMethodName     = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateTaskProgress"
	CeleryTaskController_PartialUpdateTaskResult_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateTaskResult"
	CeleryTaskController_RetrieveClockedSchedule_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveClockedSchedule"
	CeleryTaskController_RetrieveCrontabSchedule_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveCrontabSchedule"
	CeleryTaskController_RetrieveIntervalSchedule_FullMethodName      = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveIntervalSchedule"
	CeleryTaskController_RetrievePeriodicTask_FullMethodName          = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrievePeriodicTask"
	CeleryTaskController_RetrieveTaskProgress_FullMethodName          = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveTaskProgress"
	CeleryTaskController_RetrieveTaskResult_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveTaskResult"
	CeleryTaskController_RunCeleryTask_FullMethodName                 = "/kingdee_service.kingdee_ito.CeleryTaskController/RunCeleryTask"
	CeleryTaskController_UpdateClockedSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateClockedSchedule"
	CeleryTaskController_UpdateCrontabSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateCrontabSchedule"
	CeleryTaskController_UpdateIntervalSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateIntervalSchedule"
	CeleryTaskController_UpdatePeriodicTask_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdatePeriodicTask"
	CeleryTaskController_UpdateTaskProgress_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateTaskProgress"
	CeleryTaskController_UpdateTaskResult_FullMethodName              = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateTaskResult"
)

// CeleryTaskControllerClient is the client API for CeleryTaskController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CeleryTaskControllerClient interface {
	CreateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	CreateTaskProgress(ctx context.Context, in *TaskProgressRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error)
	CreateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyTaskProgress(ctx context.Context, in *TaskProgressDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCeleryTasks(ctx context.Context, in *CeleryTaskQueryOptsRequest, opts ...grpc.CallOption) (*CeleryTaskInfoListResponse, error)
	ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error)
	ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error)
	ListTaskProgress(ctx context.Context, in *TaskProgressListRequest, opts ...grpc.CallOption) (*TaskProgressListResponse, error)
	ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error)
	PartialUpdateClockedSchedule(ctx context.Context, in *ClockedSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	PartialUpdateCrontabSchedule(ctx context.Context, in *CrontabSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	PartialUpdateIntervalSchedule(ctx context.Context, in *IntervalSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	PartialUpdatePeriodicTask(ctx context.Context, in *PeriodicTaskPartialUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	PartialUpdateTaskProgress(ctx context.Context, in *TaskProgressPartialUpdateRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error)
	PartialUpdateTaskResult(ctx context.Context, in *TaskResultPartialUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	RetrieveTaskProgress(ctx context.Context, in *TaskProgressRetrieveRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error)
	RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	RunCeleryTask(ctx context.Context, in *CeleryTaskRunOptsRequest, opts ...grpc.CallOption) (*CeleryTaskRunOptsResponse, error)
	UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	UpdateTaskProgress(ctx context.Context, in *TaskProgressRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error)
	UpdateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
}

type celeryTaskControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCeleryTaskControllerClient(cc grpc.ClientConnInterface) CeleryTaskControllerClient {
	return &celeryTaskControllerClient{cc}
}

func (c *celeryTaskControllerClient) CreateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreateTaskProgress(ctx context.Context, in *TaskProgressRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error) {
	out := new(TaskProgressResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateTaskProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyTaskProgress(ctx context.Context, in *TaskProgressDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyTaskProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListCeleryTasks(ctx context.Context, in *CeleryTaskQueryOptsRequest, opts ...grpc.CallOption) (*CeleryTaskInfoListResponse, error) {
	out := new(CeleryTaskInfoListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListCeleryTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error) {
	out := new(ClockedScheduleListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error) {
	out := new(CrontabScheduleListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error) {
	out := new(IntervalScheduleListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error) {
	out := new(PeriodicTaskListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListTaskProgress(ctx context.Context, in *TaskProgressListRequest, opts ...grpc.CallOption) (*TaskProgressListResponse, error) {
	out := new(TaskProgressListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListTaskProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error) {
	out := new(TaskResultListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateClockedSchedule(ctx context.Context, in *ClockedSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateCrontabSchedule(ctx context.Context, in *CrontabSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateIntervalSchedule(ctx context.Context, in *IntervalSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdatePeriodicTask(ctx context.Context, in *PeriodicTaskPartialUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateTaskProgress(ctx context.Context, in *TaskProgressPartialUpdateRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error) {
	out := new(TaskProgressResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateTaskProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateTaskResult(ctx context.Context, in *TaskResultPartialUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrievePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveTaskProgress(ctx context.Context, in *TaskProgressRetrieveRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error) {
	out := new(TaskProgressResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveTaskProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RunCeleryTask(ctx context.Context, in *CeleryTaskRunOptsRequest, opts ...grpc.CallOption) (*CeleryTaskRunOptsResponse, error) {
	out := new(CeleryTaskRunOptsResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RunCeleryTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateTaskProgress(ctx context.Context, in *TaskProgressRequest, opts ...grpc.CallOption) (*TaskProgressResponse, error) {
	out := new(TaskProgressResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateTaskProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CeleryTaskControllerServer is the server API for CeleryTaskController service.
// All implementations must embed UnimplementedCeleryTaskControllerServer
// for forward compatibility
type CeleryTaskControllerServer interface {
	CreateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error)
	CreateTaskProgress(context.Context, *TaskProgressRequest) (*TaskProgressResponse, error)
	CreateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error)
	DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error)
	DestroyTaskProgress(context.Context, *TaskProgressDestroyRequest) (*emptypb.Empty, error)
	DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error)
	ListCeleryTasks(context.Context, *CeleryTaskQueryOptsRequest) (*CeleryTaskInfoListResponse, error)
	ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error)
	ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error)
	ListTaskProgress(context.Context, *TaskProgressListRequest) (*TaskProgressListResponse, error)
	ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error)
	PartialUpdateClockedSchedule(context.Context, *ClockedSchedulePartialUpdateRequest) (*ClockedScheduleResponse, error)
	PartialUpdateCrontabSchedule(context.Context, *CrontabSchedulePartialUpdateRequest) (*CrontabScheduleResponse, error)
	PartialUpdateIntervalSchedule(context.Context, *IntervalSchedulePartialUpdateRequest) (*IntervalScheduleResponse, error)
	PartialUpdatePeriodicTask(context.Context, *PeriodicTaskPartialUpdateRequest) (*PeriodicTaskResponse, error)
	PartialUpdateTaskProgress(context.Context, *TaskProgressPartialUpdateRequest) (*TaskProgressResponse, error)
	PartialUpdateTaskResult(context.Context, *TaskResultPartialUpdateRequest) (*TaskResultResponse, error)
	RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error)
	RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error)
	RetrieveTaskProgress(context.Context, *TaskProgressRetrieveRequest) (*TaskProgressResponse, error)
	RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error)
	RunCeleryTask(context.Context, *CeleryTaskRunOptsRequest) (*CeleryTaskRunOptsResponse, error)
	UpdateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error)
	UpdateTaskProgress(context.Context, *TaskProgressRequest) (*TaskProgressResponse, error)
	UpdateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error)
	mustEmbedUnimplementedCeleryTaskControllerServer()
}

// UnimplementedCeleryTaskControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCeleryTaskControllerServer struct {
}

func (UnimplementedCeleryTaskControllerServer) CreateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreateTaskProgress(context.Context, *TaskProgressRequest) (*TaskProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskProgress not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyTaskProgress(context.Context, *TaskProgressDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTaskProgress not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListCeleryTasks(context.Context, *CeleryTaskQueryOptsRequest) (*CeleryTaskInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCeleryTasks not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListTaskProgress(context.Context, *TaskProgressListRequest) (*TaskProgressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskProgress not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateClockedSchedule(context.Context, *ClockedSchedulePartialUpdateRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateCrontabSchedule(context.Context, *CrontabSchedulePartialUpdateRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateIntervalSchedule(context.Context, *IntervalSchedulePartialUpdateRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdatePeriodicTask(context.Context, *PeriodicTaskPartialUpdateRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdatePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateTaskProgress(context.Context, *TaskProgressPartialUpdateRequest) (*TaskProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateTaskProgress not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateTaskResult(context.Context, *TaskResultPartialUpdateRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveTaskProgress(context.Context, *TaskProgressRetrieveRequest) (*TaskProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTaskProgress not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RunCeleryTask(context.Context, *CeleryTaskRunOptsRequest) (*CeleryTaskRunOptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCeleryTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateTaskProgress(context.Context, *TaskProgressRequest) (*TaskProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskProgress not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) mustEmbedUnimplementedCeleryTaskControllerServer() {}

// UnsafeCeleryTaskControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CeleryTaskControllerServer will
// result in compilation errors.
type UnsafeCeleryTaskControllerServer interface {
	mustEmbedUnimplementedCeleryTaskControllerServer()
}

func RegisterCeleryTaskControllerServer(s grpc.ServiceRegistrar, srv CeleryTaskControllerServer) {
	s.RegisterService(&CeleryTaskController_ServiceDesc, srv)
}

func _CeleryTaskController_CreateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateClockedSchedule(ctx, req.(*ClockedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateCrontabSchedule(ctx, req.(*CrontabScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateIntervalSchedule(ctx, req.(*IntervalScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreatePeriodicTask(ctx, req.(*PeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreateTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateTaskProgress(ctx, req.(*TaskProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateTaskResult(ctx, req.(*TaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyClockedSchedule(ctx, req.(*ClockedScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyCrontabSchedule(ctx, req.(*CrontabScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyIntervalSchedule(ctx, req.(*IntervalScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyPeriodicTask(ctx, req.(*PeriodicTaskDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgressDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyTaskProgress(ctx, req.(*TaskProgressDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyTaskResult(ctx, req.(*TaskResultDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListCeleryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CeleryTaskQueryOptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListCeleryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListCeleryTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListCeleryTasks(ctx, req.(*CeleryTaskQueryOptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListClockedSchedule(ctx, req.(*ClockedScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListCrontabSchedule(ctx, req.(*CrontabScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListIntervalSchedule(ctx, req.(*IntervalScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListPeriodicTask(ctx, req.(*PeriodicTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListTaskProgress(ctx, req.(*TaskProgressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListTaskResult(ctx, req.(*TaskResultListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedSchedulePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateClockedSchedule(ctx, req.(*ClockedSchedulePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabSchedulePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateCrontabSchedule(ctx, req.(*CrontabSchedulePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalSchedulePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateIntervalSchedule(ctx, req.(*IntervalSchedulePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdatePeriodicTask(ctx, req.(*PeriodicTaskPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgressPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateTaskProgress(ctx, req.(*TaskProgressPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateTaskResult(ctx, req.(*TaskResultPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveClockedSchedule(ctx, req.(*ClockedScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveCrontabSchedule(ctx, req.(*CrontabScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveIntervalSchedule(ctx, req.(*IntervalScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrievePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrievePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrievePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrievePeriodicTask(ctx, req.(*PeriodicTaskRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgressRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveTaskProgress(ctx, req.(*TaskProgressRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveTaskResult(ctx, req.(*TaskResultRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RunCeleryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CeleryTaskRunOptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RunCeleryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RunCeleryTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RunCeleryTask(ctx, req.(*CeleryTaskRunOptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateClockedSchedule(ctx, req.(*ClockedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateCrontabSchedule(ctx, req.(*CrontabScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateIntervalSchedule(ctx, req.(*IntervalScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdatePeriodicTask(ctx, req.(*PeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateTaskProgress(ctx, req.(*TaskProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateTaskResult(ctx, req.(*TaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CeleryTaskController_ServiceDesc is the grpc.ServiceDesc for CeleryTaskController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CeleryTaskController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.CeleryTaskController",
	HandlerType: (*CeleryTaskControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClockedSchedule",
			Handler:    _CeleryTaskController_CreateClockedSchedule_Handler,
		},
		{
			MethodName: "CreateCrontabSchedule",
			Handler:    _CeleryTaskController_CreateCrontabSchedule_Handler,
		},
		{
			MethodName: "CreateIntervalSchedule",
			Handler:    _CeleryTaskController_CreateIntervalSchedule_Handler,
		},
		{
			MethodName: "CreatePeriodicTask",
			Handler:    _CeleryTaskController_CreatePeriodicTask_Handler,
		},
		{
			MethodName: "CreateTaskProgress",
			Handler:    _CeleryTaskController_CreateTaskProgress_Handler,
		},
		{
			MethodName: "CreateTaskResult",
			Handler:    _CeleryTaskController_CreateTaskResult_Handler,
		},
		{
			MethodName: "DestroyClockedSchedule",
			Handler:    _CeleryTaskController_DestroyClockedSchedule_Handler,
		},
		{
			MethodName: "DestroyCrontabSchedule",
			Handler:    _CeleryTaskController_DestroyCrontabSchedule_Handler,
		},
		{
			MethodName: "DestroyIntervalSchedule",
			Handler:    _CeleryTaskController_DestroyIntervalSchedule_Handler,
		},
		{
			MethodName: "DestroyPeriodicTask",
			Handler:    _CeleryTaskController_DestroyPeriodicTask_Handler,
		},
		{
			MethodName: "DestroyTaskProgress",
			Handler:    _CeleryTaskController_DestroyTaskProgress_Handler,
		},
		{
			MethodName: "DestroyTaskResult",
			Handler:    _CeleryTaskController_DestroyTaskResult_Handler,
		},
		{
			MethodName: "ListCeleryTasks",
			Handler:    _CeleryTaskController_ListCeleryTasks_Handler,
		},
		{
			MethodName: "ListClockedSchedule",
			Handler:    _CeleryTaskController_ListClockedSchedule_Handler,
		},
		{
			MethodName: "ListCrontabSchedule",
			Handler:    _CeleryTaskController_ListCrontabSchedule_Handler,
		},
		{
			MethodName: "ListIntervalSchedule",
			Handler:    _CeleryTaskController_ListIntervalSchedule_Handler,
		},
		{
			MethodName: "ListPeriodicTask",
			Handler:    _CeleryTaskController_ListPeriodicTask_Handler,
		},
		{
			MethodName: "ListTaskProgress",
			Handler:    _CeleryTaskController_ListTaskProgress_Handler,
		},
		{
			MethodName: "ListTaskResult",
			Handler:    _CeleryTaskController_ListTaskResult_Handler,
		},
		{
			MethodName: "PartialUpdateClockedSchedule",
			Handler:    _CeleryTaskController_PartialUpdateClockedSchedule_Handler,
		},
		{
			MethodName: "PartialUpdateCrontabSchedule",
			Handler:    _CeleryTaskController_PartialUpdateCrontabSchedule_Handler,
		},
		{
			MethodName: "PartialUpdateIntervalSchedule",
			Handler:    _CeleryTaskController_PartialUpdateIntervalSchedule_Handler,
		},
		{
			MethodName: "PartialUpdatePeriodicTask",
			Handler:    _CeleryTaskController_PartialUpdatePeriodicTask_Handler,
		},
		{
			MethodName: "PartialUpdateTaskProgress",
			Handler:    _CeleryTaskController_PartialUpdateTaskProgress_Handler,
		},
		{
			MethodName: "PartialUpdateTaskResult",
			Handler:    _CeleryTaskController_PartialUpdateTaskResult_Handler,
		},
		{
			MethodName: "RetrieveClockedSchedule",
			Handler:    _CeleryTaskController_RetrieveClockedSchedule_Handler,
		},
		{
			MethodName: "RetrieveCrontabSchedule",
			Handler:    _CeleryTaskController_RetrieveCrontabSchedule_Handler,
		},
		{
			MethodName: "RetrieveIntervalSchedule",
			Handler:    _CeleryTaskController_RetrieveIntervalSchedule_Handler,
		},
		{
			MethodName: "RetrievePeriodicTask",
			Handler:    _CeleryTaskController_RetrievePeriodicTask_Handler,
		},
		{
			MethodName: "RetrieveTaskProgress",
			Handler:    _CeleryTaskController_RetrieveTaskProgress_Handler,
		},
		{
			MethodName: "RetrieveTaskResult",
			Handler:    _CeleryTaskController_RetrieveTaskResult_Handler,
		},
		{
			MethodName: "RunCeleryTask",
			Handler:    _CeleryTaskController_RunCeleryTask_Handler,
		},
		{
			MethodName: "UpdateClockedSchedule",
			Handler:    _CeleryTaskController_UpdateClockedSchedule_Handler,
		},
		{
			MethodName: "UpdateCrontabSchedule",
			Handler:    _CeleryTaskController_UpdateCrontabSchedule_Handler,
		},
		{
			MethodName: "UpdateIntervalSchedule",
			Handler:    _CeleryTaskController_UpdateIntervalSchedule_Handler,
		},
		{
			MethodName: "UpdatePeriodicTask",
			Handler:    _CeleryTaskController_UpdatePeriodicTask_Handler,
		},
		{
			MethodName: "UpdateTaskProgress",
			Handler:    _CeleryTaskController_UpdateTaskProgress_Handler,
		},
		{
			MethodName: "UpdateTaskResult",
			Handler:    _CeleryTaskController_UpdateTaskResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	KingdeePurchaseOrderController_BulkCreateKdPurchaseReturn_FullMethodName         = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKdPurchaseReturn"
	KingdeePurchaseOrderController_BulkCreateKdTransferOrder_FullMethodName          = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKdTransferOrder"
	KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_FullMethodName     = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKingdeePurchaseOrder"
	KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrderSync_FullMethodName = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKingdeePurchaseOrderSync"
	KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_FullMethodName       = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKingdeeReceiveBill"
	KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBillSync_FullMethodName   = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKingdeeReceiveBillSync"
	KingdeePurchaseOrderController_Create_FullMethodName                             = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Create"
	KingdeePurchaseOrderController_CreateKdPurchaseReturn_FullMethodName             = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/CreateKdPurchaseReturn"
	KingdeePurchaseOrderController_CreateKdTransferOrder_FullMethodName              = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/CreateKdTransferOrder"
	KingdeePurchaseOrderController_CxlKdPurchaseReturnFromWdt_FullMethodName         = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/CxlKdPurchaseReturnFromWdt"
	KingdeePurchaseOrderController_CxlKdReceiveBillFromWdt_FullMethodName            = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/CxlKdReceiveBillFromWdt"
	KingdeePurchaseOrderController_CxlKdTransferOrderFromWdt_FullMethodName          = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/CxlKdTransferOrderFromWdt"
	KingdeePurchaseOrderController_Destroy_FullMethodName                            = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Destroy"
	KingdeePurchaseOrderController_List_FullMethodName                               = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/List"
	KingdeePurchaseOrderController_PartialUpdate_FullMethodName                      = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/PartialUpdate"
	KingdeePurchaseOrderController_QueryKdPurchaseNoSyncStatus_FullMethodName        = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/QueryKdPurchaseNoSyncStatus"
	KingdeePurchaseOrderController_QueryKdPurchaseReturnSyncStatus_FullMethodName    = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/QueryKdPurchaseReturnSyncStatus"
	KingdeePurchaseOrderController_QueryKdReceiveBillSyncStatus_FullMethodName       = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/QueryKdReceiveBillSyncStatus"
	KingdeePurchaseOrderController_QueryKdTransferOrderSyncStatus_FullMethodName     = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/QueryKdTransferOrderSyncStatus"
	KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_FullMethodName          = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/QueryKingdeePurchaseOrder"
	KingdeePurchaseOrderController_Retrieve_FullMethodName                           = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Retrieve"
	KingdeePurchaseOrderController_StopKdReceiveBillFromWdt_FullMethodName           = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/StopKdReceiveBillFromWdt"
	KingdeePurchaseOrderController_SyncKdPurchaseReturn_FullMethodName               = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/SyncKdPurchaseReturn"
	KingdeePurchaseOrderController_SyncKdTransferOrder_FullMethodName                = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/SyncKdTransferOrder"
	KingdeePurchaseOrderController_Update_FullMethodName                             = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Update"
)

// KingdeePurchaseOrderControllerClient is the client API for KingdeePurchaseOrderController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KingdeePurchaseOrderControllerClient interface {
	BulkCreateKdPurchaseReturn(ctx context.Context, in *BulkCreateKdPurchaseReturnRequest, opts ...grpc.CallOption) (*BulkCreateKdPurchaseReturnResponse, error)
	BulkCreateKdTransferOrder(ctx context.Context, in *BulkCreateKdTransferOrderRequest, opts ...grpc.CallOption) (*BulkCreateKdTransferOrderResponse, error)
	BulkCreateKingdeePurchaseOrder(ctx context.Context, in *BulkCreateKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*BulkCreateKingdeePurchaseOrderResponse, error)
	BulkCreateKingdeePurchaseOrderSync(ctx context.Context, in *BulkCreateKingdeePurchaseOrderSyncRequest, opts ...grpc.CallOption) (*BulkCreateKingdeePurchaseOrderSyncResponse, error)
	BulkCreateKingdeeReceiveBill(ctx context.Context, in *BulkCreateKingdeeReceiveBillRequest, opts ...grpc.CallOption) (*BulkCreateKingdeeReceiveBillResponse, error)
	BulkCreateKingdeeReceiveBillSync(ctx context.Context, in *BulkCreateKingdeeReceiveBillSyncRequest, opts ...grpc.CallOption) (*BulkCreateKingdeeReceiveBillSyncResponse, error)
	Create(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
	CreateKdPurchaseReturn(ctx context.Context, in *CreateKdPurchaseReturnRequest, opts ...grpc.CallOption) (*CreateKdPurchaseReturnResponse, error)
	CreateKdTransferOrder(ctx context.Context, in *CreateKdTransferOrderRequest, opts ...grpc.CallOption) (*CreateKdTransferOrderResponse, error)
	CxlKdPurchaseReturnFromWdt(ctx context.Context, in *CxlKdPurchaseReturnFromWdtRequest, opts ...grpc.CallOption) (*CxlKdPurchaseReturnFromWdtResponse, error)
	CxlKdReceiveBillFromWdt(ctx context.Context, in *CxlKdReceiveBillFromWdtRequest, opts ...grpc.CallOption) (*CxlKdReceiveBillFromWdtResponse, error)
	CxlKdTransferOrderFromWdt(ctx context.Context, in *CxlKdTransferOrderFromWdtRequest, opts ...grpc.CallOption) (*CxlKdTransferOrderFromWdtResponse, error)
	Destroy(ctx context.Context, in *KingdeePurchaseDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *KingdeePurchaseListRequest, opts ...grpc.CallOption) (*KingdeePurchaseListResponse, error)
	PartialUpdate(ctx context.Context, in *KingdeePurchasePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
	QueryKdPurchaseNoSyncStatus(ctx context.Context, in *QueryKdPurchaseNoSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdPurchaseNoSyncStatusResponse, error)
	QueryKdPurchaseReturnSyncStatus(ctx context.Context, in *QueryKdPurchaseReturnSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdPurchaseReturnSyncStatusResponse, error)
	QueryKdReceiveBillSyncStatus(ctx context.Context, in *QueryKdReceiveBillSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdReceiveBillSyncStatusResponse, error)
	QueryKdTransferOrderSyncStatus(ctx context.Context, in *QueryKdTransferOrderSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdTransferOrderSyncStatusResponse, error)
	QueryKingdeePurchaseOrder(ctx context.Context, in *QueryKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*QueryKingdeePurchaseOrderResponse, error)
	Retrieve(ctx context.Context, in *KingdeePurchaseRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
	StopKdReceiveBillFromWdt(ctx context.Context, in *StopKdReceiveBillFromWdtRequest, opts ...grpc.CallOption) (*StopKdReceiveBillFromWdtResponse, error)
	SyncKdPurchaseReturn(ctx context.Context, in *SyncKdPurchaseReturnRequest, opts ...grpc.CallOption) (*SyncKdPurchaseReturnResponse, error)
	SyncKdTransferOrder(ctx context.Context, in *SyncKdTransferOrderRequest, opts ...grpc.CallOption) (*SyncKdTransferOrderResponse, error)
	Update(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
}

type kingdeePurchaseOrderControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKingdeePurchaseOrderControllerClient(cc grpc.ClientConnInterface) KingdeePurchaseOrderControllerClient {
	return &kingdeePurchaseOrderControllerClient{cc}
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKdPurchaseReturn(ctx context.Context, in *BulkCreateKdPurchaseReturnRequest, opts ...grpc.CallOption) (*BulkCreateKdPurchaseReturnResponse, error) {
	out := new(BulkCreateKdPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKdPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKdTransferOrder(ctx context.Context, in *BulkCreateKdTransferOrderRequest, opts ...grpc.CallOption) (*BulkCreateKdTransferOrderResponse, error) {
	out := new(BulkCreateKdTransferOrderResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKdTransferOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKingdeePurchaseOrder(ctx context.Context, in *BulkCreateKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*BulkCreateKingdeePurchaseOrderResponse, error) {
	out := new(BulkCreateKingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKingdeePurchaseOrderSync(ctx context.Context, in *BulkCreateKingdeePurchaseOrderSyncRequest, opts ...grpc.CallOption) (*BulkCreateKingdeePurchaseOrderSyncResponse, error) {
	out := new(BulkCreateKingdeePurchaseOrderSyncResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrderSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKingdeeReceiveBill(ctx context.Context, in *BulkCreateKingdeeReceiveBillRequest, opts ...grpc.CallOption) (*BulkCreateKingdeeReceiveBillResponse, error) {
	out := new(BulkCreateKingdeeReceiveBillResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKingdeeReceiveBillSync(ctx context.Context, in *BulkCreateKingdeeReceiveBillSyncRequest, opts ...grpc.CallOption) (*BulkCreateKingdeeReceiveBillSyncResponse, error) {
	out := new(BulkCreateKingdeeReceiveBillSyncResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBillSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Create(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) CreateKdPurchaseReturn(ctx context.Context, in *CreateKdPurchaseReturnRequest, opts ...grpc.CallOption) (*CreateKdPurchaseReturnResponse, error) {
	out := new(CreateKdPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_CreateKdPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) CreateKdTransferOrder(ctx context.Context, in *CreateKdTransferOrderRequest, opts ...grpc.CallOption) (*CreateKdTransferOrderResponse, error) {
	out := new(CreateKdTransferOrderResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_CreateKdTransferOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) CxlKdPurchaseReturnFromWdt(ctx context.Context, in *CxlKdPurchaseReturnFromWdtRequest, opts ...grpc.CallOption) (*CxlKdPurchaseReturnFromWdtResponse, error) {
	out := new(CxlKdPurchaseReturnFromWdtResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_CxlKdPurchaseReturnFromWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) CxlKdReceiveBillFromWdt(ctx context.Context, in *CxlKdReceiveBillFromWdtRequest, opts ...grpc.CallOption) (*CxlKdReceiveBillFromWdtResponse, error) {
	out := new(CxlKdReceiveBillFromWdtResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_CxlKdReceiveBillFromWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) CxlKdTransferOrderFromWdt(ctx context.Context, in *CxlKdTransferOrderFromWdtRequest, opts ...grpc.CallOption) (*CxlKdTransferOrderFromWdtResponse, error) {
	out := new(CxlKdTransferOrderFromWdtResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_CxlKdTransferOrderFromWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Destroy(ctx context.Context, in *KingdeePurchaseDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) List(ctx context.Context, in *KingdeePurchaseListRequest, opts ...grpc.CallOption) (*KingdeePurchaseListResponse, error) {
	out := new(KingdeePurchaseListResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) PartialUpdate(ctx context.Context, in *KingdeePurchasePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) QueryKdPurchaseNoSyncStatus(ctx context.Context, in *QueryKdPurchaseNoSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdPurchaseNoSyncStatusResponse, error) {
	out := new(QueryKdPurchaseNoSyncStatusResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_QueryKdPurchaseNoSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) QueryKdPurchaseReturnSyncStatus(ctx context.Context, in *QueryKdPurchaseReturnSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdPurchaseReturnSyncStatusResponse, error) {
	out := new(QueryKdPurchaseReturnSyncStatusResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_QueryKdPurchaseReturnSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) QueryKdReceiveBillSyncStatus(ctx context.Context, in *QueryKdReceiveBillSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdReceiveBillSyncStatusResponse, error) {
	out := new(QueryKdReceiveBillSyncStatusResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_QueryKdReceiveBillSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) QueryKdTransferOrderSyncStatus(ctx context.Context, in *QueryKdTransferOrderSyncStatusRequest, opts ...grpc.CallOption) (*QueryKdTransferOrderSyncStatusResponse, error) {
	out := new(QueryKdTransferOrderSyncStatusResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_QueryKdTransferOrderSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) QueryKingdeePurchaseOrder(ctx context.Context, in *QueryKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*QueryKingdeePurchaseOrderResponse, error) {
	out := new(QueryKingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Retrieve(ctx context.Context, in *KingdeePurchaseRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) StopKdReceiveBillFromWdt(ctx context.Context, in *StopKdReceiveBillFromWdtRequest, opts ...grpc.CallOption) (*StopKdReceiveBillFromWdtResponse, error) {
	out := new(StopKdReceiveBillFromWdtResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_StopKdReceiveBillFromWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) SyncKdPurchaseReturn(ctx context.Context, in *SyncKdPurchaseReturnRequest, opts ...grpc.CallOption) (*SyncKdPurchaseReturnResponse, error) {
	out := new(SyncKdPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_SyncKdPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) SyncKdTransferOrder(ctx context.Context, in *SyncKdTransferOrderRequest, opts ...grpc.CallOption) (*SyncKdTransferOrderResponse, error) {
	out := new(SyncKdTransferOrderResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_SyncKdTransferOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Update(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KingdeePurchaseOrderControllerServer is the server API for KingdeePurchaseOrderController service.
// All implementations must embed UnimplementedKingdeePurchaseOrderControllerServer
// for forward compatibility
type KingdeePurchaseOrderControllerServer interface {
	BulkCreateKdPurchaseReturn(context.Context, *BulkCreateKdPurchaseReturnRequest) (*BulkCreateKdPurchaseReturnResponse, error)
	BulkCreateKdTransferOrder(context.Context, *BulkCreateKdTransferOrderRequest) (*BulkCreateKdTransferOrderResponse, error)
	BulkCreateKingdeePurchaseOrder(context.Context, *BulkCreateKingdeePurchaseOrderRequest) (*BulkCreateKingdeePurchaseOrderResponse, error)
	BulkCreateKingdeePurchaseOrderSync(context.Context, *BulkCreateKingdeePurchaseOrderSyncRequest) (*BulkCreateKingdeePurchaseOrderSyncResponse, error)
	BulkCreateKingdeeReceiveBill(context.Context, *BulkCreateKingdeeReceiveBillRequest) (*BulkCreateKingdeeReceiveBillResponse, error)
	BulkCreateKingdeeReceiveBillSync(context.Context, *BulkCreateKingdeeReceiveBillSyncRequest) (*BulkCreateKingdeeReceiveBillSyncResponse, error)
	Create(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error)
	CreateKdPurchaseReturn(context.Context, *CreateKdPurchaseReturnRequest) (*CreateKdPurchaseReturnResponse, error)
	CreateKdTransferOrder(context.Context, *CreateKdTransferOrderRequest) (*CreateKdTransferOrderResponse, error)
	CxlKdPurchaseReturnFromWdt(context.Context, *CxlKdPurchaseReturnFromWdtRequest) (*CxlKdPurchaseReturnFromWdtResponse, error)
	CxlKdReceiveBillFromWdt(context.Context, *CxlKdReceiveBillFromWdtRequest) (*CxlKdReceiveBillFromWdtResponse, error)
	CxlKdTransferOrderFromWdt(context.Context, *CxlKdTransferOrderFromWdtRequest) (*CxlKdTransferOrderFromWdtResponse, error)
	Destroy(context.Context, *KingdeePurchaseDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *KingdeePurchaseListRequest) (*KingdeePurchaseListResponse, error)
	PartialUpdate(context.Context, *KingdeePurchasePartialUpdateRequest) (*KingdeePurchaseResponse, error)
	QueryKdPurchaseNoSyncStatus(context.Context, *QueryKdPurchaseNoSyncStatusRequest) (*QueryKdPurchaseNoSyncStatusResponse, error)
	QueryKdPurchaseReturnSyncStatus(context.Context, *QueryKdPurchaseReturnSyncStatusRequest) (*QueryKdPurchaseReturnSyncStatusResponse, error)
	QueryKdReceiveBillSyncStatus(context.Context, *QueryKdReceiveBillSyncStatusRequest) (*QueryKdReceiveBillSyncStatusResponse, error)
	QueryKdTransferOrderSyncStatus(context.Context, *QueryKdTransferOrderSyncStatusRequest) (*QueryKdTransferOrderSyncStatusResponse, error)
	QueryKingdeePurchaseOrder(context.Context, *QueryKingdeePurchaseOrderRequest) (*QueryKingdeePurchaseOrderResponse, error)
	Retrieve(context.Context, *KingdeePurchaseRetrieveRequest) (*KingdeePurchaseResponse, error)
	StopKdReceiveBillFromWdt(context.Context, *StopKdReceiveBillFromWdtRequest) (*StopKdReceiveBillFromWdtResponse, error)
	SyncKdPurchaseReturn(context.Context, *SyncKdPurchaseReturnRequest) (*SyncKdPurchaseReturnResponse, error)
	SyncKdTransferOrder(context.Context, *SyncKdTransferOrderRequest) (*SyncKdTransferOrderResponse, error)
	Update(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error)
	mustEmbedUnimplementedKingdeePurchaseOrderControllerServer()
}

// UnimplementedKingdeePurchaseOrderControllerServer must be embedded to have forward compatible implementations.
type UnimplementedKingdeePurchaseOrderControllerServer struct {
}

func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKdPurchaseReturn(context.Context, *BulkCreateKdPurchaseReturnRequest) (*BulkCreateKdPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKdPurchaseReturn not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKdTransferOrder(context.Context, *BulkCreateKdTransferOrderRequest) (*BulkCreateKdTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKdTransferOrder not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKingdeePurchaseOrder(context.Context, *BulkCreateKingdeePurchaseOrderRequest) (*BulkCreateKingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKingdeePurchaseOrder not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKingdeePurchaseOrderSync(context.Context, *BulkCreateKingdeePurchaseOrderSyncRequest) (*BulkCreateKingdeePurchaseOrderSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKingdeePurchaseOrderSync not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKingdeeReceiveBill(context.Context, *BulkCreateKingdeeReceiveBillRequest) (*BulkCreateKingdeeReceiveBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKingdeeReceiveBill not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKingdeeReceiveBillSync(context.Context, *BulkCreateKingdeeReceiveBillSyncRequest) (*BulkCreateKingdeeReceiveBillSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKingdeeReceiveBillSync not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Create(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) CreateKdPurchaseReturn(context.Context, *CreateKdPurchaseReturnRequest) (*CreateKdPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKdPurchaseReturn not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) CreateKdTransferOrder(context.Context, *CreateKdTransferOrderRequest) (*CreateKdTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKdTransferOrder not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) CxlKdPurchaseReturnFromWdt(context.Context, *CxlKdPurchaseReturnFromWdtRequest) (*CxlKdPurchaseReturnFromWdtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CxlKdPurchaseReturnFromWdt not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) CxlKdReceiveBillFromWdt(context.Context, *CxlKdReceiveBillFromWdtRequest) (*CxlKdReceiveBillFromWdtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CxlKdReceiveBillFromWdt not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) CxlKdTransferOrderFromWdt(context.Context, *CxlKdTransferOrderFromWdtRequest) (*CxlKdTransferOrderFromWdtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CxlKdTransferOrderFromWdt not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Destroy(context.Context, *KingdeePurchaseDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) List(context.Context, *KingdeePurchaseListRequest) (*KingdeePurchaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) PartialUpdate(context.Context, *KingdeePurchasePartialUpdateRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) QueryKdPurchaseNoSyncStatus(context.Context, *QueryKdPurchaseNoSyncStatusRequest) (*QueryKdPurchaseNoSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKdPurchaseNoSyncStatus not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) QueryKdPurchaseReturnSyncStatus(context.Context, *QueryKdPurchaseReturnSyncStatusRequest) (*QueryKdPurchaseReturnSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKdPurchaseReturnSyncStatus not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) QueryKdReceiveBillSyncStatus(context.Context, *QueryKdReceiveBillSyncStatusRequest) (*QueryKdReceiveBillSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKdReceiveBillSyncStatus not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) QueryKdTransferOrderSyncStatus(context.Context, *QueryKdTransferOrderSyncStatusRequest) (*QueryKdTransferOrderSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKdTransferOrderSyncStatus not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) QueryKingdeePurchaseOrder(context.Context, *QueryKingdeePurchaseOrderRequest) (*QueryKingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKingdeePurchaseOrder not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Retrieve(context.Context, *KingdeePurchaseRetrieveRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) StopKdReceiveBillFromWdt(context.Context, *StopKdReceiveBillFromWdtRequest) (*StopKdReceiveBillFromWdtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopKdReceiveBillFromWdt not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) SyncKdPurchaseReturn(context.Context, *SyncKdPurchaseReturnRequest) (*SyncKdPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncKdPurchaseReturn not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) SyncKdTransferOrder(context.Context, *SyncKdTransferOrderRequest) (*SyncKdTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncKdTransferOrder not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Update(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) mustEmbedUnimplementedKingdeePurchaseOrderControllerServer() {
}

// UnsafeKingdeePurchaseOrderControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KingdeePurchaseOrderControllerServer will
// result in compilation errors.
type UnsafeKingdeePurchaseOrderControllerServer interface {
	mustEmbedUnimplementedKingdeePurchaseOrderControllerServer()
}

func RegisterKingdeePurchaseOrderControllerServer(s grpc.ServiceRegistrar, srv KingdeePurchaseOrderControllerServer) {
	s.RegisterService(&KingdeePurchaseOrderController_ServiceDesc, srv)
}

func _KingdeePurchaseOrderController_BulkCreateKdPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKdPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKdPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKdPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKdPurchaseReturn(ctx, req.(*BulkCreateKdPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_BulkCreateKdTransferOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKdTransferOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKdTransferOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKdTransferOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKdTransferOrder(ctx, req.(*BulkCreateKdTransferOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKingdeePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeePurchaseOrder(ctx, req.(*BulkCreateKingdeePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrderSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKingdeePurchaseOrderSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeePurchaseOrderSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrderSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeePurchaseOrderSync(ctx, req.(*BulkCreateKingdeePurchaseOrderSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKingdeeReceiveBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeeReceiveBill(ctx, req.(*BulkCreateKingdeeReceiveBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBillSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKingdeeReceiveBillSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeeReceiveBillSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBillSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeeReceiveBillSync(ctx, req.(*BulkCreateKingdeeReceiveBillSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Create(ctx, req.(*KingdeePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_CreateKdPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKdPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).CreateKdPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_CreateKdPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).CreateKdPurchaseReturn(ctx, req.(*CreateKdPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_CreateKdTransferOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKdTransferOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).CreateKdTransferOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_CreateKdTransferOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).CreateKdTransferOrder(ctx, req.(*CreateKdTransferOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_CxlKdPurchaseReturnFromWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CxlKdPurchaseReturnFromWdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).CxlKdPurchaseReturnFromWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_CxlKdPurchaseReturnFromWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).CxlKdPurchaseReturnFromWdt(ctx, req.(*CxlKdPurchaseReturnFromWdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_CxlKdReceiveBillFromWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CxlKdReceiveBillFromWdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).CxlKdReceiveBillFromWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_CxlKdReceiveBillFromWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).CxlKdReceiveBillFromWdt(ctx, req.(*CxlKdReceiveBillFromWdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_CxlKdTransferOrderFromWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CxlKdTransferOrderFromWdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).CxlKdTransferOrderFromWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_CxlKdTransferOrderFromWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).CxlKdTransferOrderFromWdt(ctx, req.(*CxlKdTransferOrderFromWdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Destroy(ctx, req.(*KingdeePurchaseDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).List(ctx, req.(*KingdeePurchaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchasePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).PartialUpdate(ctx, req.(*KingdeePurchasePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_QueryKdPurchaseNoSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKdPurchaseNoSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdPurchaseNoSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_QueryKdPurchaseNoSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdPurchaseNoSyncStatus(ctx, req.(*QueryKdPurchaseNoSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_QueryKdPurchaseReturnSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKdPurchaseReturnSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdPurchaseReturnSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_QueryKdPurchaseReturnSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdPurchaseReturnSyncStatus(ctx, req.(*QueryKdPurchaseReturnSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_QueryKdReceiveBillSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKdReceiveBillSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdReceiveBillSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_QueryKdReceiveBillSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdReceiveBillSyncStatus(ctx, req.(*QueryKdReceiveBillSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_QueryKdTransferOrderSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKdTransferOrderSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdTransferOrderSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_QueryKdTransferOrderSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKdTransferOrderSyncStatus(ctx, req.(*QueryKdTransferOrderSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKingdeePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKingdeePurchaseOrder(ctx, req.(*QueryKingdeePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Retrieve(ctx, req.(*KingdeePurchaseRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_StopKdReceiveBillFromWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopKdReceiveBillFromWdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).StopKdReceiveBillFromWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_StopKdReceiveBillFromWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).StopKdReceiveBillFromWdt(ctx, req.(*StopKdReceiveBillFromWdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_SyncKdPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncKdPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).SyncKdPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_SyncKdPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).SyncKdPurchaseReturn(ctx, req.(*SyncKdPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_SyncKdTransferOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncKdTransferOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).SyncKdTransferOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_SyncKdTransferOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).SyncKdTransferOrder(ctx, req.(*SyncKdTransferOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Update(ctx, req.(*KingdeePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KingdeePurchaseOrderController_ServiceDesc is the grpc.ServiceDesc for KingdeePurchaseOrderController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KingdeePurchaseOrderController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.KingdeePurchaseOrderController",
	HandlerType: (*KingdeePurchaseOrderControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BulkCreateKdPurchaseReturn",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKdPurchaseReturn_Handler,
		},
		{
			MethodName: "BulkCreateKdTransferOrder",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKdTransferOrder_Handler,
		},
		{
			MethodName: "BulkCreateKingdeePurchaseOrder",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "BulkCreateKingdeePurchaseOrderSync",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrderSync_Handler,
		},
		{
			MethodName: "BulkCreateKingdeeReceiveBill",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "BulkCreateKingdeeReceiveBillSync",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBillSync_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _KingdeePurchaseOrderController_Create_Handler,
		},
		{
			MethodName: "CreateKdPurchaseReturn",
			Handler:    _KingdeePurchaseOrderController_CreateKdPurchaseReturn_Handler,
		},
		{
			MethodName: "CreateKdTransferOrder",
			Handler:    _KingdeePurchaseOrderController_CreateKdTransferOrder_Handler,
		},
		{
			MethodName: "CxlKdPurchaseReturnFromWdt",
			Handler:    _KingdeePurchaseOrderController_CxlKdPurchaseReturnFromWdt_Handler,
		},
		{
			MethodName: "CxlKdReceiveBillFromWdt",
			Handler:    _KingdeePurchaseOrderController_CxlKdReceiveBillFromWdt_Handler,
		},
		{
			MethodName: "CxlKdTransferOrderFromWdt",
			Handler:    _KingdeePurchaseOrderController_CxlKdTransferOrderFromWdt_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _KingdeePurchaseOrderController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KingdeePurchaseOrderController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _KingdeePurchaseOrderController_PartialUpdate_Handler,
		},
		{
			MethodName: "QueryKdPurchaseNoSyncStatus",
			Handler:    _KingdeePurchaseOrderController_QueryKdPurchaseNoSyncStatus_Handler,
		},
		{
			MethodName: "QueryKdPurchaseReturnSyncStatus",
			Handler:    _KingdeePurchaseOrderController_QueryKdPurchaseReturnSyncStatus_Handler,
		},
		{
			MethodName: "QueryKdReceiveBillSyncStatus",
			Handler:    _KingdeePurchaseOrderController_QueryKdReceiveBillSyncStatus_Handler,
		},
		{
			MethodName: "QueryKdTransferOrderSyncStatus",
			Handler:    _KingdeePurchaseOrderController_QueryKdTransferOrderSyncStatus_Handler,
		},
		{
			MethodName: "QueryKingdeePurchaseOrder",
			Handler:    _KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _KingdeePurchaseOrderController_Retrieve_Handler,
		},
		{
			MethodName: "StopKdReceiveBillFromWdt",
			Handler:    _KingdeePurchaseOrderController_StopKdReceiveBillFromWdt_Handler,
		},
		{
			MethodName: "SyncKdPurchaseReturn",
			Handler:    _KingdeePurchaseOrderController_SyncKdPurchaseReturn_Handler,
		},
		{
			MethodName: "SyncKdTransferOrder",
			Handler:    _KingdeePurchaseOrderController_SyncKdTransferOrder_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _KingdeePurchaseOrderController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	OtherStockoutController_List_FullMethodName                                             = "/kingdee_service.kingdee_ito.OtherStockoutController/List"
	OtherStockoutController_RunPeriodPushStockOutsideToKingdeeStkMisDelivery_FullMethodName = "/kingdee_service.kingdee_ito.OtherStockoutController/RunPeriodPushStockOutsideToKingdeeStkMisDelivery"
	OtherStockoutController_TaskSigAggOrderStockOutside_FullMethodName                      = "/kingdee_service.kingdee_ito.OtherStockoutController/TaskSigAggOrderStockOutside"
	OtherStockoutController_TaskSigFetchStockoutOrder_FullMethodName                        = "/kingdee_service.kingdee_ito.OtherStockoutController/TaskSigFetchStockoutOrder"
	OtherStockoutController_TaskSigFetchWdtStockOutsideOrder_FullMethodName                 = "/kingdee_service.kingdee_ito.OtherStockoutController/TaskSigFetchWdtStockOutsideOrder"
)

// OtherStockoutControllerClient is the client API for OtherStockoutController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtherStockoutControllerClient interface {
	List(ctx context.Context, in *WdtStockoutModelListRequest, opts ...grpc.CallOption) (*WdtStockoutModelListResponse, error)
	RunPeriodPushStockOutsideToKingdeeStkMisDelivery(ctx context.Context, in *RunPeriodPushStockOutsideToKingdeeStkMisDeliveryRequest, opts ...grpc.CallOption) (*RunPeriodPushStockOutsideToKingdeeStkMisDeliveryResponse, error)
	TaskSigAggOrderStockOutside(ctx context.Context, in *TaskSigAggOrderStockOutsideRequest, opts ...grpc.CallOption) (*TaskSigAggOrderStockOutsideResponse, error)
	TaskSigFetchStockoutOrder(ctx context.Context, in *TaskSigFetchStockoutOrderRequest, opts ...grpc.CallOption) (*TaskSigFetchStockoutOrderResponse, error)
	TaskSigFetchWdtStockOutsideOrder(ctx context.Context, in *TaskSigFetchWdtStockOutsideOrderRequest, opts ...grpc.CallOption) (*TaskSigFetchWdtStockOutsideOrderResponse, error)
}

type otherStockoutControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOtherStockoutControllerClient(cc grpc.ClientConnInterface) OtherStockoutControllerClient {
	return &otherStockoutControllerClient{cc}
}

func (c *otherStockoutControllerClient) List(ctx context.Context, in *WdtStockoutModelListRequest, opts ...grpc.CallOption) (*WdtStockoutModelListResponse, error) {
	out := new(WdtStockoutModelListResponse)
	err := c.cc.Invoke(ctx, OtherStockoutController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherStockoutControllerClient) RunPeriodPushStockOutsideToKingdeeStkMisDelivery(ctx context.Context, in *RunPeriodPushStockOutsideToKingdeeStkMisDeliveryRequest, opts ...grpc.CallOption) (*RunPeriodPushStockOutsideToKingdeeStkMisDeliveryResponse, error) {
	out := new(RunPeriodPushStockOutsideToKingdeeStkMisDeliveryResponse)
	err := c.cc.Invoke(ctx, OtherStockoutController_RunPeriodPushStockOutsideToKingdeeStkMisDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherStockoutControllerClient) TaskSigAggOrderStockOutside(ctx context.Context, in *TaskSigAggOrderStockOutsideRequest, opts ...grpc.CallOption) (*TaskSigAggOrderStockOutsideResponse, error) {
	out := new(TaskSigAggOrderStockOutsideResponse)
	err := c.cc.Invoke(ctx, OtherStockoutController_TaskSigAggOrderStockOutside_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherStockoutControllerClient) TaskSigFetchStockoutOrder(ctx context.Context, in *TaskSigFetchStockoutOrderRequest, opts ...grpc.CallOption) (*TaskSigFetchStockoutOrderResponse, error) {
	out := new(TaskSigFetchStockoutOrderResponse)
	err := c.cc.Invoke(ctx, OtherStockoutController_TaskSigFetchStockoutOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherStockoutControllerClient) TaskSigFetchWdtStockOutsideOrder(ctx context.Context, in *TaskSigFetchWdtStockOutsideOrderRequest, opts ...grpc.CallOption) (*TaskSigFetchWdtStockOutsideOrderResponse, error) {
	out := new(TaskSigFetchWdtStockOutsideOrderResponse)
	err := c.cc.Invoke(ctx, OtherStockoutController_TaskSigFetchWdtStockOutsideOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtherStockoutControllerServer is the server API for OtherStockoutController service.
// All implementations must embed UnimplementedOtherStockoutControllerServer
// for forward compatibility
type OtherStockoutControllerServer interface {
	List(context.Context, *WdtStockoutModelListRequest) (*WdtStockoutModelListResponse, error)
	RunPeriodPushStockOutsideToKingdeeStkMisDelivery(context.Context, *RunPeriodPushStockOutsideToKingdeeStkMisDeliveryRequest) (*RunPeriodPushStockOutsideToKingdeeStkMisDeliveryResponse, error)
	TaskSigAggOrderStockOutside(context.Context, *TaskSigAggOrderStockOutsideRequest) (*TaskSigAggOrderStockOutsideResponse, error)
	TaskSigFetchStockoutOrder(context.Context, *TaskSigFetchStockoutOrderRequest) (*TaskSigFetchStockoutOrderResponse, error)
	TaskSigFetchWdtStockOutsideOrder(context.Context, *TaskSigFetchWdtStockOutsideOrderRequest) (*TaskSigFetchWdtStockOutsideOrderResponse, error)
	mustEmbedUnimplementedOtherStockoutControllerServer()
}

// UnimplementedOtherStockoutControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOtherStockoutControllerServer struct {
}

func (UnimplementedOtherStockoutControllerServer) List(context.Context, *WdtStockoutModelListRequest) (*WdtStockoutModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOtherStockoutControllerServer) RunPeriodPushStockOutsideToKingdeeStkMisDelivery(context.Context, *RunPeriodPushStockOutsideToKingdeeStkMisDeliveryRequest) (*RunPeriodPushStockOutsideToKingdeeStkMisDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodPushStockOutsideToKingdeeStkMisDelivery not implemented")
}
func (UnimplementedOtherStockoutControllerServer) TaskSigAggOrderStockOutside(context.Context, *TaskSigAggOrderStockOutsideRequest) (*TaskSigAggOrderStockOutsideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggOrderStockOutside not implemented")
}
func (UnimplementedOtherStockoutControllerServer) TaskSigFetchStockoutOrder(context.Context, *TaskSigFetchStockoutOrderRequest) (*TaskSigFetchStockoutOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigFetchStockoutOrder not implemented")
}
func (UnimplementedOtherStockoutControllerServer) TaskSigFetchWdtStockOutsideOrder(context.Context, *TaskSigFetchWdtStockOutsideOrderRequest) (*TaskSigFetchWdtStockOutsideOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigFetchWdtStockOutsideOrder not implemented")
}
func (UnimplementedOtherStockoutControllerServer) mustEmbedUnimplementedOtherStockoutControllerServer() {
}

// UnsafeOtherStockoutControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtherStockoutControllerServer will
// result in compilation errors.
type UnsafeOtherStockoutControllerServer interface {
	mustEmbedUnimplementedOtherStockoutControllerServer()
}

func RegisterOtherStockoutControllerServer(s grpc.ServiceRegistrar, srv OtherStockoutControllerServer) {
	s.RegisterService(&OtherStockoutController_ServiceDesc, srv)
}

func _OtherStockoutController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherStockoutControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtherStockoutController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherStockoutControllerServer).List(ctx, req.(*WdtStockoutModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtherStockoutController_RunPeriodPushStockOutsideToKingdeeStkMisDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodPushStockOutsideToKingdeeStkMisDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherStockoutControllerServer).RunPeriodPushStockOutsideToKingdeeStkMisDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtherStockoutController_RunPeriodPushStockOutsideToKingdeeStkMisDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherStockoutControllerServer).RunPeriodPushStockOutsideToKingdeeStkMisDelivery(ctx, req.(*RunPeriodPushStockOutsideToKingdeeStkMisDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtherStockoutController_TaskSigAggOrderStockOutside_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggOrderStockOutsideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherStockoutControllerServer).TaskSigAggOrderStockOutside(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtherStockoutController_TaskSigAggOrderStockOutside_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherStockoutControllerServer).TaskSigAggOrderStockOutside(ctx, req.(*TaskSigAggOrderStockOutsideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtherStockoutController_TaskSigFetchStockoutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigFetchStockoutOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherStockoutControllerServer).TaskSigFetchStockoutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtherStockoutController_TaskSigFetchStockoutOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherStockoutControllerServer).TaskSigFetchStockoutOrder(ctx, req.(*TaskSigFetchStockoutOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtherStockoutController_TaskSigFetchWdtStockOutsideOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigFetchWdtStockOutsideOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherStockoutControllerServer).TaskSigFetchWdtStockOutsideOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtherStockoutController_TaskSigFetchWdtStockOutsideOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherStockoutControllerServer).TaskSigFetchWdtStockOutsideOrder(ctx, req.(*TaskSigFetchWdtStockOutsideOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OtherStockoutController_ServiceDesc is the grpc.ServiceDesc for OtherStockoutController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtherStockoutController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.OtherStockoutController",
	HandlerType: (*OtherStockoutControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _OtherStockoutController_List_Handler,
		},
		{
			MethodName: "RunPeriodPushStockOutsideToKingdeeStkMisDelivery",
			Handler:    _OtherStockoutController_RunPeriodPushStockOutsideToKingdeeStkMisDelivery_Handler,
		},
		{
			MethodName: "TaskSigAggOrderStockOutside",
			Handler:    _OtherStockoutController_TaskSigAggOrderStockOutside_Handler,
		},
		{
			MethodName: "TaskSigFetchStockoutOrder",
			Handler:    _OtherStockoutController_TaskSigFetchStockoutOrder_Handler,
		},
		{
			MethodName: "TaskSigFetchWdtStockOutsideOrder",
			Handler:    _OtherStockoutController_TaskSigFetchWdtStockOutsideOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	PurchasePlatController_CreateKingdeePurchaseOrder_FullMethodName             = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateKingdeePurchaseOrder"
	PurchasePlatController_CreateKingdeePurchaseReturn_FullMethodName            = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateKingdeePurchaseReturn"
	PurchasePlatController_CreateKingdeeReceiveBill_FullMethodName               = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateKingdeeReceiveBill"
	PurchasePlatController_CreateWdtPurchaseOrder_FullMethodName                 = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateWdtPurchaseOrder"
	PurchasePlatController_CreateWdtPurchaseReturn_FullMethodName                = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateWdtPurchaseReturn"
	PurchasePlatController_CreateWdtStockOutPurchaseReturn_FullMethodName        = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateWdtStockOutPurchaseReturn"
	PurchasePlatController_CreateWdtStockinOrderPurchase_FullMethodName          = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateWdtStockinOrderPurchase"
	PurchasePlatController_CreateWdtStockoutOrderReturn_FullMethodName           = "/kingdee_service.kingdee_ito.PurchasePlatController/CreateWdtStockoutOrderReturn"
	PurchasePlatController_DestroyKingdeePurchaseOrder_FullMethodName            = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyKingdeePurchaseOrder"
	PurchasePlatController_DestroyKingdeePurchaseReturn_FullMethodName           = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyKingdeePurchaseReturn"
	PurchasePlatController_DestroyKingdeeReceiveBill_FullMethodName              = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyKingdeeReceiveBill"
	PurchasePlatController_DestroyWdtPurchaseOrder_FullMethodName                = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyWdtPurchaseOrder"
	PurchasePlatController_DestroyWdtPurchaseReturn_FullMethodName               = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyWdtPurchaseReturn"
	PurchasePlatController_DestroyWdtStockOutPurchaseReturn_FullMethodName       = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyWdtStockOutPurchaseReturn"
	PurchasePlatController_DestroyWdtStockinOrderPurchase_FullMethodName         = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyWdtStockinOrderPurchase"
	PurchasePlatController_DestroyWdtStockoutOrderReturn_FullMethodName          = "/kingdee_service.kingdee_ito.PurchasePlatController/DestroyWdtStockoutOrderReturn"
	PurchasePlatController_ListKingdeePurchaseOrder_FullMethodName               = "/kingdee_service.kingdee_ito.PurchasePlatController/ListKingdeePurchaseOrder"
	PurchasePlatController_ListKingdeePurchaseReturn_FullMethodName              = "/kingdee_service.kingdee_ito.PurchasePlatController/ListKingdeePurchaseReturn"
	PurchasePlatController_ListKingdeeReceiveBill_FullMethodName                 = "/kingdee_service.kingdee_ito.PurchasePlatController/ListKingdeeReceiveBill"
	PurchasePlatController_ListWdtPurchaseOrder_FullMethodName                   = "/kingdee_service.kingdee_ito.PurchasePlatController/ListWdtPurchaseOrder"
	PurchasePlatController_ListWdtPurchaseReturn_FullMethodName                  = "/kingdee_service.kingdee_ito.PurchasePlatController/ListWdtPurchaseReturn"
	PurchasePlatController_ListWdtStockOutPurchaseReturn_FullMethodName          = "/kingdee_service.kingdee_ito.PurchasePlatController/ListWdtStockOutPurchaseReturn"
	PurchasePlatController_ListWdtStockinOrderPurchase_FullMethodName            = "/kingdee_service.kingdee_ito.PurchasePlatController/ListWdtStockinOrderPurchase"
	PurchasePlatController_ListWdtStockoutOrderReturn_FullMethodName             = "/kingdee_service.kingdee_ito.PurchasePlatController/ListWdtStockoutOrderReturn"
	PurchasePlatController_PartialUpdateKingdeePurchaseOrder_FullMethodName      = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateKingdeePurchaseOrder"
	PurchasePlatController_PartialUpdateKingdeePurchaseReturn_FullMethodName     = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateKingdeePurchaseReturn"
	PurchasePlatController_PartialUpdateKingdeeReceiveBill_FullMethodName        = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateKingdeeReceiveBill"
	PurchasePlatController_PartialUpdateWdtPurchaseOrder_FullMethodName          = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateWdtPurchaseOrder"
	PurchasePlatController_PartialUpdateWdtPurchaseReturn_FullMethodName         = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateWdtPurchaseReturn"
	PurchasePlatController_PartialUpdateWdtStockOutPurchaseReturn_FullMethodName = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateWdtStockOutPurchaseReturn"
	PurchasePlatController_PartialUpdateWdtStockinOrderPurchase_FullMethodName   = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateWdtStockinOrderPurchase"
	PurchasePlatController_PartialUpdateWdtStockoutOrderReturn_FullMethodName    = "/kingdee_service.kingdee_ito.PurchasePlatController/PartialUpdateWdtStockoutOrderReturn"
	PurchasePlatController_RetrieveKingdeePurchaseOrder_FullMethodName           = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveKingdeePurchaseOrder"
	PurchasePlatController_RetrieveKingdeePurchaseReturn_FullMethodName          = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveKingdeePurchaseReturn"
	PurchasePlatController_RetrieveKingdeeReceiveBill_FullMethodName             = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveKingdeeReceiveBill"
	PurchasePlatController_RetrieveWdtPurchaseOrder_FullMethodName               = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveWdtPurchaseOrder"
	PurchasePlatController_RetrieveWdtPurchaseReturn_FullMethodName              = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveWdtPurchaseReturn"
	PurchasePlatController_RetrieveWdtStockOutPurchaseReturn_FullMethodName      = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveWdtStockOutPurchaseReturn"
	PurchasePlatController_RetrieveWdtStockinOrderPurchase_FullMethodName        = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveWdtStockinOrderPurchase"
	PurchasePlatController_RetrieveWdtStockoutOrderReturn_FullMethodName         = "/kingdee_service.kingdee_ito.PurchasePlatController/RetrieveWdtStockoutOrderReturn"
	PurchasePlatController_UpdateKingdeePurchaseOrder_FullMethodName             = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateKingdeePurchaseOrder"
	PurchasePlatController_UpdateKingdeePurchaseReturn_FullMethodName            = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateKingdeePurchaseReturn"
	PurchasePlatController_UpdateKingdeeReceiveBill_FullMethodName               = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateKingdeeReceiveBill"
	PurchasePlatController_UpdateWdtPurchaseOrder_FullMethodName                 = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateWdtPurchaseOrder"
	PurchasePlatController_UpdateWdtPurchaseReturn_FullMethodName                = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateWdtPurchaseReturn"
	PurchasePlatController_UpdateWdtStockOutPurchaseReturn_FullMethodName        = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateWdtStockOutPurchaseReturn"
	PurchasePlatController_UpdateWdtStockinOrderPurchase_FullMethodName          = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateWdtStockinOrderPurchase"
	PurchasePlatController_UpdateWdtStockoutOrderReturn_FullMethodName           = "/kingdee_service.kingdee_ito.PurchasePlatController/UpdateWdtStockoutOrderReturn"
)

// PurchasePlatControllerClient is the client API for PurchasePlatController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchasePlatControllerClient interface {
	CreateKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error)
	CreateKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error)
	CreateKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error)
	CreateWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error)
	CreateWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error)
	CreateWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
	CreateWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error)
	CreateWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
	DestroyKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderListRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderListResponse, error)
	ListKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnListRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnListResponse, error)
	ListKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillListRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillListResponse, error)
	ListWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderListRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderListResponse, error)
	ListWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnListRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnListResponse, error)
	ListWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnListRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnListResponse, error)
	ListWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseListRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseListResponse, error)
	ListWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnListRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnListResponse, error)
	PartialUpdateKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error)
	PartialUpdateKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error)
	PartialUpdateKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error)
	PartialUpdateWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderPartialUpdateRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error)
	PartialUpdateWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error)
	PartialUpdateWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
	PartialUpdateWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchasePartialUpdateRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error)
	PartialUpdateWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
	RetrieveKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error)
	RetrieveKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error)
	RetrieveKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillRetrieveRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error)
	RetrieveWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderRetrieveRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error)
	RetrieveWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error)
	RetrieveWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
	RetrieveWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseRetrieveRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error)
	RetrieveWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
	UpdateKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error)
	UpdateKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error)
	UpdateKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error)
	UpdateWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error)
	UpdateWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error)
	UpdateWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
	UpdateWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error)
	UpdateWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error)
}

type purchasePlatControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchasePlatControllerClient(cc grpc.ClientConnInterface) PurchasePlatControllerClient {
	return &purchasePlatControllerClient{cc}
}

func (c *purchasePlatControllerClient) CreateKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error) {
	out := new(KingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) CreateKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error) {
	out := new(KingdeePurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateKingdeePurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) CreateKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error) {
	out := new(KingdeeReceiveBillResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) CreateWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error) {
	out := new(WdtPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateWdtPurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) CreateWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error) {
	out := new(WdtPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateWdtPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) CreateWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateWdtStockOutPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) CreateWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error) {
	out := new(WdtStockinOrderPurchaseResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateWdtStockinOrderPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) CreateWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_CreateWdtStockoutOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyKingdeePurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyWdtPurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyWdtPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyWdtStockOutPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyWdtStockinOrderPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) DestroyWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PurchasePlatController_DestroyWdtStockoutOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderListRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderListResponse, error) {
	out := new(KingdeePurchaseOrderListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnListRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnListResponse, error) {
	out := new(KingdeePurchaseReturnListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListKingdeePurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillListRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillListResponse, error) {
	out := new(KingdeeReceiveBillListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderListRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderListResponse, error) {
	out := new(WdtPurchaseOrderListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListWdtPurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnListRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnListResponse, error) {
	out := new(WdtPurchaseReturnListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListWdtPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnListRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnListResponse, error) {
	out := new(WdtStockoutPurchaseReturnListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListWdtStockOutPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseListRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseListResponse, error) {
	out := new(WdtStockinOrderPurchaseListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListWdtStockinOrderPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) ListWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnListRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnListResponse, error) {
	out := new(WdtStockoutPurchaseReturnListResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_ListWdtStockoutOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error) {
	out := new(KingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error) {
	out := new(KingdeePurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateKingdeePurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error) {
	out := new(KingdeeReceiveBillResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderPartialUpdateRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error) {
	out := new(WdtPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateWdtPurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error) {
	out := new(WdtPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateWdtPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateWdtStockOutPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchasePartialUpdateRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error) {
	out := new(WdtStockinOrderPurchaseResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateWdtStockinOrderPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) PartialUpdateWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnPartialUpdateRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_PartialUpdateWdtStockoutOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error) {
	out := new(KingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error) {
	out := new(KingdeePurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveKingdeePurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillRetrieveRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error) {
	out := new(KingdeeReceiveBillResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderRetrieveRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error) {
	out := new(WdtPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveWdtPurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error) {
	out := new(WdtPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveWdtPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveWdtStockOutPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseRetrieveRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error) {
	out := new(WdtStockinOrderPurchaseResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveWdtStockinOrderPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) RetrieveWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRetrieveRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_RetrieveWdtStockoutOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateKingdeePurchaseOrder(ctx context.Context, in *KingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*KingdeePurchaseOrderResponse, error) {
	out := new(KingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateKingdeePurchaseReturn(ctx context.Context, in *KingdeePurchaseReturnRequest, opts ...grpc.CallOption) (*KingdeePurchaseReturnResponse, error) {
	out := new(KingdeePurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateKingdeePurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateKingdeeReceiveBill(ctx context.Context, in *KingdeeReceiveBillRequest, opts ...grpc.CallOption) (*KingdeeReceiveBillResponse, error) {
	out := new(KingdeeReceiveBillResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateWdtPurchaseOrder(ctx context.Context, in *WdtPurchaseOrderRequest, opts ...grpc.CallOption) (*WdtPurchaseOrderResponse, error) {
	out := new(WdtPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateWdtPurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateWdtPurchaseReturn(ctx context.Context, in *WdtPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtPurchaseReturnResponse, error) {
	out := new(WdtPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateWdtPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateWdtStockOutPurchaseReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateWdtStockOutPurchaseReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateWdtStockinOrderPurchase(ctx context.Context, in *WdtStockinOrderPurchaseRequest, opts ...grpc.CallOption) (*WdtStockinOrderPurchaseResponse, error) {
	out := new(WdtStockinOrderPurchaseResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateWdtStockinOrderPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasePlatControllerClient) UpdateWdtStockoutOrderReturn(ctx context.Context, in *WdtStockoutPurchaseReturnRequest, opts ...grpc.CallOption) (*WdtStockoutPurchaseReturnResponse, error) {
	out := new(WdtStockoutPurchaseReturnResponse)
	err := c.cc.Invoke(ctx, PurchasePlatController_UpdateWdtStockoutOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchasePlatControllerServer is the server API for PurchasePlatController service.
// All implementations must embed UnimplementedPurchasePlatControllerServer
// for forward compatibility
type PurchasePlatControllerServer interface {
	CreateKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderRequest) (*KingdeePurchaseOrderResponse, error)
	CreateKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnRequest) (*KingdeePurchaseReturnResponse, error)
	CreateKingdeeReceiveBill(context.Context, *KingdeeReceiveBillRequest) (*KingdeeReceiveBillResponse, error)
	CreateWdtPurchaseOrder(context.Context, *WdtPurchaseOrderRequest) (*WdtPurchaseOrderResponse, error)
	CreateWdtPurchaseReturn(context.Context, *WdtPurchaseReturnRequest) (*WdtPurchaseReturnResponse, error)
	CreateWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error)
	CreateWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseRequest) (*WdtStockinOrderPurchaseResponse, error)
	CreateWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error)
	DestroyKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderDestroyRequest) (*emptypb.Empty, error)
	DestroyKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnDestroyRequest) (*emptypb.Empty, error)
	DestroyKingdeeReceiveBill(context.Context, *KingdeeReceiveBillDestroyRequest) (*emptypb.Empty, error)
	DestroyWdtPurchaseOrder(context.Context, *WdtPurchaseOrderDestroyRequest) (*emptypb.Empty, error)
	DestroyWdtPurchaseReturn(context.Context, *WdtPurchaseReturnDestroyRequest) (*emptypb.Empty, error)
	DestroyWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnDestroyRequest) (*emptypb.Empty, error)
	DestroyWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseDestroyRequest) (*emptypb.Empty, error)
	DestroyWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnDestroyRequest) (*emptypb.Empty, error)
	ListKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderListRequest) (*KingdeePurchaseOrderListResponse, error)
	ListKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnListRequest) (*KingdeePurchaseReturnListResponse, error)
	ListKingdeeReceiveBill(context.Context, *KingdeeReceiveBillListRequest) (*KingdeeReceiveBillListResponse, error)
	ListWdtPurchaseOrder(context.Context, *WdtPurchaseOrderListRequest) (*WdtPurchaseOrderListResponse, error)
	ListWdtPurchaseReturn(context.Context, *WdtPurchaseReturnListRequest) (*WdtPurchaseReturnListResponse, error)
	ListWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnListRequest) (*WdtStockoutPurchaseReturnListResponse, error)
	ListWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseListRequest) (*WdtStockinOrderPurchaseListResponse, error)
	ListWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnListRequest) (*WdtStockoutPurchaseReturnListResponse, error)
	PartialUpdateKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderPartialUpdateRequest) (*KingdeePurchaseOrderResponse, error)
	PartialUpdateKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnPartialUpdateRequest) (*KingdeePurchaseReturnResponse, error)
	PartialUpdateKingdeeReceiveBill(context.Context, *KingdeeReceiveBillPartialUpdateRequest) (*KingdeeReceiveBillResponse, error)
	PartialUpdateWdtPurchaseOrder(context.Context, *WdtPurchaseOrderPartialUpdateRequest) (*WdtPurchaseOrderResponse, error)
	PartialUpdateWdtPurchaseReturn(context.Context, *WdtPurchaseReturnPartialUpdateRequest) (*WdtPurchaseReturnResponse, error)
	PartialUpdateWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnPartialUpdateRequest) (*WdtStockoutPurchaseReturnResponse, error)
	PartialUpdateWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchasePartialUpdateRequest) (*WdtStockinOrderPurchaseResponse, error)
	PartialUpdateWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnPartialUpdateRequest) (*WdtStockoutPurchaseReturnResponse, error)
	RetrieveKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderRetrieveRequest) (*KingdeePurchaseOrderResponse, error)
	RetrieveKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnRetrieveRequest) (*KingdeePurchaseReturnResponse, error)
	RetrieveKingdeeReceiveBill(context.Context, *KingdeeReceiveBillRetrieveRequest) (*KingdeeReceiveBillResponse, error)
	RetrieveWdtPurchaseOrder(context.Context, *WdtPurchaseOrderRetrieveRequest) (*WdtPurchaseOrderResponse, error)
	RetrieveWdtPurchaseReturn(context.Context, *WdtPurchaseReturnRetrieveRequest) (*WdtPurchaseReturnResponse, error)
	RetrieveWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnRetrieveRequest) (*WdtStockoutPurchaseReturnResponse, error)
	RetrieveWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseRetrieveRequest) (*WdtStockinOrderPurchaseResponse, error)
	RetrieveWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnRetrieveRequest) (*WdtStockoutPurchaseReturnResponse, error)
	UpdateKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderRequest) (*KingdeePurchaseOrderResponse, error)
	UpdateKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnRequest) (*KingdeePurchaseReturnResponse, error)
	UpdateKingdeeReceiveBill(context.Context, *KingdeeReceiveBillRequest) (*KingdeeReceiveBillResponse, error)
	UpdateWdtPurchaseOrder(context.Context, *WdtPurchaseOrderRequest) (*WdtPurchaseOrderResponse, error)
	UpdateWdtPurchaseReturn(context.Context, *WdtPurchaseReturnRequest) (*WdtPurchaseReturnResponse, error)
	UpdateWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error)
	UpdateWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseRequest) (*WdtStockinOrderPurchaseResponse, error)
	UpdateWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error)
	mustEmbedUnimplementedPurchasePlatControllerServer()
}

// UnimplementedPurchasePlatControllerServer must be embedded to have forward compatible implementations.
type UnimplementedPurchasePlatControllerServer struct {
}

func (UnimplementedPurchasePlatControllerServer) CreateKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderRequest) (*KingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKingdeePurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) CreateKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnRequest) (*KingdeePurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKingdeePurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) CreateKingdeeReceiveBill(context.Context, *KingdeeReceiveBillRequest) (*KingdeeReceiveBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKingdeeReceiveBill not implemented")
}
func (UnimplementedPurchasePlatControllerServer) CreateWdtPurchaseOrder(context.Context, *WdtPurchaseOrderRequest) (*WdtPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWdtPurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) CreateWdtPurchaseReturn(context.Context, *WdtPurchaseReturnRequest) (*WdtPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWdtPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) CreateWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWdtStockOutPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) CreateWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseRequest) (*WdtStockinOrderPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWdtStockinOrderPurchase not implemented")
}
func (UnimplementedPurchasePlatControllerServer) CreateWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWdtStockoutOrderReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKingdeePurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKingdeePurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyKingdeeReceiveBill(context.Context, *KingdeeReceiveBillDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKingdeeReceiveBill not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyWdtPurchaseOrder(context.Context, *WdtPurchaseOrderDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWdtPurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyWdtPurchaseReturn(context.Context, *WdtPurchaseReturnDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWdtPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWdtStockOutPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWdtStockinOrderPurchase not implemented")
}
func (UnimplementedPurchasePlatControllerServer) DestroyWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWdtStockoutOrderReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderListRequest) (*KingdeePurchaseOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeePurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnListRequest) (*KingdeePurchaseReturnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeePurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListKingdeeReceiveBill(context.Context, *KingdeeReceiveBillListRequest) (*KingdeeReceiveBillListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeeReceiveBill not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListWdtPurchaseOrder(context.Context, *WdtPurchaseOrderListRequest) (*WdtPurchaseOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtPurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListWdtPurchaseReturn(context.Context, *WdtPurchaseReturnListRequest) (*WdtPurchaseReturnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnListRequest) (*WdtStockoutPurchaseReturnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtStockOutPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseListRequest) (*WdtStockinOrderPurchaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtStockinOrderPurchase not implemented")
}
func (UnimplementedPurchasePlatControllerServer) ListWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnListRequest) (*WdtStockoutPurchaseReturnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtStockoutOrderReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderPartialUpdateRequest) (*KingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateKingdeePurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnPartialUpdateRequest) (*KingdeePurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateKingdeePurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateKingdeeReceiveBill(context.Context, *KingdeeReceiveBillPartialUpdateRequest) (*KingdeeReceiveBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateKingdeeReceiveBill not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateWdtPurchaseOrder(context.Context, *WdtPurchaseOrderPartialUpdateRequest) (*WdtPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateWdtPurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateWdtPurchaseReturn(context.Context, *WdtPurchaseReturnPartialUpdateRequest) (*WdtPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateWdtPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnPartialUpdateRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateWdtStockOutPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchasePartialUpdateRequest) (*WdtStockinOrderPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateWdtStockinOrderPurchase not implemented")
}
func (UnimplementedPurchasePlatControllerServer) PartialUpdateWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnPartialUpdateRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateWdtStockoutOrderReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderRetrieveRequest) (*KingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKingdeePurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnRetrieveRequest) (*KingdeePurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKingdeePurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveKingdeeReceiveBill(context.Context, *KingdeeReceiveBillRetrieveRequest) (*KingdeeReceiveBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKingdeeReceiveBill not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveWdtPurchaseOrder(context.Context, *WdtPurchaseOrderRetrieveRequest) (*WdtPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtPurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveWdtPurchaseReturn(context.Context, *WdtPurchaseReturnRetrieveRequest) (*WdtPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnRetrieveRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtStockOutPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseRetrieveRequest) (*WdtStockinOrderPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtStockinOrderPurchase not implemented")
}
func (UnimplementedPurchasePlatControllerServer) RetrieveWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnRetrieveRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtStockoutOrderReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateKingdeePurchaseOrder(context.Context, *KingdeePurchaseOrderRequest) (*KingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKingdeePurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateKingdeePurchaseReturn(context.Context, *KingdeePurchaseReturnRequest) (*KingdeePurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKingdeePurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateKingdeeReceiveBill(context.Context, *KingdeeReceiveBillRequest) (*KingdeeReceiveBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKingdeeReceiveBill not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateWdtPurchaseOrder(context.Context, *WdtPurchaseOrderRequest) (*WdtPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWdtPurchaseOrder not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateWdtPurchaseReturn(context.Context, *WdtPurchaseReturnRequest) (*WdtPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWdtPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateWdtStockOutPurchaseReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWdtStockOutPurchaseReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateWdtStockinOrderPurchase(context.Context, *WdtStockinOrderPurchaseRequest) (*WdtStockinOrderPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWdtStockinOrderPurchase not implemented")
}
func (UnimplementedPurchasePlatControllerServer) UpdateWdtStockoutOrderReturn(context.Context, *WdtStockoutPurchaseReturnRequest) (*WdtStockoutPurchaseReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWdtStockoutOrderReturn not implemented")
}
func (UnimplementedPurchasePlatControllerServer) mustEmbedUnimplementedPurchasePlatControllerServer() {
}

// UnsafePurchasePlatControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchasePlatControllerServer will
// result in compilation errors.
type UnsafePurchasePlatControllerServer interface {
	mustEmbedUnimplementedPurchasePlatControllerServer()
}

func RegisterPurchasePlatControllerServer(s grpc.ServiceRegistrar, srv PurchasePlatControllerServer) {
	s.RegisterService(&PurchasePlatController_ServiceDesc, srv)
}

func _PurchasePlatController_CreateKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateKingdeePurchaseOrder(ctx, req.(*KingdeePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_CreateKingdeePurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateKingdeePurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateKingdeePurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateKingdeePurchaseReturn(ctx, req.(*KingdeePurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_CreateKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeReceiveBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateKingdeeReceiveBill(ctx, req.(*KingdeeReceiveBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_CreateWdtPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateWdtPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateWdtPurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateWdtPurchaseOrder(ctx, req.(*WdtPurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_CreateWdtPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateWdtPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateWdtPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateWdtPurchaseReturn(ctx, req.(*WdtPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_CreateWdtStockOutPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateWdtStockOutPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateWdtStockOutPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateWdtStockOutPurchaseReturn(ctx, req.(*WdtStockoutPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_CreateWdtStockinOrderPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockinOrderPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateWdtStockinOrderPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateWdtStockinOrderPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateWdtStockinOrderPurchase(ctx, req.(*WdtStockinOrderPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_CreateWdtStockoutOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).CreateWdtStockoutOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_CreateWdtStockoutOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).CreateWdtStockoutOrderReturn(ctx, req.(*WdtStockoutPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseOrderDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyKingdeePurchaseOrder(ctx, req.(*KingdeePurchaseOrderDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyKingdeePurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseReturnDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyKingdeePurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyKingdeePurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyKingdeePurchaseReturn(ctx, req.(*KingdeePurchaseReturnDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeReceiveBillDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyKingdeeReceiveBill(ctx, req.(*KingdeeReceiveBillDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyWdtPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseOrderDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyWdtPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyWdtPurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyWdtPurchaseOrder(ctx, req.(*WdtPurchaseOrderDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyWdtPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseReturnDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyWdtPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyWdtPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyWdtPurchaseReturn(ctx, req.(*WdtPurchaseReturnDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyWdtStockOutPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyWdtStockOutPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyWdtStockOutPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyWdtStockOutPurchaseReturn(ctx, req.(*WdtStockoutPurchaseReturnDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyWdtStockinOrderPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockinOrderPurchaseDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyWdtStockinOrderPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyWdtStockinOrderPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyWdtStockinOrderPurchase(ctx, req.(*WdtStockinOrderPurchaseDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_DestroyWdtStockoutOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).DestroyWdtStockoutOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_DestroyWdtStockoutOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).DestroyWdtStockoutOrderReturn(ctx, req.(*WdtStockoutPurchaseReturnDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListKingdeePurchaseOrder(ctx, req.(*KingdeePurchaseOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListKingdeePurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseReturnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListKingdeePurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListKingdeePurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListKingdeePurchaseReturn(ctx, req.(*KingdeePurchaseReturnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeReceiveBillListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListKingdeeReceiveBill(ctx, req.(*KingdeeReceiveBillListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListWdtPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListWdtPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListWdtPurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListWdtPurchaseOrder(ctx, req.(*WdtPurchaseOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListWdtPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseReturnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListWdtPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListWdtPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListWdtPurchaseReturn(ctx, req.(*WdtPurchaseReturnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListWdtStockOutPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListWdtStockOutPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListWdtStockOutPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListWdtStockOutPurchaseReturn(ctx, req.(*WdtStockoutPurchaseReturnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListWdtStockinOrderPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockinOrderPurchaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListWdtStockinOrderPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListWdtStockinOrderPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListWdtStockinOrderPurchase(ctx, req.(*WdtStockinOrderPurchaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_ListWdtStockoutOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).ListWdtStockoutOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_ListWdtStockoutOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).ListWdtStockoutOrderReturn(ctx, req.(*WdtStockoutPurchaseReturnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseOrderPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateKingdeePurchaseOrder(ctx, req.(*KingdeePurchaseOrderPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateKingdeePurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseReturnPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateKingdeePurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateKingdeePurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateKingdeePurchaseReturn(ctx, req.(*KingdeePurchaseReturnPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeReceiveBillPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateKingdeeReceiveBill(ctx, req.(*KingdeeReceiveBillPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateWdtPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseOrderPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateWdtPurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtPurchaseOrder(ctx, req.(*WdtPurchaseOrderPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateWdtPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseReturnPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateWdtPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtPurchaseReturn(ctx, req.(*WdtPurchaseReturnPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateWdtStockOutPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtStockOutPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateWdtStockOutPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtStockOutPurchaseReturn(ctx, req.(*WdtStockoutPurchaseReturnPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateWdtStockinOrderPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockinOrderPurchasePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtStockinOrderPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateWdtStockinOrderPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtStockinOrderPurchase(ctx, req.(*WdtStockinOrderPurchasePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_PartialUpdateWdtStockoutOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtStockoutOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_PartialUpdateWdtStockoutOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).PartialUpdateWdtStockoutOrderReturn(ctx, req.(*WdtStockoutPurchaseReturnPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseOrderRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveKingdeePurchaseOrder(ctx, req.(*KingdeePurchaseOrderRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveKingdeePurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseReturnRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveKingdeePurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveKingdeePurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveKingdeePurchaseReturn(ctx, req.(*KingdeePurchaseReturnRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeReceiveBillRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveKingdeeReceiveBill(ctx, req.(*KingdeeReceiveBillRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveWdtPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseOrderRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveWdtPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveWdtPurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveWdtPurchaseOrder(ctx, req.(*WdtPurchaseOrderRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveWdtPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseReturnRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveWdtPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveWdtPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveWdtPurchaseReturn(ctx, req.(*WdtPurchaseReturnRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveWdtStockOutPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveWdtStockOutPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveWdtStockOutPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveWdtStockOutPurchaseReturn(ctx, req.(*WdtStockoutPurchaseReturnRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveWdtStockinOrderPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockinOrderPurchaseRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveWdtStockinOrderPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveWdtStockinOrderPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveWdtStockinOrderPurchase(ctx, req.(*WdtStockinOrderPurchaseRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_RetrieveWdtStockoutOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).RetrieveWdtStockoutOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_RetrieveWdtStockoutOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).RetrieveWdtStockoutOrderReturn(ctx, req.(*WdtStockoutPurchaseReturnRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateKingdeePurchaseOrder(ctx, req.(*KingdeePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateKingdeePurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateKingdeePurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateKingdeePurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateKingdeePurchaseReturn(ctx, req.(*KingdeePurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeReceiveBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateKingdeeReceiveBill(ctx, req.(*KingdeeReceiveBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateWdtPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateWdtPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateWdtPurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateWdtPurchaseOrder(ctx, req.(*WdtPurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateWdtPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateWdtPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateWdtPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateWdtPurchaseReturn(ctx, req.(*WdtPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateWdtStockOutPurchaseReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateWdtStockOutPurchaseReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateWdtStockOutPurchaseReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateWdtStockOutPurchaseReturn(ctx, req.(*WdtStockoutPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateWdtStockinOrderPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockinOrderPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateWdtStockinOrderPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateWdtStockinOrderPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateWdtStockinOrderPurchase(ctx, req.(*WdtStockinOrderPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchasePlatController_UpdateWdtStockoutOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockoutPurchaseReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasePlatControllerServer).UpdateWdtStockoutOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchasePlatController_UpdateWdtStockoutOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasePlatControllerServer).UpdateWdtStockoutOrderReturn(ctx, req.(*WdtStockoutPurchaseReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchasePlatController_ServiceDesc is the grpc.ServiceDesc for PurchasePlatController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchasePlatController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.PurchasePlatController",
	HandlerType: (*PurchasePlatControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKingdeePurchaseOrder",
			Handler:    _PurchasePlatController_CreateKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "CreateKingdeePurchaseReturn",
			Handler:    _PurchasePlatController_CreateKingdeePurchaseReturn_Handler,
		},
		{
			MethodName: "CreateKingdeeReceiveBill",
			Handler:    _PurchasePlatController_CreateKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "CreateWdtPurchaseOrder",
			Handler:    _PurchasePlatController_CreateWdtPurchaseOrder_Handler,
		},
		{
			MethodName: "CreateWdtPurchaseReturn",
			Handler:    _PurchasePlatController_CreateWdtPurchaseReturn_Handler,
		},
		{
			MethodName: "CreateWdtStockOutPurchaseReturn",
			Handler:    _PurchasePlatController_CreateWdtStockOutPurchaseReturn_Handler,
		},
		{
			MethodName: "CreateWdtStockinOrderPurchase",
			Handler:    _PurchasePlatController_CreateWdtStockinOrderPurchase_Handler,
		},
		{
			MethodName: "CreateWdtStockoutOrderReturn",
			Handler:    _PurchasePlatController_CreateWdtStockoutOrderReturn_Handler,
		},
		{
			MethodName: "DestroyKingdeePurchaseOrder",
			Handler:    _PurchasePlatController_DestroyKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "DestroyKingdeePurchaseReturn",
			Handler:    _PurchasePlatController_DestroyKingdeePurchaseReturn_Handler,
		},
		{
			MethodName: "DestroyKingdeeReceiveBill",
			Handler:    _PurchasePlatController_DestroyKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "DestroyWdtPurchaseOrder",
			Handler:    _PurchasePlatController_DestroyWdtPurchaseOrder_Handler,
		},
		{
			MethodName: "DestroyWdtPurchaseReturn",
			Handler:    _PurchasePlatController_DestroyWdtPurchaseReturn_Handler,
		},
		{
			MethodName: "DestroyWdtStockOutPurchaseReturn",
			Handler:    _PurchasePlatController_DestroyWdtStockOutPurchaseReturn_Handler,
		},
		{
			MethodName: "DestroyWdtStockinOrderPurchase",
			Handler:    _PurchasePlatController_DestroyWdtStockinOrderPurchase_Handler,
		},
		{
			MethodName: "DestroyWdtStockoutOrderReturn",
			Handler:    _PurchasePlatController_DestroyWdtStockoutOrderReturn_Handler,
		},
		{
			MethodName: "ListKingdeePurchaseOrder",
			Handler:    _PurchasePlatController_ListKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "ListKingdeePurchaseReturn",
			Handler:    _PurchasePlatController_ListKingdeePurchaseReturn_Handler,
		},
		{
			MethodName: "ListKingdeeReceiveBill",
			Handler:    _PurchasePlatController_ListKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "ListWdtPurchaseOrder",
			Handler:    _PurchasePlatController_ListWdtPurchaseOrder_Handler,
		},
		{
			MethodName: "ListWdtPurchaseReturn",
			Handler:    _PurchasePlatController_ListWdtPurchaseReturn_Handler,
		},
		{
			MethodName: "ListWdtStockOutPurchaseReturn",
			Handler:    _PurchasePlatController_ListWdtStockOutPurchaseReturn_Handler,
		},
		{
			MethodName: "ListWdtStockinOrderPurchase",
			Handler:    _PurchasePlatController_ListWdtStockinOrderPurchase_Handler,
		},
		{
			MethodName: "ListWdtStockoutOrderReturn",
			Handler:    _PurchasePlatController_ListWdtStockoutOrderReturn_Handler,
		},
		{
			MethodName: "PartialUpdateKingdeePurchaseOrder",
			Handler:    _PurchasePlatController_PartialUpdateKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "PartialUpdateKingdeePurchaseReturn",
			Handler:    _PurchasePlatController_PartialUpdateKingdeePurchaseReturn_Handler,
		},
		{
			MethodName: "PartialUpdateKingdeeReceiveBill",
			Handler:    _PurchasePlatController_PartialUpdateKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "PartialUpdateWdtPurchaseOrder",
			Handler:    _PurchasePlatController_PartialUpdateWdtPurchaseOrder_Handler,
		},
		{
			MethodName: "PartialUpdateWdtPurchaseReturn",
			Handler:    _PurchasePlatController_PartialUpdateWdtPurchaseReturn_Handler,
		},
		{
			MethodName: "PartialUpdateWdtStockOutPurchaseReturn",
			Handler:    _PurchasePlatController_PartialUpdateWdtStockOutPurchaseReturn_Handler,
		},
		{
			MethodName: "PartialUpdateWdtStockinOrderPurchase",
			Handler:    _PurchasePlatController_PartialUpdateWdtStockinOrderPurchase_Handler,
		},
		{
			MethodName: "PartialUpdateWdtStockoutOrderReturn",
			Handler:    _PurchasePlatController_PartialUpdateWdtStockoutOrderReturn_Handler,
		},
		{
			MethodName: "RetrieveKingdeePurchaseOrder",
			Handler:    _PurchasePlatController_RetrieveKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "RetrieveKingdeePurchaseReturn",
			Handler:    _PurchasePlatController_RetrieveKingdeePurchaseReturn_Handler,
		},
		{
			MethodName: "RetrieveKingdeeReceiveBill",
			Handler:    _PurchasePlatController_RetrieveKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "RetrieveWdtPurchaseOrder",
			Handler:    _PurchasePlatController_RetrieveWdtPurchaseOrder_Handler,
		},
		{
			MethodName: "RetrieveWdtPurchaseReturn",
			Handler:    _PurchasePlatController_RetrieveWdtPurchaseReturn_Handler,
		},
		{
			MethodName: "RetrieveWdtStockOutPurchaseReturn",
			Handler:    _PurchasePlatController_RetrieveWdtStockOutPurchaseReturn_Handler,
		},
		{
			MethodName: "RetrieveWdtStockinOrderPurchase",
			Handler:    _PurchasePlatController_RetrieveWdtStockinOrderPurchase_Handler,
		},
		{
			MethodName: "RetrieveWdtStockoutOrderReturn",
			Handler:    _PurchasePlatController_RetrieveWdtStockoutOrderReturn_Handler,
		},
		{
			MethodName: "UpdateKingdeePurchaseOrder",
			Handler:    _PurchasePlatController_UpdateKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "UpdateKingdeePurchaseReturn",
			Handler:    _PurchasePlatController_UpdateKingdeePurchaseReturn_Handler,
		},
		{
			MethodName: "UpdateKingdeeReceiveBill",
			Handler:    _PurchasePlatController_UpdateKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "UpdateWdtPurchaseOrder",
			Handler:    _PurchasePlatController_UpdateWdtPurchaseOrder_Handler,
		},
		{
			MethodName: "UpdateWdtPurchaseReturn",
			Handler:    _PurchasePlatController_UpdateWdtPurchaseReturn_Handler,
		},
		{
			MethodName: "UpdateWdtStockOutPurchaseReturn",
			Handler:    _PurchasePlatController_UpdateWdtStockOutPurchaseReturn_Handler,
		},
		{
			MethodName: "UpdateWdtStockinOrderPurchase",
			Handler:    _PurchasePlatController_UpdateWdtStockinOrderPurchase_Handler,
		},
		{
			MethodName: "UpdateWdtStockoutOrderReturn",
			Handler:    _PurchasePlatController_UpdateWdtStockoutOrderReturn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	TradeAggController_AggTradeByMonth_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/AggTradeByMonth"
	TradeAggController_AggTradeByMonthSync_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/AggTradeByMonthSync"
	TradeAggController_CountAggPushStatus_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/CountAggPushStatus"
	TradeAggController_Create_FullMethodName                            = "/kingdee_service.kingdee_ito.TradeAggController/Create"
	TradeAggController_CreateAggParamsTrade_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/CreateAggParamsTrade"
	TradeAggController_CreateChannelShopConfig_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/CreateChannelShopConfig"
	TradeAggController_CreateClockedSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/CreateClockedSchedule"
	TradeAggController_CreateCrontabSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/CreateCrontabSchedule"
	TradeAggController_CreateIntervalSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/CreateIntervalSchedule"
	TradeAggController_CreatePeriodicTask_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/CreatePeriodicTask"
	TradeAggController_CreateTaskResult_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/CreateTaskResult"
	TradeAggController_Destroy_FullMethodName                           = "/kingdee_service.kingdee_ito.TradeAggController/Destroy"
	TradeAggController_DestroyAggParamsTrade_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/DestroyAggParamsTrade"
	TradeAggController_DestroyAggTrade_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/DestroyAggTrade"
	TradeAggController_DestroyChannelShopConfig_FullMethodName          = "/kingdee_service.kingdee_ito.TradeAggController/DestroyChannelShopConfig"
	TradeAggController_DestroyClockedSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/DestroyClockedSchedule"
	TradeAggController_DestroyCrontabSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/DestroyCrontabSchedule"
	TradeAggController_DestroyIntervalSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/DestroyIntervalSchedule"
	TradeAggController_DestroyPeriodicTask_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/DestroyPeriodicTask"
	TradeAggController_DestroyTaskResult_FullMethodName                 = "/kingdee_service.kingdee_ito.TradeAggController/DestroyTaskResult"
	TradeAggController_FetchQimenTrade_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/FetchQimenTrade"
	TradeAggController_FetchTradeFromWdtList_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/FetchTradeFromWdtList"
	TradeAggController_GetKingdeeShopNoInfo_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/GetKingdeeShopNoInfo"
	TradeAggController_GetKingdeeStockNoInfo_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/GetKingdeeStockNoInfo"
	TradeAggController_InitChannelShopConfig_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/InitChannelShopConfig"
	TradeAggController_List_FullMethodName                              = "/kingdee_service.kingdee_ito.TradeAggController/List"
	TradeAggController_ListAggParamsTrade_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/ListAggParamsTrade"
	TradeAggController_ListChannelShopConfig_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/ListChannelShopConfig"
	TradeAggController_ListClockedSchedule_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/ListClockedSchedule"
	TradeAggController_ListCrontabSchedule_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/ListCrontabSchedule"
	TradeAggController_ListIntervalSchedule_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/ListIntervalSchedule"
	TradeAggController_ListKingdeeSalOutStock_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/ListKingdeeSalOutStock"
	TradeAggController_ListPeriodicTask_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/ListPeriodicTask"
	TradeAggController_ListTaskResult_FullMethodName                    = "/kingdee_service.kingdee_ito.TradeAggController/ListTaskResult"
	TradeAggController_ListWdtTrade_FullMethodName                      = "/kingdee_service.kingdee_ito.TradeAggController/ListWdtTrade"
	TradeAggController_NextNoAggParamsTrade_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/NextNoAggParamsTrade"
	TradeAggController_PartialUpdate_FullMethodName                     = "/kingdee_service.kingdee_ito.TradeAggController/PartialUpdate"
	TradeAggController_PeriodAggTrade_FullMethodName                    = "/kingdee_service.kingdee_ito.TradeAggController/PeriodAggTrade"
	TradeAggController_PushToKingDeeSalOutStock_FullMethodName          = "/kingdee_service.kingdee_ito.TradeAggController/PushToKingDeeSalOutStock"
	TradeAggController_Retrieve_FullMethodName                          = "/kingdee_service.kingdee_ito.TradeAggController/Retrieve"
	TradeAggController_RetrieveAggParamsTrade_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveAggParamsTrade"
	TradeAggController_RetrieveChannelShopConfig_FullMethodName         = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveChannelShopConfig"
	TradeAggController_RetrieveClockedSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveClockedSchedule"
	TradeAggController_RetrieveCrontabSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveCrontabSchedule"
	TradeAggController_RetrieveIntervalSchedule_FullMethodName          = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveIntervalSchedule"
	TradeAggController_RetrieveKingdeeSalOutStock_FullMethodName        = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveKingdeeSalOutStock"
	TradeAggController_RetrievePeriodicTask_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/RetrievePeriodicTask"
	TradeAggController_RetrieveTaskResult_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveTaskResult"
	TradeAggController_RetrieveWdtTrade_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveWdtTrade"
	TradeAggController_RevokeKingdeeSalOutstock_FullMethodName          = "/kingdee_service.kingdee_ito.TradeAggController/RevokeKingdeeSalOutstock"
	TradeAggController_RunPeriodAggSharedTask_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/RunPeriodAggSharedTask"
	TradeAggController_RunPeriodPushToKingDeeSalOutStock_FullMethodName = "/kingdee_service.kingdee_ito.TradeAggController/RunPeriodPushToKingDeeSalOutStock"
	TradeAggController_RunPeriodicTask_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/RunPeriodicTask"
	TradeAggController_RunSliceFetchTrade_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/RunSliceFetchTrade"
	TradeAggController_ShopOptionsWdt_FullMethodName                    = "/kingdee_service.kingdee_ito.TradeAggController/ShopOptionsWdt"
	TradeAggController_StockOptionsWdt_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/StockOptionsWdt"
	TradeAggController_StopPeriodicTask_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/StopPeriodicTask"
	TradeAggController_TaskSigAggTrade_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/TaskSigAggTrade"
	TradeAggController_TaskSigFetchWdtTrade_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/TaskSigFetchWdtTrade"
	TradeAggController_Update_FullMethodName                            = "/kingdee_service.kingdee_ito.TradeAggController/Update"
	TradeAggController_UpdateAggParamsTrade_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/UpdateAggParamsTrade"
	TradeAggController_UpdateChannelShopConfig_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/UpdateChannelShopConfig"
	TradeAggController_UpdateClockedSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/UpdateClockedSchedule"
	TradeAggController_UpdateCrontabSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/UpdateCrontabSchedule"
	TradeAggController_UpdateIntervalSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/UpdateIntervalSchedule"
	TradeAggController_UpdatePeriodicTask_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/UpdatePeriodicTask"
	TradeAggController_UpdateTaskResult_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/UpdateTaskResult"
	TradeAggController_WdtOption_FullMethodName                         = "/kingdee_service.kingdee_ito.TradeAggController/WdtOption"
)

// TradeAggControllerClient is the client API for TradeAggController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeAggControllerClient interface {
	AggTradeByMonth(ctx context.Context, in *AggTradeByMonthRequest, opts ...grpc.CallOption) (*AggTradeByMonthResponse, error)
	AggTradeByMonthSync(ctx context.Context, in *AggTradeByMonthSyncRequest, opts ...grpc.CallOption) (*AggTradeByMonthSyncResponse, error)
	CountAggPushStatus(ctx context.Context, in *AggPushStatusCountRequest, opts ...grpc.CallOption) (*AggPushStatusCountResponse, error)
	Create(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	CreateAggParamsTrade(ctx context.Context, in *AggParamsTradeCreateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error)
	CreateChannelShopConfig(ctx context.Context, in *ChannelShopConfigCreateRequest, opts ...grpc.CallOption) (*ChannelShopConfigResponse, error)
	CreateClockedSchedule(ctx context.Context, in *ClockedScheduleCreateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleCreateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleCreateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(ctx context.Context, in *PeriodicTaskCreateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	CreateTaskResult(ctx context.Context, in *TaskResultCreateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	Destroy(ctx context.Context, in *KingdeeTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyAggParamsTrade(ctx context.Context, in *AggParamsTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyAggTrade(ctx context.Context, in *DestroyAggTradeRequest, opts ...grpc.CallOption) (*DestroyAggTradeResponse, error)
	DestroyChannelShopConfig(ctx context.Context, in *DestroyChannelShopConfigRequest, opts ...grpc.CallOption) (*DestroyChannelShopConfigResponse, error)
	DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FetchQimenTrade(ctx context.Context, in *FetchQimenTradeRequest, opts ...grpc.CallOption) (*FetchQimenTradeResponse, error)
	FetchTradeFromWdtList(ctx context.Context, in *FetchTradeListFromWdtRequest, opts ...grpc.CallOption) (*FetchTradeListFromWdtResponse, error)
	GetKingdeeShopNoInfo(ctx context.Context, in *KingdeeShopNoInfoRequest, opts ...grpc.CallOption) (*KingdeeShopNoInfoResponse, error)
	GetKingdeeStockNoInfo(ctx context.Context, in *KingdeeStockNoInfoRequest, opts ...grpc.CallOption) (*KingdeeStockNoInfoResponse, error)
	InitChannelShopConfig(ctx context.Context, in *InitChannelShopConfigRequest, opts ...grpc.CallOption) (*InitChannelShopConfigResponse, error)
	List(ctx context.Context, in *KingdeeTradeListRequest, opts ...grpc.CallOption) (*KingdeeTradeListResponse, error)
	ListAggParamsTrade(ctx context.Context, in *AggParamsTradeListRequest, opts ...grpc.CallOption) (*AggParamsTradeListResponse, error)
	ListChannelShopConfig(ctx context.Context, in *ChannelShopConfigListRequest, opts ...grpc.CallOption) (*ChannelShopConfigListResponse, error)
	ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error)
	ListKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockListRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockListResponse, error)
	ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error)
	ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error)
	ListWdtTrade(ctx context.Context, in *WdtTradeListRequest, opts ...grpc.CallOption) (*WdtTradeListResponse, error)
	NextNoAggParamsTrade(ctx context.Context, in *AggParamsTradeNextNoRequest, opts ...grpc.CallOption) (*AggParamsTradeNextNoResponse, error)
	PartialUpdate(ctx context.Context, in *KingdeeTradePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	PeriodAggTrade(ctx context.Context, in *PeriodAggTradeRequest, opts ...grpc.CallOption) (*PeriodAggTradeResponse, error)
	PushToKingDeeSalOutStock(ctx context.Context, in *PushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*PushToKingDeeSalOutStockResponse, error)
	Retrieve(ctx context.Context, in *KingdeeTradeRetrieveRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	RetrieveAggParamsTrade(ctx context.Context, in *AggParamsTradeRetrieveRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error)
	RetrieveChannelShopConfig(ctx context.Context, in *ChannelShopConfigRetrieveRequest, opts ...grpc.CallOption) (*ChannelShopConfigResponse, error)
	RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	RetrieveKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockResponse, error)
	RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	RetrieveWdtTrade(ctx context.Context, in *WdtTradeRetrieveRequest, opts ...grpc.CallOption) (*WdtTradeResponse, error)
	RevokeKingdeeSalOutstock(ctx context.Context, in *RevokeKingdeeSalOutstockRequest, opts ...grpc.CallOption) (*RevokeKingdeeSalOutstockResponse, error)
	RunPeriodAggSharedTask(ctx context.Context, in *RunPeriodAggSharedTaskRequest, opts ...grpc.CallOption) (*RunPeriodAggSharedTaskResponse, error)
	RunPeriodPushToKingDeeSalOutStock(ctx context.Context, in *RunPeriodPushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*RunPeriodPushToKingDeeSalOutStockResponse, error)
	RunPeriodicTask(ctx context.Context, in *RunPeriodicTaskRequest, opts ...grpc.CallOption) (*RunPeriodicTaskResponse, error)
	RunSliceFetchTrade(ctx context.Context, in *RunSharedTaskRequest, opts ...grpc.CallOption) (*RunSharedTaskResponse, error)
	ShopOptionsWdt(ctx context.Context, in *WdtShopListRequest, opts ...grpc.CallOption) (*WdtShopListResponse, error)
	StockOptionsWdt(ctx context.Context, in *WdtStockListRequest, opts ...grpc.CallOption) (*WdtStockListResponse, error)
	StopPeriodicTask(ctx context.Context, in *StopPeriodicTaskRequest, opts ...grpc.CallOption) (*StopPeriodicTaskResponse, error)
	TaskSigAggTrade(ctx context.Context, in *TaskSigAggTradeRequest, opts ...grpc.CallOption) (*TaskSigAggTradeResponse, error)
	TaskSigFetchWdtTrade(ctx context.Context, in *TaskSigFetchWdtTradeRequest, opts ...grpc.CallOption) (*TaskSigFetchWdtTradeResponse, error)
	Update(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	UpdateAggParamsTrade(ctx context.Context, in *AggParamsTradeUpdateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error)
	UpdateChannelShopConfig(ctx context.Context, in *ChannelShopConfigUpdateRequest, opts ...grpc.CallOption) (*ChannelShopConfigResponse, error)
	UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	UpdateTaskResult(ctx context.Context, in *TaskResultUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	WdtOption(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WdtOptionResponse, error)
}

type tradeAggControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeAggControllerClient(cc grpc.ClientConnInterface) TradeAggControllerClient {
	return &tradeAggControllerClient{cc}
}

func (c *tradeAggControllerClient) AggTradeByMonth(ctx context.Context, in *AggTradeByMonthRequest, opts ...grpc.CallOption) (*AggTradeByMonthResponse, error) {
	out := new(AggTradeByMonthResponse)
	err := c.cc.Invoke(ctx, TradeAggController_AggTradeByMonth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) AggTradeByMonthSync(ctx context.Context, in *AggTradeByMonthSyncRequest, opts ...grpc.CallOption) (*AggTradeByMonthSyncResponse, error) {
	out := new(AggTradeByMonthSyncResponse)
	err := c.cc.Invoke(ctx, TradeAggController_AggTradeByMonthSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CountAggPushStatus(ctx context.Context, in *AggPushStatusCountRequest, opts ...grpc.CallOption) (*AggPushStatusCountResponse, error) {
	out := new(AggPushStatusCountResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CountAggPushStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Create(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateAggParamsTrade(ctx context.Context, in *AggParamsTradeCreateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error) {
	out := new(AggParamsTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateChannelShopConfig(ctx context.Context, in *ChannelShopConfigCreateRequest, opts ...grpc.CallOption) (*ChannelShopConfigResponse, error) {
	out := new(ChannelShopConfigResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateChannelShopConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateClockedSchedule(ctx context.Context, in *ClockedScheduleCreateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleCreateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleCreateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreatePeriodicTask(ctx context.Context, in *PeriodicTaskCreateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateTaskResult(ctx context.Context, in *TaskResultCreateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Destroy(ctx context.Context, in *KingdeeTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyAggParamsTrade(ctx context.Context, in *AggParamsTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyAggTrade(ctx context.Context, in *DestroyAggTradeRequest, opts ...grpc.CallOption) (*DestroyAggTradeResponse, error) {
	out := new(DestroyAggTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyAggTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyChannelShopConfig(ctx context.Context, in *DestroyChannelShopConfigRequest, opts ...grpc.CallOption) (*DestroyChannelShopConfigResponse, error) {
	out := new(DestroyChannelShopConfigResponse)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyChannelShopConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) FetchQimenTrade(ctx context.Context, in *FetchQimenTradeRequest, opts ...grpc.CallOption) (*FetchQimenTradeResponse, error) {
	out := new(FetchQimenTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_FetchQimenTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) FetchTradeFromWdtList(ctx context.Context, in *FetchTradeListFromWdtRequest, opts ...grpc.CallOption) (*FetchTradeListFromWdtResponse, error) {
	out := new(FetchTradeListFromWdtResponse)
	err := c.cc.Invoke(ctx, TradeAggController_FetchTradeFromWdtList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) GetKingdeeShopNoInfo(ctx context.Context, in *KingdeeShopNoInfoRequest, opts ...grpc.CallOption) (*KingdeeShopNoInfoResponse, error) {
	out := new(KingdeeShopNoInfoResponse)
	err := c.cc.Invoke(ctx, TradeAggController_GetKingdeeShopNoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) GetKingdeeStockNoInfo(ctx context.Context, in *KingdeeStockNoInfoRequest, opts ...grpc.CallOption) (*KingdeeStockNoInfoResponse, error) {
	out := new(KingdeeStockNoInfoResponse)
	err := c.cc.Invoke(ctx, TradeAggController_GetKingdeeStockNoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) InitChannelShopConfig(ctx context.Context, in *InitChannelShopConfigRequest, opts ...grpc.CallOption) (*InitChannelShopConfigResponse, error) {
	out := new(InitChannelShopConfigResponse)
	err := c.cc.Invoke(ctx, TradeAggController_InitChannelShopConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) List(ctx context.Context, in *KingdeeTradeListRequest, opts ...grpc.CallOption) (*KingdeeTradeListResponse, error) {
	out := new(KingdeeTradeListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListAggParamsTrade(ctx context.Context, in *AggParamsTradeListRequest, opts ...grpc.CallOption) (*AggParamsTradeListResponse, error) {
	out := new(AggParamsTradeListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListChannelShopConfig(ctx context.Context, in *ChannelShopConfigListRequest, opts ...grpc.CallOption) (*ChannelShopConfigListResponse, error) {
	out := new(ChannelShopConfigListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListChannelShopConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error) {
	out := new(ClockedScheduleListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error) {
	out := new(CrontabScheduleListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error) {
	out := new(IntervalScheduleListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockListRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockListResponse, error) {
	out := new(KingdeeSalOutStockListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListKingdeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error) {
	out := new(PeriodicTaskListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error) {
	out := new(TaskResultListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListWdtTrade(ctx context.Context, in *WdtTradeListRequest, opts ...grpc.CallOption) (*WdtTradeListResponse, error) {
	out := new(WdtTradeListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListWdtTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) NextNoAggParamsTrade(ctx context.Context, in *AggParamsTradeNextNoRequest, opts ...grpc.CallOption) (*AggParamsTradeNextNoResponse, error) {
	out := new(AggParamsTradeNextNoResponse)
	err := c.cc.Invoke(ctx, TradeAggController_NextNoAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) PartialUpdate(ctx context.Context, in *KingdeeTradePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) PeriodAggTrade(ctx context.Context, in *PeriodAggTradeRequest, opts ...grpc.CallOption) (*PeriodAggTradeResponse, error) {
	out := new(PeriodAggTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_PeriodAggTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) PushToKingDeeSalOutStock(ctx context.Context, in *PushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*PushToKingDeeSalOutStockResponse, error) {
	out := new(PushToKingDeeSalOutStockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_PushToKingDeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Retrieve(ctx context.Context, in *KingdeeTradeRetrieveRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveAggParamsTrade(ctx context.Context, in *AggParamsTradeRetrieveRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error) {
	out := new(AggParamsTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveChannelShopConfig(ctx context.Context, in *ChannelShopConfigRetrieveRequest, opts ...grpc.CallOption) (*ChannelShopConfigResponse, error) {
	out := new(ChannelShopConfigResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveChannelShopConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockResponse, error) {
	out := new(KingdeeSalOutStockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveKingdeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrievePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveWdtTrade(ctx context.Context, in *WdtTradeRetrieveRequest, opts ...grpc.CallOption) (*WdtTradeResponse, error) {
	out := new(WdtTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveWdtTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RevokeKingdeeSalOutstock(ctx context.Context, in *RevokeKingdeeSalOutstockRequest, opts ...grpc.CallOption) (*RevokeKingdeeSalOutstockResponse, error) {
	out := new(RevokeKingdeeSalOutstockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RevokeKingdeeSalOutstock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunPeriodAggSharedTask(ctx context.Context, in *RunPeriodAggSharedTaskRequest, opts ...grpc.CallOption) (*RunPeriodAggSharedTaskResponse, error) {
	out := new(RunPeriodAggSharedTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunPeriodAggSharedTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunPeriodPushToKingDeeSalOutStock(ctx context.Context, in *RunPeriodPushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*RunPeriodPushToKingDeeSalOutStockResponse, error) {
	out := new(RunPeriodPushToKingDeeSalOutStockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunPeriodPushToKingDeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunPeriodicTask(ctx context.Context, in *RunPeriodicTaskRequest, opts ...grpc.CallOption) (*RunPeriodicTaskResponse, error) {
	out := new(RunPeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunSliceFetchTrade(ctx context.Context, in *RunSharedTaskRequest, opts ...grpc.CallOption) (*RunSharedTaskResponse, error) {
	out := new(RunSharedTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunSliceFetchTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ShopOptionsWdt(ctx context.Context, in *WdtShopListRequest, opts ...grpc.CallOption) (*WdtShopListResponse, error) {
	out := new(WdtShopListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ShopOptionsWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) StockOptionsWdt(ctx context.Context, in *WdtStockListRequest, opts ...grpc.CallOption) (*WdtStockListResponse, error) {
	out := new(WdtStockListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_StockOptionsWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) StopPeriodicTask(ctx context.Context, in *StopPeriodicTaskRequest, opts ...grpc.CallOption) (*StopPeriodicTaskResponse, error) {
	out := new(StopPeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_StopPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) TaskSigAggTrade(ctx context.Context, in *TaskSigAggTradeRequest, opts ...grpc.CallOption) (*TaskSigAggTradeResponse, error) {
	out := new(TaskSigAggTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_TaskSigAggTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) TaskSigFetchWdtTrade(ctx context.Context, in *TaskSigFetchWdtTradeRequest, opts ...grpc.CallOption) (*TaskSigFetchWdtTradeResponse, error) {
	out := new(TaskSigFetchWdtTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_TaskSigFetchWdtTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Update(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateAggParamsTrade(ctx context.Context, in *AggParamsTradeUpdateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error) {
	out := new(AggParamsTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateChannelShopConfig(ctx context.Context, in *ChannelShopConfigUpdateRequest, opts ...grpc.CallOption) (*ChannelShopConfigResponse, error) {
	out := new(ChannelShopConfigResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateChannelShopConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateTaskResult(ctx context.Context, in *TaskResultUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) WdtOption(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WdtOptionResponse, error) {
	out := new(WdtOptionResponse)
	err := c.cc.Invoke(ctx, TradeAggController_WdtOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeAggControllerServer is the server API for TradeAggController service.
// All implementations must embed UnimplementedTradeAggControllerServer
// for forward compatibility
type TradeAggControllerServer interface {
	AggTradeByMonth(context.Context, *AggTradeByMonthRequest) (*AggTradeByMonthResponse, error)
	AggTradeByMonthSync(context.Context, *AggTradeByMonthSyncRequest) (*AggTradeByMonthSyncResponse, error)
	CountAggPushStatus(context.Context, *AggPushStatusCountRequest) (*AggPushStatusCountResponse, error)
	Create(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error)
	CreateAggParamsTrade(context.Context, *AggParamsTradeCreateRequest) (*AggParamsTradeResponse, error)
	CreateChannelShopConfig(context.Context, *ChannelShopConfigCreateRequest) (*ChannelShopConfigResponse, error)
	CreateClockedSchedule(context.Context, *ClockedScheduleCreateRequest) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(context.Context, *CrontabScheduleCreateRequest) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(context.Context, *IntervalScheduleCreateRequest) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(context.Context, *PeriodicTaskCreateRequest) (*PeriodicTaskResponse, error)
	CreateTaskResult(context.Context, *TaskResultCreateRequest) (*TaskResultResponse, error)
	Destroy(context.Context, *KingdeeTradeDestroyRequest) (*emptypb.Empty, error)
	DestroyAggParamsTrade(context.Context, *AggParamsTradeDestroyRequest) (*emptypb.Empty, error)
	DestroyAggTrade(context.Context, *DestroyAggTradeRequest) (*DestroyAggTradeResponse, error)
	DestroyChannelShopConfig(context.Context, *DestroyChannelShopConfigRequest) (*DestroyChannelShopConfigResponse, error)
	DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error)
	DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error)
	FetchQimenTrade(context.Context, *FetchQimenTradeRequest) (*FetchQimenTradeResponse, error)
	FetchTradeFromWdtList(context.Context, *FetchTradeListFromWdtRequest) (*FetchTradeListFromWdtResponse, error)
	GetKingdeeShopNoInfo(context.Context, *KingdeeShopNoInfoRequest) (*KingdeeShopNoInfoResponse, error)
	GetKingdeeStockNoInfo(context.Context, *KingdeeStockNoInfoRequest) (*KingdeeStockNoInfoResponse, error)
	InitChannelShopConfig(context.Context, *InitChannelShopConfigRequest) (*InitChannelShopConfigResponse, error)
	List(context.Context, *KingdeeTradeListRequest) (*KingdeeTradeListResponse, error)
	ListAggParamsTrade(context.Context, *AggParamsTradeListRequest) (*AggParamsTradeListResponse, error)
	ListChannelShopConfig(context.Context, *ChannelShopConfigListRequest) (*ChannelShopConfigListResponse, error)
	ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error)
	ListKingdeeSalOutStock(context.Context, *KingdeeSalOutStockListRequest) (*KingdeeSalOutStockListResponse, error)
	ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error)
	ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error)
	ListWdtTrade(context.Context, *WdtTradeListRequest) (*WdtTradeListResponse, error)
	NextNoAggParamsTrade(context.Context, *AggParamsTradeNextNoRequest) (*AggParamsTradeNextNoResponse, error)
	PartialUpdate(context.Context, *KingdeeTradePartialUpdateRequest) (*KingdeeTradeResponse, error)
	PeriodAggTrade(context.Context, *PeriodAggTradeRequest) (*PeriodAggTradeResponse, error)
	PushToKingDeeSalOutStock(context.Context, *PushToKingDeeSalOutStockRequest) (*PushToKingDeeSalOutStockResponse, error)
	Retrieve(context.Context, *KingdeeTradeRetrieveRequest) (*KingdeeTradeResponse, error)
	RetrieveAggParamsTrade(context.Context, *AggParamsTradeRetrieveRequest) (*AggParamsTradeResponse, error)
	RetrieveChannelShopConfig(context.Context, *ChannelShopConfigRetrieveRequest) (*ChannelShopConfigResponse, error)
	RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error)
	RetrieveKingdeeSalOutStock(context.Context, *KingdeeSalOutStockRetrieveRequest) (*KingdeeSalOutStockResponse, error)
	RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error)
	RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error)
	RetrieveWdtTrade(context.Context, *WdtTradeRetrieveRequest) (*WdtTradeResponse, error)
	RevokeKingdeeSalOutstock(context.Context, *RevokeKingdeeSalOutstockRequest) (*RevokeKingdeeSalOutstockResponse, error)
	RunPeriodAggSharedTask(context.Context, *RunPeriodAggSharedTaskRequest) (*RunPeriodAggSharedTaskResponse, error)
	RunPeriodPushToKingDeeSalOutStock(context.Context, *RunPeriodPushToKingDeeSalOutStockRequest) (*RunPeriodPushToKingDeeSalOutStockResponse, error)
	RunPeriodicTask(context.Context, *RunPeriodicTaskRequest) (*RunPeriodicTaskResponse, error)
	RunSliceFetchTrade(context.Context, *RunSharedTaskRequest) (*RunSharedTaskResponse, error)
	ShopOptionsWdt(context.Context, *WdtShopListRequest) (*WdtShopListResponse, error)
	StockOptionsWdt(context.Context, *WdtStockListRequest) (*WdtStockListResponse, error)
	StopPeriodicTask(context.Context, *StopPeriodicTaskRequest) (*StopPeriodicTaskResponse, error)
	TaskSigAggTrade(context.Context, *TaskSigAggTradeRequest) (*TaskSigAggTradeResponse, error)
	TaskSigFetchWdtTrade(context.Context, *TaskSigFetchWdtTradeRequest) (*TaskSigFetchWdtTradeResponse, error)
	Update(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error)
	UpdateAggParamsTrade(context.Context, *AggParamsTradeUpdateRequest) (*AggParamsTradeResponse, error)
	UpdateChannelShopConfig(context.Context, *ChannelShopConfigUpdateRequest) (*ChannelShopConfigResponse, error)
	UpdateClockedSchedule(context.Context, *ClockedScheduleUpdateRequest) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(context.Context, *CrontabScheduleUpdateRequest) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(context.Context, *IntervalScheduleUpdateRequest) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(context.Context, *PeriodicTaskUpdateRequest) (*PeriodicTaskResponse, error)
	UpdateTaskResult(context.Context, *TaskResultUpdateRequest) (*TaskResultResponse, error)
	WdtOption(context.Context, *EmptyRequest) (*WdtOptionResponse, error)
	mustEmbedUnimplementedTradeAggControllerServer()
}

// UnimplementedTradeAggControllerServer must be embedded to have forward compatible implementations.
type UnimplementedTradeAggControllerServer struct {
}

func (UnimplementedTradeAggControllerServer) AggTradeByMonth(context.Context, *AggTradeByMonthRequest) (*AggTradeByMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTradeByMonth not implemented")
}
func (UnimplementedTradeAggControllerServer) AggTradeByMonthSync(context.Context, *AggTradeByMonthSyncRequest) (*AggTradeByMonthSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTradeByMonthSync not implemented")
}
func (UnimplementedTradeAggControllerServer) CountAggPushStatus(context.Context, *AggPushStatusCountRequest) (*AggPushStatusCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAggPushStatus not implemented")
}
func (UnimplementedTradeAggControllerServer) Create(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateAggParamsTrade(context.Context, *AggParamsTradeCreateRequest) (*AggParamsTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateChannelShopConfig(context.Context, *ChannelShopConfigCreateRequest) (*ChannelShopConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelShopConfig not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateClockedSchedule(context.Context, *ClockedScheduleCreateRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateCrontabSchedule(context.Context, *CrontabScheduleCreateRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateIntervalSchedule(context.Context, *IntervalScheduleCreateRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) CreatePeriodicTask(context.Context, *PeriodicTaskCreateRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateTaskResult(context.Context, *TaskResultCreateRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) Destroy(context.Context, *KingdeeTradeDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyAggParamsTrade(context.Context, *AggParamsTradeDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyAggTrade(context.Context, *DestroyAggTradeRequest) (*DestroyAggTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyChannelShopConfig(context.Context, *DestroyChannelShopConfigRequest) (*DestroyChannelShopConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyChannelShopConfig not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) FetchQimenTrade(context.Context, *FetchQimenTradeRequest) (*FetchQimenTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchQimenTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) FetchTradeFromWdtList(context.Context, *FetchTradeListFromWdtRequest) (*FetchTradeListFromWdtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTradeFromWdtList not implemented")
}
func (UnimplementedTradeAggControllerServer) GetKingdeeShopNoInfo(context.Context, *KingdeeShopNoInfoRequest) (*KingdeeShopNoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKingdeeShopNoInfo not implemented")
}
func (UnimplementedTradeAggControllerServer) GetKingdeeStockNoInfo(context.Context, *KingdeeStockNoInfoRequest) (*KingdeeStockNoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKingdeeStockNoInfo not implemented")
}
func (UnimplementedTradeAggControllerServer) InitChannelShopConfig(context.Context, *InitChannelShopConfigRequest) (*InitChannelShopConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitChannelShopConfig not implemented")
}
func (UnimplementedTradeAggControllerServer) List(context.Context, *KingdeeTradeListRequest) (*KingdeeTradeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTradeAggControllerServer) ListAggParamsTrade(context.Context, *AggParamsTradeListRequest) (*AggParamsTradeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) ListChannelShopConfig(context.Context, *ChannelShopConfigListRequest) (*ChannelShopConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannelShopConfig not implemented")
}
func (UnimplementedTradeAggControllerServer) ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) ListKingdeeSalOutStock(context.Context, *KingdeeSalOutStockListRequest) (*KingdeeSalOutStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) ListWdtTrade(context.Context, *WdtTradeListRequest) (*WdtTradeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) NextNoAggParamsTrade(context.Context, *AggParamsTradeNextNoRequest) (*AggParamsTradeNextNoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextNoAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) PartialUpdate(context.Context, *KingdeeTradePartialUpdateRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedTradeAggControllerServer) PeriodAggTrade(context.Context, *PeriodAggTradeRequest) (*PeriodAggTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodAggTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) PushToKingDeeSalOutStock(context.Context, *PushToKingDeeSalOutStockRequest) (*PushToKingDeeSalOutStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToKingDeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) Retrieve(context.Context, *KingdeeTradeRetrieveRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveAggParamsTrade(context.Context, *AggParamsTradeRetrieveRequest) (*AggParamsTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveChannelShopConfig(context.Context, *ChannelShopConfigRetrieveRequest) (*ChannelShopConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveChannelShopConfig not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveKingdeeSalOutStock(context.Context, *KingdeeSalOutStockRetrieveRequest) (*KingdeeSalOutStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKingdeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveWdtTrade(context.Context, *WdtTradeRetrieveRequest) (*WdtTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) RevokeKingdeeSalOutstock(context.Context, *RevokeKingdeeSalOutstockRequest) (*RevokeKingdeeSalOutstockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeKingdeeSalOutstock not implemented")
}
func (UnimplementedTradeAggControllerServer) RunPeriodAggSharedTask(context.Context, *RunPeriodAggSharedTaskRequest) (*RunPeriodAggSharedTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodAggSharedTask not implemented")
}
func (UnimplementedTradeAggControllerServer) RunPeriodPushToKingDeeSalOutStock(context.Context, *RunPeriodPushToKingDeeSalOutStockRequest) (*RunPeriodPushToKingDeeSalOutStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodPushToKingDeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) RunPeriodicTask(context.Context, *RunPeriodicTaskRequest) (*RunPeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) RunSliceFetchTrade(context.Context, *RunSharedTaskRequest) (*RunSharedTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSliceFetchTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) ShopOptionsWdt(context.Context, *WdtShopListRequest) (*WdtShopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopOptionsWdt not implemented")
}
func (UnimplementedTradeAggControllerServer) StockOptionsWdt(context.Context, *WdtStockListRequest) (*WdtStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockOptionsWdt not implemented")
}
func (UnimplementedTradeAggControllerServer) StopPeriodicTask(context.Context, *StopPeriodicTaskRequest) (*StopPeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) TaskSigAggTrade(context.Context, *TaskSigAggTradeRequest) (*TaskSigAggTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) TaskSigFetchWdtTrade(context.Context, *TaskSigFetchWdtTradeRequest) (*TaskSigFetchWdtTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigFetchWdtTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) Update(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateAggParamsTrade(context.Context, *AggParamsTradeUpdateRequest) (*AggParamsTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateChannelShopConfig(context.Context, *ChannelShopConfigUpdateRequest) (*ChannelShopConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelShopConfig not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateClockedSchedule(context.Context, *ClockedScheduleUpdateRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateCrontabSchedule(context.Context, *CrontabScheduleUpdateRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateIntervalSchedule(context.Context, *IntervalScheduleUpdateRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdatePeriodicTask(context.Context, *PeriodicTaskUpdateRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateTaskResult(context.Context, *TaskResultUpdateRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) WdtOption(context.Context, *EmptyRequest) (*WdtOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WdtOption not implemented")
}
func (UnimplementedTradeAggControllerServer) mustEmbedUnimplementedTradeAggControllerServer() {}

// UnsafeTradeAggControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeAggControllerServer will
// result in compilation errors.
type UnsafeTradeAggControllerServer interface {
	mustEmbedUnimplementedTradeAggControllerServer()
}

func RegisterTradeAggControllerServer(s grpc.ServiceRegistrar, srv TradeAggControllerServer) {
	s.RegisterService(&TradeAggController_ServiceDesc, srv)
}

func _TradeAggController_AggTradeByMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTradeByMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).AggTradeByMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_AggTradeByMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).AggTradeByMonth(ctx, req.(*AggTradeByMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_AggTradeByMonthSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTradeByMonthSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).AggTradeByMonthSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_AggTradeByMonthSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).AggTradeByMonthSync(ctx, req.(*AggTradeByMonthSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CountAggPushStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggPushStatusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CountAggPushStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CountAggPushStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CountAggPushStatus(ctx, req.(*AggPushStatusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Create(ctx, req.(*KingdeeTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateAggParamsTrade(ctx, req.(*AggParamsTradeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateChannelShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelShopConfigCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateChannelShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateChannelShopConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateChannelShopConfig(ctx, req.(*ChannelShopConfigCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateClockedSchedule(ctx, req.(*ClockedScheduleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateCrontabSchedule(ctx, req.(*CrontabScheduleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateIntervalSchedule(ctx, req.(*IntervalScheduleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreatePeriodicTask(ctx, req.(*PeriodicTaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateTaskResult(ctx, req.(*TaskResultCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Destroy(ctx, req.(*KingdeeTradeDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyAggParamsTrade(ctx, req.(*AggParamsTradeDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyAggTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyAggTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyAggTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyAggTrade(ctx, req.(*DestroyAggTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyChannelShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyChannelShopConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyChannelShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyChannelShopConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyChannelShopConfig(ctx, req.(*DestroyChannelShopConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyClockedSchedule(ctx, req.(*ClockedScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyCrontabSchedule(ctx, req.(*CrontabScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyIntervalSchedule(ctx, req.(*IntervalScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyPeriodicTask(ctx, req.(*PeriodicTaskDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyTaskResult(ctx, req.(*TaskResultDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_FetchQimenTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchQimenTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).FetchQimenTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_FetchQimenTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).FetchQimenTrade(ctx, req.(*FetchQimenTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_FetchTradeFromWdtList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTradeListFromWdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).FetchTradeFromWdtList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_FetchTradeFromWdtList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).FetchTradeFromWdtList(ctx, req.(*FetchTradeListFromWdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_GetKingdeeShopNoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeShopNoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).GetKingdeeShopNoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_GetKingdeeShopNoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).GetKingdeeShopNoInfo(ctx, req.(*KingdeeShopNoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_GetKingdeeStockNoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeStockNoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).GetKingdeeStockNoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_GetKingdeeStockNoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).GetKingdeeStockNoInfo(ctx, req.(*KingdeeStockNoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_InitChannelShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitChannelShopConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).InitChannelShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_InitChannelShopConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).InitChannelShopConfig(ctx, req.(*InitChannelShopConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).List(ctx, req.(*KingdeeTradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListAggParamsTrade(ctx, req.(*AggParamsTradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListChannelShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelShopConfigListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListChannelShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListChannelShopConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListChannelShopConfig(ctx, req.(*ChannelShopConfigListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListClockedSchedule(ctx, req.(*ClockedScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListCrontabSchedule(ctx, req.(*CrontabScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListIntervalSchedule(ctx, req.(*IntervalScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListKingdeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalOutStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListKingdeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListKingdeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListKingdeeSalOutStock(ctx, req.(*KingdeeSalOutStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListPeriodicTask(ctx, req.(*PeriodicTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListTaskResult(ctx, req.(*TaskResultListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListWdtTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListWdtTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListWdtTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListWdtTrade(ctx, req.(*WdtTradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_NextNoAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeNextNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).NextNoAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_NextNoAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).NextNoAggParamsTrade(ctx, req.(*AggParamsTradeNextNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).PartialUpdate(ctx, req.(*KingdeeTradePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_PeriodAggTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodAggTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).PeriodAggTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_PeriodAggTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).PeriodAggTrade(ctx, req.(*PeriodAggTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_PushToKingDeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushToKingDeeSalOutStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).PushToKingDeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_PushToKingDeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).PushToKingDeeSalOutStock(ctx, req.(*PushToKingDeeSalOutStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Retrieve(ctx, req.(*KingdeeTradeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveAggParamsTrade(ctx, req.(*AggParamsTradeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveChannelShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelShopConfigRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveChannelShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveChannelShopConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveChannelShopConfig(ctx, req.(*ChannelShopConfigRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveClockedSchedule(ctx, req.(*ClockedScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveCrontabSchedule(ctx, req.(*CrontabScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveIntervalSchedule(ctx, req.(*IntervalScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveKingdeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalOutStockRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveKingdeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveKingdeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveKingdeeSalOutStock(ctx, req.(*KingdeeSalOutStockRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrievePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrievePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrievePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrievePeriodicTask(ctx, req.(*PeriodicTaskRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveTaskResult(ctx, req.(*TaskResultRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveWdtTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveWdtTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveWdtTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveWdtTrade(ctx, req.(*WdtTradeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RevokeKingdeeSalOutstock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeKingdeeSalOutstockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RevokeKingdeeSalOutstock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RevokeKingdeeSalOutstock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RevokeKingdeeSalOutstock(ctx, req.(*RevokeKingdeeSalOutstockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunPeriodAggSharedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodAggSharedTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunPeriodAggSharedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunPeriodAggSharedTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunPeriodAggSharedTask(ctx, req.(*RunPeriodAggSharedTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunPeriodPushToKingDeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodPushToKingDeeSalOutStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunPeriodPushToKingDeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunPeriodPushToKingDeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunPeriodPushToKingDeeSalOutStock(ctx, req.(*RunPeriodPushToKingDeeSalOutStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunPeriodicTask(ctx, req.(*RunPeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunSliceFetchTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSharedTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunSliceFetchTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunSliceFetchTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunSliceFetchTrade(ctx, req.(*RunSharedTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ShopOptionsWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtShopListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ShopOptionsWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ShopOptionsWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ShopOptionsWdt(ctx, req.(*WdtShopListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_StockOptionsWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).StockOptionsWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_StockOptionsWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).StockOptionsWdt(ctx, req.(*WdtStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_StopPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).StopPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_StopPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).StopPeriodicTask(ctx, req.(*StopPeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_TaskSigAggTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).TaskSigAggTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_TaskSigAggTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).TaskSigAggTrade(ctx, req.(*TaskSigAggTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_TaskSigFetchWdtTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigFetchWdtTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).TaskSigFetchWdtTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_TaskSigFetchWdtTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).TaskSigFetchWdtTrade(ctx, req.(*TaskSigFetchWdtTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Update(ctx, req.(*KingdeeTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateAggParamsTrade(ctx, req.(*AggParamsTradeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateChannelShopConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelShopConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateChannelShopConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateChannelShopConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateChannelShopConfig(ctx, req.(*ChannelShopConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateClockedSchedule(ctx, req.(*ClockedScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateCrontabSchedule(ctx, req.(*CrontabScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateIntervalSchedule(ctx, req.(*IntervalScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdatePeriodicTask(ctx, req.(*PeriodicTaskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateTaskResult(ctx, req.(*TaskResultUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_WdtOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).WdtOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_WdtOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).WdtOption(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeAggController_ServiceDesc is the grpc.ServiceDesc for TradeAggController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeAggController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.TradeAggController",
	HandlerType: (*TradeAggControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggTradeByMonth",
			Handler:    _TradeAggController_AggTradeByMonth_Handler,
		},
		{
			MethodName: "AggTradeByMonthSync",
			Handler:    _TradeAggController_AggTradeByMonthSync_Handler,
		},
		{
			MethodName: "CountAggPushStatus",
			Handler:    _TradeAggController_CountAggPushStatus_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TradeAggController_Create_Handler,
		},
		{
			MethodName: "CreateAggParamsTrade",
			Handler:    _TradeAggController_CreateAggParamsTrade_Handler,
		},
		{
			MethodName: "CreateChannelShopConfig",
			Handler:    _TradeAggController_CreateChannelShopConfig_Handler,
		},
		{
			MethodName: "CreateClockedSchedule",
			Handler:    _TradeAggController_CreateClockedSchedule_Handler,
		},
		{
			MethodName: "CreateCrontabSchedule",
			Handler:    _TradeAggController_CreateCrontabSchedule_Handler,
		},
		{
			MethodName: "CreateIntervalSchedule",
			Handler:    _TradeAggController_CreateIntervalSchedule_Handler,
		},
		{
			MethodName: "CreatePeriodicTask",
			Handler:    _TradeAggController_CreatePeriodicTask_Handler,
		},
		{
			MethodName: "CreateTaskResult",
			Handler:    _TradeAggController_CreateTaskResult_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _TradeAggController_Destroy_Handler,
		},
		{
			MethodName: "DestroyAggParamsTrade",
			Handler:    _TradeAggController_DestroyAggParamsTrade_Handler,
		},
		{
			MethodName: "DestroyAggTrade",
			Handler:    _TradeAggController_DestroyAggTrade_Handler,
		},
		{
			MethodName: "DestroyChannelShopConfig",
			Handler:    _TradeAggController_DestroyChannelShopConfig_Handler,
		},
		{
			MethodName: "DestroyClockedSchedule",
			Handler:    _TradeAggController_DestroyClockedSchedule_Handler,
		},
		{
			MethodName: "DestroyCrontabSchedule",
			Handler:    _TradeAggController_DestroyCrontabSchedule_Handler,
		},
		{
			MethodName: "DestroyIntervalSchedule",
			Handler:    _TradeAggController_DestroyIntervalSchedule_Handler,
		},
		{
			MethodName: "DestroyPeriodicTask",
			Handler:    _TradeAggController_DestroyPeriodicTask_Handler,
		},
		{
			MethodName: "DestroyTaskResult",
			Handler:    _TradeAggController_DestroyTaskResult_Handler,
		},
		{
			MethodName: "FetchQimenTrade",
			Handler:    _TradeAggController_FetchQimenTrade_Handler,
		},
		{
			MethodName: "FetchTradeFromWdtList",
			Handler:    _TradeAggController_FetchTradeFromWdtList_Handler,
		},
		{
			MethodName: "GetKingdeeShopNoInfo",
			Handler:    _TradeAggController_GetKingdeeShopNoInfo_Handler,
		},
		{
			MethodName: "GetKingdeeStockNoInfo",
			Handler:    _TradeAggController_GetKingdeeStockNoInfo_Handler,
		},
		{
			MethodName: "InitChannelShopConfig",
			Handler:    _TradeAggController_InitChannelShopConfig_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TradeAggController_List_Handler,
		},
		{
			MethodName: "ListAggParamsTrade",
			Handler:    _TradeAggController_ListAggParamsTrade_Handler,
		},
		{
			MethodName: "ListChannelShopConfig",
			Handler:    _TradeAggController_ListChannelShopConfig_Handler,
		},
		{
			MethodName: "ListClockedSchedule",
			Handler:    _TradeAggController_ListClockedSchedule_Handler,
		},
		{
			MethodName: "ListCrontabSchedule",
			Handler:    _TradeAggController_ListCrontabSchedule_Handler,
		},
		{
			MethodName: "ListIntervalSchedule",
			Handler:    _TradeAggController_ListIntervalSchedule_Handler,
		},
		{
			MethodName: "ListKingdeeSalOutStock",
			Handler:    _TradeAggController_ListKingdeeSalOutStock_Handler,
		},
		{
			MethodName: "ListPeriodicTask",
			Handler:    _TradeAggController_ListPeriodicTask_Handler,
		},
		{
			MethodName: "ListTaskResult",
			Handler:    _TradeAggController_ListTaskResult_Handler,
		},
		{
			MethodName: "ListWdtTrade",
			Handler:    _TradeAggController_ListWdtTrade_Handler,
		},
		{
			MethodName: "NextNoAggParamsTrade",
			Handler:    _TradeAggController_NextNoAggParamsTrade_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _TradeAggController_PartialUpdate_Handler,
		},
		{
			MethodName: "PeriodAggTrade",
			Handler:    _TradeAggController_PeriodAggTrade_Handler,
		},
		{
			MethodName: "PushToKingDeeSalOutStock",
			Handler:    _TradeAggController_PushToKingDeeSalOutStock_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _TradeAggController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveAggParamsTrade",
			Handler:    _TradeAggController_RetrieveAggParamsTrade_Handler,
		},
		{
			MethodName: "RetrieveChannelShopConfig",
			Handler:    _TradeAggController_RetrieveChannelShopConfig_Handler,
		},
		{
			MethodName: "RetrieveClockedSchedule",
			Handler:    _TradeAggController_RetrieveClockedSchedule_Handler,
		},
		{
			MethodName: "RetrieveCrontabSchedule",
			Handler:    _TradeAggController_RetrieveCrontabSchedule_Handler,
		},
		{
			MethodName: "RetrieveIntervalSchedule",
			Handler:    _TradeAggController_RetrieveIntervalSchedule_Handler,
		},
		{
			MethodName: "RetrieveKingdeeSalOutStock",
			Handler:    _TradeAggController_RetrieveKingdeeSalOutStock_Handler,
		},
		{
			MethodName: "RetrievePeriodicTask",
			Handler:    _TradeAggController_RetrievePeriodicTask_Handler,
		},
		{
			MethodName: "RetrieveTaskResult",
			Handler:    _TradeAggController_RetrieveTaskResult_Handler,
		},
		{
			MethodName: "RetrieveWdtTrade",
			Handler:    _TradeAggController_RetrieveWdtTrade_Handler,
		},
		{
			MethodName: "RevokeKingdeeSalOutstock",
			Handler:    _TradeAggController_RevokeKingdeeSalOutstock_Handler,
		},
		{
			MethodName: "RunPeriodAggSharedTask",
			Handler:    _TradeAggController_RunPeriodAggSharedTask_Handler,
		},
		{
			MethodName: "RunPeriodPushToKingDeeSalOutStock",
			Handler:    _TradeAggController_RunPeriodPushToKingDeeSalOutStock_Handler,
		},
		{
			MethodName: "RunPeriodicTask",
			Handler:    _TradeAggController_RunPeriodicTask_Handler,
		},
		{
			MethodName: "RunSliceFetchTrade",
			Handler:    _TradeAggController_RunSliceFetchTrade_Handler,
		},
		{
			MethodName: "ShopOptionsWdt",
			Handler:    _TradeAggController_ShopOptionsWdt_Handler,
		},
		{
			MethodName: "StockOptionsWdt",
			Handler:    _TradeAggController_StockOptionsWdt_Handler,
		},
		{
			MethodName: "StopPeriodicTask",
			Handler:    _TradeAggController_StopPeriodicTask_Handler,
		},
		{
			MethodName: "TaskSigAggTrade",
			Handler:    _TradeAggController_TaskSigAggTrade_Handler,
		},
		{
			MethodName: "TaskSigFetchWdtTrade",
			Handler:    _TradeAggController_TaskSigFetchWdtTrade_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TradeAggController_Update_Handler,
		},
		{
			MethodName: "UpdateAggParamsTrade",
			Handler:    _TradeAggController_UpdateAggParamsTrade_Handler,
		},
		{
			MethodName: "UpdateChannelShopConfig",
			Handler:    _TradeAggController_UpdateChannelShopConfig_Handler,
		},
		{
			MethodName: "UpdateClockedSchedule",
			Handler:    _TradeAggController_UpdateClockedSchedule_Handler,
		},
		{
			MethodName: "UpdateCrontabSchedule",
			Handler:    _TradeAggController_UpdateCrontabSchedule_Handler,
		},
		{
			MethodName: "UpdateIntervalSchedule",
			Handler:    _TradeAggController_UpdateIntervalSchedule_Handler,
		},
		{
			MethodName: "UpdatePeriodicTask",
			Handler:    _TradeAggController_UpdatePeriodicTask_Handler,
		},
		{
			MethodName: "UpdateTaskResult",
			Handler:    _TradeAggController_UpdateTaskResult_Handler,
		},
		{
			MethodName: "WdtOption",
			Handler:    _TradeAggController_WdtOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	TradeRefundAggController_AggTradeRefund_FullMethodName                     = "/kingdee_service.kingdee_ito.TradeRefundAggController/AggTradeRefund"
	TradeRefundAggController_CountAggRefundPushStatus_FullMethodName           = "/kingdee_service.kingdee_ito.TradeRefundAggController/CountAggRefundPushStatus"
	TradeRefundAggController_CountRefundStockInPushStatus_FullMethodName       = "/kingdee_service.kingdee_ito.TradeRefundAggController/CountRefundStockInPushStatus"
	TradeRefundAggController_CreateKingdeeSalReturnStock_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/CreateKingdeeSalReturnStock"
	TradeRefundAggController_CreateWdtTradeRefund_FullMethodName               = "/kingdee_service.kingdee_ito.TradeRefundAggController/CreateWdtTradeRefund"
	TradeRefundAggController_CreateWdtTradeRefundStockin_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/CreateWdtTradeRefundStockin"
	TradeRefundAggController_DestroyAggTradeRefund_FullMethodName              = "/kingdee_service.kingdee_ito.TradeRefundAggController/DestroyAggTradeRefund"
	TradeRefundAggController_DestroyKingdeeSalReturnStock_FullMethodName       = "/kingdee_service.kingdee_ito.TradeRefundAggController/DestroyKingdeeSalReturnStock"
	TradeRefundAggController_DestroyWdtTradeRefund_FullMethodName              = "/kingdee_service.kingdee_ito.TradeRefundAggController/DestroyWdtTradeRefund"
	TradeRefundAggController_DestroyWdtTradeRefundStockin_FullMethodName       = "/kingdee_service.kingdee_ito.TradeRefundAggController/DestroyWdtTradeRefundStockin"
	TradeRefundAggController_FetchRefundListFromWdt_FullMethodName             = "/kingdee_service.kingdee_ito.TradeRefundAggController/FetchRefundListFromWdt"
	TradeRefundAggController_FetchTradeRefund_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeRefundAggController/FetchTradeRefund"
	TradeRefundAggController_ListKingdeeSalReturnStock_FullMethodName          = "/kingdee_service.kingdee_ito.TradeRefundAggController/ListKingdeeSalReturnStock"
	TradeRefundAggController_ListWdtTradeRefund_FullMethodName                 = "/kingdee_service.kingdee_ito.TradeRefundAggController/ListWdtTradeRefund"
	TradeRefundAggController_ListWdtTradeRefundStockin_FullMethodName          = "/kingdee_service.kingdee_ito.TradeRefundAggController/ListWdtTradeRefundStockin"
	TradeRefundAggController_MatchTradeRefund_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeRefundAggController/MatchTradeRefund"
	TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_FullMethodName = "/kingdee_service.kingdee_ito.TradeRefundAggController/PartialUpdateKingdeeSalReturnStock"
	TradeRefundAggController_PartialUpdateWdtTradeRefund_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/PartialUpdateWdtTradeRefund"
	TradeRefundAggController_PartialUpdateWdtTradeRefundStockin_FullMethodName = "/kingdee_service.kingdee_ito.TradeRefundAggController/PartialUpdateWdtTradeRefundStockin"
	TradeRefundAggController_PushToKingDeeSalReturnStock_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/PushToKingDeeSalReturnStock"
	TradeRefundAggController_RetrieveKingdeeSalReturnStock_FullMethodName      = "/kingdee_service.kingdee_ito.TradeRefundAggController/RetrieveKingdeeSalReturnStock"
	TradeRefundAggController_RetrieveWdtTradeRefund_FullMethodName             = "/kingdee_service.kingdee_ito.TradeRefundAggController/RetrieveWdtTradeRefund"
	TradeRefundAggController_RetrieveWdtTradeRefundStockin_FullMethodName      = "/kingdee_service.kingdee_ito.TradeRefundAggController/RetrieveWdtTradeRefundStockin"
	TradeRefundAggController_TaskSigAggTradeRefund_FullMethodName              = "/kingdee_service.kingdee_ito.TradeRefundAggController/TaskSigAggTradeRefund"
	TradeRefundAggController_TaskSigAggTradeRefundStockIn_FullMethodName       = "/kingdee_service.kingdee_ito.TradeRefundAggController/TaskSigAggTradeRefundStockIn"
	TradeRefundAggController_TaskSigFetchTradeRefund_FullMethodName            = "/kingdee_service.kingdee_ito.TradeRefundAggController/TaskSigFetchTradeRefund"
	TradeRefundAggController_TaskSigMatchTradeRefund_FullMethodName            = "/kingdee_service.kingdee_ito.TradeRefundAggController/TaskSigMatchTradeRefund"
	TradeRefundAggController_TaskSigPushTradeRefund_FullMethodName             = "/kingdee_service.kingdee_ito.TradeRefundAggController/TaskSigPushTradeRefund"
	TradeRefundAggController_UpdateKingdeeSalReturnStock_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/UpdateKingdeeSalReturnStock"
	TradeRefundAggController_UpdateWdtTradeRefund_FullMethodName               = "/kingdee_service.kingdee_ito.TradeRefundAggController/UpdateWdtTradeRefund"
	TradeRefundAggController_UpdateWdtTradeRefundStockin_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/UpdateWdtTradeRefundStockin"
)

// TradeRefundAggControllerClient is the client API for TradeRefundAggController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeRefundAggControllerClient interface {
	AggTradeRefund(ctx context.Context, in *AggTradeRefundRequest, opts ...grpc.CallOption) (*AggTradeRefundResponse, error)
	CountAggRefundPushStatus(ctx context.Context, in *CountAggRefundPushStatusRequest, opts ...grpc.CallOption) (*CountAggRefundPushStatusResponse, error)
	CountRefundStockInPushStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CountRefundStockInPushStatusResponse, error)
	CreateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	CreateWdtTradeRefund(ctx context.Context, in *WdtTradeRefundRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error)
	CreateWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error)
	DestroyAggTradeRefund(ctx context.Context, in *DestroyAggTradeRefundRequest, opts ...grpc.CallOption) (*DestroyAggTradeRefundResponse, error)
	DestroyKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyWdtTradeRefund(ctx context.Context, in *WdtTradeRefundDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FetchRefundListFromWdt(ctx context.Context, in *FetchRefundListFromWdtRequest, opts ...grpc.CallOption) (*FetchRefundListFromWdtResponse, error)
	FetchTradeRefund(ctx context.Context, in *FetchTradeRefundRequest, opts ...grpc.CallOption) (*FetchTradeRefundResponse, error)
	ListKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockListRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockListResponse, error)
	ListWdtTradeRefund(ctx context.Context, in *WdtTradeRefundListRequest, opts ...grpc.CallOption) (*WdtTradeRefundListResponse, error)
	ListWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinListRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinListResponse, error)
	MatchTradeRefund(ctx context.Context, in *MatchTradeRefundRequest, opts ...grpc.CallOption) (*MatchTradeRefundResponse, error)
	PartialUpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	PartialUpdateWdtTradeRefund(ctx context.Context, in *WdtTradeRefundPartialUpdateRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error)
	PartialUpdateWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinPartialUpdateRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error)
	PushToKingDeeSalReturnStock(ctx context.Context, in *PushToKingDeeSalReturnStockRequest, opts ...grpc.CallOption) (*PushToKingDeeSalReturnStockResponse, error)
	RetrieveKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	RetrieveWdtTradeRefund(ctx context.Context, in *WdtTradeRefundRetrieveRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error)
	RetrieveWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinRetrieveRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error)
	TaskSigAggTradeRefund(ctx context.Context, in *TaskSigAggTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigAggTradeRefundResponse, error)
	TaskSigAggTradeRefundStockIn(ctx context.Context, in *TaskSigAggTradeRefundStockInRequest, opts ...grpc.CallOption) (*TaskSigAggTradeRefundResponse, error)
	TaskSigFetchTradeRefund(ctx context.Context, in *TaskSigFetchTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigFetchTradeRefundResponse, error)
	TaskSigMatchTradeRefund(ctx context.Context, in *TaskSigMatchTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigMatchTradeRefundResponse, error)
	TaskSigPushTradeRefund(ctx context.Context, in *TaskSigPushTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigPushTradeRefundResponse, error)
	UpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	UpdateWdtTradeRefund(ctx context.Context, in *WdtTradeRefundRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error)
	UpdateWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error)
}

type tradeRefundAggControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeRefundAggControllerClient(cc grpc.ClientConnInterface) TradeRefundAggControllerClient {
	return &tradeRefundAggControllerClient{cc}
}

func (c *tradeRefundAggControllerClient) AggTradeRefund(ctx context.Context, in *AggTradeRefundRequest, opts ...grpc.CallOption) (*AggTradeRefundResponse, error) {
	out := new(AggTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_AggTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) CountAggRefundPushStatus(ctx context.Context, in *CountAggRefundPushStatusRequest, opts ...grpc.CallOption) (*CountAggRefundPushStatusResponse, error) {
	out := new(CountAggRefundPushStatusResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CountAggRefundPushStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) CountRefundStockInPushStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CountRefundStockInPushStatusResponse, error) {
	out := new(CountRefundStockInPushStatusResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CountRefundStockInPushStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) CreateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CreateKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) CreateWdtTradeRefund(ctx context.Context, in *WdtTradeRefundRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error) {
	out := new(WdtTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CreateWdtTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) CreateWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error) {
	out := new(WdtTradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CreateWdtTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) DestroyAggTradeRefund(ctx context.Context, in *DestroyAggTradeRefundRequest, opts ...grpc.CallOption) (*DestroyAggTradeRefundResponse, error) {
	out := new(DestroyAggTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_DestroyAggTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) DestroyKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeRefundAggController_DestroyKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) DestroyWdtTradeRefund(ctx context.Context, in *WdtTradeRefundDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeRefundAggController_DestroyWdtTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) DestroyWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeRefundAggController_DestroyWdtTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) FetchRefundListFromWdt(ctx context.Context, in *FetchRefundListFromWdtRequest, opts ...grpc.CallOption) (*FetchRefundListFromWdtResponse, error) {
	out := new(FetchRefundListFromWdtResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_FetchRefundListFromWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) FetchTradeRefund(ctx context.Context, in *FetchTradeRefundRequest, opts ...grpc.CallOption) (*FetchTradeRefundResponse, error) {
	out := new(FetchTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_FetchTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) ListKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockListRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockListResponse, error) {
	out := new(KingdeeSalReturnStockListResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_ListKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) ListWdtTradeRefund(ctx context.Context, in *WdtTradeRefundListRequest, opts ...grpc.CallOption) (*WdtTradeRefundListResponse, error) {
	out := new(WdtTradeRefundListResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_ListWdtTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) ListWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinListRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinListResponse, error) {
	out := new(WdtTradeRefundStockinListResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_ListWdtTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) MatchTradeRefund(ctx context.Context, in *MatchTradeRefundRequest, opts ...grpc.CallOption) (*MatchTradeRefundResponse, error) {
	out := new(MatchTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_MatchTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) PartialUpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) PartialUpdateWdtTradeRefund(ctx context.Context, in *WdtTradeRefundPartialUpdateRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error) {
	out := new(WdtTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_PartialUpdateWdtTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) PartialUpdateWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinPartialUpdateRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error) {
	out := new(WdtTradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_PartialUpdateWdtTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) PushToKingDeeSalReturnStock(ctx context.Context, in *PushToKingDeeSalReturnStockRequest, opts ...grpc.CallOption) (*PushToKingDeeSalReturnStockResponse, error) {
	out := new(PushToKingDeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_PushToKingDeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) RetrieveKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_RetrieveKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) RetrieveWdtTradeRefund(ctx context.Context, in *WdtTradeRefundRetrieveRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error) {
	out := new(WdtTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_RetrieveWdtTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) RetrieveWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinRetrieveRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error) {
	out := new(WdtTradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_RetrieveWdtTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) TaskSigAggTradeRefund(ctx context.Context, in *TaskSigAggTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigAggTradeRefundResponse, error) {
	out := new(TaskSigAggTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_TaskSigAggTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) TaskSigAggTradeRefundStockIn(ctx context.Context, in *TaskSigAggTradeRefundStockInRequest, opts ...grpc.CallOption) (*TaskSigAggTradeRefundResponse, error) {
	out := new(TaskSigAggTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_TaskSigAggTradeRefundStockIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) TaskSigFetchTradeRefund(ctx context.Context, in *TaskSigFetchTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigFetchTradeRefundResponse, error) {
	out := new(TaskSigFetchTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_TaskSigFetchTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) TaskSigMatchTradeRefund(ctx context.Context, in *TaskSigMatchTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigMatchTradeRefundResponse, error) {
	out := new(TaskSigMatchTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_TaskSigMatchTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) TaskSigPushTradeRefund(ctx context.Context, in *TaskSigPushTradeRefundRequest, opts ...grpc.CallOption) (*TaskSigPushTradeRefundResponse, error) {
	out := new(TaskSigPushTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_TaskSigPushTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) UpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_UpdateKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) UpdateWdtTradeRefund(ctx context.Context, in *WdtTradeRefundRequest, opts ...grpc.CallOption) (*WdtTradeRefundResponse, error) {
	out := new(WdtTradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_UpdateWdtTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) UpdateWdtTradeRefundStockin(ctx context.Context, in *WdtTradeRefundStockinRequest, opts ...grpc.CallOption) (*WdtTradeRefundStockinResponse, error) {
	out := new(WdtTradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_UpdateWdtTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeRefundAggControllerServer is the server API for TradeRefundAggController service.
// All implementations must embed UnimplementedTradeRefundAggControllerServer
// for forward compatibility
type TradeRefundAggControllerServer interface {
	AggTradeRefund(context.Context, *AggTradeRefundRequest) (*AggTradeRefundResponse, error)
	CountAggRefundPushStatus(context.Context, *CountAggRefundPushStatusRequest) (*CountAggRefundPushStatusResponse, error)
	CountRefundStockInPushStatus(context.Context, *EmptyRequest) (*CountRefundStockInPushStatusResponse, error)
	CreateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error)
	CreateWdtTradeRefund(context.Context, *WdtTradeRefundRequest) (*WdtTradeRefundResponse, error)
	CreateWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinRequest) (*WdtTradeRefundStockinResponse, error)
	DestroyAggTradeRefund(context.Context, *DestroyAggTradeRefundRequest) (*DestroyAggTradeRefundResponse, error)
	DestroyKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockDestroyRequest) (*emptypb.Empty, error)
	DestroyWdtTradeRefund(context.Context, *WdtTradeRefundDestroyRequest) (*emptypb.Empty, error)
	DestroyWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinDestroyRequest) (*emptypb.Empty, error)
	FetchRefundListFromWdt(context.Context, *FetchRefundListFromWdtRequest) (*FetchRefundListFromWdtResponse, error)
	FetchTradeRefund(context.Context, *FetchTradeRefundRequest) (*FetchTradeRefundResponse, error)
	ListKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockListRequest) (*KingdeeSalReturnStockListResponse, error)
	ListWdtTradeRefund(context.Context, *WdtTradeRefundListRequest) (*WdtTradeRefundListResponse, error)
	ListWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinListRequest) (*WdtTradeRefundStockinListResponse, error)
	MatchTradeRefund(context.Context, *MatchTradeRefundRequest) (*MatchTradeRefundResponse, error)
	PartialUpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockPartialUpdateRequest) (*KingdeeSalReturnStockResponse, error)
	PartialUpdateWdtTradeRefund(context.Context, *WdtTradeRefundPartialUpdateRequest) (*WdtTradeRefundResponse, error)
	PartialUpdateWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinPartialUpdateRequest) (*WdtTradeRefundStockinResponse, error)
	PushToKingDeeSalReturnStock(context.Context, *PushToKingDeeSalReturnStockRequest) (*PushToKingDeeSalReturnStockResponse, error)
	RetrieveKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRetrieveRequest) (*KingdeeSalReturnStockResponse, error)
	RetrieveWdtTradeRefund(context.Context, *WdtTradeRefundRetrieveRequest) (*WdtTradeRefundResponse, error)
	RetrieveWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinRetrieveRequest) (*WdtTradeRefundStockinResponse, error)
	TaskSigAggTradeRefund(context.Context, *TaskSigAggTradeRefundRequest) (*TaskSigAggTradeRefundResponse, error)
	TaskSigAggTradeRefundStockIn(context.Context, *TaskSigAggTradeRefundStockInRequest) (*TaskSigAggTradeRefundResponse, error)
	TaskSigFetchTradeRefund(context.Context, *TaskSigFetchTradeRefundRequest) (*TaskSigFetchTradeRefundResponse, error)
	TaskSigMatchTradeRefund(context.Context, *TaskSigMatchTradeRefundRequest) (*TaskSigMatchTradeRefundResponse, error)
	TaskSigPushTradeRefund(context.Context, *TaskSigPushTradeRefundRequest) (*TaskSigPushTradeRefundResponse, error)
	UpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error)
	UpdateWdtTradeRefund(context.Context, *WdtTradeRefundRequest) (*WdtTradeRefundResponse, error)
	UpdateWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinRequest) (*WdtTradeRefundStockinResponse, error)
	mustEmbedUnimplementedTradeRefundAggControllerServer()
}

// UnimplementedTradeRefundAggControllerServer must be embedded to have forward compatible implementations.
type UnimplementedTradeRefundAggControllerServer struct {
}

func (UnimplementedTradeRefundAggControllerServer) AggTradeRefund(context.Context, *AggTradeRefundRequest) (*AggTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) CountAggRefundPushStatus(context.Context, *CountAggRefundPushStatusRequest) (*CountAggRefundPushStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAggRefundPushStatus not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) CountRefundStockInPushStatus(context.Context, *EmptyRequest) (*CountRefundStockInPushStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRefundStockInPushStatus not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) CreateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) CreateWdtTradeRefund(context.Context, *WdtTradeRefundRequest) (*WdtTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWdtTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) CreateWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinRequest) (*WdtTradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWdtTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) DestroyAggTradeRefund(context.Context, *DestroyAggTradeRefundRequest) (*DestroyAggTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) DestroyKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) DestroyWdtTradeRefund(context.Context, *WdtTradeRefundDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWdtTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) DestroyWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWdtTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) FetchRefundListFromWdt(context.Context, *FetchRefundListFromWdtRequest) (*FetchRefundListFromWdtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRefundListFromWdt not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) FetchTradeRefund(context.Context, *FetchTradeRefundRequest) (*FetchTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) ListKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockListRequest) (*KingdeeSalReturnStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) ListWdtTradeRefund(context.Context, *WdtTradeRefundListRequest) (*WdtTradeRefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) ListWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinListRequest) (*WdtTradeRefundStockinListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWdtTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) MatchTradeRefund(context.Context, *MatchTradeRefundRequest) (*MatchTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) PartialUpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockPartialUpdateRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) PartialUpdateWdtTradeRefund(context.Context, *WdtTradeRefundPartialUpdateRequest) (*WdtTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateWdtTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) PartialUpdateWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinPartialUpdateRequest) (*WdtTradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateWdtTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) PushToKingDeeSalReturnStock(context.Context, *PushToKingDeeSalReturnStockRequest) (*PushToKingDeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToKingDeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) RetrieveKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRetrieveRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) RetrieveWdtTradeRefund(context.Context, *WdtTradeRefundRetrieveRequest) (*WdtTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) RetrieveWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinRetrieveRequest) (*WdtTradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWdtTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) TaskSigAggTradeRefund(context.Context, *TaskSigAggTradeRefundRequest) (*TaskSigAggTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) TaskSigAggTradeRefundStockIn(context.Context, *TaskSigAggTradeRefundStockInRequest) (*TaskSigAggTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggTradeRefundStockIn not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) TaskSigFetchTradeRefund(context.Context, *TaskSigFetchTradeRefundRequest) (*TaskSigFetchTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigFetchTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) TaskSigMatchTradeRefund(context.Context, *TaskSigMatchTradeRefundRequest) (*TaskSigMatchTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigMatchTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) TaskSigPushTradeRefund(context.Context, *TaskSigPushTradeRefundRequest) (*TaskSigPushTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigPushTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) UpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) UpdateWdtTradeRefund(context.Context, *WdtTradeRefundRequest) (*WdtTradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWdtTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) UpdateWdtTradeRefundStockin(context.Context, *WdtTradeRefundStockinRequest) (*WdtTradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWdtTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) mustEmbedUnimplementedTradeRefundAggControllerServer() {
}

// UnsafeTradeRefundAggControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeRefundAggControllerServer will
// result in compilation errors.
type UnsafeTradeRefundAggControllerServer interface {
	mustEmbedUnimplementedTradeRefundAggControllerServer()
}

func RegisterTradeRefundAggControllerServer(s grpc.ServiceRegistrar, srv TradeRefundAggControllerServer) {
	s.RegisterService(&TradeRefundAggController_ServiceDesc, srv)
}

func _TradeRefundAggController_AggTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).AggTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_AggTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).AggTradeRefund(ctx, req.(*AggTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_CountAggRefundPushStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAggRefundPushStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CountAggRefundPushStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CountAggRefundPushStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CountAggRefundPushStatus(ctx, req.(*CountAggRefundPushStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_CountRefundStockInPushStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CountRefundStockInPushStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CountRefundStockInPushStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CountRefundStockInPushStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_CreateKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CreateKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CreateKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CreateKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_CreateWdtTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CreateWdtTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CreateWdtTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CreateWdtTradeRefund(ctx, req.(*WdtTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_CreateWdtTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundStockinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CreateWdtTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CreateWdtTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CreateWdtTradeRefundStockin(ctx, req.(*WdtTradeRefundStockinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_DestroyAggTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).DestroyAggTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_DestroyAggTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).DestroyAggTradeRefund(ctx, req.(*DestroyAggTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_DestroyKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).DestroyKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_DestroyKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).DestroyKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_DestroyWdtTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).DestroyWdtTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_DestroyWdtTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).DestroyWdtTradeRefund(ctx, req.(*WdtTradeRefundDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_DestroyWdtTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundStockinDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).DestroyWdtTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_DestroyWdtTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).DestroyWdtTradeRefundStockin(ctx, req.(*WdtTradeRefundStockinDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_FetchRefundListFromWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRefundListFromWdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).FetchRefundListFromWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_FetchRefundListFromWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).FetchRefundListFromWdt(ctx, req.(*FetchRefundListFromWdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_FetchTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).FetchTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_FetchTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).FetchTradeRefund(ctx, req.(*FetchTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_ListKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).ListKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_ListKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).ListKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_ListWdtTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).ListWdtTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_ListWdtTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).ListWdtTradeRefund(ctx, req.(*WdtTradeRefundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_ListWdtTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundStockinListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).ListWdtTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_ListWdtTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).ListWdtTradeRefundStockin(ctx, req.(*WdtTradeRefundStockinListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_MatchTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).MatchTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_MatchTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).MatchTradeRefund(ctx, req.(*MatchTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).PartialUpdateKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).PartialUpdateKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_PartialUpdateWdtTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).PartialUpdateWdtTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_PartialUpdateWdtTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).PartialUpdateWdtTradeRefund(ctx, req.(*WdtTradeRefundPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_PartialUpdateWdtTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundStockinPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).PartialUpdateWdtTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_PartialUpdateWdtTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).PartialUpdateWdtTradeRefundStockin(ctx, req.(*WdtTradeRefundStockinPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_PushToKingDeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushToKingDeeSalReturnStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).PushToKingDeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_PushToKingDeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).PushToKingDeeSalReturnStock(ctx, req.(*PushToKingDeeSalReturnStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_RetrieveKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).RetrieveKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_RetrieveKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).RetrieveKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_RetrieveWdtTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).RetrieveWdtTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_RetrieveWdtTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).RetrieveWdtTradeRefund(ctx, req.(*WdtTradeRefundRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_RetrieveWdtTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundStockinRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).RetrieveWdtTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_RetrieveWdtTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).RetrieveWdtTradeRefundStockin(ctx, req.(*WdtTradeRefundStockinRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_TaskSigAggTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).TaskSigAggTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_TaskSigAggTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).TaskSigAggTradeRefund(ctx, req.(*TaskSigAggTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_TaskSigAggTradeRefundStockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggTradeRefundStockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).TaskSigAggTradeRefundStockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_TaskSigAggTradeRefundStockIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).TaskSigAggTradeRefundStockIn(ctx, req.(*TaskSigAggTradeRefundStockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_TaskSigFetchTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigFetchTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).TaskSigFetchTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_TaskSigFetchTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).TaskSigFetchTradeRefund(ctx, req.(*TaskSigFetchTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_TaskSigMatchTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigMatchTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).TaskSigMatchTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_TaskSigMatchTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).TaskSigMatchTradeRefund(ctx, req.(*TaskSigMatchTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_TaskSigPushTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigPushTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).TaskSigPushTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_TaskSigPushTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).TaskSigPushTradeRefund(ctx, req.(*TaskSigPushTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_UpdateKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).UpdateKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_UpdateKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).UpdateKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_UpdateWdtTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).UpdateWdtTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_UpdateWdtTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).UpdateWdtTradeRefund(ctx, req.(*WdtTradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_UpdateWdtTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTradeRefundStockinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).UpdateWdtTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_UpdateWdtTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).UpdateWdtTradeRefundStockin(ctx, req.(*WdtTradeRefundStockinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeRefundAggController_ServiceDesc is the grpc.ServiceDesc for TradeRefundAggController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeRefundAggController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.TradeRefundAggController",
	HandlerType: (*TradeRefundAggControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggTradeRefund",
			Handler:    _TradeRefundAggController_AggTradeRefund_Handler,
		},
		{
			MethodName: "CountAggRefundPushStatus",
			Handler:    _TradeRefundAggController_CountAggRefundPushStatus_Handler,
		},
		{
			MethodName: "CountRefundStockInPushStatus",
			Handler:    _TradeRefundAggController_CountRefundStockInPushStatus_Handler,
		},
		{
			MethodName: "CreateKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_CreateKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "CreateWdtTradeRefund",
			Handler:    _TradeRefundAggController_CreateWdtTradeRefund_Handler,
		},
		{
			MethodName: "CreateWdtTradeRefundStockin",
			Handler:    _TradeRefundAggController_CreateWdtTradeRefundStockin_Handler,
		},
		{
			MethodName: "DestroyAggTradeRefund",
			Handler:    _TradeRefundAggController_DestroyAggTradeRefund_Handler,
		},
		{
			MethodName: "DestroyKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_DestroyKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "DestroyWdtTradeRefund",
			Handler:    _TradeRefundAggController_DestroyWdtTradeRefund_Handler,
		},
		{
			MethodName: "DestroyWdtTradeRefundStockin",
			Handler:    _TradeRefundAggController_DestroyWdtTradeRefundStockin_Handler,
		},
		{
			MethodName: "FetchRefundListFromWdt",
			Handler:    _TradeRefundAggController_FetchRefundListFromWdt_Handler,
		},
		{
			MethodName: "FetchTradeRefund",
			Handler:    _TradeRefundAggController_FetchTradeRefund_Handler,
		},
		{
			MethodName: "ListKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_ListKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "ListWdtTradeRefund",
			Handler:    _TradeRefundAggController_ListWdtTradeRefund_Handler,
		},
		{
			MethodName: "ListWdtTradeRefundStockin",
			Handler:    _TradeRefundAggController_ListWdtTradeRefundStockin_Handler,
		},
		{
			MethodName: "MatchTradeRefund",
			Handler:    _TradeRefundAggController_MatchTradeRefund_Handler,
		},
		{
			MethodName: "PartialUpdateKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "PartialUpdateWdtTradeRefund",
			Handler:    _TradeRefundAggController_PartialUpdateWdtTradeRefund_Handler,
		},
		{
			MethodName: "PartialUpdateWdtTradeRefundStockin",
			Handler:    _TradeRefundAggController_PartialUpdateWdtTradeRefundStockin_Handler,
		},
		{
			MethodName: "PushToKingDeeSalReturnStock",
			Handler:    _TradeRefundAggController_PushToKingDeeSalReturnStock_Handler,
		},
		{
			MethodName: "RetrieveKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_RetrieveKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "RetrieveWdtTradeRefund",
			Handler:    _TradeRefundAggController_RetrieveWdtTradeRefund_Handler,
		},
		{
			MethodName: "RetrieveWdtTradeRefundStockin",
			Handler:    _TradeRefundAggController_RetrieveWdtTradeRefundStockin_Handler,
		},
		{
			MethodName: "TaskSigAggTradeRefund",
			Handler:    _TradeRefundAggController_TaskSigAggTradeRefund_Handler,
		},
		{
			MethodName: "TaskSigAggTradeRefundStockIn",
			Handler:    _TradeRefundAggController_TaskSigAggTradeRefundStockIn_Handler,
		},
		{
			MethodName: "TaskSigFetchTradeRefund",
			Handler:    _TradeRefundAggController_TaskSigFetchTradeRefund_Handler,
		},
		{
			MethodName: "TaskSigMatchTradeRefund",
			Handler:    _TradeRefundAggController_TaskSigMatchTradeRefund_Handler,
		},
		{
			MethodName: "TaskSigPushTradeRefund",
			Handler:    _TradeRefundAggController_TaskSigPushTradeRefund_Handler,
		},
		{
			MethodName: "UpdateKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_UpdateKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "UpdateWdtTradeRefund",
			Handler:    _TradeRefundAggController_UpdateWdtTradeRefund_Handler,
		},
		{
			MethodName: "UpdateWdtTradeRefundStockin",
			Handler:    _TradeRefundAggController_UpdateWdtTradeRefundStockin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	TransferController_AggTransByMonth_FullMethodName               = "/kingdee_service.kingdee_ito.TransferController/AggTransByMonth"
	TransferController_AggTransPushStockInToKingdee_FullMethodName  = "/kingdee_service.kingdee_ito.TransferController/AggTransPushStockInToKingdee"
	TransferController_AggTransPushStockOutToKingdee_FullMethodName = "/kingdee_service.kingdee_ito.TransferController/AggTransPushStockOutToKingdee"
	TransferController_AggTransPushToKingdee_FullMethodName         = "/kingdee_service.kingdee_ito.TransferController/AggTransPushToKingdee"
	TransferController_AggTransStockOutIn_FullMethodName            = "/kingdee_service.kingdee_ito.TransferController/AggTransStockOutIn"
	TransferController_CountAggTransfer_FullMethodName              = "/kingdee_service.kingdee_ito.TransferController/CountAggTransfer"
	TransferController_CountKingdeeTransfer_FullMethodName          = "/kingdee_service.kingdee_ito.TransferController/CountKingdeeTransfer"
	TransferController_Create_FullMethodName                        = "/kingdee_service.kingdee_ito.TransferController/Create"
	TransferController_CreateTransferOrder_FullMethodName           = "/kingdee_service.kingdee_ito.TransferController/CreateTransferOrder"
	TransferController_Destroy_FullMethodName                       = "/kingdee_service.kingdee_ito.TransferController/Destroy"
	TransferController_DestroyAggTrans_FullMethodName               = "/kingdee_service.kingdee_ito.TransferController/DestroyAggTrans"
	TransferController_List_FullMethodName                          = "/kingdee_service.kingdee_ito.TransferController/List"
	TransferController_ListAggTransfer_FullMethodName               = "/kingdee_service.kingdee_ito.TransferController/ListAggTransfer"
	TransferController_ListKingdeeTransfer_FullMethodName           = "/kingdee_service.kingdee_ito.TransferController/ListKingdeeTransfer"
	TransferController_PartialUpdate_FullMethodName                 = "/kingdee_service.kingdee_ito.TransferController/PartialUpdate"
	TransferController_Retrieve_FullMethodName                      = "/kingdee_service.kingdee_ito.TransferController/Retrieve"
	TransferController_TaskSigAggTransStockOutIn_FullMethodName     = "/kingdee_service.kingdee_ito.TransferController/TaskSigAggTransStockOutIn"
	TransferController_TaskSigAggTransfer_FullMethodName            = "/kingdee_service.kingdee_ito.TransferController/TaskSigAggTransfer"
	TransferController_TaskSigPushTransStockIn_FullMethodName       = "/kingdee_service.kingdee_ito.TransferController/TaskSigPushTransStockIn"
	TransferController_TaskSigPushTransStockOut_FullMethodName      = "/kingdee_service.kingdee_ito.TransferController/TaskSigPushTransStockOut"
	TransferController_TaskSigPushTransfer_FullMethodName           = "/kingdee_service.kingdee_ito.TransferController/TaskSigPushTransfer"
	TransferController_TransferOption_FullMethodName                = "/kingdee_service.kingdee_ito.TransferController/TransferOption"
	TransferController_Update_FullMethodName                        = "/kingdee_service.kingdee_ito.TransferController/Update"
)

// TransferControllerClient is the client API for TransferController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferControllerClient interface {
	AggTransByMonth(ctx context.Context, in *AggTransByMonthRequest, opts ...grpc.CallOption) (*AggTransByMonthResponse, error)
	AggTransPushStockInToKingdee(ctx context.Context, in *AggTransPushStockInToKingdeeRequest, opts ...grpc.CallOption) (*AggTransPushStockInToKingdeeResponse, error)
	AggTransPushStockOutToKingdee(ctx context.Context, in *AggTransPushStockOutToKingdeeRequest, opts ...grpc.CallOption) (*AggTransPushStockOutToKingdeeResponse, error)
	AggTransPushToKingdee(ctx context.Context, in *AggTransPushToKingdeeRequest, opts ...grpc.CallOption) (*AggTransPushToKingdeeResponse, error)
	AggTransStockOutIn(ctx context.Context, in *AggTransStockOutInRequest, opts ...grpc.CallOption) (*AggTransStockOutInResponse, error)
	CountAggTransfer(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StaticsResponse, error)
	CountKingdeeTransfer(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StaticsResponse, error)
	Create(ctx context.Context, in *WdtTransferOrderRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error)
	CreateTransferOrder(ctx context.Context, in *TransferCreateOptsRequest, opts ...grpc.CallOption) (*CreateTransferOrderResponse, error)
	Destroy(ctx context.Context, in *WdtTransferOrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyAggTrans(ctx context.Context, in *DestroyAggTransRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	List(ctx context.Context, in *WdtTransferOrderListRequest, opts ...grpc.CallOption) (*WdtTransferOrderListResponse, error)
	ListAggTransfer(ctx context.Context, in *AggTransferListRequest, opts ...grpc.CallOption) (*AggTransferOrderListResponse, error)
	ListKingdeeTransfer(ctx context.Context, in *KingdeeTransferListRequest, opts ...grpc.CallOption) (*KingdeeTransferOrderListResponse, error)
	PartialUpdate(ctx context.Context, in *WdtTransferOrderPartialUpdateRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error)
	Retrieve(ctx context.Context, in *WdtTransferOrderRetrieveRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error)
	TaskSigAggTransStockOutIn(ctx context.Context, in *TaskSigAggTransStockOutInRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	TaskSigAggTransfer(ctx context.Context, in *TaskSigAggTransferRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	TaskSigPushTransStockIn(ctx context.Context, in *TaskSigPushTransStockInRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	TaskSigPushTransStockOut(ctx context.Context, in *TaskSigPushTransStockOutRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	TaskSigPushTransfer(ctx context.Context, in *TaskSigPushTransferRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	TransferOption(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TransferOptionResponse, error)
	Update(ctx context.Context, in *WdtTransferOrderRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error)
}

type transferControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferControllerClient(cc grpc.ClientConnInterface) TransferControllerClient {
	return &transferControllerClient{cc}
}

func (c *transferControllerClient) AggTransByMonth(ctx context.Context, in *AggTransByMonthRequest, opts ...grpc.CallOption) (*AggTransByMonthResponse, error) {
	out := new(AggTransByMonthResponse)
	err := c.cc.Invoke(ctx, TransferController_AggTransByMonth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) AggTransPushStockInToKingdee(ctx context.Context, in *AggTransPushStockInToKingdeeRequest, opts ...grpc.CallOption) (*AggTransPushStockInToKingdeeResponse, error) {
	out := new(AggTransPushStockInToKingdeeResponse)
	err := c.cc.Invoke(ctx, TransferController_AggTransPushStockInToKingdee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) AggTransPushStockOutToKingdee(ctx context.Context, in *AggTransPushStockOutToKingdeeRequest, opts ...grpc.CallOption) (*AggTransPushStockOutToKingdeeResponse, error) {
	out := new(AggTransPushStockOutToKingdeeResponse)
	err := c.cc.Invoke(ctx, TransferController_AggTransPushStockOutToKingdee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) AggTransPushToKingdee(ctx context.Context, in *AggTransPushToKingdeeRequest, opts ...grpc.CallOption) (*AggTransPushToKingdeeResponse, error) {
	out := new(AggTransPushToKingdeeResponse)
	err := c.cc.Invoke(ctx, TransferController_AggTransPushToKingdee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) AggTransStockOutIn(ctx context.Context, in *AggTransStockOutInRequest, opts ...grpc.CallOption) (*AggTransStockOutInResponse, error) {
	out := new(AggTransStockOutInResponse)
	err := c.cc.Invoke(ctx, TransferController_AggTransStockOutIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) CountAggTransfer(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StaticsResponse, error) {
	out := new(StaticsResponse)
	err := c.cc.Invoke(ctx, TransferController_CountAggTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) CountKingdeeTransfer(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StaticsResponse, error) {
	out := new(StaticsResponse)
	err := c.cc.Invoke(ctx, TransferController_CountKingdeeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) Create(ctx context.Context, in *WdtTransferOrderRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error) {
	out := new(WdtTransferOrderResponse)
	err := c.cc.Invoke(ctx, TransferController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) CreateTransferOrder(ctx context.Context, in *TransferCreateOptsRequest, opts ...grpc.CallOption) (*CreateTransferOrderResponse, error) {
	out := new(CreateTransferOrderResponse)
	err := c.cc.Invoke(ctx, TransferController_CreateTransferOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) Destroy(ctx context.Context, in *WdtTransferOrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransferController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) DestroyAggTrans(ctx context.Context, in *DestroyAggTransRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, TransferController_DestroyAggTrans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) List(ctx context.Context, in *WdtTransferOrderListRequest, opts ...grpc.CallOption) (*WdtTransferOrderListResponse, error) {
	out := new(WdtTransferOrderListResponse)
	err := c.cc.Invoke(ctx, TransferController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) ListAggTransfer(ctx context.Context, in *AggTransferListRequest, opts ...grpc.CallOption) (*AggTransferOrderListResponse, error) {
	out := new(AggTransferOrderListResponse)
	err := c.cc.Invoke(ctx, TransferController_ListAggTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) ListKingdeeTransfer(ctx context.Context, in *KingdeeTransferListRequest, opts ...grpc.CallOption) (*KingdeeTransferOrderListResponse, error) {
	out := new(KingdeeTransferOrderListResponse)
	err := c.cc.Invoke(ctx, TransferController_ListKingdeeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) PartialUpdate(ctx context.Context, in *WdtTransferOrderPartialUpdateRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error) {
	out := new(WdtTransferOrderResponse)
	err := c.cc.Invoke(ctx, TransferController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) Retrieve(ctx context.Context, in *WdtTransferOrderRetrieveRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error) {
	out := new(WdtTransferOrderResponse)
	err := c.cc.Invoke(ctx, TransferController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) TaskSigAggTransStockOutIn(ctx context.Context, in *TaskSigAggTransStockOutInRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, TransferController_TaskSigAggTransStockOutIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) TaskSigAggTransfer(ctx context.Context, in *TaskSigAggTransferRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, TransferController_TaskSigAggTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) TaskSigPushTransStockIn(ctx context.Context, in *TaskSigPushTransStockInRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, TransferController_TaskSigPushTransStockIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) TaskSigPushTransStockOut(ctx context.Context, in *TaskSigPushTransStockOutRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, TransferController_TaskSigPushTransStockOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) TaskSigPushTransfer(ctx context.Context, in *TaskSigPushTransferRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, TransferController_TaskSigPushTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) TransferOption(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TransferOptionResponse, error) {
	out := new(TransferOptionResponse)
	err := c.cc.Invoke(ctx, TransferController_TransferOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferControllerClient) Update(ctx context.Context, in *WdtTransferOrderRequest, opts ...grpc.CallOption) (*WdtTransferOrderResponse, error) {
	out := new(WdtTransferOrderResponse)
	err := c.cc.Invoke(ctx, TransferController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferControllerServer is the server API for TransferController service.
// All implementations must embed UnimplementedTransferControllerServer
// for forward compatibility
type TransferControllerServer interface {
	AggTransByMonth(context.Context, *AggTransByMonthRequest) (*AggTransByMonthResponse, error)
	AggTransPushStockInToKingdee(context.Context, *AggTransPushStockInToKingdeeRequest) (*AggTransPushStockInToKingdeeResponse, error)
	AggTransPushStockOutToKingdee(context.Context, *AggTransPushStockOutToKingdeeRequest) (*AggTransPushStockOutToKingdeeResponse, error)
	AggTransPushToKingdee(context.Context, *AggTransPushToKingdeeRequest) (*AggTransPushToKingdeeResponse, error)
	AggTransStockOutIn(context.Context, *AggTransStockOutInRequest) (*AggTransStockOutInResponse, error)
	CountAggTransfer(context.Context, *EmptyRequest) (*StaticsResponse, error)
	CountKingdeeTransfer(context.Context, *EmptyRequest) (*StaticsResponse, error)
	Create(context.Context, *WdtTransferOrderRequest) (*WdtTransferOrderResponse, error)
	CreateTransferOrder(context.Context, *TransferCreateOptsRequest) (*CreateTransferOrderResponse, error)
	Destroy(context.Context, *WdtTransferOrderDestroyRequest) (*emptypb.Empty, error)
	DestroyAggTrans(context.Context, *DestroyAggTransRequest) (*CodeMsgResponse, error)
	List(context.Context, *WdtTransferOrderListRequest) (*WdtTransferOrderListResponse, error)
	ListAggTransfer(context.Context, *AggTransferListRequest) (*AggTransferOrderListResponse, error)
	ListKingdeeTransfer(context.Context, *KingdeeTransferListRequest) (*KingdeeTransferOrderListResponse, error)
	PartialUpdate(context.Context, *WdtTransferOrderPartialUpdateRequest) (*WdtTransferOrderResponse, error)
	Retrieve(context.Context, *WdtTransferOrderRetrieveRequest) (*WdtTransferOrderResponse, error)
	TaskSigAggTransStockOutIn(context.Context, *TaskSigAggTransStockOutInRequest) (*CodeMsgResponse, error)
	TaskSigAggTransfer(context.Context, *TaskSigAggTransferRequest) (*CodeMsgResponse, error)
	TaskSigPushTransStockIn(context.Context, *TaskSigPushTransStockInRequest) (*CodeMsgResponse, error)
	TaskSigPushTransStockOut(context.Context, *TaskSigPushTransStockOutRequest) (*CodeMsgResponse, error)
	TaskSigPushTransfer(context.Context, *TaskSigPushTransferRequest) (*CodeMsgResponse, error)
	TransferOption(context.Context, *EmptyRequest) (*TransferOptionResponse, error)
	Update(context.Context, *WdtTransferOrderRequest) (*WdtTransferOrderResponse, error)
	mustEmbedUnimplementedTransferControllerServer()
}

// UnimplementedTransferControllerServer must be embedded to have forward compatible implementations.
type UnimplementedTransferControllerServer struct {
}

func (UnimplementedTransferControllerServer) AggTransByMonth(context.Context, *AggTransByMonthRequest) (*AggTransByMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTransByMonth not implemented")
}
func (UnimplementedTransferControllerServer) AggTransPushStockInToKingdee(context.Context, *AggTransPushStockInToKingdeeRequest) (*AggTransPushStockInToKingdeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTransPushStockInToKingdee not implemented")
}
func (UnimplementedTransferControllerServer) AggTransPushStockOutToKingdee(context.Context, *AggTransPushStockOutToKingdeeRequest) (*AggTransPushStockOutToKingdeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTransPushStockOutToKingdee not implemented")
}
func (UnimplementedTransferControllerServer) AggTransPushToKingdee(context.Context, *AggTransPushToKingdeeRequest) (*AggTransPushToKingdeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTransPushToKingdee not implemented")
}
func (UnimplementedTransferControllerServer) AggTransStockOutIn(context.Context, *AggTransStockOutInRequest) (*AggTransStockOutInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggTransStockOutIn not implemented")
}
func (UnimplementedTransferControllerServer) CountAggTransfer(context.Context, *EmptyRequest) (*StaticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAggTransfer not implemented")
}
func (UnimplementedTransferControllerServer) CountKingdeeTransfer(context.Context, *EmptyRequest) (*StaticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountKingdeeTransfer not implemented")
}
func (UnimplementedTransferControllerServer) Create(context.Context, *WdtTransferOrderRequest) (*WdtTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTransferControllerServer) CreateTransferOrder(context.Context, *TransferCreateOptsRequest) (*CreateTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferOrder not implemented")
}
func (UnimplementedTransferControllerServer) Destroy(context.Context, *WdtTransferOrderDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedTransferControllerServer) DestroyAggTrans(context.Context, *DestroyAggTransRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggTrans not implemented")
}
func (UnimplementedTransferControllerServer) List(context.Context, *WdtTransferOrderListRequest) (*WdtTransferOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransferControllerServer) ListAggTransfer(context.Context, *AggTransferListRequest) (*AggTransferOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggTransfer not implemented")
}
func (UnimplementedTransferControllerServer) ListKingdeeTransfer(context.Context, *KingdeeTransferListRequest) (*KingdeeTransferOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeeTransfer not implemented")
}
func (UnimplementedTransferControllerServer) PartialUpdate(context.Context, *WdtTransferOrderPartialUpdateRequest) (*WdtTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedTransferControllerServer) Retrieve(context.Context, *WdtTransferOrderRetrieveRequest) (*WdtTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedTransferControllerServer) TaskSigAggTransStockOutIn(context.Context, *TaskSigAggTransStockOutInRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggTransStockOutIn not implemented")
}
func (UnimplementedTransferControllerServer) TaskSigAggTransfer(context.Context, *TaskSigAggTransferRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggTransfer not implemented")
}
func (UnimplementedTransferControllerServer) TaskSigPushTransStockIn(context.Context, *TaskSigPushTransStockInRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigPushTransStockIn not implemented")
}
func (UnimplementedTransferControllerServer) TaskSigPushTransStockOut(context.Context, *TaskSigPushTransStockOutRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigPushTransStockOut not implemented")
}
func (UnimplementedTransferControllerServer) TaskSigPushTransfer(context.Context, *TaskSigPushTransferRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigPushTransfer not implemented")
}
func (UnimplementedTransferControllerServer) TransferOption(context.Context, *EmptyRequest) (*TransferOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOption not implemented")
}
func (UnimplementedTransferControllerServer) Update(context.Context, *WdtTransferOrderRequest) (*WdtTransferOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTransferControllerServer) mustEmbedUnimplementedTransferControllerServer() {}

// UnsafeTransferControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferControllerServer will
// result in compilation errors.
type UnsafeTransferControllerServer interface {
	mustEmbedUnimplementedTransferControllerServer()
}

func RegisterTransferControllerServer(s grpc.ServiceRegistrar, srv TransferControllerServer) {
	s.RegisterService(&TransferController_ServiceDesc, srv)
}

func _TransferController_AggTransByMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTransByMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).AggTransByMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_AggTransByMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).AggTransByMonth(ctx, req.(*AggTransByMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_AggTransPushStockInToKingdee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTransPushStockInToKingdeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).AggTransPushStockInToKingdee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_AggTransPushStockInToKingdee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).AggTransPushStockInToKingdee(ctx, req.(*AggTransPushStockInToKingdeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_AggTransPushStockOutToKingdee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTransPushStockOutToKingdeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).AggTransPushStockOutToKingdee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_AggTransPushStockOutToKingdee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).AggTransPushStockOutToKingdee(ctx, req.(*AggTransPushStockOutToKingdeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_AggTransPushToKingdee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTransPushToKingdeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).AggTransPushToKingdee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_AggTransPushToKingdee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).AggTransPushToKingdee(ctx, req.(*AggTransPushToKingdeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_AggTransStockOutIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTransStockOutInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).AggTransStockOutIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_AggTransStockOutIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).AggTransStockOutIn(ctx, req.(*AggTransStockOutInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_CountAggTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).CountAggTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_CountAggTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).CountAggTransfer(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_CountKingdeeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).CountKingdeeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_CountKingdeeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).CountKingdeeTransfer(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTransferOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).Create(ctx, req.(*WdtTransferOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_CreateTransferOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCreateOptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).CreateTransferOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_CreateTransferOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).CreateTransferOrder(ctx, req.(*TransferCreateOptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTransferOrderDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).Destroy(ctx, req.(*WdtTransferOrderDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_DestroyAggTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggTransRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).DestroyAggTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_DestroyAggTrans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).DestroyAggTrans(ctx, req.(*DestroyAggTransRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTransferOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).List(ctx, req.(*WdtTransferOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_ListAggTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggTransferListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).ListAggTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_ListAggTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).ListAggTransfer(ctx, req.(*AggTransferListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_ListKingdeeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTransferListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).ListKingdeeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_ListKingdeeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).ListKingdeeTransfer(ctx, req.(*KingdeeTransferListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTransferOrderPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).PartialUpdate(ctx, req.(*WdtTransferOrderPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTransferOrderRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).Retrieve(ctx, req.(*WdtTransferOrderRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_TaskSigAggTransStockOutIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggTransStockOutInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).TaskSigAggTransStockOutIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_TaskSigAggTransStockOutIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).TaskSigAggTransStockOutIn(ctx, req.(*TaskSigAggTransStockOutInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_TaskSigAggTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).TaskSigAggTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_TaskSigAggTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).TaskSigAggTransfer(ctx, req.(*TaskSigAggTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_TaskSigPushTransStockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigPushTransStockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).TaskSigPushTransStockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_TaskSigPushTransStockIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).TaskSigPushTransStockIn(ctx, req.(*TaskSigPushTransStockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_TaskSigPushTransStockOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigPushTransStockOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).TaskSigPushTransStockOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_TaskSigPushTransStockOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).TaskSigPushTransStockOut(ctx, req.(*TaskSigPushTransStockOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_TaskSigPushTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigPushTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).TaskSigPushTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_TaskSigPushTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).TaskSigPushTransfer(ctx, req.(*TaskSigPushTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_TransferOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).TransferOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_TransferOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).TransferOption(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtTransferOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferControllerServer).Update(ctx, req.(*WdtTransferOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferController_ServiceDesc is the grpc.ServiceDesc for TransferController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.TransferController",
	HandlerType: (*TransferControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggTransByMonth",
			Handler:    _TransferController_AggTransByMonth_Handler,
		},
		{
			MethodName: "AggTransPushStockInToKingdee",
			Handler:    _TransferController_AggTransPushStockInToKingdee_Handler,
		},
		{
			MethodName: "AggTransPushStockOutToKingdee",
			Handler:    _TransferController_AggTransPushStockOutToKingdee_Handler,
		},
		{
			MethodName: "AggTransPushToKingdee",
			Handler:    _TransferController_AggTransPushToKingdee_Handler,
		},
		{
			MethodName: "AggTransStockOutIn",
			Handler:    _TransferController_AggTransStockOutIn_Handler,
		},
		{
			MethodName: "CountAggTransfer",
			Handler:    _TransferController_CountAggTransfer_Handler,
		},
		{
			MethodName: "CountKingdeeTransfer",
			Handler:    _TransferController_CountKingdeeTransfer_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TransferController_Create_Handler,
		},
		{
			MethodName: "CreateTransferOrder",
			Handler:    _TransferController_CreateTransferOrder_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _TransferController_Destroy_Handler,
		},
		{
			MethodName: "DestroyAggTrans",
			Handler:    _TransferController_DestroyAggTrans_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TransferController_List_Handler,
		},
		{
			MethodName: "ListAggTransfer",
			Handler:    _TransferController_ListAggTransfer_Handler,
		},
		{
			MethodName: "ListKingdeeTransfer",
			Handler:    _TransferController_ListKingdeeTransfer_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _TransferController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _TransferController_Retrieve_Handler,
		},
		{
			MethodName: "TaskSigAggTransStockOutIn",
			Handler:    _TransferController_TaskSigAggTransStockOutIn_Handler,
		},
		{
			MethodName: "TaskSigAggTransfer",
			Handler:    _TransferController_TaskSigAggTransfer_Handler,
		},
		{
			MethodName: "TaskSigPushTransStockIn",
			Handler:    _TransferController_TaskSigPushTransStockIn_Handler,
		},
		{
			MethodName: "TaskSigPushTransStockOut",
			Handler:    _TransferController_TaskSigPushTransStockOut_Handler,
		},
		{
			MethodName: "TaskSigPushTransfer",
			Handler:    _TransferController_TaskSigPushTransfer_Handler,
		},
		{
			MethodName: "TransferOption",
			Handler:    _TransferController_TransferOption_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TransferController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	VasOrderAggController_DestroyAggKingdeeStkMisdelivery_FullMethodName             = "/kingdee_service.kingdee_ito.VasOrderAggController/DestroyAggKingdeeStkMisdelivery"
	VasOrderAggController_DestroyAggSeedingKingdeeTransferDirect_FullMethodName      = "/kingdee_service.kingdee_ito.VasOrderAggController/DestroyAggSeedingKingdeeTransferDirect"
	VasOrderAggController_DestroyAggSwapKingdeeRefund_FullMethodName                 = "/kingdee_service.kingdee_ito.VasOrderAggController/DestroyAggSwapKingdeeRefund"
	VasOrderAggController_DestroyAggSwapKingdeeSalOutStock_FullMethodName            = "/kingdee_service.kingdee_ito.VasOrderAggController/DestroyAggSwapKingdeeSalOutStock"
	VasOrderAggController_List_FullMethodName                                        = "/kingdee_service.kingdee_ito.VasOrderAggController/List"
	VasOrderAggController_ListRepairKingdeeStkMisDelivery_FullMethodName             = "/kingdee_service.kingdee_ito.VasOrderAggController/ListRepairKingdeeStkMisDelivery"
	VasOrderAggController_ListSeedingKingdeeStkTransferDirect_FullMethodName         = "/kingdee_service.kingdee_ito.VasOrderAggController/ListSeedingKingdeeStkTransferDirect"
	VasOrderAggController_ListSwapKingdeeSalOutStock_FullMethodName                  = "/kingdee_service.kingdee_ito.VasOrderAggController/ListSwapKingdeeSalOutStock"
	VasOrderAggController_ListSwapKingdeeSalReturnStock_FullMethodName               = "/kingdee_service.kingdee_ito.VasOrderAggController/ListSwapKingdeeSalReturnStock"
	VasOrderAggController_RunPeriodPushRepairToKingdeeMisDelivery_FullMethodName     = "/kingdee_service.kingdee_ito.VasOrderAggController/RunPeriodPushRepairToKingdeeMisDelivery"
	VasOrderAggController_RunPeriodPushSeedingToKingdeeTransferDirect_FullMethodName = "/kingdee_service.kingdee_ito.VasOrderAggController/RunPeriodPushSeedingToKingdeeTransferDirect"
	VasOrderAggController_RunPeriodPushSwapRefundToKingdee_FullMethodName            = "/kingdee_service.kingdee_ito.VasOrderAggController/RunPeriodPushSwapRefundToKingdee"
	VasOrderAggController_RunPeriodPushSwapSalOutStockToKingdee_FullMethodName       = "/kingdee_service.kingdee_ito.VasOrderAggController/RunPeriodPushSwapSalOutStockToKingdee"
	VasOrderAggController_StaticsRepairKingdeeStkMisDelivery_FullMethodName          = "/kingdee_service.kingdee_ito.VasOrderAggController/StaticsRepairKingdeeStkMisDelivery"
	VasOrderAggController_StaticsSeedingKingdeeStkTransferDirect_FullMethodName      = "/kingdee_service.kingdee_ito.VasOrderAggController/StaticsSeedingKingdeeStkTransferDirect"
	VasOrderAggController_StaticsSwapKingdeeSalOutStock_FullMethodName               = "/kingdee_service.kingdee_ito.VasOrderAggController/StaticsSwapKingdeeSalOutStock"
	VasOrderAggController_StaticsSwapKingdeeSalReturnStock_FullMethodName            = "/kingdee_service.kingdee_ito.VasOrderAggController/StaticsSwapKingdeeSalReturnStock"
	VasOrderAggController_TaskSigAggRepairStockout_FullMethodName                    = "/kingdee_service.kingdee_ito.VasOrderAggController/TaskSigAggRepairStockout"
	VasOrderAggController_TaskSigAggSeedingTrade_FullMethodName                      = "/kingdee_service.kingdee_ito.VasOrderAggController/TaskSigAggSeedingTrade"
	VasOrderAggController_TaskSigAggSwapStockin_FullMethodName                       = "/kingdee_service.kingdee_ito.VasOrderAggController/TaskSigAggSwapStockin"
	VasOrderAggController_TaskSigAggSwapTrade_FullMethodName                         = "/kingdee_service.kingdee_ito.VasOrderAggController/TaskSigAggSwapTrade"
	VasOrderAggController_TaskSigFetchStockinOrder_FullMethodName                    = "/kingdee_service.kingdee_ito.VasOrderAggController/TaskSigFetchStockinOrder"
)

// VasOrderAggControllerClient is the client API for VasOrderAggController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VasOrderAggControllerClient interface {
	DestroyAggKingdeeStkMisdelivery(ctx context.Context, in *DestroyAggKingdeeStkMisdeliveryRequest, opts ...grpc.CallOption) (*DestroyAggKingdeeStkMisdeliveryResponse, error)
	DestroyAggSeedingKingdeeTransferDirect(ctx context.Context, in *DestroyAggSeedingKingdeeTransferDirectRequest, opts ...grpc.CallOption) (*DestroyAggSeedingKingdeeTransferDirectResponse, error)
	DestroyAggSwapKingdeeRefund(ctx context.Context, in *DestroyAggSwapKingdeeRefundRequest, opts ...grpc.CallOption) (*DestroyAggSwapKingdeeRefundResponse, error)
	DestroyAggSwapKingdeeSalOutStock(ctx context.Context, in *DestroyAggSwapKingdeeSalOutStockRequest, opts ...grpc.CallOption) (*DestroyAggSwapKingdeeSalOutStockResponse, error)
	List(ctx context.Context, in *WdtStockinModelListRequest, opts ...grpc.CallOption) (*WdtStockinModelListResponse, error)
	ListRepairKingdeeStkMisDelivery(ctx context.Context, in *VasOrderAggListRepairKingdeeStkMisDeliveryRequest, opts ...grpc.CallOption) (*KingdeeStkMisDeliveryListResponse, error)
	ListSeedingKingdeeStkTransferDirect(ctx context.Context, in *VasOrderAggListSeedingKingdeeStkTransferDirectRequest, opts ...grpc.CallOption) (*SeedingKingdeeStkTransferDirectListResponse, error)
	ListSwapKingdeeSalOutStock(ctx context.Context, in *VasOrderAggListSwapKingdeeSalOutStockRequest, opts ...grpc.CallOption) (*SwapKingdeeSalOutStockListResponse, error)
	ListSwapKingdeeSalReturnStock(ctx context.Context, in *VasOrderAggListSwapKingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*SwapKingdeeSalReturnStockListResponse, error)
	RunPeriodPushRepairToKingdeeMisDelivery(ctx context.Context, in *RunPeriodPushRepairToKingdeeMisDeliveryRequest, opts ...grpc.CallOption) (*RunPeriodPushRepairToKingdeeMisDeliveryResponse, error)
	RunPeriodPushSeedingToKingdeeTransferDirect(ctx context.Context, in *RunPeriodPushSeedingToKingdeeTransferDirectRequest, opts ...grpc.CallOption) (*RunPeriodPushSeedingToKingdeeTransferDirectResponse, error)
	RunPeriodPushSwapRefundToKingdee(ctx context.Context, in *RunPeriodPushSwapRefundToKingdeeRequest, opts ...grpc.CallOption) (*RunPeriodPushSwapRefundToKingdeeResponse, error)
	RunPeriodPushSwapSalOutStockToKingdee(ctx context.Context, in *RunPeriodPushSwapSalOutStockToKingdeeRequest, opts ...grpc.CallOption) (*RunPeriodPushSwapSalOutStockToKingdeeResponse, error)
	StaticsRepairKingdeeStkMisDelivery(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error)
	StaticsSeedingKingdeeStkTransferDirect(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error)
	StaticsSwapKingdeeSalOutStock(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error)
	StaticsSwapKingdeeSalReturnStock(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error)
	TaskSigAggRepairStockout(ctx context.Context, in *TaskSigAggRepairStockoutRequest, opts ...grpc.CallOption) (*TaskSigAggRepairStockoutResponse, error)
	TaskSigAggSeedingTrade(ctx context.Context, in *TaskSigAggSeedingTradeRequest, opts ...grpc.CallOption) (*TaskSigAggSeedingTradeResponse, error)
	TaskSigAggSwapStockin(ctx context.Context, in *TaskSigAggSwapStockinRequest, opts ...grpc.CallOption) (*TaskSigAggSwapStockinResponse, error)
	TaskSigAggSwapTrade(ctx context.Context, in *TaskSigAggSwapTradeRequest, opts ...grpc.CallOption) (*TaskSigAggSwapTradeResponse, error)
	TaskSigFetchStockinOrder(ctx context.Context, in *TaskSigFetchStockinOrderRequest, opts ...grpc.CallOption) (*TaskSigFetchStockinOrderResponse, error)
}

type vasOrderAggControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewVasOrderAggControllerClient(cc grpc.ClientConnInterface) VasOrderAggControllerClient {
	return &vasOrderAggControllerClient{cc}
}

func (c *vasOrderAggControllerClient) DestroyAggKingdeeStkMisdelivery(ctx context.Context, in *DestroyAggKingdeeStkMisdeliveryRequest, opts ...grpc.CallOption) (*DestroyAggKingdeeStkMisdeliveryResponse, error) {
	out := new(DestroyAggKingdeeStkMisdeliveryResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_DestroyAggKingdeeStkMisdelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) DestroyAggSeedingKingdeeTransferDirect(ctx context.Context, in *DestroyAggSeedingKingdeeTransferDirectRequest, opts ...grpc.CallOption) (*DestroyAggSeedingKingdeeTransferDirectResponse, error) {
	out := new(DestroyAggSeedingKingdeeTransferDirectResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_DestroyAggSeedingKingdeeTransferDirect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) DestroyAggSwapKingdeeRefund(ctx context.Context, in *DestroyAggSwapKingdeeRefundRequest, opts ...grpc.CallOption) (*DestroyAggSwapKingdeeRefundResponse, error) {
	out := new(DestroyAggSwapKingdeeRefundResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_DestroyAggSwapKingdeeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) DestroyAggSwapKingdeeSalOutStock(ctx context.Context, in *DestroyAggSwapKingdeeSalOutStockRequest, opts ...grpc.CallOption) (*DestroyAggSwapKingdeeSalOutStockResponse, error) {
	out := new(DestroyAggSwapKingdeeSalOutStockResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_DestroyAggSwapKingdeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) List(ctx context.Context, in *WdtStockinModelListRequest, opts ...grpc.CallOption) (*WdtStockinModelListResponse, error) {
	out := new(WdtStockinModelListResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) ListRepairKingdeeStkMisDelivery(ctx context.Context, in *VasOrderAggListRepairKingdeeStkMisDeliveryRequest, opts ...grpc.CallOption) (*KingdeeStkMisDeliveryListResponse, error) {
	out := new(KingdeeStkMisDeliveryListResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_ListRepairKingdeeStkMisDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) ListSeedingKingdeeStkTransferDirect(ctx context.Context, in *VasOrderAggListSeedingKingdeeStkTransferDirectRequest, opts ...grpc.CallOption) (*SeedingKingdeeStkTransferDirectListResponse, error) {
	out := new(SeedingKingdeeStkTransferDirectListResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_ListSeedingKingdeeStkTransferDirect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) ListSwapKingdeeSalOutStock(ctx context.Context, in *VasOrderAggListSwapKingdeeSalOutStockRequest, opts ...grpc.CallOption) (*SwapKingdeeSalOutStockListResponse, error) {
	out := new(SwapKingdeeSalOutStockListResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_ListSwapKingdeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) ListSwapKingdeeSalReturnStock(ctx context.Context, in *VasOrderAggListSwapKingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*SwapKingdeeSalReturnStockListResponse, error) {
	out := new(SwapKingdeeSalReturnStockListResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_ListSwapKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) RunPeriodPushRepairToKingdeeMisDelivery(ctx context.Context, in *RunPeriodPushRepairToKingdeeMisDeliveryRequest, opts ...grpc.CallOption) (*RunPeriodPushRepairToKingdeeMisDeliveryResponse, error) {
	out := new(RunPeriodPushRepairToKingdeeMisDeliveryResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_RunPeriodPushRepairToKingdeeMisDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) RunPeriodPushSeedingToKingdeeTransferDirect(ctx context.Context, in *RunPeriodPushSeedingToKingdeeTransferDirectRequest, opts ...grpc.CallOption) (*RunPeriodPushSeedingToKingdeeTransferDirectResponse, error) {
	out := new(RunPeriodPushSeedingToKingdeeTransferDirectResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_RunPeriodPushSeedingToKingdeeTransferDirect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) RunPeriodPushSwapRefundToKingdee(ctx context.Context, in *RunPeriodPushSwapRefundToKingdeeRequest, opts ...grpc.CallOption) (*RunPeriodPushSwapRefundToKingdeeResponse, error) {
	out := new(RunPeriodPushSwapRefundToKingdeeResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_RunPeriodPushSwapRefundToKingdee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) RunPeriodPushSwapSalOutStockToKingdee(ctx context.Context, in *RunPeriodPushSwapSalOutStockToKingdeeRequest, opts ...grpc.CallOption) (*RunPeriodPushSwapSalOutStockToKingdeeResponse, error) {
	out := new(RunPeriodPushSwapSalOutStockToKingdeeResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_RunPeriodPushSwapSalOutStockToKingdee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) StaticsRepairKingdeeStkMisDelivery(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error) {
	out := new(StaticsResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_StaticsRepairKingdeeStkMisDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) StaticsSeedingKingdeeStkTransferDirect(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error) {
	out := new(StaticsResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_StaticsSeedingKingdeeStkTransferDirect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) StaticsSwapKingdeeSalOutStock(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error) {
	out := new(StaticsResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_StaticsSwapKingdeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) StaticsSwapKingdeeSalReturnStock(ctx context.Context, in *StaticsRequest, opts ...grpc.CallOption) (*StaticsResponse, error) {
	out := new(StaticsResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_StaticsSwapKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) TaskSigAggRepairStockout(ctx context.Context, in *TaskSigAggRepairStockoutRequest, opts ...grpc.CallOption) (*TaskSigAggRepairStockoutResponse, error) {
	out := new(TaskSigAggRepairStockoutResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_TaskSigAggRepairStockout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) TaskSigAggSeedingTrade(ctx context.Context, in *TaskSigAggSeedingTradeRequest, opts ...grpc.CallOption) (*TaskSigAggSeedingTradeResponse, error) {
	out := new(TaskSigAggSeedingTradeResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_TaskSigAggSeedingTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) TaskSigAggSwapStockin(ctx context.Context, in *TaskSigAggSwapStockinRequest, opts ...grpc.CallOption) (*TaskSigAggSwapStockinResponse, error) {
	out := new(TaskSigAggSwapStockinResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_TaskSigAggSwapStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) TaskSigAggSwapTrade(ctx context.Context, in *TaskSigAggSwapTradeRequest, opts ...grpc.CallOption) (*TaskSigAggSwapTradeResponse, error) {
	out := new(TaskSigAggSwapTradeResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_TaskSigAggSwapTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vasOrderAggControllerClient) TaskSigFetchStockinOrder(ctx context.Context, in *TaskSigFetchStockinOrderRequest, opts ...grpc.CallOption) (*TaskSigFetchStockinOrderResponse, error) {
	out := new(TaskSigFetchStockinOrderResponse)
	err := c.cc.Invoke(ctx, VasOrderAggController_TaskSigFetchStockinOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VasOrderAggControllerServer is the server API for VasOrderAggController service.
// All implementations must embed UnimplementedVasOrderAggControllerServer
// for forward compatibility
type VasOrderAggControllerServer interface {
	DestroyAggKingdeeStkMisdelivery(context.Context, *DestroyAggKingdeeStkMisdeliveryRequest) (*DestroyAggKingdeeStkMisdeliveryResponse, error)
	DestroyAggSeedingKingdeeTransferDirect(context.Context, *DestroyAggSeedingKingdeeTransferDirectRequest) (*DestroyAggSeedingKingdeeTransferDirectResponse, error)
	DestroyAggSwapKingdeeRefund(context.Context, *DestroyAggSwapKingdeeRefundRequest) (*DestroyAggSwapKingdeeRefundResponse, error)
	DestroyAggSwapKingdeeSalOutStock(context.Context, *DestroyAggSwapKingdeeSalOutStockRequest) (*DestroyAggSwapKingdeeSalOutStockResponse, error)
	List(context.Context, *WdtStockinModelListRequest) (*WdtStockinModelListResponse, error)
	ListRepairKingdeeStkMisDelivery(context.Context, *VasOrderAggListRepairKingdeeStkMisDeliveryRequest) (*KingdeeStkMisDeliveryListResponse, error)
	ListSeedingKingdeeStkTransferDirect(context.Context, *VasOrderAggListSeedingKingdeeStkTransferDirectRequest) (*SeedingKingdeeStkTransferDirectListResponse, error)
	ListSwapKingdeeSalOutStock(context.Context, *VasOrderAggListSwapKingdeeSalOutStockRequest) (*SwapKingdeeSalOutStockListResponse, error)
	ListSwapKingdeeSalReturnStock(context.Context, *VasOrderAggListSwapKingdeeSalReturnStockRequest) (*SwapKingdeeSalReturnStockListResponse, error)
	RunPeriodPushRepairToKingdeeMisDelivery(context.Context, *RunPeriodPushRepairToKingdeeMisDeliveryRequest) (*RunPeriodPushRepairToKingdeeMisDeliveryResponse, error)
	RunPeriodPushSeedingToKingdeeTransferDirect(context.Context, *RunPeriodPushSeedingToKingdeeTransferDirectRequest) (*RunPeriodPushSeedingToKingdeeTransferDirectResponse, error)
	RunPeriodPushSwapRefundToKingdee(context.Context, *RunPeriodPushSwapRefundToKingdeeRequest) (*RunPeriodPushSwapRefundToKingdeeResponse, error)
	RunPeriodPushSwapSalOutStockToKingdee(context.Context, *RunPeriodPushSwapSalOutStockToKingdeeRequest) (*RunPeriodPushSwapSalOutStockToKingdeeResponse, error)
	StaticsRepairKingdeeStkMisDelivery(context.Context, *StaticsRequest) (*StaticsResponse, error)
	StaticsSeedingKingdeeStkTransferDirect(context.Context, *StaticsRequest) (*StaticsResponse, error)
	StaticsSwapKingdeeSalOutStock(context.Context, *StaticsRequest) (*StaticsResponse, error)
	StaticsSwapKingdeeSalReturnStock(context.Context, *StaticsRequest) (*StaticsResponse, error)
	TaskSigAggRepairStockout(context.Context, *TaskSigAggRepairStockoutRequest) (*TaskSigAggRepairStockoutResponse, error)
	TaskSigAggSeedingTrade(context.Context, *TaskSigAggSeedingTradeRequest) (*TaskSigAggSeedingTradeResponse, error)
	TaskSigAggSwapStockin(context.Context, *TaskSigAggSwapStockinRequest) (*TaskSigAggSwapStockinResponse, error)
	TaskSigAggSwapTrade(context.Context, *TaskSigAggSwapTradeRequest) (*TaskSigAggSwapTradeResponse, error)
	TaskSigFetchStockinOrder(context.Context, *TaskSigFetchStockinOrderRequest) (*TaskSigFetchStockinOrderResponse, error)
	mustEmbedUnimplementedVasOrderAggControllerServer()
}

// UnimplementedVasOrderAggControllerServer must be embedded to have forward compatible implementations.
type UnimplementedVasOrderAggControllerServer struct {
}

func (UnimplementedVasOrderAggControllerServer) DestroyAggKingdeeStkMisdelivery(context.Context, *DestroyAggKingdeeStkMisdeliveryRequest) (*DestroyAggKingdeeStkMisdeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggKingdeeStkMisdelivery not implemented")
}
func (UnimplementedVasOrderAggControllerServer) DestroyAggSeedingKingdeeTransferDirect(context.Context, *DestroyAggSeedingKingdeeTransferDirectRequest) (*DestroyAggSeedingKingdeeTransferDirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggSeedingKingdeeTransferDirect not implemented")
}
func (UnimplementedVasOrderAggControllerServer) DestroyAggSwapKingdeeRefund(context.Context, *DestroyAggSwapKingdeeRefundRequest) (*DestroyAggSwapKingdeeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggSwapKingdeeRefund not implemented")
}
func (UnimplementedVasOrderAggControllerServer) DestroyAggSwapKingdeeSalOutStock(context.Context, *DestroyAggSwapKingdeeSalOutStockRequest) (*DestroyAggSwapKingdeeSalOutStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggSwapKingdeeSalOutStock not implemented")
}
func (UnimplementedVasOrderAggControllerServer) List(context.Context, *WdtStockinModelListRequest) (*WdtStockinModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVasOrderAggControllerServer) ListRepairKingdeeStkMisDelivery(context.Context, *VasOrderAggListRepairKingdeeStkMisDeliveryRequest) (*KingdeeStkMisDeliveryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepairKingdeeStkMisDelivery not implemented")
}
func (UnimplementedVasOrderAggControllerServer) ListSeedingKingdeeStkTransferDirect(context.Context, *VasOrderAggListSeedingKingdeeStkTransferDirectRequest) (*SeedingKingdeeStkTransferDirectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeedingKingdeeStkTransferDirect not implemented")
}
func (UnimplementedVasOrderAggControllerServer) ListSwapKingdeeSalOutStock(context.Context, *VasOrderAggListSwapKingdeeSalOutStockRequest) (*SwapKingdeeSalOutStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwapKingdeeSalOutStock not implemented")
}
func (UnimplementedVasOrderAggControllerServer) ListSwapKingdeeSalReturnStock(context.Context, *VasOrderAggListSwapKingdeeSalReturnStockRequest) (*SwapKingdeeSalReturnStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwapKingdeeSalReturnStock not implemented")
}
func (UnimplementedVasOrderAggControllerServer) RunPeriodPushRepairToKingdeeMisDelivery(context.Context, *RunPeriodPushRepairToKingdeeMisDeliveryRequest) (*RunPeriodPushRepairToKingdeeMisDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodPushRepairToKingdeeMisDelivery not implemented")
}
func (UnimplementedVasOrderAggControllerServer) RunPeriodPushSeedingToKingdeeTransferDirect(context.Context, *RunPeriodPushSeedingToKingdeeTransferDirectRequest) (*RunPeriodPushSeedingToKingdeeTransferDirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodPushSeedingToKingdeeTransferDirect not implemented")
}
func (UnimplementedVasOrderAggControllerServer) RunPeriodPushSwapRefundToKingdee(context.Context, *RunPeriodPushSwapRefundToKingdeeRequest) (*RunPeriodPushSwapRefundToKingdeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodPushSwapRefundToKingdee not implemented")
}
func (UnimplementedVasOrderAggControllerServer) RunPeriodPushSwapSalOutStockToKingdee(context.Context, *RunPeriodPushSwapSalOutStockToKingdeeRequest) (*RunPeriodPushSwapSalOutStockToKingdeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodPushSwapSalOutStockToKingdee not implemented")
}
func (UnimplementedVasOrderAggControllerServer) StaticsRepairKingdeeStkMisDelivery(context.Context, *StaticsRequest) (*StaticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticsRepairKingdeeStkMisDelivery not implemented")
}
func (UnimplementedVasOrderAggControllerServer) StaticsSeedingKingdeeStkTransferDirect(context.Context, *StaticsRequest) (*StaticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticsSeedingKingdeeStkTransferDirect not implemented")
}
func (UnimplementedVasOrderAggControllerServer) StaticsSwapKingdeeSalOutStock(context.Context, *StaticsRequest) (*StaticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticsSwapKingdeeSalOutStock not implemented")
}
func (UnimplementedVasOrderAggControllerServer) StaticsSwapKingdeeSalReturnStock(context.Context, *StaticsRequest) (*StaticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticsSwapKingdeeSalReturnStock not implemented")
}
func (UnimplementedVasOrderAggControllerServer) TaskSigAggRepairStockout(context.Context, *TaskSigAggRepairStockoutRequest) (*TaskSigAggRepairStockoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggRepairStockout not implemented")
}
func (UnimplementedVasOrderAggControllerServer) TaskSigAggSeedingTrade(context.Context, *TaskSigAggSeedingTradeRequest) (*TaskSigAggSeedingTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggSeedingTrade not implemented")
}
func (UnimplementedVasOrderAggControllerServer) TaskSigAggSwapStockin(context.Context, *TaskSigAggSwapStockinRequest) (*TaskSigAggSwapStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggSwapStockin not implemented")
}
func (UnimplementedVasOrderAggControllerServer) TaskSigAggSwapTrade(context.Context, *TaskSigAggSwapTradeRequest) (*TaskSigAggSwapTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigAggSwapTrade not implemented")
}
func (UnimplementedVasOrderAggControllerServer) TaskSigFetchStockinOrder(context.Context, *TaskSigFetchStockinOrderRequest) (*TaskSigFetchStockinOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSigFetchStockinOrder not implemented")
}
func (UnimplementedVasOrderAggControllerServer) mustEmbedUnimplementedVasOrderAggControllerServer() {}

// UnsafeVasOrderAggControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VasOrderAggControllerServer will
// result in compilation errors.
type UnsafeVasOrderAggControllerServer interface {
	mustEmbedUnimplementedVasOrderAggControllerServer()
}

func RegisterVasOrderAggControllerServer(s grpc.ServiceRegistrar, srv VasOrderAggControllerServer) {
	s.RegisterService(&VasOrderAggController_ServiceDesc, srv)
}

func _VasOrderAggController_DestroyAggKingdeeStkMisdelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggKingdeeStkMisdeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).DestroyAggKingdeeStkMisdelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_DestroyAggKingdeeStkMisdelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).DestroyAggKingdeeStkMisdelivery(ctx, req.(*DestroyAggKingdeeStkMisdeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_DestroyAggSeedingKingdeeTransferDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggSeedingKingdeeTransferDirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).DestroyAggSeedingKingdeeTransferDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_DestroyAggSeedingKingdeeTransferDirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).DestroyAggSeedingKingdeeTransferDirect(ctx, req.(*DestroyAggSeedingKingdeeTransferDirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_DestroyAggSwapKingdeeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggSwapKingdeeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).DestroyAggSwapKingdeeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_DestroyAggSwapKingdeeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).DestroyAggSwapKingdeeRefund(ctx, req.(*DestroyAggSwapKingdeeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_DestroyAggSwapKingdeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAggSwapKingdeeSalOutStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).DestroyAggSwapKingdeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_DestroyAggSwapKingdeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).DestroyAggSwapKingdeeSalOutStock(ctx, req.(*DestroyAggSwapKingdeeSalOutStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockinModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).List(ctx, req.(*WdtStockinModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_ListRepairKingdeeStkMisDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VasOrderAggListRepairKingdeeStkMisDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).ListRepairKingdeeStkMisDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_ListRepairKingdeeStkMisDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).ListRepairKingdeeStkMisDelivery(ctx, req.(*VasOrderAggListRepairKingdeeStkMisDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_ListSeedingKingdeeStkTransferDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VasOrderAggListSeedingKingdeeStkTransferDirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).ListSeedingKingdeeStkTransferDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_ListSeedingKingdeeStkTransferDirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).ListSeedingKingdeeStkTransferDirect(ctx, req.(*VasOrderAggListSeedingKingdeeStkTransferDirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_ListSwapKingdeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VasOrderAggListSwapKingdeeSalOutStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).ListSwapKingdeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_ListSwapKingdeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).ListSwapKingdeeSalOutStock(ctx, req.(*VasOrderAggListSwapKingdeeSalOutStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_ListSwapKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VasOrderAggListSwapKingdeeSalReturnStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).ListSwapKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_ListSwapKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).ListSwapKingdeeSalReturnStock(ctx, req.(*VasOrderAggListSwapKingdeeSalReturnStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_RunPeriodPushRepairToKingdeeMisDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodPushRepairToKingdeeMisDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).RunPeriodPushRepairToKingdeeMisDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_RunPeriodPushRepairToKingdeeMisDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).RunPeriodPushRepairToKingdeeMisDelivery(ctx, req.(*RunPeriodPushRepairToKingdeeMisDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_RunPeriodPushSeedingToKingdeeTransferDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodPushSeedingToKingdeeTransferDirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).RunPeriodPushSeedingToKingdeeTransferDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_RunPeriodPushSeedingToKingdeeTransferDirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).RunPeriodPushSeedingToKingdeeTransferDirect(ctx, req.(*RunPeriodPushSeedingToKingdeeTransferDirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_RunPeriodPushSwapRefundToKingdee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodPushSwapRefundToKingdeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).RunPeriodPushSwapRefundToKingdee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_RunPeriodPushSwapRefundToKingdee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).RunPeriodPushSwapRefundToKingdee(ctx, req.(*RunPeriodPushSwapRefundToKingdeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_RunPeriodPushSwapSalOutStockToKingdee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodPushSwapSalOutStockToKingdeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).RunPeriodPushSwapSalOutStockToKingdee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_RunPeriodPushSwapSalOutStockToKingdee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).RunPeriodPushSwapSalOutStockToKingdee(ctx, req.(*RunPeriodPushSwapSalOutStockToKingdeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_StaticsRepairKingdeeStkMisDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).StaticsRepairKingdeeStkMisDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_StaticsRepairKingdeeStkMisDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).StaticsRepairKingdeeStkMisDelivery(ctx, req.(*StaticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_StaticsSeedingKingdeeStkTransferDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).StaticsSeedingKingdeeStkTransferDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_StaticsSeedingKingdeeStkTransferDirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).StaticsSeedingKingdeeStkTransferDirect(ctx, req.(*StaticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_StaticsSwapKingdeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).StaticsSwapKingdeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_StaticsSwapKingdeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).StaticsSwapKingdeeSalOutStock(ctx, req.(*StaticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_StaticsSwapKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).StaticsSwapKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_StaticsSwapKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).StaticsSwapKingdeeSalReturnStock(ctx, req.(*StaticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_TaskSigAggRepairStockout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggRepairStockoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).TaskSigAggRepairStockout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_TaskSigAggRepairStockout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).TaskSigAggRepairStockout(ctx, req.(*TaskSigAggRepairStockoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_TaskSigAggSeedingTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggSeedingTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).TaskSigAggSeedingTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_TaskSigAggSeedingTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).TaskSigAggSeedingTrade(ctx, req.(*TaskSigAggSeedingTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_TaskSigAggSwapStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggSwapStockinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).TaskSigAggSwapStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_TaskSigAggSwapStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).TaskSigAggSwapStockin(ctx, req.(*TaskSigAggSwapStockinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_TaskSigAggSwapTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigAggSwapTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).TaskSigAggSwapTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_TaskSigAggSwapTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).TaskSigAggSwapTrade(ctx, req.(*TaskSigAggSwapTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VasOrderAggController_TaskSigFetchStockinOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSigFetchStockinOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VasOrderAggControllerServer).TaskSigFetchStockinOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VasOrderAggController_TaskSigFetchStockinOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VasOrderAggControllerServer).TaskSigFetchStockinOrder(ctx, req.(*TaskSigFetchStockinOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VasOrderAggController_ServiceDesc is the grpc.ServiceDesc for VasOrderAggController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VasOrderAggController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.VasOrderAggController",
	HandlerType: (*VasOrderAggControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DestroyAggKingdeeStkMisdelivery",
			Handler:    _VasOrderAggController_DestroyAggKingdeeStkMisdelivery_Handler,
		},
		{
			MethodName: "DestroyAggSeedingKingdeeTransferDirect",
			Handler:    _VasOrderAggController_DestroyAggSeedingKingdeeTransferDirect_Handler,
		},
		{
			MethodName: "DestroyAggSwapKingdeeRefund",
			Handler:    _VasOrderAggController_DestroyAggSwapKingdeeRefund_Handler,
		},
		{
			MethodName: "DestroyAggSwapKingdeeSalOutStock",
			Handler:    _VasOrderAggController_DestroyAggSwapKingdeeSalOutStock_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VasOrderAggController_List_Handler,
		},
		{
			MethodName: "ListRepairKingdeeStkMisDelivery",
			Handler:    _VasOrderAggController_ListRepairKingdeeStkMisDelivery_Handler,
		},
		{
			MethodName: "ListSeedingKingdeeStkTransferDirect",
			Handler:    _VasOrderAggController_ListSeedingKingdeeStkTransferDirect_Handler,
		},
		{
			MethodName: "ListSwapKingdeeSalOutStock",
			Handler:    _VasOrderAggController_ListSwapKingdeeSalOutStock_Handler,
		},
		{
			MethodName: "ListSwapKingdeeSalReturnStock",
			Handler:    _VasOrderAggController_ListSwapKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "RunPeriodPushRepairToKingdeeMisDelivery",
			Handler:    _VasOrderAggController_RunPeriodPushRepairToKingdeeMisDelivery_Handler,
		},
		{
			MethodName: "RunPeriodPushSeedingToKingdeeTransferDirect",
			Handler:    _VasOrderAggController_RunPeriodPushSeedingToKingdeeTransferDirect_Handler,
		},
		{
			MethodName: "RunPeriodPushSwapRefundToKingdee",
			Handler:    _VasOrderAggController_RunPeriodPushSwapRefundToKingdee_Handler,
		},
		{
			MethodName: "RunPeriodPushSwapSalOutStockToKingdee",
			Handler:    _VasOrderAggController_RunPeriodPushSwapSalOutStockToKingdee_Handler,
		},
		{
			MethodName: "StaticsRepairKingdeeStkMisDelivery",
			Handler:    _VasOrderAggController_StaticsRepairKingdeeStkMisDelivery_Handler,
		},
		{
			MethodName: "StaticsSeedingKingdeeStkTransferDirect",
			Handler:    _VasOrderAggController_StaticsSeedingKingdeeStkTransferDirect_Handler,
		},
		{
			MethodName: "StaticsSwapKingdeeSalOutStock",
			Handler:    _VasOrderAggController_StaticsSwapKingdeeSalOutStock_Handler,
		},
		{
			MethodName: "StaticsSwapKingdeeSalReturnStock",
			Handler:    _VasOrderAggController_StaticsSwapKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "TaskSigAggRepairStockout",
			Handler:    _VasOrderAggController_TaskSigAggRepairStockout_Handler,
		},
		{
			MethodName: "TaskSigAggSeedingTrade",
			Handler:    _VasOrderAggController_TaskSigAggSeedingTrade_Handler,
		},
		{
			MethodName: "TaskSigAggSwapStockin",
			Handler:    _VasOrderAggController_TaskSigAggSwapStockin_Handler,
		},
		{
			MethodName: "TaskSigAggSwapTrade",
			Handler:    _VasOrderAggController_TaskSigAggSwapTrade_Handler,
		},
		{
			MethodName: "TaskSigFetchStockinOrder",
			Handler:    _VasOrderAggController_TaskSigFetchStockinOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}
