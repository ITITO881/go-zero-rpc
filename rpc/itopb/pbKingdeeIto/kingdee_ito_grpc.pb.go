// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: kingdee_ito.proto

package pbKingdeeIto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlipayBillController_CreateAlipayBillAccountlog_FullMethodName        = "/kingdee_service.kingdee_ito.AlipayBillController/CreateAlipayBillAccountlog"
	AlipayBillController_DestroyAlipayBillAccountlog_FullMethodName       = "/kingdee_service.kingdee_ito.AlipayBillController/DestroyAlipayBillAccountlog"
	AlipayBillController_ListAlipayBillAccountlog_FullMethodName          = "/kingdee_service.kingdee_ito.AlipayBillController/ListAlipayBillAccountlog"
	AlipayBillController_PartialUpdateAlipayBillAccountlog_FullMethodName = "/kingdee_service.kingdee_ito.AlipayBillController/PartialUpdateAlipayBillAccountlog"
	AlipayBillController_RetrieveAlipayBillAccountlog_FullMethodName      = "/kingdee_service.kingdee_ito.AlipayBillController/RetrieveAlipayBillAccountlog"
	AlipayBillController_UpdateAlipayBillAccountlog_FullMethodName        = "/kingdee_service.kingdee_ito.AlipayBillController/UpdateAlipayBillAccountlog"
)

// AlipayBillControllerClient is the client API for AlipayBillController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlipayBillControllerClient interface {
	CreateAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error)
	DestroyAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogListRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogListResponse, error)
	PartialUpdateAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogPartialUpdateRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error)
	RetrieveAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error)
	UpdateAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error)
}

type alipayBillControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewAlipayBillControllerClient(cc grpc.ClientConnInterface) AlipayBillControllerClient {
	return &alipayBillControllerClient{cc}
}

func (c *alipayBillControllerClient) CreateAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error) {
	out := new(AlipayBillAccountlogResponse)
	err := c.cc.Invoke(ctx, AlipayBillController_CreateAlipayBillAccountlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillControllerClient) DestroyAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlipayBillController_DestroyAlipayBillAccountlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillControllerClient) ListAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogListRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogListResponse, error) {
	out := new(AlipayBillAccountlogListResponse)
	err := c.cc.Invoke(ctx, AlipayBillController_ListAlipayBillAccountlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillControllerClient) PartialUpdateAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogPartialUpdateRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error) {
	out := new(AlipayBillAccountlogResponse)
	err := c.cc.Invoke(ctx, AlipayBillController_PartialUpdateAlipayBillAccountlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillControllerClient) RetrieveAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogRetrieveRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error) {
	out := new(AlipayBillAccountlogResponse)
	err := c.cc.Invoke(ctx, AlipayBillController_RetrieveAlipayBillAccountlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayBillControllerClient) UpdateAlipayBillAccountlog(ctx context.Context, in *AlipayBillAccountlogRequest, opts ...grpc.CallOption) (*AlipayBillAccountlogResponse, error) {
	out := new(AlipayBillAccountlogResponse)
	err := c.cc.Invoke(ctx, AlipayBillController_UpdateAlipayBillAccountlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlipayBillControllerServer is the server API for AlipayBillController service.
// All implementations must embed UnimplementedAlipayBillControllerServer
// for forward compatibility
type AlipayBillControllerServer interface {
	CreateAlipayBillAccountlog(context.Context, *AlipayBillAccountlogRequest) (*AlipayBillAccountlogResponse, error)
	DestroyAlipayBillAccountlog(context.Context, *AlipayBillAccountlogDestroyRequest) (*emptypb.Empty, error)
	ListAlipayBillAccountlog(context.Context, *AlipayBillAccountlogListRequest) (*AlipayBillAccountlogListResponse, error)
	PartialUpdateAlipayBillAccountlog(context.Context, *AlipayBillAccountlogPartialUpdateRequest) (*AlipayBillAccountlogResponse, error)
	RetrieveAlipayBillAccountlog(context.Context, *AlipayBillAccountlogRetrieveRequest) (*AlipayBillAccountlogResponse, error)
	UpdateAlipayBillAccountlog(context.Context, *AlipayBillAccountlogRequest) (*AlipayBillAccountlogResponse, error)
	mustEmbedUnimplementedAlipayBillControllerServer()
}

// UnimplementedAlipayBillControllerServer must be embedded to have forward compatible implementations.
type UnimplementedAlipayBillControllerServer struct {
}

func (UnimplementedAlipayBillControllerServer) CreateAlipayBillAccountlog(context.Context, *AlipayBillAccountlogRequest) (*AlipayBillAccountlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlipayBillAccountlog not implemented")
}
func (UnimplementedAlipayBillControllerServer) DestroyAlipayBillAccountlog(context.Context, *AlipayBillAccountlogDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAlipayBillAccountlog not implemented")
}
func (UnimplementedAlipayBillControllerServer) ListAlipayBillAccountlog(context.Context, *AlipayBillAccountlogListRequest) (*AlipayBillAccountlogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlipayBillAccountlog not implemented")
}
func (UnimplementedAlipayBillControllerServer) PartialUpdateAlipayBillAccountlog(context.Context, *AlipayBillAccountlogPartialUpdateRequest) (*AlipayBillAccountlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateAlipayBillAccountlog not implemented")
}
func (UnimplementedAlipayBillControllerServer) RetrieveAlipayBillAccountlog(context.Context, *AlipayBillAccountlogRetrieveRequest) (*AlipayBillAccountlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAlipayBillAccountlog not implemented")
}
func (UnimplementedAlipayBillControllerServer) UpdateAlipayBillAccountlog(context.Context, *AlipayBillAccountlogRequest) (*AlipayBillAccountlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlipayBillAccountlog not implemented")
}
func (UnimplementedAlipayBillControllerServer) mustEmbedUnimplementedAlipayBillControllerServer() {}

// UnsafeAlipayBillControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlipayBillControllerServer will
// result in compilation errors.
type UnsafeAlipayBillControllerServer interface {
	mustEmbedUnimplementedAlipayBillControllerServer()
}

func RegisterAlipayBillControllerServer(s grpc.ServiceRegistrar, srv AlipayBillControllerServer) {
	s.RegisterService(&AlipayBillController_ServiceDesc, srv)
}

func _AlipayBillController_CreateAlipayBillAccountlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAccountlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillControllerServer).CreateAlipayBillAccountlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillController_CreateAlipayBillAccountlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillControllerServer).CreateAlipayBillAccountlog(ctx, req.(*AlipayBillAccountlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillController_DestroyAlipayBillAccountlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAccountlogDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillControllerServer).DestroyAlipayBillAccountlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillController_DestroyAlipayBillAccountlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillControllerServer).DestroyAlipayBillAccountlog(ctx, req.(*AlipayBillAccountlogDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillController_ListAlipayBillAccountlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAccountlogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillControllerServer).ListAlipayBillAccountlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillController_ListAlipayBillAccountlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillControllerServer).ListAlipayBillAccountlog(ctx, req.(*AlipayBillAccountlogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillController_PartialUpdateAlipayBillAccountlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAccountlogPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillControllerServer).PartialUpdateAlipayBillAccountlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillController_PartialUpdateAlipayBillAccountlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillControllerServer).PartialUpdateAlipayBillAccountlog(ctx, req.(*AlipayBillAccountlogPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillController_RetrieveAlipayBillAccountlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAccountlogRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillControllerServer).RetrieveAlipayBillAccountlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillController_RetrieveAlipayBillAccountlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillControllerServer).RetrieveAlipayBillAccountlog(ctx, req.(*AlipayBillAccountlogRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlipayBillController_UpdateAlipayBillAccountlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlipayBillAccountlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayBillControllerServer).UpdateAlipayBillAccountlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlipayBillController_UpdateAlipayBillAccountlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayBillControllerServer).UpdateAlipayBillAccountlog(ctx, req.(*AlipayBillAccountlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlipayBillController_ServiceDesc is the grpc.ServiceDesc for AlipayBillController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlipayBillController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.AlipayBillController",
	HandlerType: (*AlipayBillControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlipayBillAccountlog",
			Handler:    _AlipayBillController_CreateAlipayBillAccountlog_Handler,
		},
		{
			MethodName: "DestroyAlipayBillAccountlog",
			Handler:    _AlipayBillController_DestroyAlipayBillAccountlog_Handler,
		},
		{
			MethodName: "ListAlipayBillAccountlog",
			Handler:    _AlipayBillController_ListAlipayBillAccountlog_Handler,
		},
		{
			MethodName: "PartialUpdateAlipayBillAccountlog",
			Handler:    _AlipayBillController_PartialUpdateAlipayBillAccountlog_Handler,
		},
		{
			MethodName: "RetrieveAlipayBillAccountlog",
			Handler:    _AlipayBillController_RetrieveAlipayBillAccountlog_Handler,
		},
		{
			MethodName: "UpdateAlipayBillAccountlog",
			Handler:    _AlipayBillController_UpdateAlipayBillAccountlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	CeleryTaskController_CreateClockedSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateClockedSchedule"
	CeleryTaskController_CreateCrontabSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateCrontabSchedule"
	CeleryTaskController_CreateIntervalSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateIntervalSchedule"
	CeleryTaskController_CreatePeriodicTask_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/CreatePeriodicTask"
	CeleryTaskController_CreateTaskResult_FullMethodName              = "/kingdee_service.kingdee_ito.CeleryTaskController/CreateTaskResult"
	CeleryTaskController_DestroyClockedSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyClockedSchedule"
	CeleryTaskController_DestroyCrontabSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyCrontabSchedule"
	CeleryTaskController_DestroyIntervalSchedule_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyIntervalSchedule"
	CeleryTaskController_DestroyPeriodicTask_FullMethodName           = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyPeriodicTask"
	CeleryTaskController_DestroyTaskResult_FullMethodName             = "/kingdee_service.kingdee_ito.CeleryTaskController/DestroyTaskResult"
	CeleryTaskController_ListCeleryTasks_FullMethodName               = "/kingdee_service.kingdee_ito.CeleryTaskController/ListCeleryTasks"
	CeleryTaskController_ListClockedSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.CeleryTaskController/ListClockedSchedule"
	CeleryTaskController_ListCrontabSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.CeleryTaskController/ListCrontabSchedule"
	CeleryTaskController_ListIntervalSchedule_FullMethodName          = "/kingdee_service.kingdee_ito.CeleryTaskController/ListIntervalSchedule"
	CeleryTaskController_ListPeriodicTask_FullMethodName              = "/kingdee_service.kingdee_ito.CeleryTaskController/ListPeriodicTask"
	CeleryTaskController_ListTaskResult_FullMethodName                = "/kingdee_service.kingdee_ito.CeleryTaskController/ListTaskResult"
	CeleryTaskController_PartialUpdateClockedSchedule_FullMethodName  = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateClockedSchedule"
	CeleryTaskController_PartialUpdateCrontabSchedule_FullMethodName  = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateCrontabSchedule"
	CeleryTaskController_PartialUpdateIntervalSchedule_FullMethodName = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateIntervalSchedule"
	CeleryTaskController_PartialUpdatePeriodicTask_FullMethodName     = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdatePeriodicTask"
	CeleryTaskController_PartialUpdateTaskResult_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/PartialUpdateTaskResult"
	CeleryTaskController_RetrieveClockedSchedule_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveClockedSchedule"
	CeleryTaskController_RetrieveCrontabSchedule_FullMethodName       = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveCrontabSchedule"
	CeleryTaskController_RetrieveIntervalSchedule_FullMethodName      = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveIntervalSchedule"
	CeleryTaskController_RetrievePeriodicTask_FullMethodName          = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrievePeriodicTask"
	CeleryTaskController_RetrieveTaskResult_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/RetrieveTaskResult"
	CeleryTaskController_RunCeleryTask_FullMethodName                 = "/kingdee_service.kingdee_ito.CeleryTaskController/RunCeleryTask"
	CeleryTaskController_UpdateClockedSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateClockedSchedule"
	CeleryTaskController_UpdateCrontabSchedule_FullMethodName         = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateCrontabSchedule"
	CeleryTaskController_UpdateIntervalSchedule_FullMethodName        = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateIntervalSchedule"
	CeleryTaskController_UpdatePeriodicTask_FullMethodName            = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdatePeriodicTask"
	CeleryTaskController_UpdateTaskResult_FullMethodName              = "/kingdee_service.kingdee_ito.CeleryTaskController/UpdateTaskResult"
)

// CeleryTaskControllerClient is the client API for CeleryTaskController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CeleryTaskControllerClient interface {
	CreateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	CreateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCeleryTasks(ctx context.Context, in *CeleryTaskQueryOptsRequest, opts ...grpc.CallOption) (*CeleryTaskInfoListResponse, error)
	ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error)
	ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error)
	ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error)
	PartialUpdateClockedSchedule(ctx context.Context, in *ClockedSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	PartialUpdateCrontabSchedule(ctx context.Context, in *CrontabSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	PartialUpdateIntervalSchedule(ctx context.Context, in *IntervalSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	PartialUpdatePeriodicTask(ctx context.Context, in *PeriodicTaskPartialUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	PartialUpdateTaskResult(ctx context.Context, in *TaskResultPartialUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	RunCeleryTask(ctx context.Context, in *CeleryTaskRunOptsRequest, opts ...grpc.CallOption) (*CeleryTaskRunOptsResponse, error)
	UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	UpdateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
}

type celeryTaskControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCeleryTaskControllerClient(cc grpc.ClientConnInterface) CeleryTaskControllerClient {
	return &celeryTaskControllerClient{cc}
}

func (c *celeryTaskControllerClient) CreateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) CreateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_CreateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CeleryTaskController_DestroyTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListCeleryTasks(ctx context.Context, in *CeleryTaskQueryOptsRequest, opts ...grpc.CallOption) (*CeleryTaskInfoListResponse, error) {
	out := new(CeleryTaskInfoListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListCeleryTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error) {
	out := new(ClockedScheduleListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error) {
	out := new(CrontabScheduleListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error) {
	out := new(IntervalScheduleListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error) {
	out := new(PeriodicTaskListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error) {
	out := new(TaskResultListResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_ListTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateClockedSchedule(ctx context.Context, in *ClockedSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateCrontabSchedule(ctx context.Context, in *CrontabSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateIntervalSchedule(ctx context.Context, in *IntervalSchedulePartialUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdatePeriodicTask(ctx context.Context, in *PeriodicTaskPartialUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) PartialUpdateTaskResult(ctx context.Context, in *TaskResultPartialUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_PartialUpdateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrievePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RetrieveTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) RunCeleryTask(ctx context.Context, in *CeleryTaskRunOptsRequest, opts ...grpc.CallOption) (*CeleryTaskRunOptsResponse, error) {
	out := new(CeleryTaskRunOptsResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_RunCeleryTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celeryTaskControllerClient) UpdateTaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, CeleryTaskController_UpdateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CeleryTaskControllerServer is the server API for CeleryTaskController service.
// All implementations must embed UnimplementedCeleryTaskControllerServer
// for forward compatibility
type CeleryTaskControllerServer interface {
	CreateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error)
	CreateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error)
	DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error)
	DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error)
	ListCeleryTasks(context.Context, *CeleryTaskQueryOptsRequest) (*CeleryTaskInfoListResponse, error)
	ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error)
	ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error)
	ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error)
	PartialUpdateClockedSchedule(context.Context, *ClockedSchedulePartialUpdateRequest) (*ClockedScheduleResponse, error)
	PartialUpdateCrontabSchedule(context.Context, *CrontabSchedulePartialUpdateRequest) (*CrontabScheduleResponse, error)
	PartialUpdateIntervalSchedule(context.Context, *IntervalSchedulePartialUpdateRequest) (*IntervalScheduleResponse, error)
	PartialUpdatePeriodicTask(context.Context, *PeriodicTaskPartialUpdateRequest) (*PeriodicTaskResponse, error)
	PartialUpdateTaskResult(context.Context, *TaskResultPartialUpdateRequest) (*TaskResultResponse, error)
	RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error)
	RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error)
	RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error)
	RunCeleryTask(context.Context, *CeleryTaskRunOptsRequest) (*CeleryTaskRunOptsResponse, error)
	UpdateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error)
	UpdateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error)
	mustEmbedUnimplementedCeleryTaskControllerServer()
}

// UnimplementedCeleryTaskControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCeleryTaskControllerServer struct {
}

func (UnimplementedCeleryTaskControllerServer) CreateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) CreateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListCeleryTasks(context.Context, *CeleryTaskQueryOptsRequest) (*CeleryTaskInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCeleryTasks not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateClockedSchedule(context.Context, *ClockedSchedulePartialUpdateRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateCrontabSchedule(context.Context, *CrontabSchedulePartialUpdateRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateIntervalSchedule(context.Context, *IntervalSchedulePartialUpdateRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdatePeriodicTask(context.Context, *PeriodicTaskPartialUpdateRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdatePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) PartialUpdateTaskResult(context.Context, *TaskResultPartialUpdateRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) RunCeleryTask(context.Context, *CeleryTaskRunOptsRequest) (*CeleryTaskRunOptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCeleryTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateClockedSchedule(context.Context, *ClockedScheduleRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClockedSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateCrontabSchedule(context.Context, *CrontabScheduleRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrontabSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateIntervalSchedule(context.Context, *IntervalScheduleRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntervalSchedule not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdatePeriodicTask(context.Context, *PeriodicTaskRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeriodicTask not implemented")
}
func (UnimplementedCeleryTaskControllerServer) UpdateTaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskResult not implemented")
}
func (UnimplementedCeleryTaskControllerServer) mustEmbedUnimplementedCeleryTaskControllerServer() {}

// UnsafeCeleryTaskControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CeleryTaskControllerServer will
// result in compilation errors.
type UnsafeCeleryTaskControllerServer interface {
	mustEmbedUnimplementedCeleryTaskControllerServer()
}

func RegisterCeleryTaskControllerServer(s grpc.ServiceRegistrar, srv CeleryTaskControllerServer) {
	s.RegisterService(&CeleryTaskController_ServiceDesc, srv)
}

func _CeleryTaskController_CreateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateClockedSchedule(ctx, req.(*ClockedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateCrontabSchedule(ctx, req.(*CrontabScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateIntervalSchedule(ctx, req.(*IntervalScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreatePeriodicTask(ctx, req.(*PeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_CreateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).CreateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_CreateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).CreateTaskResult(ctx, req.(*TaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyClockedSchedule(ctx, req.(*ClockedScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyCrontabSchedule(ctx, req.(*CrontabScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyIntervalSchedule(ctx, req.(*IntervalScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyPeriodicTask(ctx, req.(*PeriodicTaskDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_DestroyTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).DestroyTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_DestroyTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).DestroyTaskResult(ctx, req.(*TaskResultDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListCeleryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CeleryTaskQueryOptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListCeleryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListCeleryTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListCeleryTasks(ctx, req.(*CeleryTaskQueryOptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListClockedSchedule(ctx, req.(*ClockedScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListCrontabSchedule(ctx, req.(*CrontabScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListIntervalSchedule(ctx, req.(*IntervalScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListPeriodicTask(ctx, req.(*PeriodicTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_ListTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).ListTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_ListTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).ListTaskResult(ctx, req.(*TaskResultListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedSchedulePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateClockedSchedule(ctx, req.(*ClockedSchedulePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabSchedulePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateCrontabSchedule(ctx, req.(*CrontabSchedulePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalSchedulePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateIntervalSchedule(ctx, req.(*IntervalSchedulePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdatePeriodicTask(ctx, req.(*PeriodicTaskPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_PartialUpdateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).PartialUpdateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_PartialUpdateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).PartialUpdateTaskResult(ctx, req.(*TaskResultPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveClockedSchedule(ctx, req.(*ClockedScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveCrontabSchedule(ctx, req.(*CrontabScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveIntervalSchedule(ctx, req.(*IntervalScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrievePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrievePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrievePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrievePeriodicTask(ctx, req.(*PeriodicTaskRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RetrieveTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RetrieveTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RetrieveTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RetrieveTaskResult(ctx, req.(*TaskResultRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_RunCeleryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CeleryTaskRunOptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).RunCeleryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_RunCeleryTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).RunCeleryTask(ctx, req.(*CeleryTaskRunOptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateClockedSchedule(ctx, req.(*ClockedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateCrontabSchedule(ctx, req.(*CrontabScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateIntervalSchedule(ctx, req.(*IntervalScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdatePeriodicTask(ctx, req.(*PeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeleryTaskController_UpdateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeleryTaskControllerServer).UpdateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CeleryTaskController_UpdateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeleryTaskControllerServer).UpdateTaskResult(ctx, req.(*TaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CeleryTaskController_ServiceDesc is the grpc.ServiceDesc for CeleryTaskController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CeleryTaskController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.CeleryTaskController",
	HandlerType: (*CeleryTaskControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClockedSchedule",
			Handler:    _CeleryTaskController_CreateClockedSchedule_Handler,
		},
		{
			MethodName: "CreateCrontabSchedule",
			Handler:    _CeleryTaskController_CreateCrontabSchedule_Handler,
		},
		{
			MethodName: "CreateIntervalSchedule",
			Handler:    _CeleryTaskController_CreateIntervalSchedule_Handler,
		},
		{
			MethodName: "CreatePeriodicTask",
			Handler:    _CeleryTaskController_CreatePeriodicTask_Handler,
		},
		{
			MethodName: "CreateTaskResult",
			Handler:    _CeleryTaskController_CreateTaskResult_Handler,
		},
		{
			MethodName: "DestroyClockedSchedule",
			Handler:    _CeleryTaskController_DestroyClockedSchedule_Handler,
		},
		{
			MethodName: "DestroyCrontabSchedule",
			Handler:    _CeleryTaskController_DestroyCrontabSchedule_Handler,
		},
		{
			MethodName: "DestroyIntervalSchedule",
			Handler:    _CeleryTaskController_DestroyIntervalSchedule_Handler,
		},
		{
			MethodName: "DestroyPeriodicTask",
			Handler:    _CeleryTaskController_DestroyPeriodicTask_Handler,
		},
		{
			MethodName: "DestroyTaskResult",
			Handler:    _CeleryTaskController_DestroyTaskResult_Handler,
		},
		{
			MethodName: "ListCeleryTasks",
			Handler:    _CeleryTaskController_ListCeleryTasks_Handler,
		},
		{
			MethodName: "ListClockedSchedule",
			Handler:    _CeleryTaskController_ListClockedSchedule_Handler,
		},
		{
			MethodName: "ListCrontabSchedule",
			Handler:    _CeleryTaskController_ListCrontabSchedule_Handler,
		},
		{
			MethodName: "ListIntervalSchedule",
			Handler:    _CeleryTaskController_ListIntervalSchedule_Handler,
		},
		{
			MethodName: "ListPeriodicTask",
			Handler:    _CeleryTaskController_ListPeriodicTask_Handler,
		},
		{
			MethodName: "ListTaskResult",
			Handler:    _CeleryTaskController_ListTaskResult_Handler,
		},
		{
			MethodName: "PartialUpdateClockedSchedule",
			Handler:    _CeleryTaskController_PartialUpdateClockedSchedule_Handler,
		},
		{
			MethodName: "PartialUpdateCrontabSchedule",
			Handler:    _CeleryTaskController_PartialUpdateCrontabSchedule_Handler,
		},
		{
			MethodName: "PartialUpdateIntervalSchedule",
			Handler:    _CeleryTaskController_PartialUpdateIntervalSchedule_Handler,
		},
		{
			MethodName: "PartialUpdatePeriodicTask",
			Handler:    _CeleryTaskController_PartialUpdatePeriodicTask_Handler,
		},
		{
			MethodName: "PartialUpdateTaskResult",
			Handler:    _CeleryTaskController_PartialUpdateTaskResult_Handler,
		},
		{
			MethodName: "RetrieveClockedSchedule",
			Handler:    _CeleryTaskController_RetrieveClockedSchedule_Handler,
		},
		{
			MethodName: "RetrieveCrontabSchedule",
			Handler:    _CeleryTaskController_RetrieveCrontabSchedule_Handler,
		},
		{
			MethodName: "RetrieveIntervalSchedule",
			Handler:    _CeleryTaskController_RetrieveIntervalSchedule_Handler,
		},
		{
			MethodName: "RetrievePeriodicTask",
			Handler:    _CeleryTaskController_RetrievePeriodicTask_Handler,
		},
		{
			MethodName: "RetrieveTaskResult",
			Handler:    _CeleryTaskController_RetrieveTaskResult_Handler,
		},
		{
			MethodName: "RunCeleryTask",
			Handler:    _CeleryTaskController_RunCeleryTask_Handler,
		},
		{
			MethodName: "UpdateClockedSchedule",
			Handler:    _CeleryTaskController_UpdateClockedSchedule_Handler,
		},
		{
			MethodName: "UpdateCrontabSchedule",
			Handler:    _CeleryTaskController_UpdateCrontabSchedule_Handler,
		},
		{
			MethodName: "UpdateIntervalSchedule",
			Handler:    _CeleryTaskController_UpdateIntervalSchedule_Handler,
		},
		{
			MethodName: "UpdatePeriodicTask",
			Handler:    _CeleryTaskController_UpdatePeriodicTask_Handler,
		},
		{
			MethodName: "UpdateTaskResult",
			Handler:    _CeleryTaskController_UpdateTaskResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_FullMethodName = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKingdeePurchaseOrder"
	KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_FullMethodName   = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/BulkCreateKingdeeReceiveBill"
	KingdeePurchaseOrderController_Create_FullMethodName                         = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Create"
	KingdeePurchaseOrderController_Destroy_FullMethodName                        = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Destroy"
	KingdeePurchaseOrderController_List_FullMethodName                           = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/List"
	KingdeePurchaseOrderController_PartialUpdate_FullMethodName                  = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/PartialUpdate"
	KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_FullMethodName      = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/QueryKingdeePurchaseOrder"
	KingdeePurchaseOrderController_Retrieve_FullMethodName                       = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Retrieve"
	KingdeePurchaseOrderController_Update_FullMethodName                         = "/kingdee_service.kingdee_ito.KingdeePurchaseOrderController/Update"
)

// KingdeePurchaseOrderControllerClient is the client API for KingdeePurchaseOrderController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KingdeePurchaseOrderControllerClient interface {
	BulkCreateKingdeePurchaseOrder(ctx context.Context, in *BulkCreateKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*BulkCreateKingdeePurchaseOrderResponse, error)
	BulkCreateKingdeeReceiveBill(ctx context.Context, in *BulkCreateKingdeeReceiveBillRequest, opts ...grpc.CallOption) (*BulkCreateKingdeeReceiveBillResponse, error)
	Create(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
	Destroy(ctx context.Context, in *KingdeePurchaseDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *KingdeePurchaseListRequest, opts ...grpc.CallOption) (*KingdeePurchaseListResponse, error)
	PartialUpdate(ctx context.Context, in *KingdeePurchasePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
	QueryKingdeePurchaseOrder(ctx context.Context, in *QueryKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*QueryKingdeePurchaseOrderResponse, error)
	Retrieve(ctx context.Context, in *KingdeePurchaseRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
	Update(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error)
}

type kingdeePurchaseOrderControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKingdeePurchaseOrderControllerClient(cc grpc.ClientConnInterface) KingdeePurchaseOrderControllerClient {
	return &kingdeePurchaseOrderControllerClient{cc}
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKingdeePurchaseOrder(ctx context.Context, in *BulkCreateKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*BulkCreateKingdeePurchaseOrderResponse, error) {
	out := new(BulkCreateKingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) BulkCreateKingdeeReceiveBill(ctx context.Context, in *BulkCreateKingdeeReceiveBillRequest, opts ...grpc.CallOption) (*BulkCreateKingdeeReceiveBillResponse, error) {
	out := new(BulkCreateKingdeeReceiveBillResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Create(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Destroy(ctx context.Context, in *KingdeePurchaseDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) List(ctx context.Context, in *KingdeePurchaseListRequest, opts ...grpc.CallOption) (*KingdeePurchaseListResponse, error) {
	out := new(KingdeePurchaseListResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) PartialUpdate(ctx context.Context, in *KingdeePurchasePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) QueryKingdeePurchaseOrder(ctx context.Context, in *QueryKingdeePurchaseOrderRequest, opts ...grpc.CallOption) (*QueryKingdeePurchaseOrderResponse, error) {
	out := new(QueryKingdeePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Retrieve(ctx context.Context, in *KingdeePurchaseRetrieveRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kingdeePurchaseOrderControllerClient) Update(ctx context.Context, in *KingdeePurchaseRequest, opts ...grpc.CallOption) (*KingdeePurchaseResponse, error) {
	out := new(KingdeePurchaseResponse)
	err := c.cc.Invoke(ctx, KingdeePurchaseOrderController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KingdeePurchaseOrderControllerServer is the server API for KingdeePurchaseOrderController service.
// All implementations must embed UnimplementedKingdeePurchaseOrderControllerServer
// for forward compatibility
type KingdeePurchaseOrderControllerServer interface {
	BulkCreateKingdeePurchaseOrder(context.Context, *BulkCreateKingdeePurchaseOrderRequest) (*BulkCreateKingdeePurchaseOrderResponse, error)
	BulkCreateKingdeeReceiveBill(context.Context, *BulkCreateKingdeeReceiveBillRequest) (*BulkCreateKingdeeReceiveBillResponse, error)
	Create(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error)
	Destroy(context.Context, *KingdeePurchaseDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *KingdeePurchaseListRequest) (*KingdeePurchaseListResponse, error)
	PartialUpdate(context.Context, *KingdeePurchasePartialUpdateRequest) (*KingdeePurchaseResponse, error)
	QueryKingdeePurchaseOrder(context.Context, *QueryKingdeePurchaseOrderRequest) (*QueryKingdeePurchaseOrderResponse, error)
	Retrieve(context.Context, *KingdeePurchaseRetrieveRequest) (*KingdeePurchaseResponse, error)
	Update(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error)
	mustEmbedUnimplementedKingdeePurchaseOrderControllerServer()
}

// UnimplementedKingdeePurchaseOrderControllerServer must be embedded to have forward compatible implementations.
type UnimplementedKingdeePurchaseOrderControllerServer struct {
}

func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKingdeePurchaseOrder(context.Context, *BulkCreateKingdeePurchaseOrderRequest) (*BulkCreateKingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKingdeePurchaseOrder not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) BulkCreateKingdeeReceiveBill(context.Context, *BulkCreateKingdeeReceiveBillRequest) (*BulkCreateKingdeeReceiveBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateKingdeeReceiveBill not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Create(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Destroy(context.Context, *KingdeePurchaseDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) List(context.Context, *KingdeePurchaseListRequest) (*KingdeePurchaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) PartialUpdate(context.Context, *KingdeePurchasePartialUpdateRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) QueryKingdeePurchaseOrder(context.Context, *QueryKingdeePurchaseOrderRequest) (*QueryKingdeePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKingdeePurchaseOrder not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Retrieve(context.Context, *KingdeePurchaseRetrieveRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) Update(context.Context, *KingdeePurchaseRequest) (*KingdeePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKingdeePurchaseOrderControllerServer) mustEmbedUnimplementedKingdeePurchaseOrderControllerServer() {
}

// UnsafeKingdeePurchaseOrderControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KingdeePurchaseOrderControllerServer will
// result in compilation errors.
type UnsafeKingdeePurchaseOrderControllerServer interface {
	mustEmbedUnimplementedKingdeePurchaseOrderControllerServer()
}

func RegisterKingdeePurchaseOrderControllerServer(s grpc.ServiceRegistrar, srv KingdeePurchaseOrderControllerServer) {
	s.RegisterService(&KingdeePurchaseOrderController_ServiceDesc, srv)
}

func _KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKingdeePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeePurchaseOrder(ctx, req.(*BulkCreateKingdeePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateKingdeeReceiveBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeeReceiveBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).BulkCreateKingdeeReceiveBill(ctx, req.(*BulkCreateKingdeeReceiveBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Create(ctx, req.(*KingdeePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Destroy(ctx, req.(*KingdeePurchaseDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).List(ctx, req.(*KingdeePurchaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchasePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).PartialUpdate(ctx, req.(*KingdeePurchasePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKingdeePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKingdeePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).QueryKingdeePurchaseOrder(ctx, req.(*QueryKingdeePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Retrieve(ctx, req.(*KingdeePurchaseRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KingdeePurchaseOrderController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KingdeePurchaseOrderControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KingdeePurchaseOrderController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KingdeePurchaseOrderControllerServer).Update(ctx, req.(*KingdeePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KingdeePurchaseOrderController_ServiceDesc is the grpc.ServiceDesc for KingdeePurchaseOrderController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KingdeePurchaseOrderController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.KingdeePurchaseOrderController",
	HandlerType: (*KingdeePurchaseOrderControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BulkCreateKingdeePurchaseOrder",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "BulkCreateKingdeeReceiveBill",
			Handler:    _KingdeePurchaseOrderController_BulkCreateKingdeeReceiveBill_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _KingdeePurchaseOrderController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _KingdeePurchaseOrderController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KingdeePurchaseOrderController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _KingdeePurchaseOrderController_PartialUpdate_Handler,
		},
		{
			MethodName: "QueryKingdeePurchaseOrder",
			Handler:    _KingdeePurchaseOrderController_QueryKingdeePurchaseOrder_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _KingdeePurchaseOrderController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _KingdeePurchaseOrderController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	TradeAggController_CountAggPushStatus_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/CountAggPushStatus"
	TradeAggController_Create_FullMethodName                            = "/kingdee_service.kingdee_ito.TradeAggController/Create"
	TradeAggController_CreateAggParamsTrade_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/CreateAggParamsTrade"
	TradeAggController_CreateClockedSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/CreateClockedSchedule"
	TradeAggController_CreateCrontabSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/CreateCrontabSchedule"
	TradeAggController_CreateIntervalSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/CreateIntervalSchedule"
	TradeAggController_CreatePeriodicTask_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/CreatePeriodicTask"
	TradeAggController_CreateTaskResult_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/CreateTaskResult"
	TradeAggController_Destroy_FullMethodName                           = "/kingdee_service.kingdee_ito.TradeAggController/Destroy"
	TradeAggController_DestroyAggParamsTrade_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/DestroyAggParamsTrade"
	TradeAggController_DestroyClockedSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/DestroyClockedSchedule"
	TradeAggController_DestroyCrontabSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/DestroyCrontabSchedule"
	TradeAggController_DestroyIntervalSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/DestroyIntervalSchedule"
	TradeAggController_DestroyPeriodicTask_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/DestroyPeriodicTask"
	TradeAggController_DestroyTaskResult_FullMethodName                 = "/kingdee_service.kingdee_ito.TradeAggController/DestroyTaskResult"
	TradeAggController_FetchQimenTrade_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/FetchQimenTrade"
	TradeAggController_GetKingdeeShopNoInfo_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/GetKingdeeShopNoInfo"
	TradeAggController_GetKingdeeStockNoInfo_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/GetKingdeeStockNoInfo"
	TradeAggController_List_FullMethodName                              = "/kingdee_service.kingdee_ito.TradeAggController/List"
	TradeAggController_ListAggParamsTrade_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/ListAggParamsTrade"
	TradeAggController_ListClockedSchedule_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/ListClockedSchedule"
	TradeAggController_ListCrontabSchedule_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/ListCrontabSchedule"
	TradeAggController_ListIntervalSchedule_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/ListIntervalSchedule"
	TradeAggController_ListKingdeeSalOutStock_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/ListKingdeeSalOutStock"
	TradeAggController_ListMongoTrades_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/ListMongoTrades"
	TradeAggController_ListPeriodicTask_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/ListPeriodicTask"
	TradeAggController_ListTaskResult_FullMethodName                    = "/kingdee_service.kingdee_ito.TradeAggController/ListTaskResult"
	TradeAggController_NextNoAggParamsTrade_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/NextNoAggParamsTrade"
	TradeAggController_PartialUpdate_FullMethodName                     = "/kingdee_service.kingdee_ito.TradeAggController/PartialUpdate"
	TradeAggController_PeriodAggTrade_FullMethodName                    = "/kingdee_service.kingdee_ito.TradeAggController/PeriodAggTrade"
	TradeAggController_PushToKingDeeSalOutStock_FullMethodName          = "/kingdee_service.kingdee_ito.TradeAggController/PushToKingDeeSalOutStock"
	TradeAggController_Retrieve_FullMethodName                          = "/kingdee_service.kingdee_ito.TradeAggController/Retrieve"
	TradeAggController_RetrieveAggParamsTrade_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveAggParamsTrade"
	TradeAggController_RetrieveClockedSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveClockedSchedule"
	TradeAggController_RetrieveCrontabSchedule_FullMethodName           = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveCrontabSchedule"
	TradeAggController_RetrieveIntervalSchedule_FullMethodName          = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveIntervalSchedule"
	TradeAggController_RetrieveKingdeeSalOutStock_FullMethodName        = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveKingdeeSalOutStock"
	TradeAggController_RetrieveMongoTrades_FullMethodName               = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveMongoTrades"
	TradeAggController_RetrievePeriodicTask_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/RetrievePeriodicTask"
	TradeAggController_RetrieveTaskResult_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/RetrieveTaskResult"
	TradeAggController_RevokeKingdeeSalOutstock_FullMethodName          = "/kingdee_service.kingdee_ito.TradeAggController/RevokeKingdeeSalOutstock"
	TradeAggController_RunPeriodAggSharedTask_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/RunPeriodAggSharedTask"
	TradeAggController_RunPeriodPushToKingDeeSalOutStock_FullMethodName = "/kingdee_service.kingdee_ito.TradeAggController/RunPeriodPushToKingDeeSalOutStock"
	TradeAggController_RunPeriodicTask_FullMethodName                   = "/kingdee_service.kingdee_ito.TradeAggController/RunPeriodicTask"
	TradeAggController_RunSliceFetchTrade_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/RunSliceFetchTrade"
	TradeAggController_StopPeriodicTask_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/StopPeriodicTask"
	TradeAggController_Update_FullMethodName                            = "/kingdee_service.kingdee_ito.TradeAggController/Update"
	TradeAggController_UpdateAggParamsTrade_FullMethodName              = "/kingdee_service.kingdee_ito.TradeAggController/UpdateAggParamsTrade"
	TradeAggController_UpdateClockedSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/UpdateClockedSchedule"
	TradeAggController_UpdateCrontabSchedule_FullMethodName             = "/kingdee_service.kingdee_ito.TradeAggController/UpdateCrontabSchedule"
	TradeAggController_UpdateIntervalSchedule_FullMethodName            = "/kingdee_service.kingdee_ito.TradeAggController/UpdateIntervalSchedule"
	TradeAggController_UpdatePeriodicTask_FullMethodName                = "/kingdee_service.kingdee_ito.TradeAggController/UpdatePeriodicTask"
	TradeAggController_UpdateTaskResult_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeAggController/UpdateTaskResult"
)

// TradeAggControllerClient is the client API for TradeAggController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeAggControllerClient interface {
	CountAggPushStatus(ctx context.Context, in *AggPushStatusCountRequest, opts ...grpc.CallOption) (*AggPushStatusCountResponse, error)
	Create(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	CreateAggParamsTrade(ctx context.Context, in *AggParamsTradeCreateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error)
	CreateClockedSchedule(ctx context.Context, in *ClockedScheduleCreateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleCreateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleCreateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(ctx context.Context, in *PeriodicTaskCreateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	CreateTaskResult(ctx context.Context, in *TaskResultCreateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	Destroy(ctx context.Context, in *KingdeeTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyAggParamsTrade(ctx context.Context, in *AggParamsTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FetchQimenTrade(ctx context.Context, in *FetchQimenTradeRequest, opts ...grpc.CallOption) (*FetchQimenTradeResponse, error)
	GetKingdeeShopNoInfo(ctx context.Context, in *KingdeeShopNoInfoRequest, opts ...grpc.CallOption) (*KingdeeShopNoInfoResponse, error)
	GetKingdeeStockNoInfo(ctx context.Context, in *KingdeeStockNoInfoRequest, opts ...grpc.CallOption) (*KingdeeStockNoInfoResponse, error)
	List(ctx context.Context, in *KingdeeTradeListRequest, opts ...grpc.CallOption) (*KingdeeTradeListResponse, error)
	ListAggParamsTrade(ctx context.Context, in *AggParamsTradeListRequest, opts ...grpc.CallOption) (*AggParamsTradeListResponse, error)
	ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error)
	ListKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockListRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockListResponse, error)
	ListMongoTrades(ctx context.Context, in *MongoTradesListRequest, opts ...grpc.CallOption) (*MongoTradesListResponse, error)
	ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error)
	ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error)
	NextNoAggParamsTrade(ctx context.Context, in *AggParamsTradeNextNoRequest, opts ...grpc.CallOption) (*AggParamsTradeNextNoResponse, error)
	PartialUpdate(ctx context.Context, in *KingdeeTradePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	PeriodAggTrade(ctx context.Context, in *PeriodAggTradeRequest, opts ...grpc.CallOption) (*PeriodAggTradeResponse, error)
	PushToKingDeeSalOutStock(ctx context.Context, in *PushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*PushToKingDeeSalOutStockResponse, error)
	Retrieve(ctx context.Context, in *KingdeeTradeRetrieveRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	RetrieveAggParamsTrade(ctx context.Context, in *AggParamsTradeRetrieveRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error)
	RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	RetrieveKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockResponse, error)
	RetrieveMongoTrades(ctx context.Context, in *MongoTradesRetrieveRequest, opts ...grpc.CallOption) (*MongoTradesResponse, error)
	RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
	RevokeKingdeeSalOutstock(ctx context.Context, in *RevokeKingdeeSalOutstockRequest, opts ...grpc.CallOption) (*RevokeKingdeeSalOutstockResponse, error)
	RunPeriodAggSharedTask(ctx context.Context, in *RunPeriodAggSharedTaskRequest, opts ...grpc.CallOption) (*RunPeriodAggSharedTaskResponse, error)
	RunPeriodPushToKingDeeSalOutStock(ctx context.Context, in *RunPeriodPushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*RunPeriodPushToKingDeeSalOutStockResponse, error)
	RunPeriodicTask(ctx context.Context, in *RunPeriodicTaskRequest, opts ...grpc.CallOption) (*RunPeriodicTaskResponse, error)
	RunSliceFetchTrade(ctx context.Context, in *RunSharedTaskRequest, opts ...grpc.CallOption) (*RunSharedTaskResponse, error)
	StopPeriodicTask(ctx context.Context, in *StopPeriodicTaskRequest, opts ...grpc.CallOption) (*StopPeriodicTaskResponse, error)
	Update(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error)
	UpdateAggParamsTrade(ctx context.Context, in *AggParamsTradeUpdateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error)
	UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error)
	UpdateTaskResult(ctx context.Context, in *TaskResultUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
}

type tradeAggControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeAggControllerClient(cc grpc.ClientConnInterface) TradeAggControllerClient {
	return &tradeAggControllerClient{cc}
}

func (c *tradeAggControllerClient) CountAggPushStatus(ctx context.Context, in *AggPushStatusCountRequest, opts ...grpc.CallOption) (*AggPushStatusCountResponse, error) {
	out := new(AggPushStatusCountResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CountAggPushStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Create(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateAggParamsTrade(ctx context.Context, in *AggParamsTradeCreateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error) {
	out := new(AggParamsTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateClockedSchedule(ctx context.Context, in *ClockedScheduleCreateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateCrontabSchedule(ctx context.Context, in *CrontabScheduleCreateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateIntervalSchedule(ctx context.Context, in *IntervalScheduleCreateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreatePeriodicTask(ctx context.Context, in *PeriodicTaskCreateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) CreateTaskResult(ctx context.Context, in *TaskResultCreateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, TradeAggController_CreateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Destroy(ctx context.Context, in *KingdeeTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyAggParamsTrade(ctx context.Context, in *AggParamsTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyClockedSchedule(ctx context.Context, in *ClockedScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyCrontabSchedule(ctx context.Context, in *CrontabScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyIntervalSchedule(ctx context.Context, in *IntervalScheduleDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyPeriodicTask(ctx context.Context, in *PeriodicTaskDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) DestroyTaskResult(ctx context.Context, in *TaskResultDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeAggController_DestroyTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) FetchQimenTrade(ctx context.Context, in *FetchQimenTradeRequest, opts ...grpc.CallOption) (*FetchQimenTradeResponse, error) {
	out := new(FetchQimenTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_FetchQimenTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) GetKingdeeShopNoInfo(ctx context.Context, in *KingdeeShopNoInfoRequest, opts ...grpc.CallOption) (*KingdeeShopNoInfoResponse, error) {
	out := new(KingdeeShopNoInfoResponse)
	err := c.cc.Invoke(ctx, TradeAggController_GetKingdeeShopNoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) GetKingdeeStockNoInfo(ctx context.Context, in *KingdeeStockNoInfoRequest, opts ...grpc.CallOption) (*KingdeeStockNoInfoResponse, error) {
	out := new(KingdeeStockNoInfoResponse)
	err := c.cc.Invoke(ctx, TradeAggController_GetKingdeeStockNoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) List(ctx context.Context, in *KingdeeTradeListRequest, opts ...grpc.CallOption) (*KingdeeTradeListResponse, error) {
	out := new(KingdeeTradeListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListAggParamsTrade(ctx context.Context, in *AggParamsTradeListRequest, opts ...grpc.CallOption) (*AggParamsTradeListResponse, error) {
	out := new(AggParamsTradeListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListClockedSchedule(ctx context.Context, in *ClockedScheduleListRequest, opts ...grpc.CallOption) (*ClockedScheduleListResponse, error) {
	out := new(ClockedScheduleListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListCrontabSchedule(ctx context.Context, in *CrontabScheduleListRequest, opts ...grpc.CallOption) (*CrontabScheduleListResponse, error) {
	out := new(CrontabScheduleListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListIntervalSchedule(ctx context.Context, in *IntervalScheduleListRequest, opts ...grpc.CallOption) (*IntervalScheduleListResponse, error) {
	out := new(IntervalScheduleListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockListRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockListResponse, error) {
	out := new(KingdeeSalOutStockListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListKingdeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListMongoTrades(ctx context.Context, in *MongoTradesListRequest, opts ...grpc.CallOption) (*MongoTradesListResponse, error) {
	out := new(MongoTradesListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListMongoTrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListPeriodicTask(ctx context.Context, in *PeriodicTaskListRequest, opts ...grpc.CallOption) (*PeriodicTaskListResponse, error) {
	out := new(PeriodicTaskListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) ListTaskResult(ctx context.Context, in *TaskResultListRequest, opts ...grpc.CallOption) (*TaskResultListResponse, error) {
	out := new(TaskResultListResponse)
	err := c.cc.Invoke(ctx, TradeAggController_ListTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) NextNoAggParamsTrade(ctx context.Context, in *AggParamsTradeNextNoRequest, opts ...grpc.CallOption) (*AggParamsTradeNextNoResponse, error) {
	out := new(AggParamsTradeNextNoResponse)
	err := c.cc.Invoke(ctx, TradeAggController_NextNoAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) PartialUpdate(ctx context.Context, in *KingdeeTradePartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) PeriodAggTrade(ctx context.Context, in *PeriodAggTradeRequest, opts ...grpc.CallOption) (*PeriodAggTradeResponse, error) {
	out := new(PeriodAggTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_PeriodAggTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) PushToKingDeeSalOutStock(ctx context.Context, in *PushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*PushToKingDeeSalOutStockResponse, error) {
	out := new(PushToKingDeeSalOutStockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_PushToKingDeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Retrieve(ctx context.Context, in *KingdeeTradeRetrieveRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveAggParamsTrade(ctx context.Context, in *AggParamsTradeRetrieveRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error) {
	out := new(AggParamsTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveClockedSchedule(ctx context.Context, in *ClockedScheduleRetrieveRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveCrontabSchedule(ctx context.Context, in *CrontabScheduleRetrieveRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveIntervalSchedule(ctx context.Context, in *IntervalScheduleRetrieveRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveKingdeeSalOutStock(ctx context.Context, in *KingdeeSalOutStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalOutStockResponse, error) {
	out := new(KingdeeSalOutStockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveKingdeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveMongoTrades(ctx context.Context, in *MongoTradesRetrieveRequest, opts ...grpc.CallOption) (*MongoTradesResponse, error) {
	out := new(MongoTradesResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveMongoTrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrievePeriodicTask(ctx context.Context, in *PeriodicTaskRetrieveRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrievePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RetrieveTaskResult(ctx context.Context, in *TaskResultRetrieveRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RetrieveTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RevokeKingdeeSalOutstock(ctx context.Context, in *RevokeKingdeeSalOutstockRequest, opts ...grpc.CallOption) (*RevokeKingdeeSalOutstockResponse, error) {
	out := new(RevokeKingdeeSalOutstockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RevokeKingdeeSalOutstock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunPeriodAggSharedTask(ctx context.Context, in *RunPeriodAggSharedTaskRequest, opts ...grpc.CallOption) (*RunPeriodAggSharedTaskResponse, error) {
	out := new(RunPeriodAggSharedTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunPeriodAggSharedTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunPeriodPushToKingDeeSalOutStock(ctx context.Context, in *RunPeriodPushToKingDeeSalOutStockRequest, opts ...grpc.CallOption) (*RunPeriodPushToKingDeeSalOutStockResponse, error) {
	out := new(RunPeriodPushToKingDeeSalOutStockResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunPeriodPushToKingDeeSalOutStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunPeriodicTask(ctx context.Context, in *RunPeriodicTaskRequest, opts ...grpc.CallOption) (*RunPeriodicTaskResponse, error) {
	out := new(RunPeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) RunSliceFetchTrade(ctx context.Context, in *RunSharedTaskRequest, opts ...grpc.CallOption) (*RunSharedTaskResponse, error) {
	out := new(RunSharedTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_RunSliceFetchTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) StopPeriodicTask(ctx context.Context, in *StopPeriodicTaskRequest, opts ...grpc.CallOption) (*StopPeriodicTaskResponse, error) {
	out := new(StopPeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_StopPeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) Update(ctx context.Context, in *KingdeeTradeRequest, opts ...grpc.CallOption) (*KingdeeTradeResponse, error) {
	out := new(KingdeeTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateAggParamsTrade(ctx context.Context, in *AggParamsTradeUpdateRequest, opts ...grpc.CallOption) (*AggParamsTradeResponse, error) {
	out := new(AggParamsTradeResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateAggParamsTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateClockedSchedule(ctx context.Context, in *ClockedScheduleUpdateRequest, opts ...grpc.CallOption) (*ClockedScheduleResponse, error) {
	out := new(ClockedScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateClockedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateCrontabSchedule(ctx context.Context, in *CrontabScheduleUpdateRequest, opts ...grpc.CallOption) (*CrontabScheduleResponse, error) {
	out := new(CrontabScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateCrontabSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateIntervalSchedule(ctx context.Context, in *IntervalScheduleUpdateRequest, opts ...grpc.CallOption) (*IntervalScheduleResponse, error) {
	out := new(IntervalScheduleResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateIntervalSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdatePeriodicTask(ctx context.Context, in *PeriodicTaskUpdateRequest, opts ...grpc.CallOption) (*PeriodicTaskResponse, error) {
	out := new(PeriodicTaskResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdatePeriodicTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeAggControllerClient) UpdateTaskResult(ctx context.Context, in *TaskResultUpdateRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, TradeAggController_UpdateTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeAggControllerServer is the server API for TradeAggController service.
// All implementations must embed UnimplementedTradeAggControllerServer
// for forward compatibility
type TradeAggControllerServer interface {
	CountAggPushStatus(context.Context, *AggPushStatusCountRequest) (*AggPushStatusCountResponse, error)
	Create(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error)
	CreateAggParamsTrade(context.Context, *AggParamsTradeCreateRequest) (*AggParamsTradeResponse, error)
	CreateClockedSchedule(context.Context, *ClockedScheduleCreateRequest) (*ClockedScheduleResponse, error)
	CreateCrontabSchedule(context.Context, *CrontabScheduleCreateRequest) (*CrontabScheduleResponse, error)
	CreateIntervalSchedule(context.Context, *IntervalScheduleCreateRequest) (*IntervalScheduleResponse, error)
	CreatePeriodicTask(context.Context, *PeriodicTaskCreateRequest) (*PeriodicTaskResponse, error)
	CreateTaskResult(context.Context, *TaskResultCreateRequest) (*TaskResultResponse, error)
	Destroy(context.Context, *KingdeeTradeDestroyRequest) (*emptypb.Empty, error)
	DestroyAggParamsTrade(context.Context, *AggParamsTradeDestroyRequest) (*emptypb.Empty, error)
	DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error)
	DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error)
	DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error)
	FetchQimenTrade(context.Context, *FetchQimenTradeRequest) (*FetchQimenTradeResponse, error)
	GetKingdeeShopNoInfo(context.Context, *KingdeeShopNoInfoRequest) (*KingdeeShopNoInfoResponse, error)
	GetKingdeeStockNoInfo(context.Context, *KingdeeStockNoInfoRequest) (*KingdeeStockNoInfoResponse, error)
	List(context.Context, *KingdeeTradeListRequest) (*KingdeeTradeListResponse, error)
	ListAggParamsTrade(context.Context, *AggParamsTradeListRequest) (*AggParamsTradeListResponse, error)
	ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error)
	ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error)
	ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error)
	ListKingdeeSalOutStock(context.Context, *KingdeeSalOutStockListRequest) (*KingdeeSalOutStockListResponse, error)
	ListMongoTrades(context.Context, *MongoTradesListRequest) (*MongoTradesListResponse, error)
	ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error)
	ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error)
	NextNoAggParamsTrade(context.Context, *AggParamsTradeNextNoRequest) (*AggParamsTradeNextNoResponse, error)
	PartialUpdate(context.Context, *KingdeeTradePartialUpdateRequest) (*KingdeeTradeResponse, error)
	PeriodAggTrade(context.Context, *PeriodAggTradeRequest) (*PeriodAggTradeResponse, error)
	PushToKingDeeSalOutStock(context.Context, *PushToKingDeeSalOutStockRequest) (*PushToKingDeeSalOutStockResponse, error)
	Retrieve(context.Context, *KingdeeTradeRetrieveRequest) (*KingdeeTradeResponse, error)
	RetrieveAggParamsTrade(context.Context, *AggParamsTradeRetrieveRequest) (*AggParamsTradeResponse, error)
	RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error)
	RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error)
	RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error)
	RetrieveKingdeeSalOutStock(context.Context, *KingdeeSalOutStockRetrieveRequest) (*KingdeeSalOutStockResponse, error)
	RetrieveMongoTrades(context.Context, *MongoTradesRetrieveRequest) (*MongoTradesResponse, error)
	RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error)
	RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error)
	RevokeKingdeeSalOutstock(context.Context, *RevokeKingdeeSalOutstockRequest) (*RevokeKingdeeSalOutstockResponse, error)
	RunPeriodAggSharedTask(context.Context, *RunPeriodAggSharedTaskRequest) (*RunPeriodAggSharedTaskResponse, error)
	RunPeriodPushToKingDeeSalOutStock(context.Context, *RunPeriodPushToKingDeeSalOutStockRequest) (*RunPeriodPushToKingDeeSalOutStockResponse, error)
	RunPeriodicTask(context.Context, *RunPeriodicTaskRequest) (*RunPeriodicTaskResponse, error)
	RunSliceFetchTrade(context.Context, *RunSharedTaskRequest) (*RunSharedTaskResponse, error)
	StopPeriodicTask(context.Context, *StopPeriodicTaskRequest) (*StopPeriodicTaskResponse, error)
	Update(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error)
	UpdateAggParamsTrade(context.Context, *AggParamsTradeUpdateRequest) (*AggParamsTradeResponse, error)
	UpdateClockedSchedule(context.Context, *ClockedScheduleUpdateRequest) (*ClockedScheduleResponse, error)
	UpdateCrontabSchedule(context.Context, *CrontabScheduleUpdateRequest) (*CrontabScheduleResponse, error)
	UpdateIntervalSchedule(context.Context, *IntervalScheduleUpdateRequest) (*IntervalScheduleResponse, error)
	UpdatePeriodicTask(context.Context, *PeriodicTaskUpdateRequest) (*PeriodicTaskResponse, error)
	UpdateTaskResult(context.Context, *TaskResultUpdateRequest) (*TaskResultResponse, error)
	mustEmbedUnimplementedTradeAggControllerServer()
}

// UnimplementedTradeAggControllerServer must be embedded to have forward compatible implementations.
type UnimplementedTradeAggControllerServer struct {
}

func (UnimplementedTradeAggControllerServer) CountAggPushStatus(context.Context, *AggPushStatusCountRequest) (*AggPushStatusCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAggPushStatus not implemented")
}
func (UnimplementedTradeAggControllerServer) Create(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateAggParamsTrade(context.Context, *AggParamsTradeCreateRequest) (*AggParamsTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateClockedSchedule(context.Context, *ClockedScheduleCreateRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateCrontabSchedule(context.Context, *CrontabScheduleCreateRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateIntervalSchedule(context.Context, *IntervalScheduleCreateRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) CreatePeriodicTask(context.Context, *PeriodicTaskCreateRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) CreateTaskResult(context.Context, *TaskResultCreateRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) Destroy(context.Context, *KingdeeTradeDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyAggParamsTrade(context.Context, *AggParamsTradeDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyClockedSchedule(context.Context, *ClockedScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyCrontabSchedule(context.Context, *CrontabScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyIntervalSchedule(context.Context, *IntervalScheduleDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyPeriodicTask(context.Context, *PeriodicTaskDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) DestroyTaskResult(context.Context, *TaskResultDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) FetchQimenTrade(context.Context, *FetchQimenTradeRequest) (*FetchQimenTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchQimenTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) GetKingdeeShopNoInfo(context.Context, *KingdeeShopNoInfoRequest) (*KingdeeShopNoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKingdeeShopNoInfo not implemented")
}
func (UnimplementedTradeAggControllerServer) GetKingdeeStockNoInfo(context.Context, *KingdeeStockNoInfoRequest) (*KingdeeStockNoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKingdeeStockNoInfo not implemented")
}
func (UnimplementedTradeAggControllerServer) List(context.Context, *KingdeeTradeListRequest) (*KingdeeTradeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTradeAggControllerServer) ListAggParamsTrade(context.Context, *AggParamsTradeListRequest) (*AggParamsTradeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) ListClockedSchedule(context.Context, *ClockedScheduleListRequest) (*ClockedScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) ListCrontabSchedule(context.Context, *CrontabScheduleListRequest) (*CrontabScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) ListIntervalSchedule(context.Context, *IntervalScheduleListRequest) (*IntervalScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) ListKingdeeSalOutStock(context.Context, *KingdeeSalOutStockListRequest) (*KingdeeSalOutStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) ListMongoTrades(context.Context, *MongoTradesListRequest) (*MongoTradesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMongoTrades not implemented")
}
func (UnimplementedTradeAggControllerServer) ListPeriodicTask(context.Context, *PeriodicTaskListRequest) (*PeriodicTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) ListTaskResult(context.Context, *TaskResultListRequest) (*TaskResultListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) NextNoAggParamsTrade(context.Context, *AggParamsTradeNextNoRequest) (*AggParamsTradeNextNoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextNoAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) PartialUpdate(context.Context, *KingdeeTradePartialUpdateRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedTradeAggControllerServer) PeriodAggTrade(context.Context, *PeriodAggTradeRequest) (*PeriodAggTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodAggTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) PushToKingDeeSalOutStock(context.Context, *PushToKingDeeSalOutStockRequest) (*PushToKingDeeSalOutStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToKingDeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) Retrieve(context.Context, *KingdeeTradeRetrieveRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveAggParamsTrade(context.Context, *AggParamsTradeRetrieveRequest) (*AggParamsTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveClockedSchedule(context.Context, *ClockedScheduleRetrieveRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveCrontabSchedule(context.Context, *CrontabScheduleRetrieveRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveIntervalSchedule(context.Context, *IntervalScheduleRetrieveRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveKingdeeSalOutStock(context.Context, *KingdeeSalOutStockRetrieveRequest) (*KingdeeSalOutStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKingdeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveMongoTrades(context.Context, *MongoTradesRetrieveRequest) (*MongoTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMongoTrades not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrievePeriodicTask(context.Context, *PeriodicTaskRetrieveRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) RetrieveTaskResult(context.Context, *TaskResultRetrieveRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) RevokeKingdeeSalOutstock(context.Context, *RevokeKingdeeSalOutstockRequest) (*RevokeKingdeeSalOutstockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeKingdeeSalOutstock not implemented")
}
func (UnimplementedTradeAggControllerServer) RunPeriodAggSharedTask(context.Context, *RunPeriodAggSharedTaskRequest) (*RunPeriodAggSharedTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodAggSharedTask not implemented")
}
func (UnimplementedTradeAggControllerServer) RunPeriodPushToKingDeeSalOutStock(context.Context, *RunPeriodPushToKingDeeSalOutStockRequest) (*RunPeriodPushToKingDeeSalOutStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodPushToKingDeeSalOutStock not implemented")
}
func (UnimplementedTradeAggControllerServer) RunPeriodicTask(context.Context, *RunPeriodicTaskRequest) (*RunPeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) RunSliceFetchTrade(context.Context, *RunSharedTaskRequest) (*RunSharedTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSliceFetchTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) StopPeriodicTask(context.Context, *StopPeriodicTaskRequest) (*StopPeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) Update(context.Context, *KingdeeTradeRequest) (*KingdeeTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateAggParamsTrade(context.Context, *AggParamsTradeUpdateRequest) (*AggParamsTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAggParamsTrade not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateClockedSchedule(context.Context, *ClockedScheduleUpdateRequest) (*ClockedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClockedSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateCrontabSchedule(context.Context, *CrontabScheduleUpdateRequest) (*CrontabScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrontabSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateIntervalSchedule(context.Context, *IntervalScheduleUpdateRequest) (*IntervalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntervalSchedule not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdatePeriodicTask(context.Context, *PeriodicTaskUpdateRequest) (*PeriodicTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeriodicTask not implemented")
}
func (UnimplementedTradeAggControllerServer) UpdateTaskResult(context.Context, *TaskResultUpdateRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskResult not implemented")
}
func (UnimplementedTradeAggControllerServer) mustEmbedUnimplementedTradeAggControllerServer() {}

// UnsafeTradeAggControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeAggControllerServer will
// result in compilation errors.
type UnsafeTradeAggControllerServer interface {
	mustEmbedUnimplementedTradeAggControllerServer()
}

func RegisterTradeAggControllerServer(s grpc.ServiceRegistrar, srv TradeAggControllerServer) {
	s.RegisterService(&TradeAggController_ServiceDesc, srv)
}

func _TradeAggController_CountAggPushStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggPushStatusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CountAggPushStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CountAggPushStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CountAggPushStatus(ctx, req.(*AggPushStatusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Create(ctx, req.(*KingdeeTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateAggParamsTrade(ctx, req.(*AggParamsTradeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateClockedSchedule(ctx, req.(*ClockedScheduleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateCrontabSchedule(ctx, req.(*CrontabScheduleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateIntervalSchedule(ctx, req.(*IntervalScheduleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreatePeriodicTask(ctx, req.(*PeriodicTaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_CreateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).CreateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_CreateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).CreateTaskResult(ctx, req.(*TaskResultCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Destroy(ctx, req.(*KingdeeTradeDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyAggParamsTrade(ctx, req.(*AggParamsTradeDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyClockedSchedule(ctx, req.(*ClockedScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyCrontabSchedule(ctx, req.(*CrontabScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyIntervalSchedule(ctx, req.(*IntervalScheduleDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyPeriodicTask(ctx, req.(*PeriodicTaskDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_DestroyTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).DestroyTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_DestroyTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).DestroyTaskResult(ctx, req.(*TaskResultDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_FetchQimenTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchQimenTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).FetchQimenTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_FetchQimenTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).FetchQimenTrade(ctx, req.(*FetchQimenTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_GetKingdeeShopNoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeShopNoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).GetKingdeeShopNoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_GetKingdeeShopNoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).GetKingdeeShopNoInfo(ctx, req.(*KingdeeShopNoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_GetKingdeeStockNoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeStockNoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).GetKingdeeStockNoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_GetKingdeeStockNoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).GetKingdeeStockNoInfo(ctx, req.(*KingdeeStockNoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).List(ctx, req.(*KingdeeTradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListAggParamsTrade(ctx, req.(*AggParamsTradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListClockedSchedule(ctx, req.(*ClockedScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListCrontabSchedule(ctx, req.(*CrontabScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListIntervalSchedule(ctx, req.(*IntervalScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListKingdeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalOutStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListKingdeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListKingdeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListKingdeeSalOutStock(ctx, req.(*KingdeeSalOutStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListMongoTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoTradesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListMongoTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListMongoTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListMongoTrades(ctx, req.(*MongoTradesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListPeriodicTask(ctx, req.(*PeriodicTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_ListTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).ListTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_ListTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).ListTaskResult(ctx, req.(*TaskResultListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_NextNoAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeNextNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).NextNoAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_NextNoAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).NextNoAggParamsTrade(ctx, req.(*AggParamsTradeNextNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).PartialUpdate(ctx, req.(*KingdeeTradePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_PeriodAggTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodAggTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).PeriodAggTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_PeriodAggTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).PeriodAggTrade(ctx, req.(*PeriodAggTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_PushToKingDeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushToKingDeeSalOutStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).PushToKingDeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_PushToKingDeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).PushToKingDeeSalOutStock(ctx, req.(*PushToKingDeeSalOutStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Retrieve(ctx, req.(*KingdeeTradeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveAggParamsTrade(ctx, req.(*AggParamsTradeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveClockedSchedule(ctx, req.(*ClockedScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveCrontabSchedule(ctx, req.(*CrontabScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveIntervalSchedule(ctx, req.(*IntervalScheduleRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveKingdeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalOutStockRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveKingdeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveKingdeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveKingdeeSalOutStock(ctx, req.(*KingdeeSalOutStockRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveMongoTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoTradesRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveMongoTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveMongoTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveMongoTrades(ctx, req.(*MongoTradesRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrievePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrievePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrievePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrievePeriodicTask(ctx, req.(*PeriodicTaskRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RetrieveTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RetrieveTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RetrieveTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RetrieveTaskResult(ctx, req.(*TaskResultRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RevokeKingdeeSalOutstock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeKingdeeSalOutstockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RevokeKingdeeSalOutstock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RevokeKingdeeSalOutstock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RevokeKingdeeSalOutstock(ctx, req.(*RevokeKingdeeSalOutstockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunPeriodAggSharedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodAggSharedTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunPeriodAggSharedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunPeriodAggSharedTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunPeriodAggSharedTask(ctx, req.(*RunPeriodAggSharedTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunPeriodPushToKingDeeSalOutStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodPushToKingDeeSalOutStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunPeriodPushToKingDeeSalOutStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunPeriodPushToKingDeeSalOutStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunPeriodPushToKingDeeSalOutStock(ctx, req.(*RunPeriodPushToKingDeeSalOutStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunPeriodicTask(ctx, req.(*RunPeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_RunSliceFetchTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSharedTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).RunSliceFetchTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_RunSliceFetchTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).RunSliceFetchTrade(ctx, req.(*RunSharedTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_StopPeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPeriodicTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).StopPeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_StopPeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).StopPeriodicTask(ctx, req.(*StopPeriodicTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).Update(ctx, req.(*KingdeeTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateAggParamsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggParamsTradeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateAggParamsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateAggParamsTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateAggParamsTrade(ctx, req.(*AggParamsTradeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateClockedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateClockedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateClockedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateClockedSchedule(ctx, req.(*ClockedScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateCrontabSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrontabScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateCrontabSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateCrontabSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateCrontabSchedule(ctx, req.(*CrontabScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateIntervalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateIntervalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateIntervalSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateIntervalSchedule(ctx, req.(*IntervalScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdatePeriodicTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicTaskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdatePeriodicTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdatePeriodicTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdatePeriodicTask(ctx, req.(*PeriodicTaskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeAggController_UpdateTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeAggControllerServer).UpdateTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeAggController_UpdateTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeAggControllerServer).UpdateTaskResult(ctx, req.(*TaskResultUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeAggController_ServiceDesc is the grpc.ServiceDesc for TradeAggController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeAggController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.TradeAggController",
	HandlerType: (*TradeAggControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountAggPushStatus",
			Handler:    _TradeAggController_CountAggPushStatus_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TradeAggController_Create_Handler,
		},
		{
			MethodName: "CreateAggParamsTrade",
			Handler:    _TradeAggController_CreateAggParamsTrade_Handler,
		},
		{
			MethodName: "CreateClockedSchedule",
			Handler:    _TradeAggController_CreateClockedSchedule_Handler,
		},
		{
			MethodName: "CreateCrontabSchedule",
			Handler:    _TradeAggController_CreateCrontabSchedule_Handler,
		},
		{
			MethodName: "CreateIntervalSchedule",
			Handler:    _TradeAggController_CreateIntervalSchedule_Handler,
		},
		{
			MethodName: "CreatePeriodicTask",
			Handler:    _TradeAggController_CreatePeriodicTask_Handler,
		},
		{
			MethodName: "CreateTaskResult",
			Handler:    _TradeAggController_CreateTaskResult_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _TradeAggController_Destroy_Handler,
		},
		{
			MethodName: "DestroyAggParamsTrade",
			Handler:    _TradeAggController_DestroyAggParamsTrade_Handler,
		},
		{
			MethodName: "DestroyClockedSchedule",
			Handler:    _TradeAggController_DestroyClockedSchedule_Handler,
		},
		{
			MethodName: "DestroyCrontabSchedule",
			Handler:    _TradeAggController_DestroyCrontabSchedule_Handler,
		},
		{
			MethodName: "DestroyIntervalSchedule",
			Handler:    _TradeAggController_DestroyIntervalSchedule_Handler,
		},
		{
			MethodName: "DestroyPeriodicTask",
			Handler:    _TradeAggController_DestroyPeriodicTask_Handler,
		},
		{
			MethodName: "DestroyTaskResult",
			Handler:    _TradeAggController_DestroyTaskResult_Handler,
		},
		{
			MethodName: "FetchQimenTrade",
			Handler:    _TradeAggController_FetchQimenTrade_Handler,
		},
		{
			MethodName: "GetKingdeeShopNoInfo",
			Handler:    _TradeAggController_GetKingdeeShopNoInfo_Handler,
		},
		{
			MethodName: "GetKingdeeStockNoInfo",
			Handler:    _TradeAggController_GetKingdeeStockNoInfo_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TradeAggController_List_Handler,
		},
		{
			MethodName: "ListAggParamsTrade",
			Handler:    _TradeAggController_ListAggParamsTrade_Handler,
		},
		{
			MethodName: "ListClockedSchedule",
			Handler:    _TradeAggController_ListClockedSchedule_Handler,
		},
		{
			MethodName: "ListCrontabSchedule",
			Handler:    _TradeAggController_ListCrontabSchedule_Handler,
		},
		{
			MethodName: "ListIntervalSchedule",
			Handler:    _TradeAggController_ListIntervalSchedule_Handler,
		},
		{
			MethodName: "ListKingdeeSalOutStock",
			Handler:    _TradeAggController_ListKingdeeSalOutStock_Handler,
		},
		{
			MethodName: "ListMongoTrades",
			Handler:    _TradeAggController_ListMongoTrades_Handler,
		},
		{
			MethodName: "ListPeriodicTask",
			Handler:    _TradeAggController_ListPeriodicTask_Handler,
		},
		{
			MethodName: "ListTaskResult",
			Handler:    _TradeAggController_ListTaskResult_Handler,
		},
		{
			MethodName: "NextNoAggParamsTrade",
			Handler:    _TradeAggController_NextNoAggParamsTrade_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _TradeAggController_PartialUpdate_Handler,
		},
		{
			MethodName: "PeriodAggTrade",
			Handler:    _TradeAggController_PeriodAggTrade_Handler,
		},
		{
			MethodName: "PushToKingDeeSalOutStock",
			Handler:    _TradeAggController_PushToKingDeeSalOutStock_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _TradeAggController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveAggParamsTrade",
			Handler:    _TradeAggController_RetrieveAggParamsTrade_Handler,
		},
		{
			MethodName: "RetrieveClockedSchedule",
			Handler:    _TradeAggController_RetrieveClockedSchedule_Handler,
		},
		{
			MethodName: "RetrieveCrontabSchedule",
			Handler:    _TradeAggController_RetrieveCrontabSchedule_Handler,
		},
		{
			MethodName: "RetrieveIntervalSchedule",
			Handler:    _TradeAggController_RetrieveIntervalSchedule_Handler,
		},
		{
			MethodName: "RetrieveKingdeeSalOutStock",
			Handler:    _TradeAggController_RetrieveKingdeeSalOutStock_Handler,
		},
		{
			MethodName: "RetrieveMongoTrades",
			Handler:    _TradeAggController_RetrieveMongoTrades_Handler,
		},
		{
			MethodName: "RetrievePeriodicTask",
			Handler:    _TradeAggController_RetrievePeriodicTask_Handler,
		},
		{
			MethodName: "RetrieveTaskResult",
			Handler:    _TradeAggController_RetrieveTaskResult_Handler,
		},
		{
			MethodName: "RevokeKingdeeSalOutstock",
			Handler:    _TradeAggController_RevokeKingdeeSalOutstock_Handler,
		},
		{
			MethodName: "RunPeriodAggSharedTask",
			Handler:    _TradeAggController_RunPeriodAggSharedTask_Handler,
		},
		{
			MethodName: "RunPeriodPushToKingDeeSalOutStock",
			Handler:    _TradeAggController_RunPeriodPushToKingDeeSalOutStock_Handler,
		},
		{
			MethodName: "RunPeriodicTask",
			Handler:    _TradeAggController_RunPeriodicTask_Handler,
		},
		{
			MethodName: "RunSliceFetchTrade",
			Handler:    _TradeAggController_RunSliceFetchTrade_Handler,
		},
		{
			MethodName: "StopPeriodicTask",
			Handler:    _TradeAggController_StopPeriodicTask_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TradeAggController_Update_Handler,
		},
		{
			MethodName: "UpdateAggParamsTrade",
			Handler:    _TradeAggController_UpdateAggParamsTrade_Handler,
		},
		{
			MethodName: "UpdateClockedSchedule",
			Handler:    _TradeAggController_UpdateClockedSchedule_Handler,
		},
		{
			MethodName: "UpdateCrontabSchedule",
			Handler:    _TradeAggController_UpdateCrontabSchedule_Handler,
		},
		{
			MethodName: "UpdateIntervalSchedule",
			Handler:    _TradeAggController_UpdateIntervalSchedule_Handler,
		},
		{
			MethodName: "UpdatePeriodicTask",
			Handler:    _TradeAggController_UpdatePeriodicTask_Handler,
		},
		{
			MethodName: "UpdateTaskResult",
			Handler:    _TradeAggController_UpdateTaskResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}

const (
	TradeRefundAggController_CreateKingdeeSalReturnStock_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/CreateKingdeeSalReturnStock"
	TradeRefundAggController_CreateTradeRefund_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeRefundAggController/CreateTradeRefund"
	TradeRefundAggController_CreateTradeRefundStockin_FullMethodName           = "/kingdee_service.kingdee_ito.TradeRefundAggController/CreateTradeRefundStockin"
	TradeRefundAggController_DestroyKingdeeSalReturnStock_FullMethodName       = "/kingdee_service.kingdee_ito.TradeRefundAggController/DestroyKingdeeSalReturnStock"
	TradeRefundAggController_DestroyTradeRefund_FullMethodName                 = "/kingdee_service.kingdee_ito.TradeRefundAggController/DestroyTradeRefund"
	TradeRefundAggController_DestroyTradeRefundStockin_FullMethodName          = "/kingdee_service.kingdee_ito.TradeRefundAggController/DestroyTradeRefundStockin"
	TradeRefundAggController_ListKingdeeSalReturnStock_FullMethodName          = "/kingdee_service.kingdee_ito.TradeRefundAggController/ListKingdeeSalReturnStock"
	TradeRefundAggController_ListTradeRefund_FullMethodName                    = "/kingdee_service.kingdee_ito.TradeRefundAggController/ListTradeRefund"
	TradeRefundAggController_ListTradeRefundStockin_FullMethodName             = "/kingdee_service.kingdee_ito.TradeRefundAggController/ListTradeRefundStockin"
	TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_FullMethodName = "/kingdee_service.kingdee_ito.TradeRefundAggController/PartialUpdateKingdeeSalReturnStock"
	TradeRefundAggController_PartialUpdateTradeRefund_FullMethodName           = "/kingdee_service.kingdee_ito.TradeRefundAggController/PartialUpdateTradeRefund"
	TradeRefundAggController_PartialUpdateTradeRefundStockin_FullMethodName    = "/kingdee_service.kingdee_ito.TradeRefundAggController/PartialUpdateTradeRefundStockin"
	TradeRefundAggController_RetrieveKingdeeSalReturnStock_FullMethodName      = "/kingdee_service.kingdee_ito.TradeRefundAggController/RetrieveKingdeeSalReturnStock"
	TradeRefundAggController_RetrieveTradeRefund_FullMethodName                = "/kingdee_service.kingdee_ito.TradeRefundAggController/RetrieveTradeRefund"
	TradeRefundAggController_RetrieveTradeRefundStockin_FullMethodName         = "/kingdee_service.kingdee_ito.TradeRefundAggController/RetrieveTradeRefundStockin"
	TradeRefundAggController_UpdateKingdeeSalReturnStock_FullMethodName        = "/kingdee_service.kingdee_ito.TradeRefundAggController/UpdateKingdeeSalReturnStock"
	TradeRefundAggController_UpdateTradeRefund_FullMethodName                  = "/kingdee_service.kingdee_ito.TradeRefundAggController/UpdateTradeRefund"
	TradeRefundAggController_UpdateTradeRefundStockin_FullMethodName           = "/kingdee_service.kingdee_ito.TradeRefundAggController/UpdateTradeRefundStockin"
)

// TradeRefundAggControllerClient is the client API for TradeRefundAggController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeRefundAggControllerClient interface {
	CreateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	CreateTradeRefund(ctx context.Context, in *TradeRefundRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error)
	CreateTradeRefundStockin(ctx context.Context, in *TradeRefundStockinRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error)
	DestroyKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyTradeRefund(ctx context.Context, in *TradeRefundDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyTradeRefundStockin(ctx context.Context, in *TradeRefundStockinDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockListRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockListResponse, error)
	ListTradeRefund(ctx context.Context, in *TradeRefundListRequest, opts ...grpc.CallOption) (*TradeRefundListResponse, error)
	ListTradeRefundStockin(ctx context.Context, in *TradeRefundStockinListRequest, opts ...grpc.CallOption) (*TradeRefundStockinListResponse, error)
	PartialUpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	PartialUpdateTradeRefund(ctx context.Context, in *TradeRefundPartialUpdateRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error)
	PartialUpdateTradeRefundStockin(ctx context.Context, in *TradeRefundStockinPartialUpdateRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error)
	RetrieveKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	RetrieveTradeRefund(ctx context.Context, in *TradeRefundRetrieveRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error)
	RetrieveTradeRefundStockin(ctx context.Context, in *TradeRefundStockinRetrieveRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error)
	UpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error)
	UpdateTradeRefund(ctx context.Context, in *TradeRefundRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error)
	UpdateTradeRefundStockin(ctx context.Context, in *TradeRefundStockinRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error)
}

type tradeRefundAggControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeRefundAggControllerClient(cc grpc.ClientConnInterface) TradeRefundAggControllerClient {
	return &tradeRefundAggControllerClient{cc}
}

func (c *tradeRefundAggControllerClient) CreateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CreateKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) CreateTradeRefund(ctx context.Context, in *TradeRefundRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error) {
	out := new(TradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CreateTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) CreateTradeRefundStockin(ctx context.Context, in *TradeRefundStockinRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error) {
	out := new(TradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_CreateTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) DestroyKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeRefundAggController_DestroyKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) DestroyTradeRefund(ctx context.Context, in *TradeRefundDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeRefundAggController_DestroyTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) DestroyTradeRefundStockin(ctx context.Context, in *TradeRefundStockinDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TradeRefundAggController_DestroyTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) ListKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockListRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockListResponse, error) {
	out := new(KingdeeSalReturnStockListResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_ListKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) ListTradeRefund(ctx context.Context, in *TradeRefundListRequest, opts ...grpc.CallOption) (*TradeRefundListResponse, error) {
	out := new(TradeRefundListResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_ListTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) ListTradeRefundStockin(ctx context.Context, in *TradeRefundStockinListRequest, opts ...grpc.CallOption) (*TradeRefundStockinListResponse, error) {
	out := new(TradeRefundStockinListResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_ListTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) PartialUpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockPartialUpdateRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) PartialUpdateTradeRefund(ctx context.Context, in *TradeRefundPartialUpdateRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error) {
	out := new(TradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_PartialUpdateTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) PartialUpdateTradeRefundStockin(ctx context.Context, in *TradeRefundStockinPartialUpdateRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error) {
	out := new(TradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_PartialUpdateTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) RetrieveKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRetrieveRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_RetrieveKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) RetrieveTradeRefund(ctx context.Context, in *TradeRefundRetrieveRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error) {
	out := new(TradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_RetrieveTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) RetrieveTradeRefundStockin(ctx context.Context, in *TradeRefundStockinRetrieveRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error) {
	out := new(TradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_RetrieveTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) UpdateKingdeeSalReturnStock(ctx context.Context, in *KingdeeSalReturnStockRequest, opts ...grpc.CallOption) (*KingdeeSalReturnStockResponse, error) {
	out := new(KingdeeSalReturnStockResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_UpdateKingdeeSalReturnStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) UpdateTradeRefund(ctx context.Context, in *TradeRefundRequest, opts ...grpc.CallOption) (*TradeRefundResponse, error) {
	out := new(TradeRefundResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_UpdateTradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeRefundAggControllerClient) UpdateTradeRefundStockin(ctx context.Context, in *TradeRefundStockinRequest, opts ...grpc.CallOption) (*TradeRefundStockinResponse, error) {
	out := new(TradeRefundStockinResponse)
	err := c.cc.Invoke(ctx, TradeRefundAggController_UpdateTradeRefundStockin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeRefundAggControllerServer is the server API for TradeRefundAggController service.
// All implementations must embed UnimplementedTradeRefundAggControllerServer
// for forward compatibility
type TradeRefundAggControllerServer interface {
	CreateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error)
	CreateTradeRefund(context.Context, *TradeRefundRequest) (*TradeRefundResponse, error)
	CreateTradeRefundStockin(context.Context, *TradeRefundStockinRequest) (*TradeRefundStockinResponse, error)
	DestroyKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockDestroyRequest) (*emptypb.Empty, error)
	DestroyTradeRefund(context.Context, *TradeRefundDestroyRequest) (*emptypb.Empty, error)
	DestroyTradeRefundStockin(context.Context, *TradeRefundStockinDestroyRequest) (*emptypb.Empty, error)
	ListKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockListRequest) (*KingdeeSalReturnStockListResponse, error)
	ListTradeRefund(context.Context, *TradeRefundListRequest) (*TradeRefundListResponse, error)
	ListTradeRefundStockin(context.Context, *TradeRefundStockinListRequest) (*TradeRefundStockinListResponse, error)
	PartialUpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockPartialUpdateRequest) (*KingdeeSalReturnStockResponse, error)
	PartialUpdateTradeRefund(context.Context, *TradeRefundPartialUpdateRequest) (*TradeRefundResponse, error)
	PartialUpdateTradeRefundStockin(context.Context, *TradeRefundStockinPartialUpdateRequest) (*TradeRefundStockinResponse, error)
	RetrieveKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRetrieveRequest) (*KingdeeSalReturnStockResponse, error)
	RetrieveTradeRefund(context.Context, *TradeRefundRetrieveRequest) (*TradeRefundResponse, error)
	RetrieveTradeRefundStockin(context.Context, *TradeRefundStockinRetrieveRequest) (*TradeRefundStockinResponse, error)
	UpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error)
	UpdateTradeRefund(context.Context, *TradeRefundRequest) (*TradeRefundResponse, error)
	UpdateTradeRefundStockin(context.Context, *TradeRefundStockinRequest) (*TradeRefundStockinResponse, error)
	mustEmbedUnimplementedTradeRefundAggControllerServer()
}

// UnimplementedTradeRefundAggControllerServer must be embedded to have forward compatible implementations.
type UnimplementedTradeRefundAggControllerServer struct {
}

func (UnimplementedTradeRefundAggControllerServer) CreateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) CreateTradeRefund(context.Context, *TradeRefundRequest) (*TradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) CreateTradeRefundStockin(context.Context, *TradeRefundStockinRequest) (*TradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) DestroyKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) DestroyTradeRefund(context.Context, *TradeRefundDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) DestroyTradeRefundStockin(context.Context, *TradeRefundStockinDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) ListKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockListRequest) (*KingdeeSalReturnStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) ListTradeRefund(context.Context, *TradeRefundListRequest) (*TradeRefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) ListTradeRefundStockin(context.Context, *TradeRefundStockinListRequest) (*TradeRefundStockinListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) PartialUpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockPartialUpdateRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) PartialUpdateTradeRefund(context.Context, *TradeRefundPartialUpdateRequest) (*TradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) PartialUpdateTradeRefundStockin(context.Context, *TradeRefundStockinPartialUpdateRequest) (*TradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) RetrieveKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRetrieveRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) RetrieveTradeRefund(context.Context, *TradeRefundRetrieveRequest) (*TradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) RetrieveTradeRefundStockin(context.Context, *TradeRefundStockinRetrieveRequest) (*TradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) UpdateKingdeeSalReturnStock(context.Context, *KingdeeSalReturnStockRequest) (*KingdeeSalReturnStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKingdeeSalReturnStock not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) UpdateTradeRefund(context.Context, *TradeRefundRequest) (*TradeRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTradeRefund not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) UpdateTradeRefundStockin(context.Context, *TradeRefundStockinRequest) (*TradeRefundStockinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTradeRefundStockin not implemented")
}
func (UnimplementedTradeRefundAggControllerServer) mustEmbedUnimplementedTradeRefundAggControllerServer() {
}

// UnsafeTradeRefundAggControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeRefundAggControllerServer will
// result in compilation errors.
type UnsafeTradeRefundAggControllerServer interface {
	mustEmbedUnimplementedTradeRefundAggControllerServer()
}

func RegisterTradeRefundAggControllerServer(s grpc.ServiceRegistrar, srv TradeRefundAggControllerServer) {
	s.RegisterService(&TradeRefundAggController_ServiceDesc, srv)
}

func _TradeRefundAggController_CreateKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CreateKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CreateKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CreateKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_CreateTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CreateTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CreateTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CreateTradeRefund(ctx, req.(*TradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_CreateTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundStockinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).CreateTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_CreateTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).CreateTradeRefundStockin(ctx, req.(*TradeRefundStockinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_DestroyKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).DestroyKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_DestroyKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).DestroyKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_DestroyTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).DestroyTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_DestroyTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).DestroyTradeRefund(ctx, req.(*TradeRefundDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_DestroyTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundStockinDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).DestroyTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_DestroyTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).DestroyTradeRefundStockin(ctx, req.(*TradeRefundStockinDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_ListKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).ListKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_ListKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).ListKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_ListTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).ListTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_ListTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).ListTradeRefund(ctx, req.(*TradeRefundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_ListTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundStockinListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).ListTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_ListTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).ListTradeRefundStockin(ctx, req.(*TradeRefundStockinListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).PartialUpdateKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).PartialUpdateKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_PartialUpdateTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).PartialUpdateTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_PartialUpdateTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).PartialUpdateTradeRefund(ctx, req.(*TradeRefundPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_PartialUpdateTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundStockinPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).PartialUpdateTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_PartialUpdateTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).PartialUpdateTradeRefundStockin(ctx, req.(*TradeRefundStockinPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_RetrieveKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).RetrieveKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_RetrieveKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).RetrieveKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_RetrieveTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).RetrieveTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_RetrieveTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).RetrieveTradeRefund(ctx, req.(*TradeRefundRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_RetrieveTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundStockinRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).RetrieveTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_RetrieveTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).RetrieveTradeRefundStockin(ctx, req.(*TradeRefundStockinRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_UpdateKingdeeSalReturnStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KingdeeSalReturnStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).UpdateKingdeeSalReturnStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_UpdateKingdeeSalReturnStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).UpdateKingdeeSalReturnStock(ctx, req.(*KingdeeSalReturnStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_UpdateTradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).UpdateTradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_UpdateTradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).UpdateTradeRefund(ctx, req.(*TradeRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeRefundAggController_UpdateTradeRefundStockin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRefundStockinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRefundAggControllerServer).UpdateTradeRefundStockin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeRefundAggController_UpdateTradeRefundStockin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRefundAggControllerServer).UpdateTradeRefundStockin(ctx, req.(*TradeRefundStockinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeRefundAggController_ServiceDesc is the grpc.ServiceDesc for TradeRefundAggController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeRefundAggController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kingdee_service.kingdee_ito.TradeRefundAggController",
	HandlerType: (*TradeRefundAggControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_CreateKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "CreateTradeRefund",
			Handler:    _TradeRefundAggController_CreateTradeRefund_Handler,
		},
		{
			MethodName: "CreateTradeRefundStockin",
			Handler:    _TradeRefundAggController_CreateTradeRefundStockin_Handler,
		},
		{
			MethodName: "DestroyKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_DestroyKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "DestroyTradeRefund",
			Handler:    _TradeRefundAggController_DestroyTradeRefund_Handler,
		},
		{
			MethodName: "DestroyTradeRefundStockin",
			Handler:    _TradeRefundAggController_DestroyTradeRefundStockin_Handler,
		},
		{
			MethodName: "ListKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_ListKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "ListTradeRefund",
			Handler:    _TradeRefundAggController_ListTradeRefund_Handler,
		},
		{
			MethodName: "ListTradeRefundStockin",
			Handler:    _TradeRefundAggController_ListTradeRefundStockin_Handler,
		},
		{
			MethodName: "PartialUpdateKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_PartialUpdateKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "PartialUpdateTradeRefund",
			Handler:    _TradeRefundAggController_PartialUpdateTradeRefund_Handler,
		},
		{
			MethodName: "PartialUpdateTradeRefundStockin",
			Handler:    _TradeRefundAggController_PartialUpdateTradeRefundStockin_Handler,
		},
		{
			MethodName: "RetrieveKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_RetrieveKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "RetrieveTradeRefund",
			Handler:    _TradeRefundAggController_RetrieveTradeRefund_Handler,
		},
		{
			MethodName: "RetrieveTradeRefundStockin",
			Handler:    _TradeRefundAggController_RetrieveTradeRefundStockin_Handler,
		},
		{
			MethodName: "UpdateKingdeeSalReturnStock",
			Handler:    _TradeRefundAggController_UpdateKingdeeSalReturnStock_Handler,
		},
		{
			MethodName: "UpdateTradeRefund",
			Handler:    _TradeRefundAggController_UpdateTradeRefund_Handler,
		},
		{
			MethodName: "UpdateTradeRefundStockin",
			Handler:    _TradeRefundAggController_UpdateTradeRefundStockin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kingdee_ito.proto",
}
