// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: kingdee_ito.proto

package pbKingdeeIto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggAliPayBySrcTidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *AggAliPayBySrcTidRequest) Reset() {
	*x = AggAliPayBySrcTidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggAliPayBySrcTidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggAliPayBySrcTidRequest) ProtoMessage() {}

func (x *AggAliPayBySrcTidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggAliPayBySrcTidRequest.ProtoReflect.Descriptor instead.
func (*AggAliPayBySrcTidRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{0}
}

func (x *AggAliPayBySrcTidRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AggAliPayBySrcTidRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type AggAliPayBySrcTidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AggAliPayBySrcTidResponse) Reset() {
	*x = AggAliPayBySrcTidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggAliPayBySrcTidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggAliPayBySrcTidResponse) ProtoMessage() {}

func (x *AggAliPayBySrcTidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggAliPayBySrcTidResponse.ProtoReflect.Descriptor instead.
func (*AggAliPayBySrcTidResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{1}
}

func (x *AggAliPayBySrcTidResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggAliPayBySrcTidResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggAliPayBySrcTidResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AggParamsTradeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreateName    *string `protobuf:"bytes,2,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	ConfigNo      *string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3,oneof" json:"config_no,omitempty"`
	ConfigName    *string `protobuf:"bytes,4,opt,name=config_name,json=configName,proto3,oneof" json:"config_name,omitempty"`
	AggType       *int32  `protobuf:"varint,5,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	ChannelDim    *int32  `protobuf:"varint,6,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	TimeDim       *int32  `protobuf:"varint,7,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	MonthCutoff   *int32  `protobuf:"varint,8,opt,name=month_cutoff,json=monthCutoff,proto3,oneof" json:"month_cutoff,omitempty"`
	OrganizeNo    *string `protobuf:"bytes,9,opt,name=organize_no,json=organizeNo,proto3,oneof" json:"organize_no,omitempty"`
	OrganizeName  *string `protobuf:"bytes,10,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	ShopNo        *string `protobuf:"bytes,11,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName      *string `protobuf:"bytes,12,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo   *string `protobuf:"bytes,13,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName *string `protobuf:"bytes,14,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	AggDiscount   *int32  `protobuf:"varint,15,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
}

func (x *AggParamsTradeCreateRequest) Reset() {
	*x = AggParamsTradeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeCreateRequest) ProtoMessage() {}

func (x *AggParamsTradeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeCreateRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{2}
}

func (x *AggParamsTradeCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetConfigNo() string {
	if x != nil && x.ConfigNo != nil {
		return *x.ConfigNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetConfigName() string {
	if x != nil && x.ConfigName != nil {
		return *x.ConfigName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetMonthCutoff() int32 {
	if x != nil && x.MonthCutoff != nil {
		return *x.MonthCutoff
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetOrganizeNo() string {
	if x != nil && x.OrganizeNo != nil {
		return *x.OrganizeNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

type AggParamsTradeDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AggParamsTradeDestroyRequest) Reset() {
	*x = AggParamsTradeDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeDestroyRequest) ProtoMessage() {}

func (x *AggParamsTradeDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeDestroyRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{3}
}

func (x *AggParamsTradeDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AggParamsTradeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *AggParamsTradeListRequest) Reset() {
	*x = AggParamsTradeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeListRequest) ProtoMessage() {}

func (x *AggParamsTradeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeListRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{4}
}

func (x *AggParamsTradeListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *AggParamsTradeListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type AggParamsTradeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AggParamsTradeResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AggParamsTradeListResponse) Reset() {
	*x = AggParamsTradeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeListResponse) ProtoMessage() {}

func (x *AggParamsTradeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeListResponse.ProtoReflect.Descriptor instead.
func (*AggParamsTradeListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{5}
}

func (x *AggParamsTradeListResponse) GetResults() []*AggParamsTradeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AggParamsTradeListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AggParamsTradeNextNoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AggParamsTradeNextNoRequest) Reset() {
	*x = AggParamsTradeNextNoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeNextNoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeNextNoRequest) ProtoMessage() {}

func (x *AggParamsTradeNextNoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeNextNoRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeNextNoRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{6}
}

type AggParamsTradeNextNoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextNo string `protobuf:"bytes,1,opt,name=next_no,json=nextNo,proto3" json:"next_no,omitempty"`
}

func (x *AggParamsTradeNextNoResponse) Reset() {
	*x = AggParamsTradeNextNoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeNextNoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeNextNoResponse) ProtoMessage() {}

func (x *AggParamsTradeNextNoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeNextNoResponse.ProtoReflect.Descriptor instead.
func (*AggParamsTradeNextNoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{7}
}

func (x *AggParamsTradeNextNoResponse) GetNextNo() string {
	if x != nil {
		return x.NextNo
	}
	return ""
}

type AggParamsTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	AggTypeName    *string `protobuf:"bytes,2,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDimName *string `protobuf:"bytes,3,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDimName    *string `protobuf:"bytes,4,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	CreateTime     *string `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime     *string `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	CreateName     *string `protobuf:"bytes,7,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	ConfigNo       *string `protobuf:"bytes,8,opt,name=config_no,json=configNo,proto3,oneof" json:"config_no,omitempty"`
	ConfigName     *string `protobuf:"bytes,9,opt,name=config_name,json=configName,proto3,oneof" json:"config_name,omitempty"`
	AggType        *int32  `protobuf:"varint,10,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	ChannelDim     *int32  `protobuf:"varint,11,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	TimeDim        *int32  `protobuf:"varint,12,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	MonthCutoff    *int32  `protobuf:"varint,13,opt,name=month_cutoff,json=monthCutoff,proto3,oneof" json:"month_cutoff,omitempty"`
	OrganizeNo     *string `protobuf:"bytes,14,opt,name=organize_no,json=organizeNo,proto3,oneof" json:"organize_no,omitempty"`
	OrganizeName   *string `protobuf:"bytes,15,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	ShopNo         *string `protobuf:"bytes,16,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName       *string `protobuf:"bytes,17,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo    *string `protobuf:"bytes,18,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName  *string `protobuf:"bytes,19,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	AggDiscount    *int32  `protobuf:"varint,20,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
}

func (x *AggParamsTradeResponse) Reset() {
	*x = AggParamsTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeResponse) ProtoMessage() {}

func (x *AggParamsTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeResponse.ProtoReflect.Descriptor instead.
func (*AggParamsTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{8}
}

func (x *AggParamsTradeResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AggParamsTradeResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggParamsTradeResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggParamsTradeResponse) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetConfigNo() string {
	if x != nil && x.ConfigNo != nil {
		return *x.ConfigNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetConfigName() string {
	if x != nil && x.ConfigName != nil {
		return *x.ConfigName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *AggParamsTradeResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *AggParamsTradeResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *AggParamsTradeResponse) GetMonthCutoff() int32 {
	if x != nil && x.MonthCutoff != nil {
		return *x.MonthCutoff
	}
	return 0
}

func (x *AggParamsTradeResponse) GetOrganizeNo() string {
	if x != nil && x.OrganizeNo != nil {
		return *x.OrganizeNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

type AggParamsTradeRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AggParamsTradeRetrieveRequest) Reset() {
	*x = AggParamsTradeRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeRetrieveRequest) ProtoMessage() {}

func (x *AggParamsTradeRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeRetrieveRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{9}
}

func (x *AggParamsTradeRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AggParamsTradeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateName           *string  `protobuf:"bytes,3,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	ConfigNo             *string  `protobuf:"bytes,4,opt,name=config_no,json=configNo,proto3,oneof" json:"config_no,omitempty"`
	ConfigName           *string  `protobuf:"bytes,5,opt,name=config_name,json=configName,proto3,oneof" json:"config_name,omitempty"`
	AggType              *int32   `protobuf:"varint,6,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	ChannelDim           *int32   `protobuf:"varint,7,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	TimeDim              *int32   `protobuf:"varint,8,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	MonthCutoff          *int32   `protobuf:"varint,9,opt,name=month_cutoff,json=monthCutoff,proto3,oneof" json:"month_cutoff,omitempty"`
	OrganizeNo           *string  `protobuf:"bytes,10,opt,name=organize_no,json=organizeNo,proto3,oneof" json:"organize_no,omitempty"`
	OrganizeName         *string  `protobuf:"bytes,11,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	ShopNo               *string  `protobuf:"bytes,12,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *string  `protobuf:"bytes,13,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo          *string  `protobuf:"bytes,14,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string  `protobuf:"bytes,15,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	AggDiscount          *int32   `protobuf:"varint,16,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
}

func (x *AggParamsTradeUpdateRequest) Reset() {
	*x = AggParamsTradeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeUpdateRequest) ProtoMessage() {}

func (x *AggParamsTradeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeUpdateRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{10}
}

func (x *AggParamsTradeUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *AggParamsTradeUpdateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetConfigNo() string {
	if x != nil && x.ConfigNo != nil {
		return *x.ConfigNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetConfigName() string {
	if x != nil && x.ConfigName != nil {
		return *x.ConfigName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetMonthCutoff() int32 {
	if x != nil && x.MonthCutoff != nil {
		return *x.MonthCutoff
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetOrganizeNo() string {
	if x != nil && x.OrganizeNo != nil {
		return *x.OrganizeNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

type AggPushStatusCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AggPushStatusCountRequest) Reset() {
	*x = AggPushStatusCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggPushStatusCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggPushStatusCountRequest) ProtoMessage() {}

func (x *AggPushStatusCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggPushStatusCountRequest.ProtoReflect.Descriptor instead.
func (*AggPushStatusCountRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{11}
}

type AggPushStatusCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsignWaitPush   int32 `protobuf:"varint,1,opt,name=consign_wait_push,json=consignWaitPush,proto3" json:"consign_wait_push,omitempty"`
	ConsignFailedPush int32 `protobuf:"varint,2,opt,name=consign_failed_push,json=consignFailedPush,proto3" json:"consign_failed_push,omitempty"`
	PayWaitPush       int32 `protobuf:"varint,3,opt,name=pay_wait_push,json=payWaitPush,proto3" json:"pay_wait_push,omitempty"`
	PayFailedPush     int32 `protobuf:"varint,4,opt,name=pay_failed_push,json=payFailedPush,proto3" json:"pay_failed_push,omitempty"`
}

func (x *AggPushStatusCountResponse) Reset() {
	*x = AggPushStatusCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggPushStatusCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggPushStatusCountResponse) ProtoMessage() {}

func (x *AggPushStatusCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggPushStatusCountResponse.ProtoReflect.Descriptor instead.
func (*AggPushStatusCountResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{12}
}

func (x *AggPushStatusCountResponse) GetConsignWaitPush() int32 {
	if x != nil {
		return x.ConsignWaitPush
	}
	return 0
}

func (x *AggPushStatusCountResponse) GetConsignFailedPush() int32 {
	if x != nil {
		return x.ConsignFailedPush
	}
	return 0
}

func (x *AggPushStatusCountResponse) GetPayWaitPush() int32 {
	if x != nil {
		return x.PayWaitPush
	}
	return 0
}

func (x *AggPushStatusCountResponse) GetPayFailedPush() int32 {
	if x != nil {
		return x.PayFailedPush
	}
	return 0
}

type AggTradeByMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ConfigNo  string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	AggPeriod string `protobuf:"bytes,4,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
}

func (x *AggTradeByMonthRequest) Reset() {
	*x = AggTradeByMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTradeByMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTradeByMonthRequest) ProtoMessage() {}

func (x *AggTradeByMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTradeByMonthRequest.ProtoReflect.Descriptor instead.
func (*AggTradeByMonthRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{13}
}

func (x *AggTradeByMonthRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AggTradeByMonthRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *AggTradeByMonthRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

type AggTradeByMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AggTradeByMonthResponse) Reset() {
	*x = AggTradeByMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTradeByMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTradeByMonthResponse) ProtoMessage() {}

func (x *AggTradeByMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTradeByMonthResponse.ProtoReflect.Descriptor instead.
func (*AggTradeByMonthResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{14}
}

func (x *AggTradeByMonthResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTradeByMonthResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTradeByMonthResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AggTradeByMonthSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggPeriod string `protobuf:"bytes,1,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	ConfigNo  string `protobuf:"bytes,2,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *AggTradeByMonthSyncRequest) Reset() {
	*x = AggTradeByMonthSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTradeByMonthSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTradeByMonthSyncRequest) ProtoMessage() {}

func (x *AggTradeByMonthSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTradeByMonthSyncRequest.ProtoReflect.Descriptor instead.
func (*AggTradeByMonthSyncRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{15}
}

func (x *AggTradeByMonthSyncRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *AggTradeByMonthSyncRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type AggTradeByMonthSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AggTradeByMonthSyncResponse) Reset() {
	*x = AggTradeByMonthSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTradeByMonthSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTradeByMonthSyncResponse) ProtoMessage() {}

func (x *AggTradeByMonthSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTradeByMonthSyncResponse.ProtoReflect.Descriptor instead.
func (*AggTradeByMonthSyncResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{16}
}

func (x *AggTradeByMonthSyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTradeByMonthSyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTradeByMonthSyncResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AggTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AggTradeRefundRequest) Reset() {
	*x = AggTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTradeRefundRequest) ProtoMessage() {}

func (x *AggTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*AggTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{17}
}

type AggTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AggTradeRefundResponse) Reset() {
	*x = AggTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTradeRefundResponse) ProtoMessage() {}

func (x *AggTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*AggTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{18}
}

func (x *AggTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AggTransByMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggPeriod string `protobuf:"bytes,1,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
}

func (x *AggTransByMonthRequest) Reset() {
	*x = AggTransByMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransByMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransByMonthRequest) ProtoMessage() {}

func (x *AggTransByMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransByMonthRequest.ProtoReflect.Descriptor instead.
func (*AggTransByMonthRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{19}
}

func (x *AggTransByMonthRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

type AggTransByMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AggTransByMonthResponse) Reset() {
	*x = AggTransByMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransByMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransByMonthResponse) ProtoMessage() {}

func (x *AggTransByMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransByMonthResponse.ProtoReflect.Descriptor instead.
func (*AggTransByMonthResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{20}
}

func (x *AggTransByMonthResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTransByMonthResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTransByMonthResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AggTransPushStockInToKingdeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinAggNoList []string `protobuf:"bytes,1,rep,name=stockin_agg_no_list,json=stockinAggNoList,proto3" json:"stockin_agg_no_list,omitempty"`
}

func (x *AggTransPushStockInToKingdeeRequest) Reset() {
	*x = AggTransPushStockInToKingdeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransPushStockInToKingdeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransPushStockInToKingdeeRequest) ProtoMessage() {}

func (x *AggTransPushStockInToKingdeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransPushStockInToKingdeeRequest.ProtoReflect.Descriptor instead.
func (*AggTransPushStockInToKingdeeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{21}
}

func (x *AggTransPushStockInToKingdeeRequest) GetStockinAggNoList() []string {
	if x != nil {
		return x.StockinAggNoList
	}
	return nil
}

type AggTransPushStockInToKingdeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *AggTransPushStockInToKingdeeResponse) Reset() {
	*x = AggTransPushStockInToKingdeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransPushStockInToKingdeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransPushStockInToKingdeeResponse) ProtoMessage() {}

func (x *AggTransPushStockInToKingdeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransPushStockInToKingdeeResponse.ProtoReflect.Descriptor instead.
func (*AggTransPushStockInToKingdeeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{22}
}

func (x *AggTransPushStockInToKingdeeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTransPushStockInToKingdeeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTransPushStockInToKingdeeResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type AggTransPushStockOutToKingdeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockoutAggNoList []string `protobuf:"bytes,1,rep,name=stockout_agg_no_list,json=stockoutAggNoList,proto3" json:"stockout_agg_no_list,omitempty"`
}

func (x *AggTransPushStockOutToKingdeeRequest) Reset() {
	*x = AggTransPushStockOutToKingdeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransPushStockOutToKingdeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransPushStockOutToKingdeeRequest) ProtoMessage() {}

func (x *AggTransPushStockOutToKingdeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransPushStockOutToKingdeeRequest.ProtoReflect.Descriptor instead.
func (*AggTransPushStockOutToKingdeeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{23}
}

func (x *AggTransPushStockOutToKingdeeRequest) GetStockoutAggNoList() []string {
	if x != nil {
		return x.StockoutAggNoList
	}
	return nil
}

type AggTransPushStockOutToKingdeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *AggTransPushStockOutToKingdeeResponse) Reset() {
	*x = AggTransPushStockOutToKingdeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransPushStockOutToKingdeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransPushStockOutToKingdeeResponse) ProtoMessage() {}

func (x *AggTransPushStockOutToKingdeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransPushStockOutToKingdeeResponse.ProtoReflect.Descriptor instead.
func (*AggTransPushStockOutToKingdeeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{24}
}

func (x *AggTransPushStockOutToKingdeeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTransPushStockOutToKingdeeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTransPushStockOutToKingdeeResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type AggTransPushToKingdeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *AggTransPushToKingdeeRequest) Reset() {
	*x = AggTransPushToKingdeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransPushToKingdeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransPushToKingdeeRequest) ProtoMessage() {}

func (x *AggTransPushToKingdeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransPushToKingdeeRequest.ProtoReflect.Descriptor instead.
func (*AggTransPushToKingdeeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{25}
}

func (x *AggTransPushToKingdeeRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type AggTransPushToKingdeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *AggTransPushToKingdeeResponse) Reset() {
	*x = AggTransPushToKingdeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransPushToKingdeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransPushToKingdeeResponse) ProtoMessage() {}

func (x *AggTransPushToKingdeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransPushToKingdeeResponse.ProtoReflect.Descriptor instead.
func (*AggTransPushToKingdeeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{26}
}

func (x *AggTransPushToKingdeeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTransPushToKingdeeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTransPushToKingdeeResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type AggTransStockOutInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *AggTransStockOutInRequest) Reset() {
	*x = AggTransStockOutInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransStockOutInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransStockOutInRequest) ProtoMessage() {}

func (x *AggTransStockOutInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransStockOutInRequest.ProtoReflect.Descriptor instead.
func (*AggTransStockOutInRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{27}
}

func (x *AggTransStockOutInRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type AggTransStockOutInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *AggTransStockOutInResponse) Reset() {
	*x = AggTransStockOutInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransStockOutInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransStockOutInResponse) ProtoMessage() {}

func (x *AggTransStockOutInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransStockOutInResponse.ProtoReflect.Descriptor instead.
func (*AggTransStockOutInResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{28}
}

func (x *AggTransStockOutInResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AggTransStockOutInResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AggTransStockOutInResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type AggTransferListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *AggTransferListRequest) Reset() {
	*x = AggTransferListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferListRequest) ProtoMessage() {}

func (x *AggTransferListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferListRequest.ProtoReflect.Descriptor instead.
func (*AggTransferListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{29}
}

func (x *AggTransferListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *AggTransferListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type AggTransferOrderEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime     *string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime     *string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FMATERIALID    *string  `protobuf:"bytes,4,opt,name=FMATERIALID,proto3,oneof" json:"FMATERIALID,omitempty"`
	FCMKBARCODE    *string  `protobuf:"bytes,5,opt,name=FCMKBARCODE,proto3,oneof" json:"FCMKBARCODE,omitempty"`
	FUNITID        *string  `protobuf:"bytes,6,opt,name=FUNITID,proto3,oneof" json:"FUNITID,omitempty"`
	FQty           *float64 `protobuf:"fixed64,7,opt,name=FQty,proto3,oneof" json:"FQty,omitempty"`
	FBaseUnitID    *string  `protobuf:"bytes,8,opt,name=FBaseUnitID,proto3,oneof" json:"FBaseUnitID,omitempty"`
	FStockOrgId    *string  `protobuf:"bytes,9,opt,name=FStockOrgId,proto3,oneof" json:"FStockOrgId,omitempty"`
	FStockId       *string  `protobuf:"bytes,10,opt,name=FStockId,proto3,oneof" json:"FStockId,omitempty"`
	FStockOrgInId  *string  `protobuf:"bytes,11,opt,name=FStockOrgInId,proto3,oneof" json:"FStockOrgInId,omitempty"`
	FStockInId     *string  `protobuf:"bytes,12,opt,name=FStockInId,proto3,oneof" json:"FStockInId,omitempty"`
	FOwnerTypeId   *string  `protobuf:"bytes,13,opt,name=FOwnerTypeId,proto3,oneof" json:"FOwnerTypeId,omitempty"`
	FOwnerId       *string  `protobuf:"bytes,14,opt,name=FOwnerId,proto3,oneof" json:"FOwnerId,omitempty"`
	FOwnerTypeInId *string  `protobuf:"bytes,15,opt,name=FOwnerTypeInId,proto3,oneof" json:"FOwnerTypeInId,omitempty"`
	FOwnerInId     *string  `protobuf:"bytes,16,opt,name=FOwnerInId,proto3,oneof" json:"FOwnerInId,omitempty"`
	GoodsName      *string  `protobuf:"bytes,17,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
}

func (x *AggTransferOrderEntryResponse) Reset() {
	*x = AggTransferOrderEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferOrderEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferOrderEntryResponse) ProtoMessage() {}

func (x *AggTransferOrderEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferOrderEntryResponse.ProtoReflect.Descriptor instead.
func (*AggTransferOrderEntryResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{30}
}

func (x *AggTransferOrderEntryResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFMATERIALID() string {
	if x != nil && x.FMATERIALID != nil {
		return *x.FMATERIALID
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFCMKBARCODE() string {
	if x != nil && x.FCMKBARCODE != nil {
		return *x.FCMKBARCODE
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFUNITID() string {
	if x != nil && x.FUNITID != nil {
		return *x.FUNITID
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFQty() float64 {
	if x != nil && x.FQty != nil {
		return *x.FQty
	}
	return 0
}

func (x *AggTransferOrderEntryResponse) GetFBaseUnitID() string {
	if x != nil && x.FBaseUnitID != nil {
		return *x.FBaseUnitID
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFStockOrgId() string {
	if x != nil && x.FStockOrgId != nil {
		return *x.FStockOrgId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFStockId() string {
	if x != nil && x.FStockId != nil {
		return *x.FStockId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFStockOrgInId() string {
	if x != nil && x.FStockOrgInId != nil {
		return *x.FStockOrgInId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFStockInId() string {
	if x != nil && x.FStockInId != nil {
		return *x.FStockInId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFOwnerTypeId() string {
	if x != nil && x.FOwnerTypeId != nil {
		return *x.FOwnerTypeId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFOwnerId() string {
	if x != nil && x.FOwnerId != nil {
		return *x.FOwnerId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFOwnerTypeInId() string {
	if x != nil && x.FOwnerTypeInId != nil {
		return *x.FOwnerTypeInId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetFOwnerInId() string {
	if x != nil && x.FOwnerInId != nil {
		return *x.FOwnerInId
	}
	return ""
}

func (x *AggTransferOrderEntryResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

type AggTransferOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AggTransferOrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AggTransferOrderListResponse) Reset() {
	*x = AggTransferOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferOrderListResponse) ProtoMessage() {}

func (x *AggTransferOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferOrderListResponse.ProtoReflect.Descriptor instead.
func (*AggTransferOrderListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{31}
}

func (x *AggTransferOrderListResponse) GetResults() []*AggTransferOrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AggTransferOrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AggTransferOrderModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FEntity            []*AggTransferOrderEntryResponse `protobuf:"bytes,2,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	CreateTime         *string                          `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime         *string                          `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FBillTypeID        *string                          `protobuf:"bytes,5,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FBillNo            string                           `protobuf:"bytes,6,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FDate              string                           `protobuf:"bytes,7,opt,name=FDate,proto3" json:"FDate,omitempty"`
	FAPPORGID          *string                          `protobuf:"bytes,8,opt,name=FAPPORGID,proto3,oneof" json:"FAPPORGID,omitempty"`
	FTRANSTYPE         *string                          `protobuf:"bytes,9,opt,name=FTRANSTYPE,proto3,oneof" json:"FTRANSTYPE,omitempty"`
	FOwnerTypeIdHead   *string                          `protobuf:"bytes,10,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
	FOwnerTypeInIdHead *string                          `protobuf:"bytes,11,opt,name=FOwnerTypeInIdHead,proto3,oneof" json:"FOwnerTypeInIdHead,omitempty"`
	FTransferDirect    *string                          `protobuf:"bytes,12,opt,name=FTransferDirect,proto3,oneof" json:"FTransferDirect,omitempty"`
	FRemarks           *string                          `protobuf:"bytes,13,opt,name=FRemarks,proto3,oneof" json:"FRemarks,omitempty"`
}

func (x *AggTransferOrderModelResponse) Reset() {
	*x = AggTransferOrderModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferOrderModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferOrderModelResponse) ProtoMessage() {}

func (x *AggTransferOrderModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferOrderModelResponse.ProtoReflect.Descriptor instead.
func (*AggTransferOrderModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{32}
}

func (x *AggTransferOrderModelResponse) GetFEntity() []*AggTransferOrderEntryResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *AggTransferOrderModelResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFBillTypeID() string {
	if x != nil && x.FBillTypeID != nil {
		return *x.FBillTypeID
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFAPPORGID() string {
	if x != nil && x.FAPPORGID != nil {
		return *x.FAPPORGID
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFTRANSTYPE() string {
	if x != nil && x.FTRANSTYPE != nil {
		return *x.FTRANSTYPE
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFOwnerTypeInIdHead() string {
	if x != nil && x.FOwnerTypeInIdHead != nil {
		return *x.FOwnerTypeInIdHead
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFTransferDirect() string {
	if x != nil && x.FTransferDirect != nil {
		return *x.FTransferDirect
	}
	return ""
}

func (x *AggTransferOrderModelResponse) GetFRemarks() string {
	if x != nil && x.FRemarks != nil {
		return *x.FRemarks
	}
	return ""
}

type AggTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WdtAggTransStatusName *string                                `protobuf:"bytes,3,opt,name=wdt_agg_trans_status_name,json=wdtAggTransStatusName,proto3,oneof" json:"wdt_agg_trans_status_name,omitempty"`
	Model                 *AggTransferOrderModelResponse         `protobuf:"bytes,4,opt,name=Model,proto3,oneof" json:"Model,omitempty"`
	StockInEntities       []*AggTransferStockInEntitiesResponse  `protobuf:"bytes,5,rep,name=stock_in_entities,json=stockInEntities,proto3" json:"stock_in_entities,omitempty"`
	StockOutEntities      []*AggTransferStockOutEntitiesResponse `protobuf:"bytes,6,rep,name=stock_out_entities,json=stockOutEntities,proto3" json:"stock_out_entities,omitempty"`
	CreateTime            *string                                `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string                                `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	AggNo                 *string                                `protobuf:"bytes,9,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName               *string                                `protobuf:"bytes,10,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	AggPeriod             *string                                `protobuf:"bytes,11,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	KingdeeNo             *string                                `protobuf:"bytes,12,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	KingdeePushTime       *string                                `protobuf:"bytes,13,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	PushKdStatus          *int32                                 `protobuf:"varint,14,opt,name=push_kd_status,json=pushKdStatus,proto3,oneof" json:"push_kd_status,omitempty"`
	FailureReason         *string                                `protobuf:"bytes,15,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason          *string                                `protobuf:"bytes,16,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	WdtAggTransStatus     *int32                                 `protobuf:"varint,17,opt,name=wdt_agg_trans_status,json=wdtAggTransStatus,proto3,oneof" json:"wdt_agg_trans_status,omitempty"`
	NeedUpDateFields      *string                                `protobuf:"bytes,18,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string                                `protobuf:"bytes,19,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	AggStockOutNo         *string                                `protobuf:"bytes,20,opt,name=agg_stock_out_no,json=aggStockOutNo,proto3,oneof" json:"agg_stock_out_no,omitempty"`
	AggStockOutName       *string                                `protobuf:"bytes,21,opt,name=agg_stock_out_name,json=aggStockOutName,proto3,oneof" json:"agg_stock_out_name,omitempty"`
	AggStockInNo          *string                                `protobuf:"bytes,22,opt,name=agg_stock_in_no,json=aggStockInNo,proto3,oneof" json:"agg_stock_in_no,omitempty"`
	AggStockInName        *string                                `protobuf:"bytes,23,opt,name=agg_stock_in_name,json=aggStockInName,proto3,oneof" json:"agg_stock_in_name,omitempty"`
	AggTransferNo         *string                                `protobuf:"bytes,24,opt,name=agg_transfer_no,json=aggTransferNo,proto3,oneof" json:"agg_transfer_no,omitempty"`
	AggApiNo              *string                                `protobuf:"bytes,25,opt,name=agg_api_no,json=aggApiNo,proto3,oneof" json:"agg_api_no,omitempty"`
	AggTransferCount      *int32                                 `protobuf:"varint,26,opt,name=agg_transfer_count,json=aggTransferCount,proto3,oneof" json:"agg_transfer_count,omitempty"`
	AggGoodsTypeCount     *int32                                 `protobuf:"varint,27,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount         *int32                                 `protobuf:"varint,28,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggStockOutList       *string                                `protobuf:"bytes,29,opt,name=agg_stock_out_list,json=aggStockOutList,proto3,oneof" json:"agg_stock_out_list,omitempty"`
	AggStockInList        *string                                `protobuf:"bytes,30,opt,name=agg_stock_in_list,json=aggStockInList,proto3,oneof" json:"agg_stock_in_list,omitempty"`
	PushKdStatusName      *string                                `protobuf:"bytes,31,opt,name=push_kd_status_name,json=pushKdStatusName,proto3,oneof" json:"push_kd_status_name,omitempty"`
	AggStockInCount       int32                                  `protobuf:"varint,32,opt,name=agg_stock_in_count,json=aggStockInCount,proto3" json:"agg_stock_in_count,omitempty"`
	AggStockOutCount      int32                                  `protobuf:"varint,33,opt,name=agg_stock_out_count,json=aggStockOutCount,proto3" json:"agg_stock_out_count,omitempty"`
}

func (x *AggTransferOrderResponse) Reset() {
	*x = AggTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferOrderResponse) ProtoMessage() {}

func (x *AggTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*AggTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{33}
}

func (x *AggTransferOrderResponse) GetWdtAggTransStatusName() string {
	if x != nil && x.WdtAggTransStatusName != nil {
		return *x.WdtAggTransStatusName
	}
	return ""
}

func (x *AggTransferOrderResponse) GetModel() *AggTransferOrderModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *AggTransferOrderResponse) GetStockInEntities() []*AggTransferStockInEntitiesResponse {
	if x != nil {
		return x.StockInEntities
	}
	return nil
}

func (x *AggTransferOrderResponse) GetStockOutEntities() []*AggTransferStockOutEntitiesResponse {
	if x != nil {
		return x.StockOutEntities
	}
	return nil
}

func (x *AggTransferOrderResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferOrderResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *AggTransferOrderResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *AggTransferOrderResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *AggTransferOrderResponse) GetPushKdStatus() int32 {
	if x != nil && x.PushKdStatus != nil {
		return *x.PushKdStatus
	}
	return 0
}

func (x *AggTransferOrderResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *AggTransferOrderResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *AggTransferOrderResponse) GetWdtAggTransStatus() int32 {
	if x != nil && x.WdtAggTransStatus != nil {
		return *x.WdtAggTransStatus
	}
	return 0
}

func (x *AggTransferOrderResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *AggTransferOrderResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggStockOutNo() string {
	if x != nil && x.AggStockOutNo != nil {
		return *x.AggStockOutNo
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggStockOutName() string {
	if x != nil && x.AggStockOutName != nil {
		return *x.AggStockOutName
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggStockInNo() string {
	if x != nil && x.AggStockInNo != nil {
		return *x.AggStockInNo
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggStockInName() string {
	if x != nil && x.AggStockInName != nil {
		return *x.AggStockInName
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggTransferNo() string {
	if x != nil && x.AggTransferNo != nil {
		return *x.AggTransferNo
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggApiNo() string {
	if x != nil && x.AggApiNo != nil {
		return *x.AggApiNo
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggTransferCount() int32 {
	if x != nil && x.AggTransferCount != nil {
		return *x.AggTransferCount
	}
	return 0
}

func (x *AggTransferOrderResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *AggTransferOrderResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *AggTransferOrderResponse) GetAggStockOutList() string {
	if x != nil && x.AggStockOutList != nil {
		return *x.AggStockOutList
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggStockInList() string {
	if x != nil && x.AggStockInList != nil {
		return *x.AggStockInList
	}
	return ""
}

func (x *AggTransferOrderResponse) GetPushKdStatusName() string {
	if x != nil && x.PushKdStatusName != nil {
		return *x.PushKdStatusName
	}
	return ""
}

func (x *AggTransferOrderResponse) GetAggStockInCount() int32 {
	if x != nil {
		return x.AggStockInCount
	}
	return 0
}

func (x *AggTransferOrderResponse) GetAggStockOutCount() int32 {
	if x != nil {
		return x.AggStockOutCount
	}
	return 0
}

type AggTransferStockInEntitiesEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime       *string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime       *string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FMaterialID      *string  `protobuf:"bytes,4,opt,name=FMaterialID,proto3,oneof" json:"FMaterialID,omitempty"`
	SpecNo           *string  `protobuf:"bytes,5,opt,name=SpecNo,proto3,oneof" json:"SpecNo,omitempty"`
	FQty             *float64 `protobuf:"fixed64,6,opt,name=FQty,proto3,oneof" json:"FQty,omitempty"`
	FUnitID          *string  `protobuf:"bytes,7,opt,name=FUnitID,proto3,oneof" json:"FUnitID,omitempty"`
	FOwnerTypeOutID  *string  `protobuf:"bytes,8,opt,name=FOwnerTypeOutID,proto3,oneof" json:"FOwnerTypeOutID,omitempty"`
	FOwnerOutID      *string  `protobuf:"bytes,9,opt,name=FOwnerOutID,proto3,oneof" json:"FOwnerOutID,omitempty"`
	FOwnerTypeID     *string  `protobuf:"bytes,10,opt,name=FOwnerTypeID,proto3,oneof" json:"FOwnerTypeID,omitempty"`
	FOwnerID         *string  `protobuf:"bytes,11,opt,name=FOwnerID,proto3,oneof" json:"FOwnerID,omitempty"`
	FKeeperTypeOutID *string  `protobuf:"bytes,12,opt,name=FKeeperTypeOutID,proto3,oneof" json:"FKeeperTypeOutID,omitempty"`
	FKeeperOutID     *string  `protobuf:"bytes,13,opt,name=FKeeperOutID,proto3,oneof" json:"FKeeperOutID,omitempty"`
	FSrcMaterialId   *string  `protobuf:"bytes,14,opt,name=FSrcMaterialId,proto3,oneof" json:"FSrcMaterialId,omitempty"`
	FBaseUnitID      *string  `protobuf:"bytes,15,opt,name=FBaseUnitID,proto3,oneof" json:"FBaseUnitID,omitempty"`
	FKeeperTypeID    *string  `protobuf:"bytes,16,opt,name=FKeeperTypeID,proto3,oneof" json:"FKeeperTypeID,omitempty"`
	FKeeperID        *string  `protobuf:"bytes,17,opt,name=FKeeperID,proto3,oneof" json:"FKeeperID,omitempty"`
	GoodsName        *string  `protobuf:"bytes,18,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
}

func (x *AggTransferStockInEntitiesEntryResponse) Reset() {
	*x = AggTransferStockInEntitiesEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferStockInEntitiesEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferStockInEntitiesEntryResponse) ProtoMessage() {}

func (x *AggTransferStockInEntitiesEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferStockInEntitiesEntryResponse.ProtoReflect.Descriptor instead.
func (*AggTransferStockInEntitiesEntryResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{34}
}

func (x *AggTransferStockInEntitiesEntryResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFMaterialID() string {
	if x != nil && x.FMaterialID != nil {
		return *x.FMaterialID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFQty() float64 {
	if x != nil && x.FQty != nil {
		return *x.FQty
	}
	return 0
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFUnitID() string {
	if x != nil && x.FUnitID != nil {
		return *x.FUnitID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFOwnerTypeOutID() string {
	if x != nil && x.FOwnerTypeOutID != nil {
		return *x.FOwnerTypeOutID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFOwnerOutID() string {
	if x != nil && x.FOwnerOutID != nil {
		return *x.FOwnerOutID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFOwnerTypeID() string {
	if x != nil && x.FOwnerTypeID != nil {
		return *x.FOwnerTypeID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFOwnerID() string {
	if x != nil && x.FOwnerID != nil {
		return *x.FOwnerID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFKeeperTypeOutID() string {
	if x != nil && x.FKeeperTypeOutID != nil {
		return *x.FKeeperTypeOutID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFKeeperOutID() string {
	if x != nil && x.FKeeperOutID != nil {
		return *x.FKeeperOutID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFSrcMaterialId() string {
	if x != nil && x.FSrcMaterialId != nil {
		return *x.FSrcMaterialId
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFBaseUnitID() string {
	if x != nil && x.FBaseUnitID != nil {
		return *x.FBaseUnitID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFKeeperTypeID() string {
	if x != nil && x.FKeeperTypeID != nil {
		return *x.FKeeperTypeID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetFKeeperID() string {
	if x != nil && x.FKeeperID != nil {
		return *x.FKeeperID
	}
	return ""
}

func (x *AggTransferStockInEntitiesEntryResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

type AggTransferStockInEntitiesModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime          *string                                    `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                                    `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FBillTypeID         *string                                    `protobuf:"bytes,5,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FBillNo             string                                     `protobuf:"bytes,6,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FDate               string                                     `protobuf:"bytes,7,opt,name=FDate,proto3" json:"FDate,omitempty"`
	FBizType            *string                                    `protobuf:"bytes,8,opt,name=FBizType,proto3,oneof" json:"FBizType,omitempty"`
	FTransferDirect     *string                                    `protobuf:"bytes,9,opt,name=FTransferDirect,proto3,oneof" json:"FTransferDirect,omitempty"`
	FTransferMode       *string                                    `protobuf:"bytes,10,opt,name=FTransferMode,proto3,oneof" json:"FTransferMode,omitempty"`
	FStockOrgID         *string                                    `protobuf:"bytes,11,opt,name=FStockOrgID,proto3,oneof" json:"FStockOrgID,omitempty"`
	FOwnerTypeIdHead    *string                                    `protobuf:"bytes,12,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
	FStockOutOrgID      *string                                    `protobuf:"bytes,13,opt,name=FStockOutOrgID,proto3,oneof" json:"FStockOutOrgID,omitempty"`
	FOwnerTypeOutIdHead *string                                    `protobuf:"bytes,14,opt,name=FOwnerTypeOutIdHead,proto3,oneof" json:"FOwnerTypeOutIdHead,omitempty"`
	FVESTONWAY          *string                                    `protobuf:"bytes,15,opt,name=FVESTONWAY,proto3,oneof" json:"FVESTONWAY,omitempty"`
	FSTKTRSINENTRY      []*AggTransferStockInEntitiesEntryResponse `protobuf:"bytes,16,rep,name=FSTKTRSINENTRY,proto3" json:"FSTKTRSINENTRY,omitempty"`
}

func (x *AggTransferStockInEntitiesModelResponse) Reset() {
	*x = AggTransferStockInEntitiesModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferStockInEntitiesModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferStockInEntitiesModelResponse) ProtoMessage() {}

func (x *AggTransferStockInEntitiesModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferStockInEntitiesModelResponse.ProtoReflect.Descriptor instead.
func (*AggTransferStockInEntitiesModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{35}
}

func (x *AggTransferStockInEntitiesModelResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFBillTypeID() string {
	if x != nil && x.FBillTypeID != nil {
		return *x.FBillTypeID
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFBizType() string {
	if x != nil && x.FBizType != nil {
		return *x.FBizType
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFTransferDirect() string {
	if x != nil && x.FTransferDirect != nil {
		return *x.FTransferDirect
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFTransferMode() string {
	if x != nil && x.FTransferMode != nil {
		return *x.FTransferMode
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFStockOrgID() string {
	if x != nil && x.FStockOrgID != nil {
		return *x.FStockOrgID
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFStockOutOrgID() string {
	if x != nil && x.FStockOutOrgID != nil {
		return *x.FStockOutOrgID
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFOwnerTypeOutIdHead() string {
	if x != nil && x.FOwnerTypeOutIdHead != nil {
		return *x.FOwnerTypeOutIdHead
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFVESTONWAY() string {
	if x != nil && x.FVESTONWAY != nil {
		return *x.FVESTONWAY
	}
	return ""
}

func (x *AggTransferStockInEntitiesModelResponse) GetFSTKTRSINENTRY() []*AggTransferStockInEntitiesEntryResponse {
	if x != nil {
		return x.FSTKTRSINENTRY
	}
	return nil
}

type AggTransferStockInEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model                *AggTransferStockInEntitiesModelResponse `protobuf:"bytes,3,opt,name=Model,proto3,oneof" json:"Model,omitempty"`
	CreateTime           *string                                  `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime           *string                                  `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	AggNo                *string                                  `protobuf:"bytes,6,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName              *string                                  `protobuf:"bytes,7,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	KingdeeNo            *string                                  `protobuf:"bytes,8,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	KingdeePushTime      *string                                  `protobuf:"bytes,9,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	PushKdStatus         *int32                                   `protobuf:"varint,10,opt,name=push_kd_status,json=pushKdStatus,proto3,oneof" json:"push_kd_status,omitempty"`
	FailureReason        *string                                  `protobuf:"bytes,11,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason         *string                                  `protobuf:"bytes,12,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	NeedUpDateFields     *string                                  `protobuf:"bytes,13,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields     *string                                  `protobuf:"bytes,14,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	ToWarehouseNo        *string                                  `protobuf:"bytes,15,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName      *string                                  `protobuf:"bytes,16,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	AggStockInList       *string                                  `protobuf:"bytes,17,opt,name=agg_stock_in_list,json=aggStockInList,proto3,oneof" json:"agg_stock_in_list,omitempty"`
	AggSrcTransList      *string                                  `protobuf:"bytes,18,opt,name=agg_src_trans_list,json=aggSrcTransList,proto3,oneof" json:"agg_src_trans_list,omitempty"`
	RelatedStockOutAggNo *string                                  `protobuf:"bytes,19,opt,name=related_stock_out_agg_no,json=relatedStockOutAggNo,proto3,oneof" json:"related_stock_out_agg_no,omitempty"`
	AggGoodsTypeCount    *int32                                   `protobuf:"varint,20,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount        *int32                                   `protobuf:"varint,21,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	PushKdStatusName     *string                                  `protobuf:"bytes,22,opt,name=push_kd_status_name,json=pushKdStatusName,proto3,oneof" json:"push_kd_status_name,omitempty"`
}

func (x *AggTransferStockInEntitiesResponse) Reset() {
	*x = AggTransferStockInEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferStockInEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferStockInEntitiesResponse) ProtoMessage() {}

func (x *AggTransferStockInEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferStockInEntitiesResponse.ProtoReflect.Descriptor instead.
func (*AggTransferStockInEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{36}
}

func (x *AggTransferStockInEntitiesResponse) GetModel() *AggTransferStockInEntitiesModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *AggTransferStockInEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetPushKdStatus() int32 {
	if x != nil && x.PushKdStatus != nil {
		return *x.PushKdStatus
	}
	return 0
}

func (x *AggTransferStockInEntitiesResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetAggStockInList() string {
	if x != nil && x.AggStockInList != nil {
		return *x.AggStockInList
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetAggSrcTransList() string {
	if x != nil && x.AggSrcTransList != nil {
		return *x.AggSrcTransList
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetRelatedStockOutAggNo() string {
	if x != nil && x.RelatedStockOutAggNo != nil {
		return *x.RelatedStockOutAggNo
	}
	return ""
}

func (x *AggTransferStockInEntitiesResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *AggTransferStockInEntitiesResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *AggTransferStockInEntitiesResponse) GetPushKdStatusName() string {
	if x != nil && x.PushKdStatusName != nil {
		return *x.PushKdStatusName
	}
	return ""
}

type AggTransferStockOutEntitiesEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime      *string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime      *string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FMaterialID     *string  `protobuf:"bytes,4,opt,name=FMaterialID,proto3,oneof" json:"FMaterialID,omitempty"`
	SpecNo          *string  `protobuf:"bytes,5,opt,name=SpecNo,proto3,oneof" json:"SpecNo,omitempty"`
	FQty            *float64 `protobuf:"fixed64,6,opt,name=FQty,proto3,oneof" json:"FQty,omitempty"`
	FUnitID         *string  `protobuf:"bytes,7,opt,name=FUnitID,proto3,oneof" json:"FUnitID,omitempty"`
	FOwnerTypeID    *string  `protobuf:"bytes,8,opt,name=FOwnerTypeID,proto3,oneof" json:"FOwnerTypeID,omitempty"`
	FOwnerID        *string  `protobuf:"bytes,9,opt,name=FOwnerID,proto3,oneof" json:"FOwnerID,omitempty"`
	FOwnerTypeInID  *string  `protobuf:"bytes,10,opt,name=FOwnerTypeInID,proto3,oneof" json:"FOwnerTypeInID,omitempty"`
	FOwnerInID      *string  `protobuf:"bytes,11,opt,name=FOwnerInID,proto3,oneof" json:"FOwnerInID,omitempty"`
	FKeeperTypeInID *string  `protobuf:"bytes,12,opt,name=FKeeperTypeInID,proto3,oneof" json:"FKeeperTypeInID,omitempty"`
	FKeeperInID     *string  `protobuf:"bytes,13,opt,name=FKeeperInID,proto3,oneof" json:"FKeeperInID,omitempty"`
	FDestMaterialID *string  `protobuf:"bytes,14,opt,name=FDestMaterialID,proto3,oneof" json:"FDestMaterialID,omitempty"`
	FBaseUnitID     *string  `protobuf:"bytes,15,opt,name=FBaseUnitID,proto3,oneof" json:"FBaseUnitID,omitempty"`
	FKeeperTypeID   *string  `protobuf:"bytes,16,opt,name=FKeeperTypeID,proto3,oneof" json:"FKeeperTypeID,omitempty"`
	FKeeperID       *string  `protobuf:"bytes,17,opt,name=FKeeperID,proto3,oneof" json:"FKeeperID,omitempty"`
	GoodsName       *string  `protobuf:"bytes,18,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
}

func (x *AggTransferStockOutEntitiesEntryResponse) Reset() {
	*x = AggTransferStockOutEntitiesEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferStockOutEntitiesEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferStockOutEntitiesEntryResponse) ProtoMessage() {}

func (x *AggTransferStockOutEntitiesEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferStockOutEntitiesEntryResponse.ProtoReflect.Descriptor instead.
func (*AggTransferStockOutEntitiesEntryResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{37}
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFMaterialID() string {
	if x != nil && x.FMaterialID != nil {
		return *x.FMaterialID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFQty() float64 {
	if x != nil && x.FQty != nil {
		return *x.FQty
	}
	return 0
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFUnitID() string {
	if x != nil && x.FUnitID != nil {
		return *x.FUnitID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFOwnerTypeID() string {
	if x != nil && x.FOwnerTypeID != nil {
		return *x.FOwnerTypeID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFOwnerID() string {
	if x != nil && x.FOwnerID != nil {
		return *x.FOwnerID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFOwnerTypeInID() string {
	if x != nil && x.FOwnerTypeInID != nil {
		return *x.FOwnerTypeInID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFOwnerInID() string {
	if x != nil && x.FOwnerInID != nil {
		return *x.FOwnerInID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFKeeperTypeInID() string {
	if x != nil && x.FKeeperTypeInID != nil {
		return *x.FKeeperTypeInID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFKeeperInID() string {
	if x != nil && x.FKeeperInID != nil {
		return *x.FKeeperInID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFDestMaterialID() string {
	if x != nil && x.FDestMaterialID != nil {
		return *x.FDestMaterialID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFBaseUnitID() string {
	if x != nil && x.FBaseUnitID != nil {
		return *x.FBaseUnitID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFKeeperTypeID() string {
	if x != nil && x.FKeeperTypeID != nil {
		return *x.FKeeperTypeID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetFKeeperID() string {
	if x != nil && x.FKeeperID != nil {
		return *x.FKeeperID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesEntryResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

type AggTransferStockOutEntitiesModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime         *string                                     `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime         *string                                     `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FBillTypeID        *string                                     `protobuf:"bytes,5,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FBillNo            string                                      `protobuf:"bytes,6,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FDate              string                                      `protobuf:"bytes,7,opt,name=FDate,proto3" json:"FDate,omitempty"`
	FBizType           *string                                     `protobuf:"bytes,8,opt,name=FBizType,proto3,oneof" json:"FBizType,omitempty"`
	FTransferBizType   *string                                     `protobuf:"bytes,9,opt,name=FTransferBizType,proto3,oneof" json:"FTransferBizType,omitempty"`
	FTransferDirect    *string                                     `protobuf:"bytes,10,opt,name=FTransferDirect,proto3,oneof" json:"FTransferDirect,omitempty"`
	FStockOrgID        *string                                     `protobuf:"bytes,11,opt,name=FStockOrgID,proto3,oneof" json:"FStockOrgID,omitempty"`
	FOwnerTypeIdHead   *string                                     `protobuf:"bytes,12,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
	FStockInOrgID      *string                                     `protobuf:"bytes,13,opt,name=FStockInOrgID,proto3,oneof" json:"FStockInOrgID,omitempty"`
	FOwnerTypeInIdHead *string                                     `protobuf:"bytes,14,opt,name=FOwnerTypeInIdHead,proto3,oneof" json:"FOwnerTypeInIdHead,omitempty"`
	FVESTONWAY         *string                                     `protobuf:"bytes,15,opt,name=FVESTONWAY,proto3,oneof" json:"FVESTONWAY,omitempty"`
	FSTKTRSOUTENTRY    []*AggTransferStockOutEntitiesEntryResponse `protobuf:"bytes,16,rep,name=FSTKTRSOUTENTRY,proto3" json:"FSTKTRSOUTENTRY,omitempty"`
}

func (x *AggTransferStockOutEntitiesModelResponse) Reset() {
	*x = AggTransferStockOutEntitiesModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferStockOutEntitiesModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferStockOutEntitiesModelResponse) ProtoMessage() {}

func (x *AggTransferStockOutEntitiesModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferStockOutEntitiesModelResponse.ProtoReflect.Descriptor instead.
func (*AggTransferStockOutEntitiesModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{38}
}

func (x *AggTransferStockOutEntitiesModelResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFBillTypeID() string {
	if x != nil && x.FBillTypeID != nil {
		return *x.FBillTypeID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFBizType() string {
	if x != nil && x.FBizType != nil {
		return *x.FBizType
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFTransferBizType() string {
	if x != nil && x.FTransferBizType != nil {
		return *x.FTransferBizType
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFTransferDirect() string {
	if x != nil && x.FTransferDirect != nil {
		return *x.FTransferDirect
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFStockOrgID() string {
	if x != nil && x.FStockOrgID != nil {
		return *x.FStockOrgID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFStockInOrgID() string {
	if x != nil && x.FStockInOrgID != nil {
		return *x.FStockInOrgID
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFOwnerTypeInIdHead() string {
	if x != nil && x.FOwnerTypeInIdHead != nil {
		return *x.FOwnerTypeInIdHead
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFVESTONWAY() string {
	if x != nil && x.FVESTONWAY != nil {
		return *x.FVESTONWAY
	}
	return ""
}

func (x *AggTransferStockOutEntitiesModelResponse) GetFSTKTRSOUTENTRY() []*AggTransferStockOutEntitiesEntryResponse {
	if x != nil {
		return x.FSTKTRSOUTENTRY
	}
	return nil
}

type AggTransferStockOutEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model             *AggTransferStockOutEntitiesModelResponse `protobuf:"bytes,3,opt,name=Model,proto3,oneof" json:"Model,omitempty"`
	CreateTime        *string                                   `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime        *string                                   `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	AggNo             *string                                   `protobuf:"bytes,6,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName           *string                                   `protobuf:"bytes,7,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	KingdeeNo         *string                                   `protobuf:"bytes,8,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	KingdeePushTime   *string                                   `protobuf:"bytes,9,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	PushKdStatus      *int32                                    `protobuf:"varint,10,opt,name=push_kd_status,json=pushKdStatus,proto3,oneof" json:"push_kd_status,omitempty"`
	FailureReason     *string                                   `protobuf:"bytes,11,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason      *string                                   `protobuf:"bytes,12,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	NeedUpDateFields  *string                                   `protobuf:"bytes,13,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields  *string                                   `protobuf:"bytes,14,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	FromWarehouseNo   *string                                   `protobuf:"bytes,15,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName *string                                   `protobuf:"bytes,16,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	AggStockOutList   *string                                   `protobuf:"bytes,17,opt,name=agg_stock_out_list,json=aggStockOutList,proto3,oneof" json:"agg_stock_out_list,omitempty"`
	AggSrcTransList   *string                                   `protobuf:"bytes,18,opt,name=agg_src_trans_list,json=aggSrcTransList,proto3,oneof" json:"agg_src_trans_list,omitempty"`
	RelatedTransAggNo *string                                   `protobuf:"bytes,19,opt,name=related_trans_agg_no,json=relatedTransAggNo,proto3,oneof" json:"related_trans_agg_no,omitempty"`
	AggGoodsTypeCount *int32                                    `protobuf:"varint,20,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount     *int32                                    `protobuf:"varint,21,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	PushKdStatusName  *string                                   `protobuf:"bytes,22,opt,name=push_kd_status_name,json=pushKdStatusName,proto3,oneof" json:"push_kd_status_name,omitempty"`
}

func (x *AggTransferStockOutEntitiesResponse) Reset() {
	*x = AggTransferStockOutEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTransferStockOutEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTransferStockOutEntitiesResponse) ProtoMessage() {}

func (x *AggTransferStockOutEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTransferStockOutEntitiesResponse.ProtoReflect.Descriptor instead.
func (*AggTransferStockOutEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{39}
}

func (x *AggTransferStockOutEntitiesResponse) GetModel() *AggTransferStockOutEntitiesModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *AggTransferStockOutEntitiesResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetPushKdStatus() int32 {
	if x != nil && x.PushKdStatus != nil {
		return *x.PushKdStatus
	}
	return 0
}

func (x *AggTransferStockOutEntitiesResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetAggStockOutList() string {
	if x != nil && x.AggStockOutList != nil {
		return *x.AggStockOutList
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetAggSrcTransList() string {
	if x != nil && x.AggSrcTransList != nil {
		return *x.AggSrcTransList
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetRelatedTransAggNo() string {
	if x != nil && x.RelatedTransAggNo != nil {
		return *x.RelatedTransAggNo
	}
	return ""
}

func (x *AggTransferStockOutEntitiesResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *AggTransferStockOutEntitiesResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *AggTransferStockOutEntitiesResponse) GetPushKdStatusName() string {
	if x != nil && x.PushKdStatusName != nil {
		return *x.PushKdStatusName
	}
	return ""
}

type AliPayGoodsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId       *string  `protobuf:"bytes,2,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsNo       *string  `protobuf:"bytes,3,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName     *string  `protobuf:"bytes,4,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecId        *string  `protobuf:"bytes,5,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	SpecNo        *string  `protobuf:"bytes,6,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName      *string  `protobuf:"bytes,7,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode      *string  `protobuf:"bytes,8,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Num           *int32   `protobuf:"varint,9,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Price         *float64 `protobuf:"fixed64,10,opt,name=price,proto3,oneof" json:"price,omitempty"`
	AdjustAmount  *float64 `protobuf:"fixed64,11,opt,name=adjust_amount,json=adjustAmount,proto3,oneof" json:"adjust_amount,omitempty"`
	Discount      *float64 `protobuf:"fixed64,12,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	ShareDiscount *float64 `protobuf:"fixed64,13,opt,name=share_discount,json=shareDiscount,proto3,oneof" json:"share_discount,omitempty"`
	ShareAmount   *float64 `protobuf:"fixed64,14,opt,name=share_amount,json=shareAmount,proto3,oneof" json:"share_amount,omitempty"`
	SharePost     *float64 `protobuf:"fixed64,15,opt,name=share_post,json=sharePost,proto3,oneof" json:"share_post,omitempty"`
	TotalAmount   *float64 `protobuf:"fixed64,16,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
	Paid          *float64 `protobuf:"fixed64,17,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
}

func (x *AliPayGoodsListResponse) Reset() {
	*x = AliPayGoodsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliPayGoodsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliPayGoodsListResponse) ProtoMessage() {}

func (x *AliPayGoodsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliPayGoodsListResponse.ProtoReflect.Descriptor instead.
func (*AliPayGoodsListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{40}
}

func (x *AliPayGoodsListResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *AliPayGoodsListResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *AliPayGoodsListResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *AliPayGoodsListResponse) GetSpecId() string {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return ""
}

func (x *AliPayGoodsListResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *AliPayGoodsListResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *AliPayGoodsListResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *AliPayGoodsListResponse) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetAdjustAmount() float64 {
	if x != nil && x.AdjustAmount != nil {
		return *x.AdjustAmount
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetShareDiscount() float64 {
	if x != nil && x.ShareDiscount != nil {
		return *x.ShareDiscount
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetShareAmount() float64 {
	if x != nil && x.ShareAmount != nil {
		return *x.ShareAmount
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetSharePost() float64 {
	if x != nil && x.SharePost != nil {
		return *x.SharePost
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *AliPayGoodsListResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

type AlipayBillAggEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsList    []*AliPayGoodsListResponse `protobuf:"bytes,2,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	RefundList   []*AliPayGoodsListResponse `protobuf:"bytes,3,rep,name=refund_list,json=refundList,proto3" json:"refund_list,omitempty"`
	AccountLogId *string                    `protobuf:"bytes,4,opt,name=account_log_id,json=accountLogId,proto3,oneof" json:"account_log_id,omitempty"`
	TransDt      *string                    `protobuf:"bytes,5,opt,name=trans_dt,json=transDt,proto3,oneof" json:"trans_dt,omitempty"`
	Type         *string                    `protobuf:"bytes,6,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Direction    *string                    `protobuf:"bytes,7,opt,name=direction,proto3,oneof" json:"direction,omitempty"`
	BizDesc      *string                    `protobuf:"bytes,8,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	TransAmount  *float64                   `protobuf:"fixed64,9,opt,name=trans_amount,json=transAmount,proto3,oneof" json:"trans_amount,omitempty"`
	TransMemo    *string                    `protobuf:"bytes,10,opt,name=trans_memo,json=transMemo,proto3,oneof" json:"trans_memo,omitempty"`
}

func (x *AlipayBillAggEntitiesResponse) Reset() {
	*x = AlipayBillAggEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggEntitiesResponse) ProtoMessage() {}

func (x *AlipayBillAggEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggEntitiesResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillAggEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{41}
}

func (x *AlipayBillAggEntitiesResponse) GetGoodsList() []*AliPayGoodsListResponse {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *AlipayBillAggEntitiesResponse) GetRefundList() []*AliPayGoodsListResponse {
	if x != nil {
		return x.RefundList
	}
	return nil
}

func (x *AlipayBillAggEntitiesResponse) GetAccountLogId() string {
	if x != nil && x.AccountLogId != nil {
		return *x.AccountLogId
	}
	return ""
}

func (x *AlipayBillAggEntitiesResponse) GetTransDt() string {
	if x != nil && x.TransDt != nil {
		return *x.TransDt
	}
	return ""
}

func (x *AlipayBillAggEntitiesResponse) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AlipayBillAggEntitiesResponse) GetDirection() string {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ""
}

func (x *AlipayBillAggEntitiesResponse) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillAggEntitiesResponse) GetTransAmount() float64 {
	if x != nil && x.TransAmount != nil {
		return *x.TransAmount
	}
	return 0
}

func (x *AlipayBillAggEntitiesResponse) GetTransMemo() string {
	if x != nil && x.TransMemo != nil {
		return *x.TransMemo
	}
	return ""
}

type AlipayBillAggResultDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *AlipayBillAggResultDestroyRequest) Reset() {
	*x = AlipayBillAggResultDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggResultDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggResultDestroyRequest) ProtoMessage() {}

func (x *AlipayBillAggResultDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggResultDestroyRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAggResultDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{42}
}

func (x *AlipayBillAggResultDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type AlipayBillAggResultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *AlipayBillAggResultListRequest) Reset() {
	*x = AlipayBillAggResultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggResultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggResultListRequest) ProtoMessage() {}

func (x *AlipayBillAggResultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggResultListRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAggResultListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{43}
}

func (x *AlipayBillAggResultListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *AlipayBillAggResultListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type AlipayBillAggResultListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AlipayBillAggResultResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AlipayBillAggResultListResponse) Reset() {
	*x = AlipayBillAggResultListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggResultListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggResultListResponse) ProtoMessage() {}

func (x *AlipayBillAggResultListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggResultListResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillAggResultListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{44}
}

func (x *AlipayBillAggResultListResponse) GetResults() []*AlipayBillAggResultResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AlipayBillAggResultListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AlipayBillAggResultPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PushKingdeeStatus    *int32   `protobuf:"varint,3,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	AggNo                *string  `protobuf:"bytes,4,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName              *string  `protobuf:"bytes,5,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	AggPeriod            string   `protobuf:"bytes,6,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	SrcAccountLogList    *string  `protobuf:"bytes,7,opt,name=src_account_log_list,json=srcAccountLogList,proto3,oneof" json:"src_account_log_list,omitempty"`
	AccountLogList       *string  `protobuf:"bytes,8,opt,name=account_log_list,json=accountLogList,proto3,oneof" json:"account_log_list,omitempty"`
	TidList              *string  `protobuf:"bytes,9,opt,name=tid_list,json=tidList,proto3,oneof" json:"tid_list,omitempty"`
	TransMemoList        *string  `protobuf:"bytes,10,opt,name=trans_memo_list,json=transMemoList,proto3,oneof" json:"trans_memo_list,omitempty"`
	Type                 *string  `protobuf:"bytes,11,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Direction            string   `protobuf:"bytes,12,opt,name=direction,proto3" json:"direction,omitempty"`
	BizDesc              *string  `protobuf:"bytes,13,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	TransAmount          float64  `protobuf:"fixed64,14,opt,name=trans_amount,json=transAmount,proto3" json:"trans_amount,omitempty"`
}

func (x *AlipayBillAggResultPartialUpdateRequest) Reset() {
	*x = AlipayBillAggResultPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggResultPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggResultPartialUpdateRequest) ProtoMessage() {}

func (x *AlipayBillAggResultPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggResultPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAggResultPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{45}
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetSrcAccountLogList() string {
	if x != nil && x.SrcAccountLogList != nil {
		return *x.SrcAccountLogList
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetAccountLogList() string {
	if x != nil && x.AccountLogList != nil {
		return *x.AccountLogList
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetTidList() string {
	if x != nil && x.TidList != nil {
		return *x.TidList
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetTransMemoList() string {
	if x != nil && x.TransMemoList != nil {
		return *x.TransMemoList
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillAggResultPartialUpdateRequest) GetTransAmount() float64 {
	if x != nil {
		return x.TransAmount
	}
	return 0
}

type AlipayBillAggResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PushKingdeeStatus *int32  `protobuf:"varint,2,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	AggNo             *string `protobuf:"bytes,3,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName           *string `protobuf:"bytes,4,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	AggPeriod         string  `protobuf:"bytes,5,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	SrcAccountLogList *string `protobuf:"bytes,6,opt,name=src_account_log_list,json=srcAccountLogList,proto3,oneof" json:"src_account_log_list,omitempty"`
	AccountLogList    *string `protobuf:"bytes,7,opt,name=account_log_list,json=accountLogList,proto3,oneof" json:"account_log_list,omitempty"`
	TidList           *string `protobuf:"bytes,8,opt,name=tid_list,json=tidList,proto3,oneof" json:"tid_list,omitempty"`
	TransMemoList     *string `protobuf:"bytes,9,opt,name=trans_memo_list,json=transMemoList,proto3,oneof" json:"trans_memo_list,omitempty"`
	Type              *string `protobuf:"bytes,10,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Direction         string  `protobuf:"bytes,11,opt,name=direction,proto3" json:"direction,omitempty"`
	BizDesc           *string `protobuf:"bytes,12,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	TransAmount       float64 `protobuf:"fixed64,13,opt,name=trans_amount,json=transAmount,proto3" json:"trans_amount,omitempty"`
}

func (x *AlipayBillAggResultRequest) Reset() {
	*x = AlipayBillAggResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggResultRequest) ProtoMessage() {}

func (x *AlipayBillAggResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggResultRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAggResultRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{46}
}

func (x *AlipayBillAggResultRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *AlipayBillAggResultRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetSrcAccountLogList() string {
	if x != nil && x.SrcAccountLogList != nil {
		return *x.SrcAccountLogList
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetAccountLogList() string {
	if x != nil && x.AccountLogList != nil {
		return *x.AccountLogList
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetTidList() string {
	if x != nil && x.TidList != nil {
		return *x.TidList
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetTransMemoList() string {
	if x != nil && x.TransMemoList != nil {
		return *x.TransMemoList
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillAggResultRequest) GetTransAmount() float64 {
	if x != nil {
		return x.TransAmount
	}
	return 0
}

type AlipayBillAggResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                    `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	GoodsList             []*AliPayGoodsListResponse `protobuf:"bytes,2,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	RefundList            []*AliPayGoodsListResponse `protobuf:"bytes,3,rep,name=refund_list,json=refundList,proto3" json:"refund_list,omitempty"`
	PushKingdeeStatusName *string                    `protobuf:"bytes,4,opt,name=push_kingdee_status_name,json=pushKingdeeStatusName,proto3,oneof" json:"push_kingdee_status_name,omitempty"`
	CreateTime            *string                    `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string                    `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushKingdeeStatus     *int32                     `protobuf:"varint,7,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	AggNo                 *string                    `protobuf:"bytes,8,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName               *string                    `protobuf:"bytes,9,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	AggPeriod             string                     `protobuf:"bytes,10,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	SrcAccountLogList     *string                    `protobuf:"bytes,11,opt,name=src_account_log_list,json=srcAccountLogList,proto3,oneof" json:"src_account_log_list,omitempty"`
	AccountLogList        *string                    `protobuf:"bytes,12,opt,name=account_log_list,json=accountLogList,proto3,oneof" json:"account_log_list,omitempty"`
	TidList               *string                    `protobuf:"bytes,13,opt,name=tid_list,json=tidList,proto3,oneof" json:"tid_list,omitempty"`
	TransMemoList         *string                    `protobuf:"bytes,14,opt,name=trans_memo_list,json=transMemoList,proto3,oneof" json:"trans_memo_list,omitempty"`
	Type                  *string                    `protobuf:"bytes,15,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Direction             string                     `protobuf:"bytes,16,opt,name=direction,proto3" json:"direction,omitempty"`
	BizDesc               *string                    `protobuf:"bytes,17,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	TransAmount           float64                    `protobuf:"fixed64,18,opt,name=trans_amount,json=transAmount,proto3" json:"trans_amount,omitempty"`
}

func (x *AlipayBillAggResultResponse) Reset() {
	*x = AlipayBillAggResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggResultResponse) ProtoMessage() {}

func (x *AlipayBillAggResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggResultResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillAggResultResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{47}
}

func (x *AlipayBillAggResultResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetGoodsList() []*AliPayGoodsListResponse {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *AlipayBillAggResultResponse) GetRefundList() []*AliPayGoodsListResponse {
	if x != nil {
		return x.RefundList
	}
	return nil
}

func (x *AlipayBillAggResultResponse) GetPushKingdeeStatusName() string {
	if x != nil && x.PushKingdeeStatusName != nil {
		return *x.PushKingdeeStatusName
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *AlipayBillAggResultResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetSrcAccountLogList() string {
	if x != nil && x.SrcAccountLogList != nil {
		return *x.SrcAccountLogList
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetAccountLogList() string {
	if x != nil && x.AccountLogList != nil {
		return *x.AccountLogList
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetTidList() string {
	if x != nil && x.TidList != nil {
		return *x.TidList
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetTransMemoList() string {
	if x != nil && x.TransMemoList != nil {
		return *x.TransMemoList
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillAggResultResponse) GetTransAmount() float64 {
	if x != nil {
		return x.TransAmount
	}
	return 0
}

type AlipayBillAggResultRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *AlipayBillAggResultRetrieveRequest) Reset() {
	*x = AlipayBillAggResultRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAggResultRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAggResultRetrieveRequest) ProtoMessage() {}

func (x *AlipayBillAggResultRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAggResultRetrieveRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAggResultRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{48}
}

func (x *AlipayBillAggResultRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type AlipayBillEntitiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *AlipayBillEntitiesListRequest) Reset() {
	*x = AlipayBillEntitiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillEntitiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillEntitiesListRequest) ProtoMessage() {}

func (x *AlipayBillEntitiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillEntitiesListRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillEntitiesListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{49}
}

func (x *AlipayBillEntitiesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *AlipayBillEntitiesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type AlipayBillEntitiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AlipayBillEntitiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AlipayBillEntitiesListResponse) Reset() {
	*x = AlipayBillEntitiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillEntitiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillEntitiesListResponse) ProtoMessage() {}

func (x *AlipayBillEntitiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillEntitiesListResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillEntitiesListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{50}
}

func (x *AlipayBillEntitiesListResponse) GetResults() []*AlipayBillEntitiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AlipayBillEntitiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AlipayBillEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggPayStatusName    *string  `protobuf:"bytes,2,opt,name=agg_pay_status_name,json=aggPayStatusName,proto3,oneof" json:"agg_pay_status_name,omitempty"`
	TransDt             *string  `protobuf:"bytes,3,opt,name=trans_dt,json=transDt,proto3,oneof" json:"trans_dt,omitempty"`
	AggPayStatus        *int32   `protobuf:"varint,4,opt,name=agg_pay_status,json=aggPayStatus,proto3,oneof" json:"agg_pay_status,omitempty"`
	Type                *string  `protobuf:"bytes,5,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Direction           *string  `protobuf:"bytes,6,opt,name=direction,proto3,oneof" json:"direction,omitempty"`
	BizOrigNo           *string  `protobuf:"bytes,7,opt,name=biz_orig_no,json=bizOrigNo,proto3,oneof" json:"biz_orig_no,omitempty"`
	TransAmount         *float64 `protobuf:"fixed64,8,opt,name=trans_amount,json=transAmount,proto3,oneof" json:"trans_amount,omitempty"`
	BizDesc             *string  `protobuf:"bytes,9,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	AccountLogId        *string  `protobuf:"bytes,10,opt,name=account_log_id,json=accountLogId,proto3,oneof" json:"account_log_id,omitempty"`
	AlipayOrderNo       *string  `protobuf:"bytes,11,opt,name=alipay_order_no,json=alipayOrderNo,proto3,oneof" json:"alipay_order_no,omitempty"`
	MerchantOrderNo     *string  `protobuf:"bytes,12,opt,name=merchant_order_no,json=merchantOrderNo,proto3,oneof" json:"merchant_order_no,omitempty"`
	MerchantOutRefundNo *string  `protobuf:"bytes,13,opt,name=merchant_out_refund_no,json=merchantOutRefundNo,proto3,oneof" json:"merchant_out_refund_no,omitempty"`
	Balance             *float64 `protobuf:"fixed64,14,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	OtherAccount        *string  `protobuf:"bytes,15,opt,name=other_account,json=otherAccount,proto3,oneof" json:"other_account,omitempty"`
	BillSource          *string  `protobuf:"bytes,16,opt,name=bill_source,json=billSource,proto3,oneof" json:"bill_source,omitempty"`
	BizNos              *string  `protobuf:"bytes,17,opt,name=biz_nos,json=bizNos,proto3,oneof" json:"biz_nos,omitempty"`
	TransMemo           *string  `protobuf:"bytes,18,opt,name=trans_memo,json=transMemo,proto3,oneof" json:"trans_memo,omitempty"`
	ComplementInfo      *string  `protobuf:"bytes,19,opt,name=complement_info,json=complementInfo,proto3,oneof" json:"complement_info,omitempty"`
	StoreName           *string  `protobuf:"bytes,20,opt,name=store_name,json=storeName,proto3,oneof" json:"store_name,omitempty"`
}

func (x *AlipayBillEntitiesResponse) Reset() {
	*x = AlipayBillEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillEntitiesResponse) ProtoMessage() {}

func (x *AlipayBillEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillEntitiesResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{51}
}

func (x *AlipayBillEntitiesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetAggPayStatusName() string {
	if x != nil && x.AggPayStatusName != nil {
		return *x.AggPayStatusName
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetTransDt() string {
	if x != nil && x.TransDt != nil {
		return *x.TransDt
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetAggPayStatus() int32 {
	if x != nil && x.AggPayStatus != nil {
		return *x.AggPayStatus
	}
	return 0
}

func (x *AlipayBillEntitiesResponse) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetDirection() string {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetBizOrigNo() string {
	if x != nil && x.BizOrigNo != nil {
		return *x.BizOrigNo
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetTransAmount() float64 {
	if x != nil && x.TransAmount != nil {
		return *x.TransAmount
	}
	return 0
}

func (x *AlipayBillEntitiesResponse) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetAccountLogId() string {
	if x != nil && x.AccountLogId != nil {
		return *x.AccountLogId
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetAlipayOrderNo() string {
	if x != nil && x.AlipayOrderNo != nil {
		return *x.AlipayOrderNo
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetMerchantOrderNo() string {
	if x != nil && x.MerchantOrderNo != nil {
		return *x.MerchantOrderNo
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetMerchantOutRefundNo() string {
	if x != nil && x.MerchantOutRefundNo != nil {
		return *x.MerchantOutRefundNo
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetBalance() float64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *AlipayBillEntitiesResponse) GetOtherAccount() string {
	if x != nil && x.OtherAccount != nil {
		return *x.OtherAccount
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetBillSource() string {
	if x != nil && x.BillSource != nil {
		return *x.BillSource
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetBizNos() string {
	if x != nil && x.BizNos != nil {
		return *x.BizNos
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetTransMemo() string {
	if x != nil && x.TransMemo != nil {
		return *x.TransMemo
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetComplementInfo() string {
	if x != nil && x.ComplementInfo != nil {
		return *x.ComplementInfo
	}
	return ""
}

func (x *AlipayBillEntitiesResponse) GetStoreName() string {
	if x != nil && x.StoreName != nil {
		return *x.StoreName
	}
	return ""
}

type AlipayBillListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *AlipayBillListRequest) Reset() {
	*x = AlipayBillListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillListRequest) ProtoMessage() {}

func (x *AlipayBillListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillListRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{52}
}

func (x *AlipayBillListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *AlipayBillListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type AlipayBillListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AlipayBillResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AlipayBillListResponse) Reset() {
	*x = AlipayBillListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillListResponse) ProtoMessage() {}

func (x *AlipayBillListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillListResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{53}
}

func (x *AlipayBillListResponse) GetResults() []*AlipayBillResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AlipayBillListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AlipayBillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string                          `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggBillStatusName *string                          `protobuf:"bytes,2,opt,name=agg_bill_status_name,json=aggBillStatusName,proto3,oneof" json:"agg_bill_status_name,omitempty"`
	CreateTime        *string                          `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime        *string                          `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	ResultAggNo       *string                          `protobuf:"bytes,5,opt,name=result_agg_no,json=resultAggNo,proto3,oneof" json:"result_agg_no,omitempty"`
	AggPeriod         string                           `protobuf:"bytes,6,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	AggBillStatus     *int32                           `protobuf:"varint,7,opt,name=agg_bill_status,json=aggBillStatus,proto3,oneof" json:"agg_bill_status,omitempty"`
	AccountLogList    *string                          `protobuf:"bytes,8,opt,name=account_log_list,json=accountLogList,proto3,oneof" json:"account_log_list,omitempty"`
	SrcTid            *string                          `protobuf:"bytes,9,opt,name=src_tid,json=srcTid,proto3,oneof" json:"src_tid,omitempty"`
	TransList         []*AlipayBillAggEntitiesResponse `protobuf:"bytes,10,rep,name=trans_list,json=transList,proto3" json:"trans_list,omitempty"`
}

func (x *AlipayBillResponse) Reset() {
	*x = AlipayBillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillResponse) ProtoMessage() {}

func (x *AlipayBillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{54}
}

func (x *AlipayBillResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *AlipayBillResponse) GetAggBillStatusName() string {
	if x != nil && x.AggBillStatusName != nil {
		return *x.AggBillStatusName
	}
	return ""
}

func (x *AlipayBillResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AlipayBillResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AlipayBillResponse) GetResultAggNo() string {
	if x != nil && x.ResultAggNo != nil {
		return *x.ResultAggNo
	}
	return ""
}

func (x *AlipayBillResponse) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *AlipayBillResponse) GetAggBillStatus() int32 {
	if x != nil && x.AggBillStatus != nil {
		return *x.AggBillStatus
	}
	return 0
}

func (x *AlipayBillResponse) GetAccountLogList() string {
	if x != nil && x.AccountLogList != nil {
		return *x.AccountLogList
	}
	return ""
}

func (x *AlipayBillResponse) GetSrcTid() string {
	if x != nil && x.SrcTid != nil {
		return *x.SrcTid
	}
	return ""
}

func (x *AlipayBillResponse) GetTransList() []*AlipayBillAggEntitiesResponse {
	if x != nil {
		return x.TransList
	}
	return nil
}

type AlipayBillRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *AlipayBillRetrieveRequest) Reset() {
	*x = AlipayBillRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillRetrieveRequest) ProtoMessage() {}

func (x *AlipayBillRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillRetrieveRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{55}
}

func (x *AlipayBillRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type BillEntitiesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *BillEntitiesRetrieveRequest) Reset() {
	*x = BillEntitiesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillEntitiesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillEntitiesRetrieveRequest) ProtoMessage() {}

func (x *BillEntitiesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillEntitiesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*BillEntitiesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{56}
}

func (x *BillEntitiesRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type BulkCreateKdPurchaseReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PurchaseReturnList string `protobuf:"bytes,2,opt,name=purchase_return_list,json=purchaseReturnList,proto3" json:"purchase_return_list,omitempty"`
}

func (x *BulkCreateKdPurchaseReturnRequest) Reset() {
	*x = BulkCreateKdPurchaseReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKdPurchaseReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKdPurchaseReturnRequest) ProtoMessage() {}

func (x *BulkCreateKdPurchaseReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKdPurchaseReturnRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKdPurchaseReturnRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{57}
}

func (x *BulkCreateKdPurchaseReturnRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKdPurchaseReturnRequest) GetPurchaseReturnList() string {
	if x != nil {
		return x.PurchaseReturnList
	}
	return ""
}

type BulkCreateKdPurchaseReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKdPurchaseReturnResponse) Reset() {
	*x = BulkCreateKdPurchaseReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKdPurchaseReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKdPurchaseReturnResponse) ProtoMessage() {}

func (x *BulkCreateKdPurchaseReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKdPurchaseReturnResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKdPurchaseReturnResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{58}
}

func (x *BulkCreateKdPurchaseReturnResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKdPurchaseReturnResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKdPurchaseReturnResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type BulkCreateKdTransferOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TransferOrderList string `protobuf:"bytes,2,opt,name=transfer_order_list,json=transferOrderList,proto3" json:"transfer_order_list,omitempty"`
}

func (x *BulkCreateKdTransferOrderRequest) Reset() {
	*x = BulkCreateKdTransferOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKdTransferOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKdTransferOrderRequest) ProtoMessage() {}

func (x *BulkCreateKdTransferOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKdTransferOrderRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKdTransferOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{59}
}

func (x *BulkCreateKdTransferOrderRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKdTransferOrderRequest) GetTransferOrderList() string {
	if x != nil {
		return x.TransferOrderList
	}
	return ""
}

type BulkCreateKdTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKdTransferOrderResponse) Reset() {
	*x = BulkCreateKdTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKdTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKdTransferOrderResponse) ProtoMessage() {}

func (x *BulkCreateKdTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKdTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKdTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{60}
}

func (x *BulkCreateKdTransferOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKdTransferOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKdTransferOrderResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type BulkCreateKingdeePurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PurchaseList string `protobuf:"bytes,2,opt,name=purchase_list,json=purchaseList,proto3" json:"purchase_list,omitempty"`
}

func (x *BulkCreateKingdeePurchaseOrderRequest) Reset() {
	*x = BulkCreateKingdeePurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeePurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeePurchaseOrderRequest) ProtoMessage() {}

func (x *BulkCreateKingdeePurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeePurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeePurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{61}
}

func (x *BulkCreateKingdeePurchaseOrderRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKingdeePurchaseOrderRequest) GetPurchaseList() string {
	if x != nil {
		return x.PurchaseList
	}
	return ""
}

type BulkCreateKingdeePurchaseOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKingdeePurchaseOrderResponse) Reset() {
	*x = BulkCreateKingdeePurchaseOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeePurchaseOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeePurchaseOrderResponse) ProtoMessage() {}

func (x *BulkCreateKingdeePurchaseOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeePurchaseOrderResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeePurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{62}
}

func (x *BulkCreateKingdeePurchaseOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKingdeePurchaseOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKingdeePurchaseOrderResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type BulkCreateKingdeePurchaseOrderSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PurchaseList string `protobuf:"bytes,2,opt,name=purchase_list,json=purchaseList,proto3" json:"purchase_list,omitempty"`
}

func (x *BulkCreateKingdeePurchaseOrderSyncRequest) Reset() {
	*x = BulkCreateKingdeePurchaseOrderSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeePurchaseOrderSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeePurchaseOrderSyncRequest) ProtoMessage() {}

func (x *BulkCreateKingdeePurchaseOrderSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeePurchaseOrderSyncRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeePurchaseOrderSyncRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{63}
}

func (x *BulkCreateKingdeePurchaseOrderSyncRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKingdeePurchaseOrderSyncRequest) GetPurchaseList() string {
	if x != nil {
		return x.PurchaseList
	}
	return ""
}

type BulkCreateKingdeePurchaseOrderSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKingdeePurchaseOrderSyncResponse) Reset() {
	*x = BulkCreateKingdeePurchaseOrderSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeePurchaseOrderSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeePurchaseOrderSyncResponse) ProtoMessage() {}

func (x *BulkCreateKingdeePurchaseOrderSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeePurchaseOrderSyncResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeePurchaseOrderSyncResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{64}
}

func (x *BulkCreateKingdeePurchaseOrderSyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKingdeePurchaseOrderSyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKingdeePurchaseOrderSyncResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type BulkCreateKingdeeReceiveBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ReceiveBillList string `protobuf:"bytes,2,opt,name=receive_bill_list,json=receiveBillList,proto3" json:"receive_bill_list,omitempty"`
}

func (x *BulkCreateKingdeeReceiveBillRequest) Reset() {
	*x = BulkCreateKingdeeReceiveBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeeReceiveBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeeReceiveBillRequest) ProtoMessage() {}

func (x *BulkCreateKingdeeReceiveBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeeReceiveBillRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeeReceiveBillRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{65}
}

func (x *BulkCreateKingdeeReceiveBillRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKingdeeReceiveBillRequest) GetReceiveBillList() string {
	if x != nil {
		return x.ReceiveBillList
	}
	return ""
}

type BulkCreateKingdeeReceiveBillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKingdeeReceiveBillResponse) Reset() {
	*x = BulkCreateKingdeeReceiveBillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeeReceiveBillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeeReceiveBillResponse) ProtoMessage() {}

func (x *BulkCreateKingdeeReceiveBillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeeReceiveBillResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeeReceiveBillResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{66}
}

func (x *BulkCreateKingdeeReceiveBillResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKingdeeReceiveBillResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKingdeeReceiveBillResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type BulkCreateKingdeeReceiveBillSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ReceiveBillList string `protobuf:"bytes,2,opt,name=receive_bill_list,json=receiveBillList,proto3" json:"receive_bill_list,omitempty"`
}

func (x *BulkCreateKingdeeReceiveBillSyncRequest) Reset() {
	*x = BulkCreateKingdeeReceiveBillSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeeReceiveBillSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeeReceiveBillSyncRequest) ProtoMessage() {}

func (x *BulkCreateKingdeeReceiveBillSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeeReceiveBillSyncRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeeReceiveBillSyncRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{67}
}

func (x *BulkCreateKingdeeReceiveBillSyncRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKingdeeReceiveBillSyncRequest) GetReceiveBillList() string {
	if x != nil {
		return x.ReceiveBillList
	}
	return ""
}

type BulkCreateKingdeeReceiveBillSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKingdeeReceiveBillSyncResponse) Reset() {
	*x = BulkCreateKingdeeReceiveBillSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeeReceiveBillSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeeReceiveBillSyncResponse) ProtoMessage() {}

func (x *BulkCreateKingdeeReceiveBillSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeeReceiveBillSyncResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeeReceiveBillSyncResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{68}
}

func (x *BulkCreateKingdeeReceiveBillSyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKingdeeReceiveBillSyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKingdeeReceiveBillSyncResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type CeleryTaskInfoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CeleryTaskInfoResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CeleryTaskInfoListResponse) Reset() {
	*x = CeleryTaskInfoListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskInfoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskInfoListResponse) ProtoMessage() {}

func (x *CeleryTaskInfoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskInfoListResponse.ProtoReflect.Descriptor instead.
func (*CeleryTaskInfoListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{69}
}

func (x *CeleryTaskInfoListResponse) GetResults() []*CeleryTaskInfoResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CeleryTaskInfoListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CeleryTaskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *CeleryTaskInfoResponse) Reset() {
	*x = CeleryTaskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskInfoResponse) ProtoMessage() {}

func (x *CeleryTaskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskInfoResponse.ProtoReflect.Descriptor instead.
func (*CeleryTaskInfoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{70}
}

func (x *CeleryTaskInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CeleryTaskInfoResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type CeleryTaskQueryOptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CeleryTaskQueryOptsRequest) Reset() {
	*x = CeleryTaskQueryOptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskQueryOptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskQueryOptsRequest) ProtoMessage() {}

func (x *CeleryTaskQueryOptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskQueryOptsRequest.ProtoReflect.Descriptor instead.
func (*CeleryTaskQueryOptsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{71}
}

type CeleryTaskRunOptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName       string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	CeleryTaskName string `protobuf:"bytes,3,opt,name=celery_task_name,json=celeryTaskName,proto3" json:"celery_task_name,omitempty"`
	Args           string `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	Kwargs         string `protobuf:"bytes,5,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
	Queue          string `protobuf:"bytes,6,opt,name=queue,proto3" json:"queue,omitempty"`
	Sync           bool   `protobuf:"varint,7,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *CeleryTaskRunOptsRequest) Reset() {
	*x = CeleryTaskRunOptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskRunOptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskRunOptsRequest) ProtoMessage() {}

func (x *CeleryTaskRunOptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskRunOptsRequest.ProtoReflect.Descriptor instead.
func (*CeleryTaskRunOptsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{72}
}

func (x *CeleryTaskRunOptsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetCeleryTaskName() string {
	if x != nil {
		return x.CeleryTaskName
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetKwargs() string {
	if x != nil {
		return x.Kwargs
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type CeleryTaskRunOptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CeleryTaskRunOptsResponse) Reset() {
	*x = CeleryTaskRunOptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskRunOptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskRunOptsResponse) ProtoMessage() {}

func (x *CeleryTaskRunOptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskRunOptsResponse.ProtoReflect.Descriptor instead.
func (*CeleryTaskRunOptsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{73}
}

func (x *CeleryTaskRunOptsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CeleryTaskRunOptsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CeleryTaskRunOptsResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ChannelShopConfigCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelShopConfigCreateRequest) Reset() {
	*x = ChannelShopConfigCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelShopConfigCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelShopConfigCreateRequest) ProtoMessage() {}

func (x *ChannelShopConfigCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelShopConfigCreateRequest.ProtoReflect.Descriptor instead.
func (*ChannelShopConfigCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{74}
}

type ChannelShopConfigListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *ChannelShopConfigListRequest) Reset() {
	*x = ChannelShopConfigListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelShopConfigListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelShopConfigListRequest) ProtoMessage() {}

func (x *ChannelShopConfigListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelShopConfigListRequest.ProtoReflect.Descriptor instead.
func (*ChannelShopConfigListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{75}
}

func (x *ChannelShopConfigListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *ChannelShopConfigListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type ChannelShopConfigListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ChannelShopConfigResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ChannelShopConfigListResponse) Reset() {
	*x = ChannelShopConfigListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelShopConfigListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelShopConfigListResponse) ProtoMessage() {}

func (x *ChannelShopConfigListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelShopConfigListResponse.ProtoReflect.Descriptor instead.
func (*ChannelShopConfigListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{76}
}

func (x *ChannelShopConfigListResponse) GetResults() []*ChannelShopConfigResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ChannelShopConfigListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChannelShopConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                     *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	BuCodeName              *string `protobuf:"bytes,2,opt,name=bu_code_name,json=buCodeName,proto3,oneof" json:"bu_code_name,omitempty"`
	ChannelCodeName         *string `protobuf:"bytes,3,opt,name=channel_code_name,json=channelCodeName,proto3,oneof" json:"channel_code_name,omitempty"`
	CreateTime              *string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime              *string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	BuCode                  *int32  `protobuf:"varint,6,opt,name=bu_code,json=buCode,proto3,oneof" json:"bu_code,omitempty"`
	BuName                  *string `protobuf:"bytes,7,opt,name=bu_name,json=buName,proto3,oneof" json:"bu_name,omitempty"`
	ChannelCode             *int32  `protobuf:"varint,8,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	ChannelName             *string `protobuf:"bytes,9,opt,name=channel_name,json=channelName,proto3,oneof" json:"channel_name,omitempty"`
	ShopNo                  *string `protobuf:"bytes,10,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName                *string `protobuf:"bytes,11,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WdtStockInTypeName      *string `protobuf:"bytes,12,opt,name=wdt_stock_in_type_name,json=wdtStockInTypeName,proto3,oneof" json:"wdt_stock_in_type_name,omitempty"`
	KdStockInTypeName       *string `protobuf:"bytes,13,opt,name=kd_stock_in_type_name,json=kdStockInTypeName,proto3,oneof" json:"kd_stock_in_type_name,omitempty"`
	WdtStockOutTypeName     *string `protobuf:"bytes,14,opt,name=wdt_stock_out_type_name,json=wdtStockOutTypeName,proto3,oneof" json:"wdt_stock_out_type_name,omitempty"`
	KdStockOutTypeName      *string `protobuf:"bytes,15,opt,name=kd_stock_out_type_name,json=kdStockOutTypeName,proto3,oneof" json:"kd_stock_out_type_name,omitempty"`
	IsValid                 *bool   `protobuf:"varint,16,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
	IsSync                  *bool   `protobuf:"varint,17,opt,name=is_sync,json=isSync,proto3,oneof" json:"is_sync,omitempty"`
	BrandNo                 *string `protobuf:"bytes,18,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName               *string `protobuf:"bytes,19,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	WdtStockInType          *int32  `protobuf:"varint,20,opt,name=wdt_stock_in_type,json=wdtStockInType,proto3,oneof" json:"wdt_stock_in_type,omitempty"`
	KdStockInType           *int32  `protobuf:"varint,21,opt,name=kd_stock_in_type,json=kdStockInType,proto3,oneof" json:"kd_stock_in_type,omitempty"`
	KdTransferFromStockNo   *string `protobuf:"bytes,22,opt,name=kd_transfer_from_stock_no,json=kdTransferFromStockNo,proto3,oneof" json:"kd_transfer_from_stock_no,omitempty"`
	KdTransferFromStockName *string `protobuf:"bytes,23,opt,name=kd_transfer_from_stock_name,json=kdTransferFromStockName,proto3,oneof" json:"kd_transfer_from_stock_name,omitempty"`
	WdtStockOutType         *int32  `protobuf:"varint,24,opt,name=wdt_stock_out_type,json=wdtStockOutType,proto3,oneof" json:"wdt_stock_out_type,omitempty"`
	KdStockOutType          *int32  `protobuf:"varint,25,opt,name=kd_stock_out_type,json=kdStockOutType,proto3,oneof" json:"kd_stock_out_type,omitempty"`
	KdTransferToStockNo     *string `protobuf:"bytes,26,opt,name=kd_transfer_to_stock_no,json=kdTransferToStockNo,proto3,oneof" json:"kd_transfer_to_stock_no,omitempty"`
	KdTransferToStockName   *string `protobuf:"bytes,27,opt,name=kd_transfer_to_stock_name,json=kdTransferToStockName,proto3,oneof" json:"kd_transfer_to_stock_name,omitempty"`
}

func (x *ChannelShopConfigResponse) Reset() {
	*x = ChannelShopConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelShopConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelShopConfigResponse) ProtoMessage() {}

func (x *ChannelShopConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelShopConfigResponse.ProtoReflect.Descriptor instead.
func (*ChannelShopConfigResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{77}
}

func (x *ChannelShopConfigResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetBuCodeName() string {
	if x != nil && x.BuCodeName != nil {
		return *x.BuCodeName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetChannelCodeName() string {
	if x != nil && x.ChannelCodeName != nil {
		return *x.ChannelCodeName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetBuCode() int32 {
	if x != nil && x.BuCode != nil {
		return *x.BuCode
	}
	return 0
}

func (x *ChannelShopConfigResponse) GetBuName() string {
	if x != nil && x.BuName != nil {
		return *x.BuName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetChannelCode() int32 {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return 0
}

func (x *ChannelShopConfigResponse) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetWdtStockInTypeName() string {
	if x != nil && x.WdtStockInTypeName != nil {
		return *x.WdtStockInTypeName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetKdStockInTypeName() string {
	if x != nil && x.KdStockInTypeName != nil {
		return *x.KdStockInTypeName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetWdtStockOutTypeName() string {
	if x != nil && x.WdtStockOutTypeName != nil {
		return *x.WdtStockOutTypeName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetKdStockOutTypeName() string {
	if x != nil && x.KdStockOutTypeName != nil {
		return *x.KdStockOutTypeName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *ChannelShopConfigResponse) GetIsSync() bool {
	if x != nil && x.IsSync != nil {
		return *x.IsSync
	}
	return false
}

func (x *ChannelShopConfigResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetWdtStockInType() int32 {
	if x != nil && x.WdtStockInType != nil {
		return *x.WdtStockInType
	}
	return 0
}

func (x *ChannelShopConfigResponse) GetKdStockInType() int32 {
	if x != nil && x.KdStockInType != nil {
		return *x.KdStockInType
	}
	return 0
}

func (x *ChannelShopConfigResponse) GetKdTransferFromStockNo() string {
	if x != nil && x.KdTransferFromStockNo != nil {
		return *x.KdTransferFromStockNo
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetKdTransferFromStockName() string {
	if x != nil && x.KdTransferFromStockName != nil {
		return *x.KdTransferFromStockName
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetWdtStockOutType() int32 {
	if x != nil && x.WdtStockOutType != nil {
		return *x.WdtStockOutType
	}
	return 0
}

func (x *ChannelShopConfigResponse) GetKdStockOutType() int32 {
	if x != nil && x.KdStockOutType != nil {
		return *x.KdStockOutType
	}
	return 0
}

func (x *ChannelShopConfigResponse) GetKdTransferToStockNo() string {
	if x != nil && x.KdTransferToStockNo != nil {
		return *x.KdTransferToStockNo
	}
	return ""
}

func (x *ChannelShopConfigResponse) GetKdTransferToStockName() string {
	if x != nil && x.KdTransferToStockName != nil {
		return *x.KdTransferToStockName
	}
	return ""
}

type ChannelShopConfigRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *ChannelShopConfigRetrieveRequest) Reset() {
	*x = ChannelShopConfigRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelShopConfigRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelShopConfigRetrieveRequest) ProtoMessage() {}

func (x *ChannelShopConfigRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelShopConfigRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ChannelShopConfigRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{78}
}

func (x *ChannelShopConfigRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type ChannelShopConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPartialUpdateFields    []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	XId                     *string  `protobuf:"bytes,3,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	BuCode                  *int32   `protobuf:"varint,4,opt,name=bu_code,json=buCode,proto3,oneof" json:"bu_code,omitempty"`
	BuName                  *string  `protobuf:"bytes,5,opt,name=bu_name,json=buName,proto3,oneof" json:"bu_name,omitempty"`
	ChannelCode             *int32   `protobuf:"varint,6,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	ChannelName             *string  `protobuf:"bytes,7,opt,name=channel_name,json=channelName,proto3,oneof" json:"channel_name,omitempty"`
	ShopNo                  *string  `protobuf:"bytes,8,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName                *string  `protobuf:"bytes,9,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	IsValid                 *bool    `protobuf:"varint,10,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
	IsSync                  *bool    `protobuf:"varint,11,opt,name=is_sync,json=isSync,proto3,oneof" json:"is_sync,omitempty"`
	BrandNo                 *string  `protobuf:"bytes,12,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName               *string  `protobuf:"bytes,13,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	WdtStockInType          *int32   `protobuf:"varint,14,opt,name=wdt_stock_in_type,json=wdtStockInType,proto3,oneof" json:"wdt_stock_in_type,omitempty"`
	KdStockInType           *int32   `protobuf:"varint,15,opt,name=kd_stock_in_type,json=kdStockInType,proto3,oneof" json:"kd_stock_in_type,omitempty"`
	KdTransferFromStockNo   *string  `protobuf:"bytes,16,opt,name=kd_transfer_from_stock_no,json=kdTransferFromStockNo,proto3,oneof" json:"kd_transfer_from_stock_no,omitempty"`
	KdTransferFromStockName *string  `protobuf:"bytes,17,opt,name=kd_transfer_from_stock_name,json=kdTransferFromStockName,proto3,oneof" json:"kd_transfer_from_stock_name,omitempty"`
	WdtStockOutType         *int32   `protobuf:"varint,18,opt,name=wdt_stock_out_type,json=wdtStockOutType,proto3,oneof" json:"wdt_stock_out_type,omitempty"`
	KdStockOutType          *int32   `protobuf:"varint,19,opt,name=kd_stock_out_type,json=kdStockOutType,proto3,oneof" json:"kd_stock_out_type,omitempty"`
	KdTransferToStockNo     *string  `protobuf:"bytes,20,opt,name=kd_transfer_to_stock_no,json=kdTransferToStockNo,proto3,oneof" json:"kd_transfer_to_stock_no,omitempty"`
	KdTransferToStockName   *string  `protobuf:"bytes,21,opt,name=kd_transfer_to_stock_name,json=kdTransferToStockName,proto3,oneof" json:"kd_transfer_to_stock_name,omitempty"`
}

func (x *ChannelShopConfigUpdateRequest) Reset() {
	*x = ChannelShopConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelShopConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelShopConfigUpdateRequest) ProtoMessage() {}

func (x *ChannelShopConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelShopConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*ChannelShopConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{79}
}

func (x *ChannelShopConfigUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ChannelShopConfigUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetBuCode() int32 {
	if x != nil && x.BuCode != nil {
		return *x.BuCode
	}
	return 0
}

func (x *ChannelShopConfigUpdateRequest) GetBuName() string {
	if x != nil && x.BuName != nil {
		return *x.BuName
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetChannelCode() int32 {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return 0
}

func (x *ChannelShopConfigUpdateRequest) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *ChannelShopConfigUpdateRequest) GetIsSync() bool {
	if x != nil && x.IsSync != nil {
		return *x.IsSync
	}
	return false
}

func (x *ChannelShopConfigUpdateRequest) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetWdtStockInType() int32 {
	if x != nil && x.WdtStockInType != nil {
		return *x.WdtStockInType
	}
	return 0
}

func (x *ChannelShopConfigUpdateRequest) GetKdStockInType() int32 {
	if x != nil && x.KdStockInType != nil {
		return *x.KdStockInType
	}
	return 0
}

func (x *ChannelShopConfigUpdateRequest) GetKdTransferFromStockNo() string {
	if x != nil && x.KdTransferFromStockNo != nil {
		return *x.KdTransferFromStockNo
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetKdTransferFromStockName() string {
	if x != nil && x.KdTransferFromStockName != nil {
		return *x.KdTransferFromStockName
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetWdtStockOutType() int32 {
	if x != nil && x.WdtStockOutType != nil {
		return *x.WdtStockOutType
	}
	return 0
}

func (x *ChannelShopConfigUpdateRequest) GetKdStockOutType() int32 {
	if x != nil && x.KdStockOutType != nil {
		return *x.KdStockOutType
	}
	return 0
}

func (x *ChannelShopConfigUpdateRequest) GetKdTransferToStockNo() string {
	if x != nil && x.KdTransferToStockNo != nil {
		return *x.KdTransferToStockNo
	}
	return ""
}

func (x *ChannelShopConfigUpdateRequest) GetKdTransferToStockName() string {
	if x != nil && x.KdTransferToStockName != nil {
		return *x.KdTransferToStockName
	}
	return ""
}

type ClockedScheduleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime string `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
}

func (x *ClockedScheduleCreateRequest) Reset() {
	*x = ClockedScheduleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleCreateRequest) ProtoMessage() {}

func (x *ClockedScheduleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleCreateRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{80}
}

func (x *ClockedScheduleCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleCreateRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

type ClockedScheduleDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClockedScheduleDestroyRequest) Reset() {
	*x = ClockedScheduleDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleDestroyRequest) ProtoMessage() {}

func (x *ClockedScheduleDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleDestroyRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{81}
}

func (x *ClockedScheduleDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClockedScheduleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *ClockedScheduleListRequest) Reset() {
	*x = ClockedScheduleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleListRequest) ProtoMessage() {}

func (x *ClockedScheduleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleListRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{82}
}

func (x *ClockedScheduleListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *ClockedScheduleListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type ClockedScheduleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClockedScheduleResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ClockedScheduleListResponse) Reset() {
	*x = ClockedScheduleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleListResponse) ProtoMessage() {}

func (x *ClockedScheduleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleListResponse.ProtoReflect.Descriptor instead.
func (*ClockedScheduleListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{83}
}

func (x *ClockedScheduleListResponse) GetResults() []*ClockedScheduleResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ClockedScheduleListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ClockedSchedulePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime          string   `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *ClockedSchedulePartialUpdateRequest) Reset() {
	*x = ClockedSchedulePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedSchedulePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedSchedulePartialUpdateRequest) ProtoMessage() {}

func (x *ClockedSchedulePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedSchedulePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClockedSchedulePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{84}
}

func (x *ClockedSchedulePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedSchedulePartialUpdateRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

func (x *ClockedSchedulePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type ClockedScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime string `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
}

func (x *ClockedScheduleRequest) Reset() {
	*x = ClockedScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleRequest) ProtoMessage() {}

func (x *ClockedScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{85}
}

func (x *ClockedScheduleRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

type ClockedScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime string `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
}

func (x *ClockedScheduleResponse) Reset() {
	*x = ClockedScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleResponse) ProtoMessage() {}

func (x *ClockedScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleResponse.ProtoReflect.Descriptor instead.
func (*ClockedScheduleResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{86}
}

func (x *ClockedScheduleResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleResponse) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

type ClockedScheduleRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClockedScheduleRetrieveRequest) Reset() {
	*x = ClockedScheduleRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleRetrieveRequest) ProtoMessage() {}

func (x *ClockedScheduleRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{87}
}

func (x *ClockedScheduleRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClockedScheduleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime          string   `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *ClockedScheduleUpdateRequest) Reset() {
	*x = ClockedScheduleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleUpdateRequest) ProtoMessage() {}

func (x *ClockedScheduleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{88}
}

func (x *ClockedScheduleUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleUpdateRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

func (x *ClockedScheduleUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type CodeMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CodeMsgResponse) Reset() {
	*x = CodeMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeMsgResponse) ProtoMessage() {}

func (x *CodeMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeMsgResponse.ProtoReflect.Descriptor instead.
func (*CodeMsgResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{89}
}

func (x *CodeMsgResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CodeMsgResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CodeMsgResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CountAggRefundPushStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAggRefundPushStatusRequest) Reset() {
	*x = CountAggRefundPushStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAggRefundPushStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAggRefundPushStatusRequest) ProtoMessage() {}

func (x *CountAggRefundPushStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAggRefundPushStatusRequest.ProtoReflect.Descriptor instead.
func (*CountAggRefundPushStatusRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{90}
}

type CountAggRefundPushStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsignWaitPush   int32 `protobuf:"varint,1,opt,name=consign_wait_push,json=consignWaitPush,proto3" json:"consign_wait_push,omitempty"`
	ConsignFailedPush int32 `protobuf:"varint,2,opt,name=consign_failed_push,json=consignFailedPush,proto3" json:"consign_failed_push,omitempty"`
}

func (x *CountAggRefundPushStatusResponse) Reset() {
	*x = CountAggRefundPushStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAggRefundPushStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAggRefundPushStatusResponse) ProtoMessage() {}

func (x *CountAggRefundPushStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAggRefundPushStatusResponse.ProtoReflect.Descriptor instead.
func (*CountAggRefundPushStatusResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{91}
}

func (x *CountAggRefundPushStatusResponse) GetConsignWaitPush() int32 {
	if x != nil {
		return x.ConsignWaitPush
	}
	return 0
}

func (x *CountAggRefundPushStatusResponse) GetConsignFailedPush() int32 {
	if x != nil {
		return x.ConsignFailedPush
	}
	return 0
}

type CountRefundStockInPushStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggWait            int32 `protobuf:"varint,1,opt,name=agg_wait,json=aggWait,proto3" json:"agg_wait,omitempty"`
	ConsignSuccessPush int32 `protobuf:"varint,2,opt,name=consign_success_push,json=consignSuccessPush,proto3" json:"consign_success_push,omitempty"`
	ConsignWaitPush    int32 `protobuf:"varint,3,opt,name=consign_wait_push,json=consignWaitPush,proto3" json:"consign_wait_push,omitempty"`
	ConsignFailedPush  int32 `protobuf:"varint,4,opt,name=consign_failed_push,json=consignFailedPush,proto3" json:"consign_failed_push,omitempty"`
}

func (x *CountRefundStockInPushStatusResponse) Reset() {
	*x = CountRefundStockInPushStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRefundStockInPushStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRefundStockInPushStatusResponse) ProtoMessage() {}

func (x *CountRefundStockInPushStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRefundStockInPushStatusResponse.ProtoReflect.Descriptor instead.
func (*CountRefundStockInPushStatusResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{92}
}

func (x *CountRefundStockInPushStatusResponse) GetAggWait() int32 {
	if x != nil {
		return x.AggWait
	}
	return 0
}

func (x *CountRefundStockInPushStatusResponse) GetConsignSuccessPush() int32 {
	if x != nil {
		return x.ConsignSuccessPush
	}
	return 0
}

func (x *CountRefundStockInPushStatusResponse) GetConsignWaitPush() int32 {
	if x != nil {
		return x.ConsignWaitPush
	}
	return 0
}

func (x *CountRefundStockInPushStatusResponse) GetConsignFailedPush() int32 {
	if x != nil {
		return x.ConsignFailedPush
	}
	return 0
}

type CreateKdPurchaseReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PurchaseReturnList string `protobuf:"bytes,2,opt,name=purchase_return_list,json=purchaseReturnList,proto3" json:"purchase_return_list,omitempty"`
}

func (x *CreateKdPurchaseReturnRequest) Reset() {
	*x = CreateKdPurchaseReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKdPurchaseReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKdPurchaseReturnRequest) ProtoMessage() {}

func (x *CreateKdPurchaseReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKdPurchaseReturnRequest.ProtoReflect.Descriptor instead.
func (*CreateKdPurchaseReturnRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{93}
}

func (x *CreateKdPurchaseReturnRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CreateKdPurchaseReturnRequest) GetPurchaseReturnList() string {
	if x != nil {
		return x.PurchaseReturnList
	}
	return ""
}

type CreateKdPurchaseReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *CreateKdPurchaseReturnResponse) Reset() {
	*x = CreateKdPurchaseReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKdPurchaseReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKdPurchaseReturnResponse) ProtoMessage() {}

func (x *CreateKdPurchaseReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKdPurchaseReturnResponse.ProtoReflect.Descriptor instead.
func (*CreateKdPurchaseReturnResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{94}
}

func (x *CreateKdPurchaseReturnResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateKdPurchaseReturnResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateKdPurchaseReturnResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type CreateKdTransferOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TransferOrderList string `protobuf:"bytes,2,opt,name=transfer_order_list,json=transferOrderList,proto3" json:"transfer_order_list,omitempty"`
}

func (x *CreateKdTransferOrderRequest) Reset() {
	*x = CreateKdTransferOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKdTransferOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKdTransferOrderRequest) ProtoMessage() {}

func (x *CreateKdTransferOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKdTransferOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateKdTransferOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{95}
}

func (x *CreateKdTransferOrderRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CreateKdTransferOrderRequest) GetTransferOrderList() string {
	if x != nil {
		return x.TransferOrderList
	}
	return ""
}

type CreateKdTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *CreateKdTransferOrderResponse) Reset() {
	*x = CreateKdTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKdTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKdTransferOrderResponse) ProtoMessage() {}

func (x *CreateKdTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKdTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateKdTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{96}
}

func (x *CreateKdTransferOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateKdTransferOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateKdTransferOrderResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type CreateTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg        string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TransferNo string `protobuf:"bytes,3,opt,name=transfer_no,json=transferNo,proto3" json:"transfer_no,omitempty"`
}

func (x *CreateTransferOrderResponse) Reset() {
	*x = CreateTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferOrderResponse) ProtoMessage() {}

func (x *CreateTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{97}
}

func (x *CreateTransferOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTransferOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateTransferOrderResponse) GetTransferNo() string {
	if x != nil {
		return x.TransferNo
	}
	return ""
}

type CrontabScheduleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute      *string `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour        *string `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth  *string `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear *string `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek   *string `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone    string  `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *CrontabScheduleCreateRequest) Reset() {
	*x = CrontabScheduleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleCreateRequest) ProtoMessage() {}

func (x *CrontabScheduleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleCreateRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{98}
}

func (x *CrontabScheduleCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleCreateRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type CrontabScheduleDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CrontabScheduleDestroyRequest) Reset() {
	*x = CrontabScheduleDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleDestroyRequest) ProtoMessage() {}

func (x *CrontabScheduleDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleDestroyRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{99}
}

func (x *CrontabScheduleDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CrontabScheduleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *CrontabScheduleListRequest) Reset() {
	*x = CrontabScheduleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleListRequest) ProtoMessage() {}

func (x *CrontabScheduleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleListRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{100}
}

func (x *CrontabScheduleListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *CrontabScheduleListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type CrontabScheduleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CrontabScheduleResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CrontabScheduleListResponse) Reset() {
	*x = CrontabScheduleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleListResponse) ProtoMessage() {}

func (x *CrontabScheduleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleListResponse.ProtoReflect.Descriptor instead.
func (*CrontabScheduleListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{101}
}

func (x *CrontabScheduleListResponse) GetResults() []*CrontabScheduleResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CrontabScheduleListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CrontabSchedulePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute               *string  `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour                 *string  `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth           *string  `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear          *string  `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek            *string  `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone             string   `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,8,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *CrontabSchedulePartialUpdateRequest) Reset() {
	*x = CrontabSchedulePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabSchedulePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabSchedulePartialUpdateRequest) ProtoMessage() {}

func (x *CrontabSchedulePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabSchedulePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*CrontabSchedulePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{102}
}

func (x *CrontabSchedulePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabSchedulePartialUpdateRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type CrontabScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute      *string `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour        *string `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth  *string `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear *string `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek   *string `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone    string  `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *CrontabScheduleRequest) Reset() {
	*x = CrontabScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleRequest) ProtoMessage() {}

func (x *CrontabScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{103}
}

func (x *CrontabScheduleRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type CrontabScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute      *string `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour        *string `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth  *string `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear *string `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek   *string `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone    string  `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *CrontabScheduleResponse) Reset() {
	*x = CrontabScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleResponse) ProtoMessage() {}

func (x *CrontabScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleResponse.ProtoReflect.Descriptor instead.
func (*CrontabScheduleResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{104}
}

func (x *CrontabScheduleResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleResponse) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleResponse) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleResponse) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleResponse) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleResponse) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleResponse) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type CrontabScheduleRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CrontabScheduleRetrieveRequest) Reset() {
	*x = CrontabScheduleRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleRetrieveRequest) ProtoMessage() {}

func (x *CrontabScheduleRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{105}
}

func (x *CrontabScheduleRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CrontabScheduleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute               *string  `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour                 *string  `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth           *string  `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear          *string  `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek            *string  `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone             string   `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,8,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *CrontabScheduleUpdateRequest) Reset() {
	*x = CrontabScheduleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleUpdateRequest) ProtoMessage() {}

func (x *CrontabScheduleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleUpdateRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{106}
}

func (x *CrontabScheduleUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleUpdateRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type CxlKdPurchaseReturnFromWdtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseReturnNo string `protobuf:"bytes,1,opt,name=purchase_return_no,json=purchaseReturnNo,proto3" json:"purchase_return_no,omitempty"`
}

func (x *CxlKdPurchaseReturnFromWdtRequest) Reset() {
	*x = CxlKdPurchaseReturnFromWdtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CxlKdPurchaseReturnFromWdtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CxlKdPurchaseReturnFromWdtRequest) ProtoMessage() {}

func (x *CxlKdPurchaseReturnFromWdtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CxlKdPurchaseReturnFromWdtRequest.ProtoReflect.Descriptor instead.
func (*CxlKdPurchaseReturnFromWdtRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{107}
}

func (x *CxlKdPurchaseReturnFromWdtRequest) GetPurchaseReturnNo() string {
	if x != nil {
		return x.PurchaseReturnNo
	}
	return ""
}

type CxlKdPurchaseReturnFromWdtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CxlKdPurchaseReturnFromWdtResponse) Reset() {
	*x = CxlKdPurchaseReturnFromWdtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CxlKdPurchaseReturnFromWdtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CxlKdPurchaseReturnFromWdtResponse) ProtoMessage() {}

func (x *CxlKdPurchaseReturnFromWdtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CxlKdPurchaseReturnFromWdtResponse.ProtoReflect.Descriptor instead.
func (*CxlKdPurchaseReturnFromWdtResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{108}
}

func (x *CxlKdPurchaseReturnFromWdtResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CxlKdPurchaseReturnFromWdtResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CxlKdPurchaseReturnFromWdtResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CxlKdReceiveBillFromWdtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveBill string `protobuf:"bytes,1,opt,name=receive_bill,json=receiveBill,proto3" json:"receive_bill,omitempty"`
}

func (x *CxlKdReceiveBillFromWdtRequest) Reset() {
	*x = CxlKdReceiveBillFromWdtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CxlKdReceiveBillFromWdtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CxlKdReceiveBillFromWdtRequest) ProtoMessage() {}

func (x *CxlKdReceiveBillFromWdtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CxlKdReceiveBillFromWdtRequest.ProtoReflect.Descriptor instead.
func (*CxlKdReceiveBillFromWdtRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{109}
}

func (x *CxlKdReceiveBillFromWdtRequest) GetReceiveBill() string {
	if x != nil {
		return x.ReceiveBill
	}
	return ""
}

type CxlKdReceiveBillFromWdtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CxlKdReceiveBillFromWdtResponse) Reset() {
	*x = CxlKdReceiveBillFromWdtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CxlKdReceiveBillFromWdtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CxlKdReceiveBillFromWdtResponse) ProtoMessage() {}

func (x *CxlKdReceiveBillFromWdtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CxlKdReceiveBillFromWdtResponse.ProtoReflect.Descriptor instead.
func (*CxlKdReceiveBillFromWdtResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{110}
}

func (x *CxlKdReceiveBillFromWdtResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CxlKdReceiveBillFromWdtResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CxlKdReceiveBillFromWdtResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CxlKdTransferOrderFromWdtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferOrder string `protobuf:"bytes,1,opt,name=transfer_order,json=transferOrder,proto3" json:"transfer_order,omitempty"`
}

func (x *CxlKdTransferOrderFromWdtRequest) Reset() {
	*x = CxlKdTransferOrderFromWdtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CxlKdTransferOrderFromWdtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CxlKdTransferOrderFromWdtRequest) ProtoMessage() {}

func (x *CxlKdTransferOrderFromWdtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CxlKdTransferOrderFromWdtRequest.ProtoReflect.Descriptor instead.
func (*CxlKdTransferOrderFromWdtRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{111}
}

func (x *CxlKdTransferOrderFromWdtRequest) GetTransferOrder() string {
	if x != nil {
		return x.TransferOrder
	}
	return ""
}

type CxlKdTransferOrderFromWdtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CxlKdTransferOrderFromWdtResponse) Reset() {
	*x = CxlKdTransferOrderFromWdtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CxlKdTransferOrderFromWdtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CxlKdTransferOrderFromWdtResponse) ProtoMessage() {}

func (x *CxlKdTransferOrderFromWdtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CxlKdTransferOrderFromWdtResponse.ProtoReflect.Descriptor instead.
func (*CxlKdTransferOrderFromWdtResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{112}
}

func (x *CxlKdTransferOrderFromWdtResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CxlKdTransferOrderFromWdtResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CxlKdTransferOrderFromWdtResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggBillResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *DestroyAggBillResultRequest) Reset() {
	*x = DestroyAggBillResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggBillResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggBillResultRequest) ProtoMessage() {}

func (x *DestroyAggBillResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggBillResultRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggBillResultRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{113}
}

func (x *DestroyAggBillResultRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type DestroyAggBillResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DestroyAggBillResultResponse) Reset() {
	*x = DestroyAggBillResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggBillResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggBillResultResponse) ProtoMessage() {}

func (x *DestroyAggBillResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggBillResultResponse.ProtoReflect.Descriptor instead.
func (*DestroyAggBillResultResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{114}
}

func (x *DestroyAggBillResultResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyAggBillResultResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyAggBillResultResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggKingdeeStkMisdeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList     []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggPushStatus int32    `protobuf:"varint,2,opt,name=agg_push_status,json=aggPushStatus,proto3" json:"agg_push_status,omitempty"`
}

func (x *DestroyAggKingdeeStkMisdeliveryRequest) Reset() {
	*x = DestroyAggKingdeeStkMisdeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggKingdeeStkMisdeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggKingdeeStkMisdeliveryRequest) ProtoMessage() {}

func (x *DestroyAggKingdeeStkMisdeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggKingdeeStkMisdeliveryRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggKingdeeStkMisdeliveryRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{115}
}

func (x *DestroyAggKingdeeStkMisdeliveryRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *DestroyAggKingdeeStkMisdeliveryRequest) GetAggPushStatus() int32 {
	if x != nil {
		return x.AggPushStatus
	}
	return 0
}

type DestroyAggKingdeeStkMisdeliveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DestroyAggKingdeeStkMisdeliveryResponse) Reset() {
	*x = DestroyAggKingdeeStkMisdeliveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggKingdeeStkMisdeliveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggKingdeeStkMisdeliveryResponse) ProtoMessage() {}

func (x *DestroyAggKingdeeStkMisdeliveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggKingdeeStkMisdeliveryResponse.ProtoReflect.Descriptor instead.
func (*DestroyAggKingdeeStkMisdeliveryResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{116}
}

func (x *DestroyAggKingdeeStkMisdeliveryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyAggKingdeeStkMisdeliveryResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyAggKingdeeStkMisdeliveryResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggSeedingKingdeeTransferDirectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList     []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggPushStatus int32    `protobuf:"varint,2,opt,name=agg_push_status,json=aggPushStatus,proto3" json:"agg_push_status,omitempty"`
}

func (x *DestroyAggSeedingKingdeeTransferDirectRequest) Reset() {
	*x = DestroyAggSeedingKingdeeTransferDirectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggSeedingKingdeeTransferDirectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggSeedingKingdeeTransferDirectRequest) ProtoMessage() {}

func (x *DestroyAggSeedingKingdeeTransferDirectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggSeedingKingdeeTransferDirectRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggSeedingKingdeeTransferDirectRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{117}
}

func (x *DestroyAggSeedingKingdeeTransferDirectRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *DestroyAggSeedingKingdeeTransferDirectRequest) GetAggPushStatus() int32 {
	if x != nil {
		return x.AggPushStatus
	}
	return 0
}

type DestroyAggSeedingKingdeeTransferDirectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DestroyAggSeedingKingdeeTransferDirectResponse) Reset() {
	*x = DestroyAggSeedingKingdeeTransferDirectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggSeedingKingdeeTransferDirectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggSeedingKingdeeTransferDirectResponse) ProtoMessage() {}

func (x *DestroyAggSeedingKingdeeTransferDirectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggSeedingKingdeeTransferDirectResponse.ProtoReflect.Descriptor instead.
func (*DestroyAggSeedingKingdeeTransferDirectResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{118}
}

func (x *DestroyAggSeedingKingdeeTransferDirectResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyAggSeedingKingdeeTransferDirectResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyAggSeedingKingdeeTransferDirectResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggSwapKingdeeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList     []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggPushStatus int32    `protobuf:"varint,2,opt,name=agg_push_status,json=aggPushStatus,proto3" json:"agg_push_status,omitempty"`
}

func (x *DestroyAggSwapKingdeeRefundRequest) Reset() {
	*x = DestroyAggSwapKingdeeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggSwapKingdeeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggSwapKingdeeRefundRequest) ProtoMessage() {}

func (x *DestroyAggSwapKingdeeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggSwapKingdeeRefundRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggSwapKingdeeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{119}
}

func (x *DestroyAggSwapKingdeeRefundRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *DestroyAggSwapKingdeeRefundRequest) GetAggPushStatus() int32 {
	if x != nil {
		return x.AggPushStatus
	}
	return 0
}

type DestroyAggSwapKingdeeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DestroyAggSwapKingdeeRefundResponse) Reset() {
	*x = DestroyAggSwapKingdeeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggSwapKingdeeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggSwapKingdeeRefundResponse) ProtoMessage() {}

func (x *DestroyAggSwapKingdeeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggSwapKingdeeRefundResponse.ProtoReflect.Descriptor instead.
func (*DestroyAggSwapKingdeeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{120}
}

func (x *DestroyAggSwapKingdeeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyAggSwapKingdeeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyAggSwapKingdeeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggSwapKingdeeSalOutStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList     []string `protobuf:"bytes,1,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggPushStatus int32    `protobuf:"varint,2,opt,name=agg_push_status,json=aggPushStatus,proto3" json:"agg_push_status,omitempty"`
}

func (x *DestroyAggSwapKingdeeSalOutStockRequest) Reset() {
	*x = DestroyAggSwapKingdeeSalOutStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggSwapKingdeeSalOutStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggSwapKingdeeSalOutStockRequest) ProtoMessage() {}

func (x *DestroyAggSwapKingdeeSalOutStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggSwapKingdeeSalOutStockRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggSwapKingdeeSalOutStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{121}
}

func (x *DestroyAggSwapKingdeeSalOutStockRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *DestroyAggSwapKingdeeSalOutStockRequest) GetAggPushStatus() int32 {
	if x != nil {
		return x.AggPushStatus
	}
	return 0
}

type DestroyAggSwapKingdeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DestroyAggSwapKingdeeSalOutStockResponse) Reset() {
	*x = DestroyAggSwapKingdeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggSwapKingdeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggSwapKingdeeSalOutStockResponse) ProtoMessage() {}

func (x *DestroyAggSwapKingdeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggSwapKingdeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*DestroyAggSwapKingdeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{122}
}

func (x *DestroyAggSwapKingdeeSalOutStockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyAggSwapKingdeeSalOutStockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyAggSwapKingdeeSalOutStockResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *DestroyAggTradeRefundRequest) Reset() {
	*x = DestroyAggTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggTradeRefundRequest) ProtoMessage() {}

func (x *DestroyAggTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{123}
}

func (x *DestroyAggTradeRefundRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type DestroyAggTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DestroyAggTradeRefundResponse) Reset() {
	*x = DestroyAggTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggTradeRefundResponse) ProtoMessage() {}

func (x *DestroyAggTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*DestroyAggTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{124}
}

func (x *DestroyAggTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyAggTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyAggTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo             string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
	SalOutstockStatus int32  `protobuf:"varint,2,opt,name=sal_outstock_status,json=salOutstockStatus,proto3" json:"sal_outstock_status,omitempty"`
}

func (x *DestroyAggTradeRequest) Reset() {
	*x = DestroyAggTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggTradeRequest) ProtoMessage() {}

func (x *DestroyAggTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggTradeRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{125}
}

func (x *DestroyAggTradeRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

func (x *DestroyAggTradeRequest) GetSalOutstockStatus() int32 {
	if x != nil {
		return x.SalOutstockStatus
	}
	return 0
}

type DestroyAggTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DestroyAggTradeResponse) Reset() {
	*x = DestroyAggTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggTradeResponse) ProtoMessage() {}

func (x *DestroyAggTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggTradeResponse.ProtoReflect.Descriptor instead.
func (*DestroyAggTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{126}
}

func (x *DestroyAggTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyAggTradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyAggTradeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DestroyAggTransRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *DestroyAggTransRequest) Reset() {
	*x = DestroyAggTransRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyAggTransRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAggTransRequest) ProtoMessage() {}

func (x *DestroyAggTransRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAggTransRequest.ProtoReflect.Descriptor instead.
func (*DestroyAggTransRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{127}
}

func (x *DestroyAggTransRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type DestroyChannelShopConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *DestroyChannelShopConfigRequest) Reset() {
	*x = DestroyChannelShopConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyChannelShopConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyChannelShopConfigRequest) ProtoMessage() {}

func (x *DestroyChannelShopConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyChannelShopConfigRequest.ProtoReflect.Descriptor instead.
func (*DestroyChannelShopConfigRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{128}
}

func (x *DestroyChannelShopConfigRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type DestroyChannelShopConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DestroyChannelShopConfigResponse) Reset() {
	*x = DestroyChannelShopConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyChannelShopConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyChannelShopConfigResponse) ProtoMessage() {}

func (x *DestroyChannelShopConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyChannelShopConfigResponse.ProtoReflect.Descriptor instead.
func (*DestroyChannelShopConfigResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{129}
}

func (x *DestroyChannelShopConfigResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DestroyChannelShopConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DestroyChannelShopConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{130}
}

type FStaffNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FStaffNumber *string `protobuf:"bytes,2,opt,name=FStaffNumber,proto3,oneof" json:"FStaffNumber,omitempty"`
}

func (x *FStaffNumberResponse) Reset() {
	*x = FStaffNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FStaffNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FStaffNumberResponse) ProtoMessage() {}

func (x *FStaffNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FStaffNumberResponse.ProtoReflect.Descriptor instead.
func (*FStaffNumberResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{131}
}

func (x *FStaffNumberResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *FStaffNumberResponse) GetFStaffNumber() string {
	if x != nil && x.FStaffNumber != nil {
		return *x.FStaffNumber
	}
	return ""
}

type FetchAlipayBillTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *FetchAlipayBillTaskResponse) Reset() {
	*x = FetchAlipayBillTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAlipayBillTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAlipayBillTaskResponse) ProtoMessage() {}

func (x *FetchAlipayBillTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAlipayBillTaskResponse.ProtoReflect.Descriptor instead.
func (*FetchAlipayBillTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{132}
}

func (x *FetchAlipayBillTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchAlipayBillTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FetchAlipayLogAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *FetchAlipayLogAsyncRequest) Reset() {
	*x = FetchAlipayLogAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAlipayLogAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAlipayLogAsyncRequest) ProtoMessage() {}

func (x *FetchAlipayLogAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAlipayLogAsyncRequest.ProtoReflect.Descriptor instead.
func (*FetchAlipayLogAsyncRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{133}
}

func (x *FetchAlipayLogAsyncRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FetchAlipayLogAsyncRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type FetchAlipayLogAsyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *FetchAlipayLogAsyncResponse) Reset() {
	*x = FetchAlipayLogAsyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAlipayLogAsyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAlipayLogAsyncResponse) ProtoMessage() {}

func (x *FetchAlipayLogAsyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAlipayLogAsyncResponse.ProtoReflect.Descriptor instead.
func (*FetchAlipayLogAsyncResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{134}
}

func (x *FetchAlipayLogAsyncResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchAlipayLogAsyncResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FetchQimenTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string  `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string  `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status    *string `protobuf:"bytes,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *FetchQimenTradeRequest) Reset() {
	*x = FetchQimenTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchQimenTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchQimenTradeRequest) ProtoMessage() {}

func (x *FetchQimenTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchQimenTradeRequest.ProtoReflect.Descriptor instead.
func (*FetchQimenTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{135}
}

func (x *FetchQimenTradeRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FetchQimenTradeRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *FetchQimenTradeRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type FetchQimenTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Affected int32 `protobuf:"varint,2,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *FetchQimenTradeResponse) Reset() {
	*x = FetchQimenTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchQimenTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchQimenTradeResponse) ProtoMessage() {}

func (x *FetchQimenTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchQimenTradeResponse.ProtoReflect.Descriptor instead.
func (*FetchQimenTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{136}
}

func (x *FetchQimenTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchQimenTradeResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type FetchRefundListFromWdtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundList []string `protobuf:"bytes,1,rep,name=refund_list,json=refundList,proto3" json:"refund_list,omitempty"`
}

func (x *FetchRefundListFromWdtRequest) Reset() {
	*x = FetchRefundListFromWdtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRefundListFromWdtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRefundListFromWdtRequest) ProtoMessage() {}

func (x *FetchRefundListFromWdtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRefundListFromWdtRequest.ProtoReflect.Descriptor instead.
func (*FetchRefundListFromWdtRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{137}
}

func (x *FetchRefundListFromWdtRequest) GetRefundList() []string {
	if x != nil {
		return x.RefundList
	}
	return nil
}

type FetchRefundListFromWdtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FetchRefundListFromWdtResponse) Reset() {
	*x = FetchRefundListFromWdtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRefundListFromWdtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRefundListFromWdtResponse) ProtoMessage() {}

func (x *FetchRefundListFromWdtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRefundListFromWdtResponse.ProtoReflect.Descriptor instead.
func (*FetchRefundListFromWdtResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{138}
}

func (x *FetchRefundListFromWdtResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchRefundListFromWdtResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FetchRefundListFromWdtResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type FetchSrcTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *FetchSrcTradeRequest) Reset() {
	*x = FetchSrcTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSrcTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSrcTradeRequest) ProtoMessage() {}

func (x *FetchSrcTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSrcTradeRequest.ProtoReflect.Descriptor instead.
func (*FetchSrcTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{139}
}

func (x *FetchSrcTradeRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FetchSrcTradeRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type FetchSrcTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Affected int32 `protobuf:"varint,2,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *FetchSrcTradeResponse) Reset() {
	*x = FetchSrcTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSrcTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSrcTradeResponse) ProtoMessage() {}

func (x *FetchSrcTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSrcTradeResponse.ProtoReflect.Descriptor instead.
func (*FetchSrcTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{140}
}

func (x *FetchSrcTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchSrcTradeResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type FetchSrcTradeTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *FetchSrcTradeTaskResponse) Reset() {
	*x = FetchSrcTradeTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSrcTradeTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSrcTradeTaskResponse) ProtoMessage() {}

func (x *FetchSrcTradeTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSrcTradeTaskResponse.ProtoReflect.Descriptor instead.
func (*FetchSrcTradeTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{141}
}

func (x *FetchSrcTradeTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchSrcTradeTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FetchTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Uuid      string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *FetchTaskRequest) Reset() {
	*x = FetchTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTaskRequest) ProtoMessage() {}

func (x *FetchTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTaskRequest.ProtoReflect.Descriptor instead.
func (*FetchTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{142}
}

func (x *FetchTaskRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FetchTaskRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *FetchTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type FetchTradeListFromWdtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeList []string `protobuf:"bytes,1,rep,name=trade_list,json=tradeList,proto3" json:"trade_list,omitempty"`
}

func (x *FetchTradeListFromWdtRequest) Reset() {
	*x = FetchTradeListFromWdtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTradeListFromWdtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTradeListFromWdtRequest) ProtoMessage() {}

func (x *FetchTradeListFromWdtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTradeListFromWdtRequest.ProtoReflect.Descriptor instead.
func (*FetchTradeListFromWdtRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{143}
}

func (x *FetchTradeListFromWdtRequest) GetTradeList() []string {
	if x != nil {
		return x.TradeList
	}
	return nil
}

type FetchTradeListFromWdtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FetchTradeListFromWdtResponse) Reset() {
	*x = FetchTradeListFromWdtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTradeListFromWdtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTradeListFromWdtResponse) ProtoMessage() {}

func (x *FetchTradeListFromWdtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTradeListFromWdtResponse.ProtoReflect.Descriptor instead.
func (*FetchTradeListFromWdtResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{144}
}

func (x *FetchTradeListFromWdtResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchTradeListFromWdtResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FetchTradeListFromWdtResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type FetchTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreSliceEnd  *string `protobuf:"bytes,1,opt,name=pre_slice_end,json=preSliceEnd,proto3,oneof" json:"pre_slice_end,omitempty"`
	RequireStart string  `protobuf:"bytes,2,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd   *string `protobuf:"bytes,3,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
}

func (x *FetchTradeRefundRequest) Reset() {
	*x = FetchTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTradeRefundRequest) ProtoMessage() {}

func (x *FetchTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*FetchTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{145}
}

func (x *FetchTradeRefundRequest) GetPreSliceEnd() string {
	if x != nil && x.PreSliceEnd != nil {
		return *x.PreSliceEnd
	}
	return ""
}

func (x *FetchTradeRefundRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *FetchTradeRefundRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

type FetchTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FetchTradeRefundResponse) Reset() {
	*x = FetchTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTradeRefundResponse) ProtoMessage() {}

func (x *FetchTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*FetchTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{146}
}

func (x *FetchTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FetchTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type InitChannelShopConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitChannelShopConfigRequest) Reset() {
	*x = InitChannelShopConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitChannelShopConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitChannelShopConfigRequest) ProtoMessage() {}

func (x *InitChannelShopConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitChannelShopConfigRequest.ProtoReflect.Descriptor instead.
func (*InitChannelShopConfigRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{147}
}

type InitChannelShopConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *InitChannelShopConfigResponse) Reset() {
	*x = InitChannelShopConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitChannelShopConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitChannelShopConfigResponse) ProtoMessage() {}

func (x *InitChannelShopConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitChannelShopConfigResponse.ProtoReflect.Descriptor instead.
func (*InitChannelShopConfigResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{148}
}

func (x *InitChannelShopConfigResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InitChannelShopConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InitChannelShopConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type IntervalScheduleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every  int32  `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *IntervalScheduleCreateRequest) Reset() {
	*x = IntervalScheduleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleCreateRequest) ProtoMessage() {}

func (x *IntervalScheduleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleCreateRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{149}
}

func (x *IntervalScheduleCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleCreateRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleCreateRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type IntervalScheduleDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IntervalScheduleDestroyRequest) Reset() {
	*x = IntervalScheduleDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleDestroyRequest) ProtoMessage() {}

func (x *IntervalScheduleDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleDestroyRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{150}
}

func (x *IntervalScheduleDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IntervalScheduleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *IntervalScheduleListRequest) Reset() {
	*x = IntervalScheduleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleListRequest) ProtoMessage() {}

func (x *IntervalScheduleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleListRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{151}
}

func (x *IntervalScheduleListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *IntervalScheduleListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type IntervalScheduleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*IntervalScheduleResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *IntervalScheduleListResponse) Reset() {
	*x = IntervalScheduleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleListResponse) ProtoMessage() {}

func (x *IntervalScheduleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleListResponse.ProtoReflect.Descriptor instead.
func (*IntervalScheduleListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{152}
}

func (x *IntervalScheduleListResponse) GetResults() []*IntervalScheduleResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *IntervalScheduleListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type IntervalSchedulePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every                int32    `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period               string   `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *IntervalSchedulePartialUpdateRequest) Reset() {
	*x = IntervalSchedulePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalSchedulePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalSchedulePartialUpdateRequest) ProtoMessage() {}

func (x *IntervalSchedulePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalSchedulePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*IntervalSchedulePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{153}
}

func (x *IntervalSchedulePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalSchedulePartialUpdateRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalSchedulePartialUpdateRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *IntervalSchedulePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type IntervalScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every  int32  `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *IntervalScheduleRequest) Reset() {
	*x = IntervalScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleRequest) ProtoMessage() {}

func (x *IntervalScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{154}
}

func (x *IntervalScheduleRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type IntervalScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every  int32  `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *IntervalScheduleResponse) Reset() {
	*x = IntervalScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleResponse) ProtoMessage() {}

func (x *IntervalScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleResponse.ProtoReflect.Descriptor instead.
func (*IntervalScheduleResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{155}
}

func (x *IntervalScheduleResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleResponse) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleResponse) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type IntervalScheduleRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IntervalScheduleRetrieveRequest) Reset() {
	*x = IntervalScheduleRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleRetrieveRequest) ProtoMessage() {}

func (x *IntervalScheduleRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleRetrieveRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{156}
}

func (x *IntervalScheduleRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IntervalScheduleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every                int32    `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period               string   `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *IntervalScheduleUpdateRequest) Reset() {
	*x = IntervalScheduleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleUpdateRequest) ProtoMessage() {}

func (x *IntervalScheduleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleUpdateRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{157}
}

func (x *IntervalScheduleUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleUpdateRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleUpdateRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *IntervalScheduleUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type KingdeeFNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FNumber *string `protobuf:"bytes,1,opt,name=FNumber,proto3,oneof" json:"FNumber,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *KingdeeFNumberResponse) Reset() {
	*x = KingdeeFNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeFNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeFNumberResponse) ProtoMessage() {}

func (x *KingdeeFNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeFNumberResponse.ProtoReflect.Descriptor instead.
func (*KingdeeFNumberResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{158}
}

func (x *KingdeeFNumberResponse) GetFNumber() string {
	if x != nil && x.FNumber != nil {
		return *x.FNumber
	}
	return ""
}

func (x *KingdeeFNumberResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type KingdeePurchaseDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeePurchaseDestroyRequest) Reset() {
	*x = KingdeePurchaseDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseDestroyRequest) ProtoMessage() {}

func (x *KingdeePurchaseDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{159}
}

func (x *KingdeePurchaseDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeePurchaseListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeePurchaseListRequest) Reset() {
	*x = KingdeePurchaseListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseListRequest) ProtoMessage() {}

func (x *KingdeePurchaseListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseListRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{160}
}

func (x *KingdeePurchaseListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeePurchaseListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeePurchaseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeePurchaseResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeePurchaseListResponse) Reset() {
	*x = KingdeePurchaseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseListResponse) ProtoMessage() {}

func (x *KingdeePurchaseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseListResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{161}
}

func (x *KingdeePurchaseListResponse) GetResults() []*KingdeePurchaseResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeePurchaseListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeePurchaseOrderDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *KingdeePurchaseOrderDestroyRequest) Reset() {
	*x = KingdeePurchaseOrderDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderDestroyRequest) ProtoMessage() {}

func (x *KingdeePurchaseOrderDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{162}
}

func (x *KingdeePurchaseOrderDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type KingdeePurchaseOrderEntryDeliPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliCommitQty        *int32  `protobuf:"varint,3,opt,name=DeliCommitQty,proto3,oneof" json:"DeliCommitQty,omitempty"`
	DeliRemainQty        *int32  `protobuf:"varint,4,opt,name=DeliRemainQty,proto3,oneof" json:"DeliRemainQty,omitempty"`
	PlanQty              *int32  `protobuf:"varint,5,opt,name=PlanQty,proto3,oneof" json:"PlanQty,omitempty"`
	PlanDeliveryDate     *string `protobuf:"bytes,6,opt,name=PlanDeliveryDate,proto3,oneof" json:"PlanDeliveryDate,omitempty"`
	DeliveryDate_Plan    *string `protobuf:"bytes,7,opt,name=DeliveryDate_Plan,json=DeliveryDatePlan,proto3,oneof" json:"DeliveryDate_Plan,omitempty"`
	SUPPLIERDELIVERYDATE *string `protobuf:"bytes,8,opt,name=SUPPLIERDELIVERYDATE,proto3,oneof" json:"SUPPLIERDELIVERYDATE,omitempty"`
	TRLT                 *string `protobuf:"bytes,9,opt,name=TRLT,proto3,oneof" json:"TRLT,omitempty"`
	PREARRIVALDATE       *string `protobuf:"bytes,10,opt,name=PREARRIVALDATE,proto3,oneof" json:"PREARRIVALDATE,omitempty"`
	ConfirmDeliQty       *int32  `protobuf:"varint,11,opt,name=ConfirmDeliQty,proto3,oneof" json:"ConfirmDeliQty,omitempty"`
	ConfirmDeliDate      *string `protobuf:"bytes,12,opt,name=ConfirmDeliDate,proto3,oneof" json:"ConfirmDeliDate,omitempty"`
	ConfirmInfo          *string `protobuf:"bytes,13,opt,name=ConfirmInfo,proto3,oneof" json:"ConfirmInfo,omitempty"`
	ELocation            *string `protobuf:"bytes,14,opt,name=ELocation,proto3,oneof" json:"ELocation,omitempty"`
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) Reset() {
	*x = KingdeePurchaseOrderEntryDeliPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderEntryDeliPlanResponse) ProtoMessage() {}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderEntryDeliPlanResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderEntryDeliPlanResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{163}
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetDeliCommitQty() int32 {
	if x != nil && x.DeliCommitQty != nil {
		return *x.DeliCommitQty
	}
	return 0
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetDeliRemainQty() int32 {
	if x != nil && x.DeliRemainQty != nil {
		return *x.DeliRemainQty
	}
	return 0
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetPlanQty() int32 {
	if x != nil && x.PlanQty != nil {
		return *x.PlanQty
	}
	return 0
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetPlanDeliveryDate() string {
	if x != nil && x.PlanDeliveryDate != nil {
		return *x.PlanDeliveryDate
	}
	return ""
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetDeliveryDate_Plan() string {
	if x != nil && x.DeliveryDate_Plan != nil {
		return *x.DeliveryDate_Plan
	}
	return ""
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetSUPPLIERDELIVERYDATE() string {
	if x != nil && x.SUPPLIERDELIVERYDATE != nil {
		return *x.SUPPLIERDELIVERYDATE
	}
	return ""
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetTRLT() string {
	if x != nil && x.TRLT != nil {
		return *x.TRLT
	}
	return ""
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetPREARRIVALDATE() string {
	if x != nil && x.PREARRIVALDATE != nil {
		return *x.PREARRIVALDATE
	}
	return ""
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetConfirmDeliQty() int32 {
	if x != nil && x.ConfirmDeliQty != nil {
		return *x.ConfirmDeliQty
	}
	return 0
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetConfirmDeliDate() string {
	if x != nil && x.ConfirmDeliDate != nil {
		return *x.ConfirmDeliDate
	}
	return ""
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetConfirmInfo() string {
	if x != nil && x.ConfirmInfo != nil {
		return *x.ConfirmInfo
	}
	return ""
}

func (x *KingdeePurchaseOrderEntryDeliPlanResponse) GetELocation() string {
	if x != nil && x.ELocation != nil {
		return *x.ELocation
	}
	return ""
}

type KingdeePurchaseOrderFPOOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FEntryDeliveryPlan       []*KingdeePurchaseOrderEntryDeliPlanResponse `protobuf:"bytes,1,rep,name=FEntryDeliveryPlan,proto3" json:"FEntryDeliveryPlan,omitempty"`
	FEntryID                 *string                                      `protobuf:"bytes,2,opt,name=FEntryID,proto3,oneof" json:"FEntryID,omitempty"`
	FProductType             *string                                      `protobuf:"bytes,3,opt,name=FProductType,proto3,oneof" json:"FProductType,omitempty"`
	FMaterialId              *string                                      `protobuf:"bytes,4,opt,name=FMaterialId,proto3,oneof" json:"FMaterialId,omitempty"`
	FBomId                   *string                                      `protobuf:"bytes,5,opt,name=FBomId,proto3,oneof" json:"FBomId,omitempty"`
	FMaterialDesc            *string                                      `protobuf:"bytes,6,opt,name=FMaterialDesc,proto3,oneof" json:"FMaterialDesc,omitempty"`
	FAuxPropId               *string                                      `protobuf:"bytes,7,opt,name=FAuxPropId,proto3,oneof" json:"FAuxPropId,omitempty"`
	FUnitId                  *string                                      `protobuf:"bytes,8,opt,name=FUnitId,proto3,oneof" json:"FUnitId,omitempty"`
	FQty                     *int32                                       `protobuf:"varint,9,opt,name=FQty,proto3,oneof" json:"FQty,omitempty"`
	FPriceUnitId             *string                                      `protobuf:"bytes,10,opt,name=FPriceUnitId,proto3,oneof" json:"FPriceUnitId,omitempty"`
	FPriceUnitQty            *int32                                       `protobuf:"varint,11,opt,name=FPriceUnitQty,proto3,oneof" json:"FPriceUnitQty,omitempty"`
	FPriceBaseQty            *int32                                       `protobuf:"varint,12,opt,name=FPriceBaseQty,proto3,oneof" json:"FPriceBaseQty,omitempty"`
	FDeliveryDate            *string                                      `protobuf:"bytes,13,opt,name=FDeliveryDate,proto3,oneof" json:"FDeliveryDate,omitempty"`
	FLocationId              *string                                      `protobuf:"bytes,14,opt,name=FLocationId,proto3,oneof" json:"FLocationId,omitempty"`
	FLocationAddress         *string                                      `protobuf:"bytes,15,opt,name=FLocationAddress,proto3,oneof" json:"FLocationAddress,omitempty"`
	FPrice                   *float64                                     `protobuf:"fixed64,16,opt,name=FPrice,proto3,oneof" json:"FPrice,omitempty"`
	FTaxPrice                *float64                                     `protobuf:"fixed64,17,opt,name=FTaxPrice,proto3,oneof" json:"FTaxPrice,omitempty"`
	FEntryDiscountRate       *float64                                     `protobuf:"fixed64,18,opt,name=FEntryDiscountRate,proto3,oneof" json:"FEntryDiscountRate,omitempty"`
	FTaxCombination          *string                                      `protobuf:"bytes,19,opt,name=FTaxCombination,proto3,oneof" json:"FTaxCombination,omitempty"`
	FEntryTaxRate            *float64                                     `protobuf:"fixed64,20,opt,name=FEntryTaxRate,proto3,oneof" json:"FEntryTaxRate,omitempty"`
	FRequireOrgId            *string                                      `protobuf:"bytes,21,opt,name=FRequireOrgId,proto3,oneof" json:"FRequireOrgId,omitempty"`
	FRequireDeptId           *string                                      `protobuf:"bytes,22,opt,name=FRequireDeptId,proto3,oneof" json:"FRequireDeptId,omitempty"`
	FReceiveOrgId            *string                                      `protobuf:"bytes,23,opt,name=FReceiveOrgId,proto3,oneof" json:"FReceiveOrgId,omitempty"`
	FBranchId                *string                                      `protobuf:"bytes,24,opt,name=FBranchId,proto3,oneof" json:"FBranchId,omitempty"`
	FReceiveDeptId           *string                                      `protobuf:"bytes,25,opt,name=FReceiveDeptId,proto3,oneof" json:"FReceiveDeptId,omitempty"`
	FEntrySettleOrgId        *string                                      `protobuf:"bytes,26,opt,name=FEntrySettleOrgId,proto3,oneof" json:"FEntrySettleOrgId,omitempty"`
	FGiveAway                *bool                                        `protobuf:"varint,27,opt,name=FGiveAway,proto3,oneof" json:"FGiveAway,omitempty"`
	FEntryNote               *string                                      `protobuf:"bytes,28,opt,name=FEntryNote,proto3,oneof" json:"FEntryNote,omitempty"`
	FSupMatId                *string                                      `protobuf:"bytes,29,opt,name=FSupMatId,proto3,oneof" json:"FSupMatId,omitempty"`
	FSupMatName              *string                                      `protobuf:"bytes,30,opt,name=FSupMatName,proto3,oneof" json:"FSupMatName,omitempty"`
	FStockUnitID             *string                                      `protobuf:"bytes,31,opt,name=FStockUnitID,proto3,oneof" json:"FStockUnitID,omitempty"`
	FStockQty                *int32                                       `protobuf:"varint,32,opt,name=FStockQty,proto3,oneof" json:"FStockQty,omitempty"`
	FStockBaseQty            *int32                                       `protobuf:"varint,33,opt,name=FStockBaseQty,proto3,oneof" json:"FStockBaseQty,omitempty"`
	FLot                     *string                                      `protobuf:"bytes,34,opt,name=FLot,proto3,oneof" json:"FLot,omitempty"`
	FSupplierLot             *string                                      `protobuf:"bytes,35,opt,name=FSupplierLot,proto3,oneof" json:"FSupplierLot,omitempty"`
	FProcesser               *string                                      `protobuf:"bytes,36,opt,name=FProcesser,proto3,oneof" json:"FProcesser,omitempty"`
	FDeliveryControl         *bool                                        `protobuf:"varint,37,opt,name=FDeliveryControl,proto3,oneof" json:"FDeliveryControl,omitempty"`
	FTimeControl             *bool                                        `protobuf:"varint,38,opt,name=FTimeControl,proto3,oneof" json:"FTimeControl,omitempty"`
	FDeliveryMaxQty          *int32                                       `protobuf:"varint,39,opt,name=FDeliveryMaxQty,proto3,oneof" json:"FDeliveryMaxQty,omitempty"`
	FDeliveryMinQty          *int32                                       `protobuf:"varint,40,opt,name=FDeliveryMinQty,proto3,oneof" json:"FDeliveryMinQty,omitempty"`
	FDeliveryBeforeDays      *int32                                       `protobuf:"varint,41,opt,name=FDeliveryBeforeDays,proto3,oneof" json:"FDeliveryBeforeDays,omitempty"`
	FDeliveryDelayDays       *int32                                       `protobuf:"varint,42,opt,name=FDeliveryDelayDays,proto3,oneof" json:"FDeliveryDelayDays,omitempty"`
	FDeliveryEarlyDate       *string                                      `protobuf:"bytes,43,opt,name=FDeliveryEarlyDate,proto3,oneof" json:"FDeliveryEarlyDate,omitempty"`
	FDeliveryLastDate        *string                                      `protobuf:"bytes,44,opt,name=FDeliveryLastDate,proto3,oneof" json:"FDeliveryLastDate,omitempty"`
	FPriceCoefficient        *int32                                       `protobuf:"varint,45,opt,name=FPriceCoefficient,proto3,oneof" json:"FPriceCoefficient,omitempty"`
	FEntrySettleModeId       *string                                      `protobuf:"bytes,46,opt,name=FEntrySettleModeId,proto3,oneof" json:"FEntrySettleModeId,omitempty"`
	FConsumeSumQty           *int32                                       `protobuf:"varint,47,opt,name=FConsumeSumQty,proto3,oneof" json:"FConsumeSumQty,omitempty"`
	FSrcBillTypeId           *string                                      `protobuf:"bytes,48,opt,name=FSrcBillTypeId,proto3,oneof" json:"FSrcBillTypeId,omitempty"`
	FSrcBillNo               *string                                      `protobuf:"bytes,49,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	FContractNo              *string                                      `protobuf:"bytes,50,opt,name=FContractNo,proto3,oneof" json:"FContractNo,omitempty"`
	FReqTraceNo              *string                                      `protobuf:"bytes,51,opt,name=FReqTraceNo,proto3,oneof" json:"FReqTraceNo,omitempty"`
	FMtoNo                   *string                                      `protobuf:"bytes,52,opt,name=FMtoNo,proto3,oneof" json:"FMtoNo,omitempty"`
	FDEMANDTYPE              *string                                      `protobuf:"bytes,53,opt,name=FDEMANDTYPE,proto3,oneof" json:"FDEMANDTYPE,omitempty"`
	FDEMANDBILLNO            *string                                      `protobuf:"bytes,54,opt,name=FDEMANDBILLNO,proto3,oneof" json:"FDEMANDBILLNO,omitempty"`
	FDEMANDBILLENTRYSEQ      *int32                                       `protobuf:"varint,55,opt,name=FDEMANDBILLENTRYSEQ,proto3,oneof" json:"FDEMANDBILLENTRYSEQ,omitempty"`
	FDEMANDBILLENTRYID       *int32                                       `protobuf:"varint,56,opt,name=FDEMANDBILLENTRYID,proto3,oneof" json:"FDEMANDBILLENTRYID,omitempty"`
	FPlanConfirm             *bool                                        `protobuf:"varint,57,opt,name=FPlanConfirm,proto3,oneof" json:"FPlanConfirm,omitempty"`
	FSalUnitID               *string                                      `protobuf:"bytes,58,opt,name=FSalUnitID,proto3,oneof" json:"FSalUnitID,omitempty"`
	FSalQty                  *int32                                       `protobuf:"varint,59,opt,name=FSalQty,proto3,oneof" json:"FSalQty,omitempty"`
	FSalJoinQty              *int32                                       `protobuf:"varint,60,opt,name=FSalJoinQty,proto3,oneof" json:"FSalJoinQty,omitempty"`
	FBaseSalJoinQty          *int32                                       `protobuf:"varint,61,opt,name=FBaseSalJoinQty,proto3,oneof" json:"FBaseSalJoinQty,omitempty"`
	FSetPriceUnitID          *string                                      `protobuf:"bytes,62,opt,name=FSetPriceUnitID,proto3,oneof" json:"FSetPriceUnitID,omitempty"`
	FInventoryQty            *int32                                       `protobuf:"varint,63,opt,name=FInventoryQty,proto3,oneof" json:"FInventoryQty,omitempty"`
	FChargeProjectID         *string                                      `protobuf:"bytes,64,opt,name=FChargeProjectID,proto3,oneof" json:"FChargeProjectID,omitempty"`
	FCentSettleOrgId         *string                                      `protobuf:"bytes,65,opt,name=FCentSettleOrgId,proto3,oneof" json:"FCentSettleOrgId,omitempty"`
	FDispSettleOrgId         *string                                      `protobuf:"bytes,66,opt,name=FDispSettleOrgId,proto3,oneof" json:"FDispSettleOrgId,omitempty"`
	FGroup                   *int32                                       `protobuf:"varint,67,opt,name=FGroup,proto3,oneof" json:"FGroup,omitempty"`
	FDeliveryStockStatus     *string                                      `protobuf:"bytes,68,opt,name=FDeliveryStockStatus,proto3,oneof" json:"FDeliveryStockStatus,omitempty"`
	FMaxPrice                *int32                                       `protobuf:"varint,69,opt,name=FMaxPrice,proto3,oneof" json:"FMaxPrice,omitempty"`
	FMinPrice                *int32                                       `protobuf:"varint,70,opt,name=FMinPrice,proto3,oneof" json:"FMinPrice,omitempty"`
	FIsStock                 *bool                                        `protobuf:"varint,71,opt,name=FIsStock,proto3,oneof" json:"FIsStock,omitempty"`
	FBaseConsumeSumQty       *int32                                       `protobuf:"varint,72,opt,name=FBaseConsumeSumQty,proto3,oneof" json:"FBaseConsumeSumQty,omitempty"`
	FSalBaseQty              *int32                                       `protobuf:"varint,73,opt,name=FSalBaseQty,proto3,oneof" json:"FSalBaseQty,omitempty"`
	FSubOrgId                *string                                      `protobuf:"bytes,74,opt,name=FSubOrgId,proto3,oneof" json:"FSubOrgId,omitempty"`
	FEntryPayOrgId           *string                                      `protobuf:"bytes,75,opt,name=FEntryPayOrgId,proto3,oneof" json:"FEntryPayOrgId,omitempty"`
	FPriceDiscount           *int32                                       `protobuf:"varint,76,opt,name=FPriceDiscount,proto3,oneof" json:"FPriceDiscount,omitempty"`
	FAllAmountExceptDisCount *int32                                       `protobuf:"varint,77,opt,name=FAllAmountExceptDisCount,proto3,oneof" json:"FAllAmountExceptDisCount,omitempty"`
	FSUBREQBILLNO            *string                                      `protobuf:"bytes,78,opt,name=FSUBREQBILLNO,proto3,oneof" json:"FSUBREQBILLNO,omitempty"`
	FSUBREQBILLSEQ           *int32                                       `protobuf:"varint,79,opt,name=FSUBREQBILLSEQ,proto3,oneof" json:"FSUBREQBILLSEQ,omitempty"`
	FSUBREQENTRYID           *int32                                       `protobuf:"varint,80,opt,name=FSUBREQENTRYID,proto3,oneof" json:"FSUBREQENTRYID,omitempty"`
	FMaterialId_Name         *string                                      `protobuf:"bytes,81,opt,name=FMaterialId_Name,json=FMaterialIdName,proto3,oneof" json:"FMaterialId_Name,omitempty"`
	FRequireOrgId_Name       *string                                      `protobuf:"bytes,82,opt,name=FRequireOrgId_Name,json=FRequireOrgIdName,proto3,oneof" json:"FRequireOrgId_Name,omitempty"`
	FRequireDeptId_Name      *string                                      `protobuf:"bytes,83,opt,name=FRequireDeptId_Name,json=FRequireDeptIdName,proto3,oneof" json:"FRequireDeptId_Name,omitempty"`
	FReceiveOrgId_Name       *string                                      `protobuf:"bytes,84,opt,name=FReceiveOrgId_Name,json=FReceiveOrgIdName,proto3,oneof" json:"FReceiveOrgId_Name,omitempty"`
	FReceiveDeptId_Name      *string                                      `protobuf:"bytes,85,opt,name=FReceiveDeptId_Name,json=FReceiveDeptIdName,proto3,oneof" json:"FReceiveDeptId_Name,omitempty"`
	FReceiveQty              *float64                                     `protobuf:"fixed64,86,opt,name=FReceiveQty,proto3,oneof" json:"FReceiveQty,omitempty"`
	FStockInQty              *float64                                     `protobuf:"fixed64,87,opt,name=FStockInQty,proto3,oneof" json:"FStockInQty,omitempty"`
	FRemainReceiveQty        *float64                                     `protobuf:"fixed64,88,opt,name=FRemainReceiveQty,proto3,oneof" json:"FRemainReceiveQty,omitempty"`
	FRemainStockInQty        *float64                                     `protobuf:"fixed64,89,opt,name=FRemainStockInQty,proto3,oneof" json:"FRemainStockInQty,omitempty"`
	FMrbQty                  *float64                                     `protobuf:"fixed64,90,opt,name=FMrbQty,proto3,oneof" json:"FMrbQty,omitempty"`
	FPriceListEntryId        *string                                      `protobuf:"bytes,91,opt,name=FPriceListEntryId,proto3,oneof" json:"FPriceListEntryId,omitempty"`
}

func (x *KingdeePurchaseOrderFPOOrderResponse) Reset() {
	*x = KingdeePurchaseOrderFPOOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderFPOOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderFPOOrderResponse) ProtoMessage() {}

func (x *KingdeePurchaseOrderFPOOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderFPOOrderResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderFPOOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{164}
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntryDeliveryPlan() []*KingdeePurchaseOrderEntryDeliPlanResponse {
	if x != nil {
		return x.FEntryDeliveryPlan
	}
	return nil
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntryID() string {
	if x != nil && x.FEntryID != nil {
		return *x.FEntryID
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFProductType() string {
	if x != nil && x.FProductType != nil {
		return *x.FProductType
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFMaterialId() string {
	if x != nil && x.FMaterialId != nil {
		return *x.FMaterialId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFBomId() string {
	if x != nil && x.FBomId != nil {
		return *x.FBomId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFMaterialDesc() string {
	if x != nil && x.FMaterialDesc != nil {
		return *x.FMaterialDesc
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFAuxPropId() string {
	if x != nil && x.FAuxPropId != nil {
		return *x.FAuxPropId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFUnitId() string {
	if x != nil && x.FUnitId != nil {
		return *x.FUnitId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFQty() int32 {
	if x != nil && x.FQty != nil {
		return *x.FQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPriceUnitId() string {
	if x != nil && x.FPriceUnitId != nil {
		return *x.FPriceUnitId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPriceUnitQty() int32 {
	if x != nil && x.FPriceUnitQty != nil {
		return *x.FPriceUnitQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPriceBaseQty() int32 {
	if x != nil && x.FPriceBaseQty != nil {
		return *x.FPriceBaseQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryDate() string {
	if x != nil && x.FDeliveryDate != nil {
		return *x.FDeliveryDate
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFLocationId() string {
	if x != nil && x.FLocationId != nil {
		return *x.FLocationId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFLocationAddress() string {
	if x != nil && x.FLocationAddress != nil {
		return *x.FLocationAddress
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPrice() float64 {
	if x != nil && x.FPrice != nil {
		return *x.FPrice
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFTaxPrice() float64 {
	if x != nil && x.FTaxPrice != nil {
		return *x.FTaxPrice
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntryDiscountRate() float64 {
	if x != nil && x.FEntryDiscountRate != nil {
		return *x.FEntryDiscountRate
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFTaxCombination() string {
	if x != nil && x.FTaxCombination != nil {
		return *x.FTaxCombination
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntryTaxRate() float64 {
	if x != nil && x.FEntryTaxRate != nil {
		return *x.FEntryTaxRate
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFRequireOrgId() string {
	if x != nil && x.FRequireOrgId != nil {
		return *x.FRequireOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFRequireDeptId() string {
	if x != nil && x.FRequireDeptId != nil {
		return *x.FRequireDeptId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFReceiveOrgId() string {
	if x != nil && x.FReceiveOrgId != nil {
		return *x.FReceiveOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFBranchId() string {
	if x != nil && x.FBranchId != nil {
		return *x.FBranchId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFReceiveDeptId() string {
	if x != nil && x.FReceiveDeptId != nil {
		return *x.FReceiveDeptId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntrySettleOrgId() string {
	if x != nil && x.FEntrySettleOrgId != nil {
		return *x.FEntrySettleOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFGiveAway() bool {
	if x != nil && x.FGiveAway != nil {
		return *x.FGiveAway
	}
	return false
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntryNote() string {
	if x != nil && x.FEntryNote != nil {
		return *x.FEntryNote
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSupMatId() string {
	if x != nil && x.FSupMatId != nil {
		return *x.FSupMatId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSupMatName() string {
	if x != nil && x.FSupMatName != nil {
		return *x.FSupMatName
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFStockUnitID() string {
	if x != nil && x.FStockUnitID != nil {
		return *x.FStockUnitID
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFStockQty() int32 {
	if x != nil && x.FStockQty != nil {
		return *x.FStockQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFStockBaseQty() int32 {
	if x != nil && x.FStockBaseQty != nil {
		return *x.FStockBaseQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFLot() string {
	if x != nil && x.FLot != nil {
		return *x.FLot
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSupplierLot() string {
	if x != nil && x.FSupplierLot != nil {
		return *x.FSupplierLot
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFProcesser() string {
	if x != nil && x.FProcesser != nil {
		return *x.FProcesser
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryControl() bool {
	if x != nil && x.FDeliveryControl != nil {
		return *x.FDeliveryControl
	}
	return false
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFTimeControl() bool {
	if x != nil && x.FTimeControl != nil {
		return *x.FTimeControl
	}
	return false
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryMaxQty() int32 {
	if x != nil && x.FDeliveryMaxQty != nil {
		return *x.FDeliveryMaxQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryMinQty() int32 {
	if x != nil && x.FDeliveryMinQty != nil {
		return *x.FDeliveryMinQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryBeforeDays() int32 {
	if x != nil && x.FDeliveryBeforeDays != nil {
		return *x.FDeliveryBeforeDays
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryDelayDays() int32 {
	if x != nil && x.FDeliveryDelayDays != nil {
		return *x.FDeliveryDelayDays
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryEarlyDate() string {
	if x != nil && x.FDeliveryEarlyDate != nil {
		return *x.FDeliveryEarlyDate
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryLastDate() string {
	if x != nil && x.FDeliveryLastDate != nil {
		return *x.FDeliveryLastDate
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPriceCoefficient() int32 {
	if x != nil && x.FPriceCoefficient != nil {
		return *x.FPriceCoefficient
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntrySettleModeId() string {
	if x != nil && x.FEntrySettleModeId != nil {
		return *x.FEntrySettleModeId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFConsumeSumQty() int32 {
	if x != nil && x.FConsumeSumQty != nil {
		return *x.FConsumeSumQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSrcBillTypeId() string {
	if x != nil && x.FSrcBillTypeId != nil {
		return *x.FSrcBillTypeId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFContractNo() string {
	if x != nil && x.FContractNo != nil {
		return *x.FContractNo
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFReqTraceNo() string {
	if x != nil && x.FReqTraceNo != nil {
		return *x.FReqTraceNo
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFMtoNo() string {
	if x != nil && x.FMtoNo != nil {
		return *x.FMtoNo
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDEMANDTYPE() string {
	if x != nil && x.FDEMANDTYPE != nil {
		return *x.FDEMANDTYPE
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDEMANDBILLNO() string {
	if x != nil && x.FDEMANDBILLNO != nil {
		return *x.FDEMANDBILLNO
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDEMANDBILLENTRYSEQ() int32 {
	if x != nil && x.FDEMANDBILLENTRYSEQ != nil {
		return *x.FDEMANDBILLENTRYSEQ
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDEMANDBILLENTRYID() int32 {
	if x != nil && x.FDEMANDBILLENTRYID != nil {
		return *x.FDEMANDBILLENTRYID
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPlanConfirm() bool {
	if x != nil && x.FPlanConfirm != nil {
		return *x.FPlanConfirm
	}
	return false
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSalUnitID() string {
	if x != nil && x.FSalUnitID != nil {
		return *x.FSalUnitID
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSalQty() int32 {
	if x != nil && x.FSalQty != nil {
		return *x.FSalQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSalJoinQty() int32 {
	if x != nil && x.FSalJoinQty != nil {
		return *x.FSalJoinQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFBaseSalJoinQty() int32 {
	if x != nil && x.FBaseSalJoinQty != nil {
		return *x.FBaseSalJoinQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSetPriceUnitID() string {
	if x != nil && x.FSetPriceUnitID != nil {
		return *x.FSetPriceUnitID
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFInventoryQty() int32 {
	if x != nil && x.FInventoryQty != nil {
		return *x.FInventoryQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFChargeProjectID() string {
	if x != nil && x.FChargeProjectID != nil {
		return *x.FChargeProjectID
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFCentSettleOrgId() string {
	if x != nil && x.FCentSettleOrgId != nil {
		return *x.FCentSettleOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDispSettleOrgId() string {
	if x != nil && x.FDispSettleOrgId != nil {
		return *x.FDispSettleOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFGroup() int32 {
	if x != nil && x.FGroup != nil {
		return *x.FGroup
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFDeliveryStockStatus() string {
	if x != nil && x.FDeliveryStockStatus != nil {
		return *x.FDeliveryStockStatus
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFMaxPrice() int32 {
	if x != nil && x.FMaxPrice != nil {
		return *x.FMaxPrice
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFMinPrice() int32 {
	if x != nil && x.FMinPrice != nil {
		return *x.FMinPrice
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFIsStock() bool {
	if x != nil && x.FIsStock != nil {
		return *x.FIsStock
	}
	return false
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFBaseConsumeSumQty() int32 {
	if x != nil && x.FBaseConsumeSumQty != nil {
		return *x.FBaseConsumeSumQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSalBaseQty() int32 {
	if x != nil && x.FSalBaseQty != nil {
		return *x.FSalBaseQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSubOrgId() string {
	if x != nil && x.FSubOrgId != nil {
		return *x.FSubOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFEntryPayOrgId() string {
	if x != nil && x.FEntryPayOrgId != nil {
		return *x.FEntryPayOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPriceDiscount() int32 {
	if x != nil && x.FPriceDiscount != nil {
		return *x.FPriceDiscount
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFAllAmountExceptDisCount() int32 {
	if x != nil && x.FAllAmountExceptDisCount != nil {
		return *x.FAllAmountExceptDisCount
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSUBREQBILLNO() string {
	if x != nil && x.FSUBREQBILLNO != nil {
		return *x.FSUBREQBILLNO
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSUBREQBILLSEQ() int32 {
	if x != nil && x.FSUBREQBILLSEQ != nil {
		return *x.FSUBREQBILLSEQ
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFSUBREQENTRYID() int32 {
	if x != nil && x.FSUBREQENTRYID != nil {
		return *x.FSUBREQENTRYID
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFMaterialId_Name() string {
	if x != nil && x.FMaterialId_Name != nil {
		return *x.FMaterialId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFRequireOrgId_Name() string {
	if x != nil && x.FRequireOrgId_Name != nil {
		return *x.FRequireOrgId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFRequireDeptId_Name() string {
	if x != nil && x.FRequireDeptId_Name != nil {
		return *x.FRequireDeptId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFReceiveOrgId_Name() string {
	if x != nil && x.FReceiveOrgId_Name != nil {
		return *x.FReceiveOrgId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFReceiveDeptId_Name() string {
	if x != nil && x.FReceiveDeptId_Name != nil {
		return *x.FReceiveDeptId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFReceiveQty() float64 {
	if x != nil && x.FReceiveQty != nil {
		return *x.FReceiveQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFStockInQty() float64 {
	if x != nil && x.FStockInQty != nil {
		return *x.FStockInQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFRemainReceiveQty() float64 {
	if x != nil && x.FRemainReceiveQty != nil {
		return *x.FRemainReceiveQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFRemainStockInQty() float64 {
	if x != nil && x.FRemainStockInQty != nil {
		return *x.FRemainStockInQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFMrbQty() float64 {
	if x != nil && x.FMrbQty != nil {
		return *x.FMrbQty
	}
	return 0
}

func (x *KingdeePurchaseOrderFPOOrderResponse) GetFPriceListEntryId() string {
	if x != nil && x.FPriceListEntryId != nil {
		return *x.FPriceListEntryId
	}
	return ""
}

type KingdeePurchaseOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeePurchaseOrderListRequest) Reset() {
	*x = KingdeePurchaseOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderListRequest) ProtoMessage() {}

func (x *KingdeePurchaseOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderListRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{165}
}

func (x *KingdeePurchaseOrderListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeePurchaseOrderListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeePurchaseOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeePurchaseOrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeePurchaseOrderListResponse) Reset() {
	*x = KingdeePurchaseOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderListResponse) ProtoMessage() {}

func (x *KingdeePurchaseOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderListResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{166}
}

func (x *KingdeePurchaseOrderListResponse) GetResults() []*KingdeePurchaseOrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeePurchaseOrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeePurchaseOrderModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FDocumentStatusName     string                                  `protobuf:"bytes,1,opt,name=FDocumentStatus_name,json=FDocumentStatusName,proto3" json:"FDocumentStatus_name,omitempty"`
	FPOOrderEntry           []*KingdeePurchaseOrderFPOOrderResponse `protobuf:"bytes,2,rep,name=FPOOrderEntry,proto3" json:"FPOOrderEntry,omitempty"`
	FID                     *string                                 `protobuf:"bytes,3,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FBillTypeId             *string                                 `protobuf:"bytes,4,opt,name=FBillTypeId,proto3,oneof" json:"FBillTypeId,omitempty"`
	FBusinessType           *string                                 `protobuf:"bytes,5,opt,name=FBusinessType,proto3,oneof" json:"FBusinessType,omitempty"`
	FDocumentStatus         *string                                 `protobuf:"bytes,6,opt,name=FDocumentStatus,proto3,oneof" json:"FDocumentStatus,omitempty"`
	FBillNo                 *string                                 `protobuf:"bytes,7,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FDate                   string                                  `protobuf:"bytes,8,opt,name=FDate,proto3" json:"FDate,omitempty"`
	FSupplierId             *string                                 `protobuf:"bytes,9,opt,name=FSupplierId,proto3,oneof" json:"FSupplierId,omitempty"`
	FPurchaseOrgId          *string                                 `protobuf:"bytes,10,opt,name=FPurchaseOrgId,proto3,oneof" json:"FPurchaseOrgId,omitempty"`
	FPurchaseDeptId         *string                                 `protobuf:"bytes,11,opt,name=FPurchaseDeptId,proto3,oneof" json:"FPurchaseDeptId,omitempty"`
	FPurchaserGroupId       *string                                 `protobuf:"bytes,12,opt,name=FPurchaserGroupId,proto3,oneof" json:"FPurchaserGroupId,omitempty"`
	FPurchaserId            *string                                 `protobuf:"bytes,13,opt,name=FPurchaserId,proto3,oneof" json:"FPurchaserId,omitempty"`
	FProviderId             *string                                 `protobuf:"bytes,14,opt,name=FProviderId,proto3,oneof" json:"FProviderId,omitempty"`
	FProviderContactId      *string                                 `protobuf:"bytes,15,opt,name=FProviderContactId,proto3,oneof" json:"FProviderContactId,omitempty"`
	FProviderAddress        *string                                 `protobuf:"bytes,16,opt,name=FProviderAddress,proto3,oneof" json:"FProviderAddress,omitempty"`
	FSettleId               *string                                 `protobuf:"bytes,17,opt,name=FSettleId,proto3,oneof" json:"FSettleId,omitempty"`
	FChargeId               *string                                 `protobuf:"bytes,18,opt,name=FChargeId,proto3,oneof" json:"FChargeId,omitempty"`
	FConfirmerId            *string                                 `protobuf:"bytes,19,opt,name=FConfirmerId,proto3,oneof" json:"FConfirmerId,omitempty"`
	FConfirmDate            *string                                 `protobuf:"bytes,20,opt,name=FConfirmDate,proto3,oneof" json:"FConfirmDate,omitempty"`
	FCorrespondOrgId        *string                                 `protobuf:"bytes,21,opt,name=FCorrespondOrgId,proto3,oneof" json:"FCorrespondOrgId,omitempty"`
	FProviderContact        *string                                 `protobuf:"bytes,22,opt,name=FProviderContact,proto3,oneof" json:"FProviderContact,omitempty"`
	FSourceBillNo           *string                                 `protobuf:"bytes,23,opt,name=FSourceBillNo,proto3,oneof" json:"FSourceBillNo,omitempty"`
	FIsModificationOperator *bool                                   `protobuf:"varint,24,opt,name=FIsModificationOperator,proto3,oneof" json:"FIsModificationOperator,omitempty"`
	FChangeStatus           *string                                 `protobuf:"bytes,25,opt,name=FChangeStatus,proto3,oneof" json:"FChangeStatus,omitempty"`
	FACCTYPE                *string                                 `protobuf:"bytes,26,opt,name=FACCTYPE,proto3,oneof" json:"FACCTYPE,omitempty"`
	FProviderEMail          *string                                 `protobuf:"bytes,27,opt,name=FProviderEMail,proto3,oneof" json:"FProviderEMail,omitempty"`
	FCloseReason            *string                                 `protobuf:"bytes,28,opt,name=FCloseReason,proto3,oneof" json:"FCloseReason,omitempty"`
	FIsMobBill              *bool                                   `protobuf:"varint,29,opt,name=FIsMobBill,proto3,oneof" json:"FIsMobBill,omitempty"`
	FSupplierId_Name        *string                                 `protobuf:"bytes,30,opt,name=FSupplierId_Name,json=FSupplierIdName,proto3,oneof" json:"FSupplierId_Name,omitempty"`
	FPurchaseOrgId_Name     *string                                 `protobuf:"bytes,31,opt,name=FPurchaseOrgId_Name,json=FPurchaseOrgIdName,proto3,oneof" json:"FPurchaseOrgId_Name,omitempty"`
	FPurchaseDeptId_Name    *string                                 `protobuf:"bytes,32,opt,name=FPurchaseDeptId_Name,json=FPurchaseDeptIdName,proto3,oneof" json:"FPurchaseDeptId_Name,omitempty"`
	FPurchaserGroupId_Name  *string                                 `protobuf:"bytes,33,opt,name=FPurchaserGroupId_Name,json=FPurchaserGroupIdName,proto3,oneof" json:"FPurchaserGroupId_Name,omitempty"`
	FPurchaserId_Name       *string                                 `protobuf:"bytes,34,opt,name=FPurchaserId_Name,json=FPurchaserIdName,proto3,oneof" json:"FPurchaserId_Name,omitempty"`
	FProviderId_Name        *string                                 `protobuf:"bytes,35,opt,name=FProviderId_Name,json=FProviderIdName,proto3,oneof" json:"FProviderId_Name,omitempty"`
	FSettleId_Name          *string                                 `protobuf:"bytes,36,opt,name=FSettleId_Name,json=FSettleIdName,proto3,oneof" json:"FSettleId_Name,omitempty"`
	FChargeId_Name          *string                                 `protobuf:"bytes,37,opt,name=FChargeId_Name,json=FChargeIdName,proto3,oneof" json:"FChargeId_Name,omitempty"`
}

func (x *KingdeePurchaseOrderModelResponse) Reset() {
	*x = KingdeePurchaseOrderModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderModelResponse) ProtoMessage() {}

func (x *KingdeePurchaseOrderModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderModelResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{167}
}

func (x *KingdeePurchaseOrderModelResponse) GetFDocumentStatusName() string {
	if x != nil {
		return x.FDocumentStatusName
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPOOrderEntry() []*KingdeePurchaseOrderFPOOrderResponse {
	if x != nil {
		return x.FPOOrderEntry
	}
	return nil
}

func (x *KingdeePurchaseOrderModelResponse) GetFID() string {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFBillTypeId() string {
	if x != nil && x.FBillTypeId != nil {
		return *x.FBillTypeId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFBusinessType() string {
	if x != nil && x.FBusinessType != nil {
		return *x.FBusinessType
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFDocumentStatus() string {
	if x != nil && x.FDocumentStatus != nil {
		return *x.FDocumentStatus
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFSupplierId() string {
	if x != nil && x.FSupplierId != nil {
		return *x.FSupplierId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaseOrgId() string {
	if x != nil && x.FPurchaseOrgId != nil {
		return *x.FPurchaseOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaseDeptId() string {
	if x != nil && x.FPurchaseDeptId != nil {
		return *x.FPurchaseDeptId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaserGroupId() string {
	if x != nil && x.FPurchaserGroupId != nil {
		return *x.FPurchaserGroupId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaserId() string {
	if x != nil && x.FPurchaserId != nil {
		return *x.FPurchaserId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFProviderId() string {
	if x != nil && x.FProviderId != nil {
		return *x.FProviderId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFProviderContactId() string {
	if x != nil && x.FProviderContactId != nil {
		return *x.FProviderContactId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFProviderAddress() string {
	if x != nil && x.FProviderAddress != nil {
		return *x.FProviderAddress
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFSettleId() string {
	if x != nil && x.FSettleId != nil {
		return *x.FSettleId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFChargeId() string {
	if x != nil && x.FChargeId != nil {
		return *x.FChargeId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFConfirmerId() string {
	if x != nil && x.FConfirmerId != nil {
		return *x.FConfirmerId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFConfirmDate() string {
	if x != nil && x.FConfirmDate != nil {
		return *x.FConfirmDate
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFCorrespondOrgId() string {
	if x != nil && x.FCorrespondOrgId != nil {
		return *x.FCorrespondOrgId
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFProviderContact() string {
	if x != nil && x.FProviderContact != nil {
		return *x.FProviderContact
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFSourceBillNo() string {
	if x != nil && x.FSourceBillNo != nil {
		return *x.FSourceBillNo
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFIsModificationOperator() bool {
	if x != nil && x.FIsModificationOperator != nil {
		return *x.FIsModificationOperator
	}
	return false
}

func (x *KingdeePurchaseOrderModelResponse) GetFChangeStatus() string {
	if x != nil && x.FChangeStatus != nil {
		return *x.FChangeStatus
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFACCTYPE() string {
	if x != nil && x.FACCTYPE != nil {
		return *x.FACCTYPE
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFProviderEMail() string {
	if x != nil && x.FProviderEMail != nil {
		return *x.FProviderEMail
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFCloseReason() string {
	if x != nil && x.FCloseReason != nil {
		return *x.FCloseReason
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFIsMobBill() bool {
	if x != nil && x.FIsMobBill != nil {
		return *x.FIsMobBill
	}
	return false
}

func (x *KingdeePurchaseOrderModelResponse) GetFSupplierId_Name() string {
	if x != nil && x.FSupplierId_Name != nil {
		return *x.FSupplierId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaseOrgId_Name() string {
	if x != nil && x.FPurchaseOrgId_Name != nil {
		return *x.FPurchaseOrgId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaseDeptId_Name() string {
	if x != nil && x.FPurchaseDeptId_Name != nil {
		return *x.FPurchaseDeptId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaserGroupId_Name() string {
	if x != nil && x.FPurchaserGroupId_Name != nil {
		return *x.FPurchaserGroupId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFPurchaserId_Name() string {
	if x != nil && x.FPurchaserId_Name != nil {
		return *x.FPurchaserId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFProviderId_Name() string {
	if x != nil && x.FProviderId_Name != nil {
		return *x.FProviderId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFSettleId_Name() string {
	if x != nil && x.FSettleId_Name != nil {
		return *x.FSettleId_Name
	}
	return ""
}

func (x *KingdeePurchaseOrderModelResponse) GetFChargeId_Name() string {
	if x != nil && x.FChargeId_Name != nil {
		return *x.FChargeId_Name
	}
	return ""
}

type KingdeePurchaseOrderPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateTime           *string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime           *string  `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FBillNo              *string  `protobuf:"bytes,5,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	NeedUpDateFields     *string  `protobuf:"bytes,6,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields     *string  `protobuf:"bytes,7,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	SyncTime             *string  `protobuf:"bytes,8,opt,name=sync_time,json=syncTime,proto3,oneof" json:"sync_time,omitempty"`
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) Reset() {
	*x = KingdeePurchaseOrderPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderPartialUpdateRequest) ProtoMessage() {}

func (x *KingdeePurchaseOrderPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{168}
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeePurchaseOrderPartialUpdateRequest) GetSyncTime() string {
	if x != nil && x.SyncTime != nil {
		return *x.SyncTime
	}
	return ""
}

type KingdeePurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime       *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime       *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FBillNo          *string `protobuf:"bytes,4,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	NeedUpDateFields *string `protobuf:"bytes,5,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields *string `protobuf:"bytes,6,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	SyncTime         *string `protobuf:"bytes,7,opt,name=sync_time,json=syncTime,proto3,oneof" json:"sync_time,omitempty"`
}

func (x *KingdeePurchaseOrderRequest) Reset() {
	*x = KingdeePurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderRequest) ProtoMessage() {}

func (x *KingdeePurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{169}
}

func (x *KingdeePurchaseOrderRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeePurchaseOrderRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseOrderRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseOrderRequest) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeePurchaseOrderRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeePurchaseOrderRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeePurchaseOrderRequest) GetSyncTime() string {
	if x != nil && x.SyncTime != nil {
		return *x.SyncTime
	}
	return ""
}

type KingdeePurchaseOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string                            `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	Model            *KingdeePurchaseOrderModelResponse `protobuf:"bytes,2,opt,name=Model,proto3,oneof" json:"Model,omitempty"`
	CreateTime       *string                            `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime       *string                            `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FBillNo          *string                            `protobuf:"bytes,5,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	NeedUpDateFields *string                            `protobuf:"bytes,6,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields *string                            `protobuf:"bytes,7,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	SyncTime         *string                            `protobuf:"bytes,8,opt,name=sync_time,json=syncTime,proto3,oneof" json:"sync_time,omitempty"`
}

func (x *KingdeePurchaseOrderResponse) Reset() {
	*x = KingdeePurchaseOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderResponse) ProtoMessage() {}

func (x *KingdeePurchaseOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{170}
}

func (x *KingdeePurchaseOrderResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeePurchaseOrderResponse) GetModel() *KingdeePurchaseOrderModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeePurchaseOrderResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseOrderResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseOrderResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeePurchaseOrderResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeePurchaseOrderResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeePurchaseOrderResponse) GetSyncTime() string {
	if x != nil && x.SyncTime != nil {
		return *x.SyncTime
	}
	return ""
}

type KingdeePurchaseOrderRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *KingdeePurchaseOrderRetrieveRequest) Reset() {
	*x = KingdeePurchaseOrderRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseOrderRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseOrderRetrieveRequest) ProtoMessage() {}

func (x *KingdeePurchaseOrderRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseOrderRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseOrderRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{171}
}

func (x *KingdeePurchaseOrderRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type KingdeePurchasePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	XPartialUpdateFields  []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	FormId                *string  `protobuf:"bytes,3,opt,name=form_id,json=formId,proto3,oneof" json:"form_id,omitempty"`
	KingdeeNo             *string  `protobuf:"bytes,4,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	PushKingdeeStatus     *int32   `protobuf:"varint,5,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KingdeePurchaseOrder  *string  `protobuf:"bytes,6,opt,name=kingdee_purchase_order,json=kingdeePurchaseOrder,proto3,oneof" json:"kingdee_purchase_order,omitempty"`
	KingdeePurchaseInform *string  `protobuf:"bytes,7,opt,name=kingdee_purchase_inform,json=kingdeePurchaseInform,proto3,oneof" json:"kingdee_purchase_inform,omitempty"`
	WdtPurchaseOrder      *string  `protobuf:"bytes,8,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	WdtStockinNo          *string  `protobuf:"bytes,9,opt,name=wdt_stockin_no,json=wdtStockinNo,proto3,oneof" json:"wdt_stockin_no,omitempty"`
}

func (x *KingdeePurchasePartialUpdateRequest) Reset() {
	*x = KingdeePurchasePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchasePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchasePartialUpdateRequest) ProtoMessage() {}

func (x *KingdeePurchasePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchasePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchasePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{172}
}

func (x *KingdeePurchasePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeePurchasePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeePurchasePartialUpdateRequest) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeePurchasePartialUpdateRequest) GetKingdeePurchaseOrder() string {
	if x != nil && x.KingdeePurchaseOrder != nil {
		return *x.KingdeePurchaseOrder
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetKingdeePurchaseInform() string {
	if x != nil && x.KingdeePurchaseInform != nil {
		return *x.KingdeePurchaseInform
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetWdtStockinNo() string {
	if x != nil && x.WdtStockinNo != nil {
		return *x.WdtStockinNo
	}
	return ""
}

type KingdeePurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	FormId                *string `protobuf:"bytes,2,opt,name=form_id,json=formId,proto3,oneof" json:"form_id,omitempty"`
	KingdeeNo             *string `protobuf:"bytes,3,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	PushKingdeeStatus     *int32  `protobuf:"varint,4,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KingdeePurchaseOrder  *string `protobuf:"bytes,5,opt,name=kingdee_purchase_order,json=kingdeePurchaseOrder,proto3,oneof" json:"kingdee_purchase_order,omitempty"`
	KingdeePurchaseInform *string `protobuf:"bytes,6,opt,name=kingdee_purchase_inform,json=kingdeePurchaseInform,proto3,oneof" json:"kingdee_purchase_inform,omitempty"`
	WdtPurchaseOrder      *string `protobuf:"bytes,7,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	WdtStockinNo          *string `protobuf:"bytes,8,opt,name=wdt_stockin_no,json=wdtStockinNo,proto3,oneof" json:"wdt_stockin_no,omitempty"`
}

func (x *KingdeePurchaseRequest) Reset() {
	*x = KingdeePurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseRequest) ProtoMessage() {}

func (x *KingdeePurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{173}
}

func (x *KingdeePurchaseRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeePurchaseRequest) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeePurchaseRequest) GetKingdeePurchaseOrder() string {
	if x != nil && x.KingdeePurchaseOrder != nil {
		return *x.KingdeePurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetKingdeePurchaseInform() string {
	if x != nil && x.KingdeePurchaseInform != nil {
		return *x.KingdeePurchaseInform
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetWdtStockinNo() string {
	if x != nil && x.WdtStockinNo != nil {
		return *x.WdtStockinNo
	}
	return ""
}

type KingdeePurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreateTime            *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FormId                *string `protobuf:"bytes,4,opt,name=form_id,json=formId,proto3,oneof" json:"form_id,omitempty"`
	KingdeeNo             *string `protobuf:"bytes,5,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	PushKingdeeStatus     *int32  `protobuf:"varint,6,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KingdeePurchaseOrder  *string `protobuf:"bytes,7,opt,name=kingdee_purchase_order,json=kingdeePurchaseOrder,proto3,oneof" json:"kingdee_purchase_order,omitempty"`
	KingdeePurchaseInform *string `protobuf:"bytes,8,opt,name=kingdee_purchase_inform,json=kingdeePurchaseInform,proto3,oneof" json:"kingdee_purchase_inform,omitempty"`
	WdtPurchaseOrder      *string `protobuf:"bytes,9,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	WdtStockinNo          *string `protobuf:"bytes,10,opt,name=wdt_stockin_no,json=wdtStockinNo,proto3,oneof" json:"wdt_stockin_no,omitempty"`
}

func (x *KingdeePurchaseResponse) Reset() {
	*x = KingdeePurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseResponse) ProtoMessage() {}

func (x *KingdeePurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{174}
}

func (x *KingdeePurchaseResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeePurchaseResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeePurchaseResponse) GetKingdeePurchaseOrder() string {
	if x != nil && x.KingdeePurchaseOrder != nil {
		return *x.KingdeePurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetKingdeePurchaseInform() string {
	if x != nil && x.KingdeePurchaseInform != nil {
		return *x.KingdeePurchaseInform
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetWdtStockinNo() string {
	if x != nil && x.WdtStockinNo != nil {
		return *x.WdtStockinNo
	}
	return ""
}

type KingdeePurchaseRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeePurchaseRetrieveRequest) Reset() {
	*x = KingdeePurchaseRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseRetrieveRequest) ProtoMessage() {}

func (x *KingdeePurchaseRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{175}
}

func (x *KingdeePurchaseRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeePurchaseReturnDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *KingdeePurchaseReturnDestroyRequest) Reset() {
	*x = KingdeePurchaseReturnDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnDestroyRequest) ProtoMessage() {}

func (x *KingdeePurchaseReturnDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{176}
}

func (x *KingdeePurchaseReturnDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type KingdeePurchaseReturnEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *int32  `protobuf:"varint,1,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	MATERIALID_Number *string `protobuf:"bytes,2,opt,name=MATERIALID_Number,json=MATERIALIDNumber,proto3,oneof" json:"MATERIALID_Number,omitempty"`
	MATERIALID_Name   *string `protobuf:"bytes,3,opt,name=MATERIALID_Name,json=MATERIALIDName,proto3,oneof" json:"MATERIALID_Name,omitempty"`
	MRAPPQTY          float64 `protobuf:"fixed64,4,opt,name=MRAPPQTY,proto3" json:"MRAPPQTY,omitempty"`
	REPLENISHQTY      float64 `protobuf:"fixed64,5,opt,name=REPLENISHQTY,proto3" json:"REPLENISHQTY,omitempty"`
	KEAPAMTQTY        float64 `protobuf:"fixed64,6,opt,name=KEAPAMTQTY,proto3" json:"KEAPAMTQTY,omitempty"`
	MRJOINQTY         float64 `protobuf:"fixed64,7,opt,name=MRJOINQTY,proto3" json:"MRJOINQTY,omitempty"`
	MRQTY             float64 `protobuf:"fixed64,8,opt,name=MRQTY,proto3" json:"MRQTY,omitempty"`
	PRICE_F           float64 `protobuf:"fixed64,9,opt,name=PRICE_F,json=PRICEF,proto3" json:"PRICE_F,omitempty"`
	DISCOUNTRATE_F    float64 `protobuf:"fixed64,10,opt,name=DISCOUNTRATE_F,json=DISCOUNTRATEF,proto3" json:"DISCOUNTRATE_F,omitempty"`
	TAXNETPRICE_F     float64 `protobuf:"fixed64,11,opt,name=TAXNETPRICE_F,json=TAXNETPRICEF,proto3" json:"TAXNETPRICE_F,omitempty"`
	AMOUNT_F          float64 `protobuf:"fixed64,12,opt,name=AMOUNT_F,json=AMOUNTF,proto3" json:"AMOUNT_F,omitempty"`
	ORDERNO           *string `protobuf:"bytes,13,opt,name=ORDERNO,proto3,oneof" json:"ORDERNO,omitempty"`
	UNITID_Number     *string `protobuf:"bytes,14,opt,name=UNITID_Number,json=UNITIDNumber,proto3,oneof" json:"UNITID_Number,omitempty"`
	BASEMRJOINQTY     float64 `protobuf:"fixed64,15,opt,name=BASEMRJOINQTY,proto3" json:"BASEMRJOINQTY,omitempty"`
	BASERETURNQTY     float64 `protobuf:"fixed64,16,opt,name=BASERETURNQTY,proto3" json:"BASERETURNQTY,omitempty"`
	SRCBILLNO         *string `protobuf:"bytes,17,opt,name=SRCBILLNO,proto3,oneof" json:"SRCBILLNO,omitempty"`
	SRCBILLTYPEID     *string `protobuf:"bytes,18,opt,name=SRCBILLTYPEID,proto3,oneof" json:"SRCBILLTYPEID,omitempty"`
	TAXRATE           float64 `protobuf:"fixed64,19,opt,name=TAXRATE,proto3" json:"TAXRATE,omitempty"`
	StockId_Number    *string `protobuf:"bytes,20,opt,name=StockId_Number,json=StockIdNumber,proto3,oneof" json:"StockId_Number,omitempty"`
	StockId_Name      *string `protobuf:"bytes,21,opt,name=StockId_Name,json=StockIdName,proto3,oneof" json:"StockId_Name,omitempty"`
}

func (x *KingdeePurchaseReturnEntryResponse) Reset() {
	*x = KingdeePurchaseReturnEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnEntryResponse) ProtoMessage() {}

func (x *KingdeePurchaseReturnEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnEntryResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnEntryResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{177}
}

func (x *KingdeePurchaseReturnEntryResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetMATERIALID_Number() string {
	if x != nil && x.MATERIALID_Number != nil {
		return *x.MATERIALID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnEntryResponse) GetMATERIALID_Name() string {
	if x != nil && x.MATERIALID_Name != nil {
		return *x.MATERIALID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnEntryResponse) GetMRAPPQTY() float64 {
	if x != nil {
		return x.MRAPPQTY
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetREPLENISHQTY() float64 {
	if x != nil {
		return x.REPLENISHQTY
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetKEAPAMTQTY() float64 {
	if x != nil {
		return x.KEAPAMTQTY
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetMRJOINQTY() float64 {
	if x != nil {
		return x.MRJOINQTY
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetMRQTY() float64 {
	if x != nil {
		return x.MRQTY
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetPRICE_F() float64 {
	if x != nil {
		return x.PRICE_F
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetDISCOUNTRATE_F() float64 {
	if x != nil {
		return x.DISCOUNTRATE_F
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetTAXNETPRICE_F() float64 {
	if x != nil {
		return x.TAXNETPRICE_F
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetAMOUNT_F() float64 {
	if x != nil {
		return x.AMOUNT_F
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetORDERNO() string {
	if x != nil && x.ORDERNO != nil {
		return *x.ORDERNO
	}
	return ""
}

func (x *KingdeePurchaseReturnEntryResponse) GetUNITID_Number() string {
	if x != nil && x.UNITID_Number != nil {
		return *x.UNITID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnEntryResponse) GetBASEMRJOINQTY() float64 {
	if x != nil {
		return x.BASEMRJOINQTY
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetBASERETURNQTY() float64 {
	if x != nil {
		return x.BASERETURNQTY
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetSRCBILLNO() string {
	if x != nil && x.SRCBILLNO != nil {
		return *x.SRCBILLNO
	}
	return ""
}

func (x *KingdeePurchaseReturnEntryResponse) GetSRCBILLTYPEID() string {
	if x != nil && x.SRCBILLTYPEID != nil {
		return *x.SRCBILLTYPEID
	}
	return ""
}

func (x *KingdeePurchaseReturnEntryResponse) GetTAXRATE() float64 {
	if x != nil {
		return x.TAXRATE
	}
	return 0
}

func (x *KingdeePurchaseReturnEntryResponse) GetStockId_Number() string {
	if x != nil && x.StockId_Number != nil {
		return *x.StockId_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnEntryResponse) GetStockId_Name() string {
	if x != nil && x.StockId_Name != nil {
		return *x.StockId_Name
	}
	return ""
}

type KingdeePurchaseReturnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeePurchaseReturnListRequest) Reset() {
	*x = KingdeePurchaseReturnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnListRequest) ProtoMessage() {}

func (x *KingdeePurchaseReturnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnListRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{178}
}

func (x *KingdeePurchaseReturnListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeePurchaseReturnListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeePurchaseReturnListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeePurchaseReturnResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeePurchaseReturnListResponse) Reset() {
	*x = KingdeePurchaseReturnListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnListResponse) ProtoMessage() {}

func (x *KingdeePurchaseReturnListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnListResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{179}
}

func (x *KingdeePurchaseReturnListResponse) GetResults() []*KingdeePurchaseReturnResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeePurchaseReturnListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeePurchaseReturnPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields  []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateTime            *string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string  `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushWdtStatus         *int32   `protobuf:"varint,5,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	FBillNo               string   `protobuf:"bytes,6,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FSrcBillNo            *string  `protobuf:"bytes,7,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	WdtPurReturnNo        *string  `protobuf:"bytes,8,opt,name=WdtPurReturnNo,proto3,oneof" json:"WdtPurReturnNo,omitempty"`
	NeedUpDateFields      *string  `protobuf:"bytes,9,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string  `protobuf:"bytes,10,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	FFormId               *string  `protobuf:"bytes,12,opt,name=FFormId,proto3,oneof" json:"FFormId,omitempty"`
	DocumentStatus        *string  `protobuf:"bytes,13,opt,name=DocumentStatus,proto3,oneof" json:"DocumentStatus,omitempty"`
	FDate                 *string  `protobuf:"bytes,14,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	PURCHASEORGID_Number  *string  `protobuf:"bytes,15,opt,name=PURCHASEORGID_Number,json=PURCHASEORGIDNumber,proto3,oneof" json:"PURCHASEORGID_Number,omitempty"`
	PURCHASEORGID_Name    *string  `protobuf:"bytes,16,opt,name=PURCHASEORGID_Name,json=PURCHASEORGIDName,proto3,oneof" json:"PURCHASEORGID_Name,omitempty"`
	SUPPLIERID_Number     *string  `protobuf:"bytes,17,opt,name=SUPPLIERID_Number,json=SUPPLIERIDNumber,proto3,oneof" json:"SUPPLIERID_Number,omitempty"`
	SUPPLIERID_Name       *string  `protobuf:"bytes,18,opt,name=SUPPLIERID_Name,json=SUPPLIERIDName,proto3,oneof" json:"SUPPLIERID_Name,omitempty"`
	FCreateDate           *string  `protobuf:"bytes,19,opt,name=FCreateDate,proto3,oneof" json:"FCreateDate,omitempty"`
	FModifyDate           *string  `protobuf:"bytes,20,opt,name=FModifyDate,proto3,oneof" json:"FModifyDate,omitempty"`
	APPROVEDATE           *string  `protobuf:"bytes,21,opt,name=APPROVEDATE,proto3,oneof" json:"APPROVEDATE,omitempty"`
	CANCELSTATUS          *string  `protobuf:"bytes,22,opt,name=CANCELSTATUS,proto3,oneof" json:"CANCELSTATUS,omitempty"`
	RequireOrgId_Number   *string  `protobuf:"bytes,23,opt,name=RequireOrgId_Number,json=RequireOrgIdNumber,proto3,oneof" json:"RequireOrgId_Number,omitempty"`
	RequireOrgId_Name     *string  `protobuf:"bytes,24,opt,name=RequireOrgId_Name,json=RequireOrgIdName,proto3,oneof" json:"RequireOrgId_Name,omitempty"`
	FZBStockID_Number     *string  `protobuf:"bytes,25,opt,name=FZBStockID_Number,json=FZBStockIDNumber,proto3,oneof" json:"FZBStockID_Number,omitempty"`
	FZBStockID_Name       *string  `protobuf:"bytes,26,opt,name=FZBStockID_Name,json=FZBStockIDName,proto3,oneof" json:"FZBStockID_Name,omitempty"`
	FId                   *int32   `protobuf:"varint,27,opt,name=FId,proto3,oneof" json:"FId,omitempty"`
	WPurchaseRefundStatus *int32   `protobuf:"varint,28,opt,name=WPurchase_refund_status,json=WPurchaseRefundStatus,proto3,oneof" json:"WPurchase_refund_status,omitempty"`
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) Reset() {
	*x = KingdeePurchaseReturnPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnPartialUpdateRequest) ProtoMessage() {}

func (x *KingdeePurchaseReturnPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{180}
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetWdtPurReturnNo() string {
	if x != nil && x.WdtPurReturnNo != nil {
		return *x.WdtPurReturnNo
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFFormId() string {
	if x != nil && x.FFormId != nil {
		return *x.FFormId
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetDocumentStatus() string {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetPURCHASEORGID_Number() string {
	if x != nil && x.PURCHASEORGID_Number != nil {
		return *x.PURCHASEORGID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetPURCHASEORGID_Name() string {
	if x != nil && x.PURCHASEORGID_Name != nil {
		return *x.PURCHASEORGID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetSUPPLIERID_Number() string {
	if x != nil && x.SUPPLIERID_Number != nil {
		return *x.SUPPLIERID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetSUPPLIERID_Name() string {
	if x != nil && x.SUPPLIERID_Name != nil {
		return *x.SUPPLIERID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFCreateDate() string {
	if x != nil && x.FCreateDate != nil {
		return *x.FCreateDate
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFModifyDate() string {
	if x != nil && x.FModifyDate != nil {
		return *x.FModifyDate
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetAPPROVEDATE() string {
	if x != nil && x.APPROVEDATE != nil {
		return *x.APPROVEDATE
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetCANCELSTATUS() string {
	if x != nil && x.CANCELSTATUS != nil {
		return *x.CANCELSTATUS
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetRequireOrgId_Number() string {
	if x != nil && x.RequireOrgId_Number != nil {
		return *x.RequireOrgId_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetRequireOrgId_Name() string {
	if x != nil && x.RequireOrgId_Name != nil {
		return *x.RequireOrgId_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFZBStockID_Number() string {
	if x != nil && x.FZBStockID_Number != nil {
		return *x.FZBStockID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFZBStockID_Name() string {
	if x != nil && x.FZBStockID_Name != nil {
		return *x.FZBStockID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetFId() int32 {
	if x != nil && x.FId != nil {
		return *x.FId
	}
	return 0
}

func (x *KingdeePurchaseReturnPartialUpdateRequest) GetWPurchaseRefundStatus() int32 {
	if x != nil && x.WPurchaseRefundStatus != nil {
		return *x.WPurchaseRefundStatus
	}
	return 0
}

type KingdeePurchaseReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime            *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushWdtStatus         *int32  `protobuf:"varint,4,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	FBillNo               string  `protobuf:"bytes,5,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FSrcBillNo            *string `protobuf:"bytes,6,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	WdtPurReturnNo        *string `protobuf:"bytes,7,opt,name=WdtPurReturnNo,proto3,oneof" json:"WdtPurReturnNo,omitempty"`
	NeedUpDateFields      *string `protobuf:"bytes,8,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string `protobuf:"bytes,9,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	FFormId               *string `protobuf:"bytes,11,opt,name=FFormId,proto3,oneof" json:"FFormId,omitempty"`
	DocumentStatus        *string `protobuf:"bytes,12,opt,name=DocumentStatus,proto3,oneof" json:"DocumentStatus,omitempty"`
	FDate                 *string `protobuf:"bytes,13,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	PURCHASEORGID_Number  *string `protobuf:"bytes,14,opt,name=PURCHASEORGID_Number,json=PURCHASEORGIDNumber,proto3,oneof" json:"PURCHASEORGID_Number,omitempty"`
	PURCHASEORGID_Name    *string `protobuf:"bytes,15,opt,name=PURCHASEORGID_Name,json=PURCHASEORGIDName,proto3,oneof" json:"PURCHASEORGID_Name,omitempty"`
	SUPPLIERID_Number     *string `protobuf:"bytes,16,opt,name=SUPPLIERID_Number,json=SUPPLIERIDNumber,proto3,oneof" json:"SUPPLIERID_Number,omitempty"`
	SUPPLIERID_Name       *string `protobuf:"bytes,17,opt,name=SUPPLIERID_Name,json=SUPPLIERIDName,proto3,oneof" json:"SUPPLIERID_Name,omitempty"`
	FCreateDate           *string `protobuf:"bytes,18,opt,name=FCreateDate,proto3,oneof" json:"FCreateDate,omitempty"`
	FModifyDate           *string `protobuf:"bytes,19,opt,name=FModifyDate,proto3,oneof" json:"FModifyDate,omitempty"`
	APPROVEDATE           *string `protobuf:"bytes,20,opt,name=APPROVEDATE,proto3,oneof" json:"APPROVEDATE,omitempty"`
	CANCELSTATUS          *string `protobuf:"bytes,21,opt,name=CANCELSTATUS,proto3,oneof" json:"CANCELSTATUS,omitempty"`
	RequireOrgId_Number   *string `protobuf:"bytes,22,opt,name=RequireOrgId_Number,json=RequireOrgIdNumber,proto3,oneof" json:"RequireOrgId_Number,omitempty"`
	RequireOrgId_Name     *string `protobuf:"bytes,23,opt,name=RequireOrgId_Name,json=RequireOrgIdName,proto3,oneof" json:"RequireOrgId_Name,omitempty"`
	FZBStockID_Number     *string `protobuf:"bytes,24,opt,name=FZBStockID_Number,json=FZBStockIDNumber,proto3,oneof" json:"FZBStockID_Number,omitempty"`
	FZBStockID_Name       *string `protobuf:"bytes,25,opt,name=FZBStockID_Name,json=FZBStockIDName,proto3,oneof" json:"FZBStockID_Name,omitempty"`
	FId                   *int32  `protobuf:"varint,26,opt,name=FId,proto3,oneof" json:"FId,omitempty"`
	WPurchaseRefundStatus *int32  `protobuf:"varint,27,opt,name=WPurchase_refund_status,json=WPurchaseRefundStatus,proto3,oneof" json:"WPurchase_refund_status,omitempty"`
}

func (x *KingdeePurchaseReturnRequest) Reset() {
	*x = KingdeePurchaseReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnRequest) ProtoMessage() {}

func (x *KingdeePurchaseReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{181}
}

func (x *KingdeePurchaseReturnRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *KingdeePurchaseReturnRequest) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetWdtPurReturnNo() string {
	if x != nil && x.WdtPurReturnNo != nil {
		return *x.WdtPurReturnNo
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFFormId() string {
	if x != nil && x.FFormId != nil {
		return *x.FFormId
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetDocumentStatus() string {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetPURCHASEORGID_Number() string {
	if x != nil && x.PURCHASEORGID_Number != nil {
		return *x.PURCHASEORGID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetPURCHASEORGID_Name() string {
	if x != nil && x.PURCHASEORGID_Name != nil {
		return *x.PURCHASEORGID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetSUPPLIERID_Number() string {
	if x != nil && x.SUPPLIERID_Number != nil {
		return *x.SUPPLIERID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetSUPPLIERID_Name() string {
	if x != nil && x.SUPPLIERID_Name != nil {
		return *x.SUPPLIERID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFCreateDate() string {
	if x != nil && x.FCreateDate != nil {
		return *x.FCreateDate
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFModifyDate() string {
	if x != nil && x.FModifyDate != nil {
		return *x.FModifyDate
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetAPPROVEDATE() string {
	if x != nil && x.APPROVEDATE != nil {
		return *x.APPROVEDATE
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetCANCELSTATUS() string {
	if x != nil && x.CANCELSTATUS != nil {
		return *x.CANCELSTATUS
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetRequireOrgId_Number() string {
	if x != nil && x.RequireOrgId_Number != nil {
		return *x.RequireOrgId_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetRequireOrgId_Name() string {
	if x != nil && x.RequireOrgId_Name != nil {
		return *x.RequireOrgId_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFZBStockID_Number() string {
	if x != nil && x.FZBStockID_Number != nil {
		return *x.FZBStockID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFZBStockID_Name() string {
	if x != nil && x.FZBStockID_Name != nil {
		return *x.FZBStockID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnRequest) GetFId() int32 {
	if x != nil && x.FId != nil {
		return *x.FId
	}
	return 0
}

func (x *KingdeePurchaseReturnRequest) GetWPurchaseRefundStatus() int32 {
	if x != nil && x.WPurchaseRefundStatus != nil {
		return *x.WPurchaseRefundStatus
	}
	return 0
}

type KingdeePurchaseReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                               `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime            *string                               `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string                               `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushWdtStatus         *int32                                `protobuf:"varint,4,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	FBillNo               string                                `protobuf:"bytes,5,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FSrcBillNo            *string                               `protobuf:"bytes,6,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	WdtPurReturnNo        *string                               `protobuf:"bytes,7,opt,name=WdtPurReturnNo,proto3,oneof" json:"WdtPurReturnNo,omitempty"`
	NeedUpDateFields      *string                               `protobuf:"bytes,8,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string                               `protobuf:"bytes,9,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	PUR_MRAPPENTRY        []*KingdeePurchaseReturnEntryResponse `protobuf:"bytes,10,rep,name=PUR_MRAPPENTRY,json=PURMRAPPENTRY,proto3" json:"PUR_MRAPPENTRY,omitempty"`
	FFormId               *string                               `protobuf:"bytes,12,opt,name=FFormId,proto3,oneof" json:"FFormId,omitempty"`
	DocumentStatus        *string                               `protobuf:"bytes,13,opt,name=DocumentStatus,proto3,oneof" json:"DocumentStatus,omitempty"`
	FDate                 *string                               `protobuf:"bytes,14,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	PURCHASEORGID_Number  *string                               `protobuf:"bytes,15,opt,name=PURCHASEORGID_Number,json=PURCHASEORGIDNumber,proto3,oneof" json:"PURCHASEORGID_Number,omitempty"`
	PURCHASEORGID_Name    *string                               `protobuf:"bytes,16,opt,name=PURCHASEORGID_Name,json=PURCHASEORGIDName,proto3,oneof" json:"PURCHASEORGID_Name,omitempty"`
	SUPPLIERID_Number     *string                               `protobuf:"bytes,17,opt,name=SUPPLIERID_Number,json=SUPPLIERIDNumber,proto3,oneof" json:"SUPPLIERID_Number,omitempty"`
	SUPPLIERID_Name       *string                               `protobuf:"bytes,18,opt,name=SUPPLIERID_Name,json=SUPPLIERIDName,proto3,oneof" json:"SUPPLIERID_Name,omitempty"`
	FCreateDate           *string                               `protobuf:"bytes,19,opt,name=FCreateDate,proto3,oneof" json:"FCreateDate,omitempty"`
	FModifyDate           *string                               `protobuf:"bytes,20,opt,name=FModifyDate,proto3,oneof" json:"FModifyDate,omitempty"`
	APPROVEDATE           *string                               `protobuf:"bytes,21,opt,name=APPROVEDATE,proto3,oneof" json:"APPROVEDATE,omitempty"`
	CANCELSTATUS          *string                               `protobuf:"bytes,22,opt,name=CANCELSTATUS,proto3,oneof" json:"CANCELSTATUS,omitempty"`
	RequireOrgId_Number   *string                               `protobuf:"bytes,23,opt,name=RequireOrgId_Number,json=RequireOrgIdNumber,proto3,oneof" json:"RequireOrgId_Number,omitempty"`
	RequireOrgId_Name     *string                               `protobuf:"bytes,24,opt,name=RequireOrgId_Name,json=RequireOrgIdName,proto3,oneof" json:"RequireOrgId_Name,omitempty"`
	FZBStockID_Number     *string                               `protobuf:"bytes,25,opt,name=FZBStockID_Number,json=FZBStockIDNumber,proto3,oneof" json:"FZBStockID_Number,omitempty"`
	FZBStockID_Name       *string                               `protobuf:"bytes,26,opt,name=FZBStockID_Name,json=FZBStockIDName,proto3,oneof" json:"FZBStockID_Name,omitempty"`
	FId                   *int32                                `protobuf:"varint,27,opt,name=FId,proto3,oneof" json:"FId,omitempty"`
	PushWdtStatusName     *string                               `protobuf:"bytes,28,opt,name=push_wdt_status_name,json=pushWdtStatusName,proto3,oneof" json:"push_wdt_status_name,omitempty"`
	WPurchaseRefundStatus *int32                                `protobuf:"varint,29,opt,name=WPurchase_refund_status,json=WPurchaseRefundStatus,proto3,oneof" json:"WPurchase_refund_status,omitempty"`
}

func (x *KingdeePurchaseReturnResponse) Reset() {
	*x = KingdeePurchaseReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnResponse) ProtoMessage() {}

func (x *KingdeePurchaseReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{182}
}

func (x *KingdeePurchaseReturnResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *KingdeePurchaseReturnResponse) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetWdtPurReturnNo() string {
	if x != nil && x.WdtPurReturnNo != nil {
		return *x.WdtPurReturnNo
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetPUR_MRAPPENTRY() []*KingdeePurchaseReturnEntryResponse {
	if x != nil {
		return x.PUR_MRAPPENTRY
	}
	return nil
}

func (x *KingdeePurchaseReturnResponse) GetFFormId() string {
	if x != nil && x.FFormId != nil {
		return *x.FFormId
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetDocumentStatus() string {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetPURCHASEORGID_Number() string {
	if x != nil && x.PURCHASEORGID_Number != nil {
		return *x.PURCHASEORGID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetPURCHASEORGID_Name() string {
	if x != nil && x.PURCHASEORGID_Name != nil {
		return *x.PURCHASEORGID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetSUPPLIERID_Number() string {
	if x != nil && x.SUPPLIERID_Number != nil {
		return *x.SUPPLIERID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetSUPPLIERID_Name() string {
	if x != nil && x.SUPPLIERID_Name != nil {
		return *x.SUPPLIERID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetFCreateDate() string {
	if x != nil && x.FCreateDate != nil {
		return *x.FCreateDate
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetFModifyDate() string {
	if x != nil && x.FModifyDate != nil {
		return *x.FModifyDate
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetAPPROVEDATE() string {
	if x != nil && x.APPROVEDATE != nil {
		return *x.APPROVEDATE
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetCANCELSTATUS() string {
	if x != nil && x.CANCELSTATUS != nil {
		return *x.CANCELSTATUS
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetRequireOrgId_Number() string {
	if x != nil && x.RequireOrgId_Number != nil {
		return *x.RequireOrgId_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetRequireOrgId_Name() string {
	if x != nil && x.RequireOrgId_Name != nil {
		return *x.RequireOrgId_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetFZBStockID_Number() string {
	if x != nil && x.FZBStockID_Number != nil {
		return *x.FZBStockID_Number
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetFZBStockID_Name() string {
	if x != nil && x.FZBStockID_Name != nil {
		return *x.FZBStockID_Name
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetFId() int32 {
	if x != nil && x.FId != nil {
		return *x.FId
	}
	return 0
}

func (x *KingdeePurchaseReturnResponse) GetPushWdtStatusName() string {
	if x != nil && x.PushWdtStatusName != nil {
		return *x.PushWdtStatusName
	}
	return ""
}

func (x *KingdeePurchaseReturnResponse) GetWPurchaseRefundStatus() int32 {
	if x != nil && x.WPurchaseRefundStatus != nil {
		return *x.WPurchaseRefundStatus
	}
	return 0
}

type KingdeePurchaseReturnRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *KingdeePurchaseReturnRetrieveRequest) Reset() {
	*x = KingdeePurchaseReturnRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseReturnRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseReturnRetrieveRequest) ProtoMessage() {}

func (x *KingdeePurchaseReturnRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseReturnRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseReturnRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{183}
}

func (x *KingdeePurchaseReturnRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type KingdeeReceivableEntityDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId       *string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FCostId   *KingdeeFNumberResponse `protobuf:"bytes,3,opt,name=FCostId,proto3,oneof" json:"FCostId,omitempty"`
	FPriceQty *float64                `protobuf:"fixed64,4,opt,name=FPriceQty,proto3,oneof" json:"FPriceQty,omitempty"`
	FTaxPrice *float64                `protobuf:"fixed64,5,opt,name=FTaxPrice,proto3,oneof" json:"FTaxPrice,omitempty"`
}

func (x *KingdeeReceivableEntityDetailResponse) Reset() {
	*x = KingdeeReceivableEntityDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceivableEntityDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceivableEntityDetailResponse) ProtoMessage() {}

func (x *KingdeeReceivableEntityDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceivableEntityDetailResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceivableEntityDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{184}
}

func (x *KingdeeReceivableEntityDetailResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceivableEntityDetailResponse) GetFCostId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FCostId
	}
	return nil
}

func (x *KingdeeReceivableEntityDetailResponse) GetFPriceQty() float64 {
	if x != nil && x.FPriceQty != nil {
		return *x.FPriceQty
	}
	return 0
}

func (x *KingdeeReceivableEntityDetailResponse) GetFTaxPrice() float64 {
	if x != nil && x.FTaxPrice != nil {
		return *x.FTaxPrice
	}
	return 0
}

type KingdeeReceivableEntityPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FEntryId      *int32   `protobuf:"varint,2,opt,name=FEntryId,proto3,oneof" json:"FEntryId,omitempty"`
	FPayRate      *float64 `protobuf:"fixed64,3,opt,name=FPayRate,proto3,oneof" json:"FPayRate,omitempty"`
	FPayAmountFor *float64 `protobuf:"fixed64,4,opt,name=FPayAmountFor,proto3,oneof" json:"FPayAmountFor,omitempty"`
	FEndDate      *string  `protobuf:"bytes,5,opt,name=FEndDate,proto3,oneof" json:"FEndDate,omitempty"`
}

func (x *KingdeeReceivableEntityPlanResponse) Reset() {
	*x = KingdeeReceivableEntityPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceivableEntityPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceivableEntityPlanResponse) ProtoMessage() {}

func (x *KingdeeReceivableEntityPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceivableEntityPlanResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceivableEntityPlanResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{185}
}

func (x *KingdeeReceivableEntityPlanResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceivableEntityPlanResponse) GetFEntryId() int32 {
	if x != nil && x.FEntryId != nil {
		return *x.FEntryId
	}
	return 0
}

func (x *KingdeeReceivableEntityPlanResponse) GetFPayRate() float64 {
	if x != nil && x.FPayRate != nil {
		return *x.FPayRate
	}
	return 0
}

func (x *KingdeeReceivableEntityPlanResponse) GetFPayAmountFor() float64 {
	if x != nil && x.FPayAmountFor != nil {
		return *x.FPayAmountFor
	}
	return 0
}

func (x *KingdeeReceivableEntityPlanResponse) GetFEndDate() string {
	if x != nil && x.FEndDate != nil {
		return *x.FEndDate
	}
	return ""
}

type KingdeeReceivableModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                *string                                   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FsubHeadSuppiler   *KingdeeReceivableSubHeadSupplierResponse `protobuf:"bytes,2,opt,name=FsubHeadSuppiler,proto3" json:"FsubHeadSuppiler,omitempty"`
	FsubHeadFinc       *KingdeeReceivableSubHeadFincResponse     `protobuf:"bytes,3,opt,name=FsubHeadFinc,proto3" json:"FsubHeadFinc,omitempty"`
	FEntityDetail      []*KingdeeReceivableEntityDetailResponse  `protobuf:"bytes,4,rep,name=FEntityDetail,proto3" json:"FEntityDetail,omitempty"`
	FEntityPlan        []*KingdeeReceivableEntityPlanResponse    `protobuf:"bytes,5,rep,name=FEntityPlan,proto3" json:"FEntityPlan,omitempty"`
	FID                *int32                                    `protobuf:"varint,6,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FBillTypeID        *KingdeeFNumberResponse                   `protobuf:"bytes,7,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FCustomerID        *KingdeeFNumberResponse                   `protobuf:"bytes,8,opt,name=FCustomerID,proto3,oneof" json:"FCustomerID,omitempty"`
	FCurrencyID        *KingdeeFNumberResponse                   `protobuf:"bytes,9,opt,name=FCurrencyID,proto3,oneof" json:"FCurrencyID,omitempty"`
	FSettleOrgID       *KingdeeFNumberResponse                   `protobuf:"bytes,10,opt,name=FSettleOrgID,proto3,oneof" json:"FSettleOrgID,omitempty"`
	FPayOrgID          *KingdeeFNumberResponse                   `protobuf:"bytes,11,opt,name=FPayOrgID,proto3,oneof" json:"FPayOrgID,omitempty"`
	FSaleOrgID         *KingdeeFNumberResponse                   `protobuf:"bytes,12,opt,name=FSaleOrgID,proto3,oneof" json:"FSaleOrgID,omitempty"`
	FBillNo            *string                                   `protobuf:"bytes,13,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FDate              *string                                   `protobuf:"bytes,14,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	FIsInit            *bool                                     `protobuf:"varint,15,opt,name=FIsInit,proto3,oneof" json:"FIsInit,omitempty"`
	FEndDate_H         *string                                   `protobuf:"bytes,16,opt,name=FEndDate_H,json=FEndDateH,proto3,oneof" json:"FEndDate_H,omitempty"`
	FIsPriceExcludeTax *bool                                     `protobuf:"varint,17,opt,name=FIsPriceExcludeTax,proto3,oneof" json:"FIsPriceExcludeTax,omitempty"`
	FIsTax             *bool                                     `protobuf:"varint,18,opt,name=FIsTax,proto3,oneof" json:"FIsTax,omitempty"`
	FCancelStatus      *string                                   `protobuf:"bytes,19,opt,name=FCancelStatus,proto3,oneof" json:"FCancelStatus,omitempty"`
	FBusinessType      *string                                   `protobuf:"bytes,20,opt,name=FBusinessType,proto3,oneof" json:"FBusinessType,omitempty"`
	FMatchMethodID     *int32                                    `protobuf:"varint,21,opt,name=FMatchMethodID,proto3,oneof" json:"FMatchMethodID,omitempty"`
	FSetAccountType    *string                                   `protobuf:"bytes,22,opt,name=FSetAccountType,proto3,oneof" json:"FSetAccountType,omitempty"`
	FPayConditon       *string                                   `protobuf:"bytes,23,opt,name=FPayConditon,proto3,oneof" json:"FPayConditon,omitempty"`
	FRun_Base          *string                                   `protobuf:"bytes,24,opt,name=F_run_Base,json=FRunBase,proto3,oneof" json:"F_run_Base,omitempty"`
}

func (x *KingdeeReceivableModelResponse) Reset() {
	*x = KingdeeReceivableModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceivableModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceivableModelResponse) ProtoMessage() {}

func (x *KingdeeReceivableModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceivableModelResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceivableModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{186}
}

func (x *KingdeeReceivableModelResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFsubHeadSuppiler() *KingdeeReceivableSubHeadSupplierResponse {
	if x != nil {
		return x.FsubHeadSuppiler
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFsubHeadFinc() *KingdeeReceivableSubHeadFincResponse {
	if x != nil {
		return x.FsubHeadFinc
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFEntityDetail() []*KingdeeReceivableEntityDetailResponse {
	if x != nil {
		return x.FEntityDetail
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFEntityPlan() []*KingdeeReceivableEntityPlanResponse {
	if x != nil {
		return x.FEntityPlan
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFID() int32 {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return 0
}

func (x *KingdeeReceivableModelResponse) GetFBillTypeID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBillTypeID
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFCustomerID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FCustomerID
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFCurrencyID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FCurrencyID
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFSettleOrgID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSettleOrgID
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFPayOrgID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FPayOrgID
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFSaleOrgID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSaleOrgID
	}
	return nil
}

func (x *KingdeeReceivableModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFIsInit() bool {
	if x != nil && x.FIsInit != nil {
		return *x.FIsInit
	}
	return false
}

func (x *KingdeeReceivableModelResponse) GetFEndDate_H() string {
	if x != nil && x.FEndDate_H != nil {
		return *x.FEndDate_H
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFIsPriceExcludeTax() bool {
	if x != nil && x.FIsPriceExcludeTax != nil {
		return *x.FIsPriceExcludeTax
	}
	return false
}

func (x *KingdeeReceivableModelResponse) GetFIsTax() bool {
	if x != nil && x.FIsTax != nil {
		return *x.FIsTax
	}
	return false
}

func (x *KingdeeReceivableModelResponse) GetFCancelStatus() string {
	if x != nil && x.FCancelStatus != nil {
		return *x.FCancelStatus
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFBusinessType() string {
	if x != nil && x.FBusinessType != nil {
		return *x.FBusinessType
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFMatchMethodID() int32 {
	if x != nil && x.FMatchMethodID != nil {
		return *x.FMatchMethodID
	}
	return 0
}

func (x *KingdeeReceivableModelResponse) GetFSetAccountType() string {
	if x != nil && x.FSetAccountType != nil {
		return *x.FSetAccountType
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFPayConditon() string {
	if x != nil && x.FPayConditon != nil {
		return *x.FPayConditon
	}
	return ""
}

func (x *KingdeeReceivableModelResponse) GetFRun_Base() string {
	if x != nil && x.FRun_Base != nil {
		return *x.FRun_Base
	}
	return ""
}

type KingdeeReceivableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                         `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	Model               *KingdeeReceivableModelResponse `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	AggNo               *string                         `protobuf:"bytes,3,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                         `protobuf:"bytes,4,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	NeedUpDateFields    *string                         `protobuf:"bytes,5,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string                         `protobuf:"bytes,6,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo           *string                         `protobuf:"bytes,7,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	AggPushStatus       *int32                          `protobuf:"varint,8,opt,name=agg_push_status,json=aggPushStatus,proto3,oneof" json:"agg_push_status,omitempty"`
	FailureReason       *string                         `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string                         `protobuf:"bytes,10,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32                          `protobuf:"varint,11,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string                         `protobuf:"bytes,12,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelCode         *int32                          `protobuf:"varint,13,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	ChannelCodeName     *string                         `protobuf:"bytes,14,opt,name=channel_code_name,json=channelCodeName,proto3,oneof" json:"channel_code_name,omitempty"`
	ChannelDim          *int32                          `protobuf:"varint,15,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string                         `protobuf:"bytes,16,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32                          `protobuf:"varint,17,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string                         `protobuf:"bytes,18,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggPeriod           *string                         `protobuf:"bytes,19,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	AggYear             *int32                          `protobuf:"varint,20,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth            *int32                          `protobuf:"varint,21,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek             *int32                          `protobuf:"varint,22,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay              *int32                          `protobuf:"varint,23,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
	AggOrganizeNo       *string                         `protobuf:"bytes,24,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string                         `protobuf:"bytes,25,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string                         `protobuf:"bytes,26,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string                         `protobuf:"bytes,27,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string                         `protobuf:"bytes,28,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string                         `protobuf:"bytes,29,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggServiceNo        *string                         `protobuf:"bytes,30,opt,name=agg_service_no,json=aggServiceNo,proto3,oneof" json:"agg_service_no,omitempty"`
	AggSrcOrder         *string                         `protobuf:"bytes,31,opt,name=agg_src_order,json=aggSrcOrder,proto3,oneof" json:"agg_src_order,omitempty"`
	AggOrderNo          *string                         `protobuf:"bytes,32,opt,name=agg_order_no,json=aggOrderNo,proto3,oneof" json:"agg_order_no,omitempty"`
	AggOrderCount       *int32                          `protobuf:"varint,33,opt,name=agg_order_count,json=aggOrderCount,proto3,oneof" json:"agg_order_count,omitempty"`
	AggGoodsTypeCount   *int32                          `protobuf:"varint,34,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32                          `protobuf:"varint,35,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	RefundType          *int32                          `protobuf:"varint,36,opt,name=refund_type,json=refundType,proto3,oneof" json:"refund_type,omitempty"`
	RefundTypeName      *string                         `protobuf:"bytes,37,opt,name=refund_type_name,json=refundTypeName,proto3,oneof" json:"refund_type_name,omitempty"`
	AggTotalAmount      *float64                        `protobuf:"fixed64,38,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *float64                        `protobuf:"fixed64,39,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *float64                        `protobuf:"fixed64,40,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *float64                        `protobuf:"fixed64,41,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggRefundAmount     *float64                        `protobuf:"fixed64,42,opt,name=agg_refund_amount,json=aggRefundAmount,proto3,oneof" json:"agg_refund_amount,omitempty"`
	KingdeePushTime     *string                         `protobuf:"bytes,43,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	CreateTime          *string                         `protobuf:"bytes,44,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                         `protobuf:"bytes,45,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	AggPushStatusName   *string                         `protobuf:"bytes,46,opt,name=agg_push_status_name,json=aggPushStatusName,proto3,oneof" json:"agg_push_status_name,omitempty"`
}

func (x *KingdeeReceivableResponse) Reset() {
	*x = KingdeeReceivableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceivableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceivableResponse) ProtoMessage() {}

func (x *KingdeeReceivableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceivableResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceivableResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{187}
}

func (x *KingdeeReceivableResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetModel() *KingdeeReceivableModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeeReceivableResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggPushStatus() int32 {
	if x != nil && x.AggPushStatus != nil {
		return *x.AggPushStatus
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetChannelCode() int32 {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetChannelCodeName() string {
	if x != nil && x.ChannelCodeName != nil {
		return *x.ChannelCodeName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggServiceNo() string {
	if x != nil && x.AggServiceNo != nil {
		return *x.AggServiceNo
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggSrcOrder() string {
	if x != nil && x.AggSrcOrder != nil {
		return *x.AggSrcOrder
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggOrderNo() string {
	if x != nil && x.AggOrderNo != nil {
		return *x.AggOrderNo
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggOrderCount() int32 {
	if x != nil && x.AggOrderCount != nil {
		return *x.AggOrderCount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetRefundType() int32 {
	if x != nil && x.RefundType != nil {
		return *x.RefundType
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetRefundTypeName() string {
	if x != nil && x.RefundTypeName != nil {
		return *x.RefundTypeName
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggTotalAmount() float64 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggDiscountAmount() float64 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggReceivableAmount() float64 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggPaidAmount() float64 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetAggRefundAmount() float64 {
	if x != nil && x.AggRefundAmount != nil {
		return *x.AggRefundAmount
	}
	return 0
}

func (x *KingdeeReceivableResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeReceivableResponse) GetAggPushStatusName() string {
	if x != nil && x.AggPushStatusName != nil {
		return *x.AggPushStatusName
	}
	return ""
}

type KingdeeReceivableSubHeadFincResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FEntryId            *int32                  `protobuf:"varint,2,opt,name=FEntryId,proto3,oneof" json:"FEntryId,omitempty"`
	FMainBookStdCurrId  *KingdeeFNumberResponse `protobuf:"bytes,3,opt,name=FMainBookStdCurrId,proto3,oneof" json:"FMainBookStdCurrId,omitempty"`
	FExchangeType       *KingdeeFNumberResponse `protobuf:"bytes,4,opt,name=FExchangeType,proto3,oneof" json:"FExchangeType,omitempty"`
	FExchangeRate       *float64                `protobuf:"fixed64,5,opt,name=FExchangeRate,proto3,oneof" json:"FExchangeRate,omitempty"`
	FSettleTypeID       *string                 `protobuf:"bytes,6,opt,name=FSettleTypeID,proto3,oneof" json:"FSettleTypeID,omitempty"`
	FAcCntTimeJudgeTime string                  `protobuf:"bytes,7,opt,name=FAcCntTimeJudgeTime,proto3" json:"FAcCntTimeJudgeTime,omitempty"`
	FIsCarriedDate      *bool                   `protobuf:"varint,8,opt,name=FIsCarriedDate,proto3,oneof" json:"FIsCarriedDate,omitempty"`
}

func (x *KingdeeReceivableSubHeadFincResponse) Reset() {
	*x = KingdeeReceivableSubHeadFincResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceivableSubHeadFincResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceivableSubHeadFincResponse) ProtoMessage() {}

func (x *KingdeeReceivableSubHeadFincResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceivableSubHeadFincResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceivableSubHeadFincResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{188}
}

func (x *KingdeeReceivableSubHeadFincResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceivableSubHeadFincResponse) GetFEntryId() int32 {
	if x != nil && x.FEntryId != nil {
		return *x.FEntryId
	}
	return 0
}

func (x *KingdeeReceivableSubHeadFincResponse) GetFMainBookStdCurrId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FMainBookStdCurrId
	}
	return nil
}

func (x *KingdeeReceivableSubHeadFincResponse) GetFExchangeType() *KingdeeFNumberResponse {
	if x != nil {
		return x.FExchangeType
	}
	return nil
}

func (x *KingdeeReceivableSubHeadFincResponse) GetFExchangeRate() float64 {
	if x != nil && x.FExchangeRate != nil {
		return *x.FExchangeRate
	}
	return 0
}

func (x *KingdeeReceivableSubHeadFincResponse) GetFSettleTypeID() string {
	if x != nil && x.FSettleTypeID != nil {
		return *x.FSettleTypeID
	}
	return ""
}

func (x *KingdeeReceivableSubHeadFincResponse) GetFAcCntTimeJudgeTime() string {
	if x != nil {
		return x.FAcCntTimeJudgeTime
	}
	return ""
}

func (x *KingdeeReceivableSubHeadFincResponse) GetFIsCarriedDate() bool {
	if x != nil && x.FIsCarriedDate != nil {
		return *x.FIsCarriedDate
	}
	return false
}

type KingdeeReceivableSubHeadSupplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId         *string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FEntryId    *int32                  `protobuf:"varint,2,opt,name=FEntryId,proto3,oneof" json:"FEntryId,omitempty"`
	FOrderId    *KingdeeFNumberResponse `protobuf:"bytes,3,opt,name=FOrderId,proto3,oneof" json:"FOrderId,omitempty"`
	FTransferId *KingdeeFNumberResponse `protobuf:"bytes,4,opt,name=FTransferId,proto3,oneof" json:"FTransferId,omitempty"`
	FChargeId   *KingdeeFNumberResponse `protobuf:"bytes,5,opt,name=FChargeId,proto3,oneof" json:"FChargeId,omitempty"`
}

func (x *KingdeeReceivableSubHeadSupplierResponse) Reset() {
	*x = KingdeeReceivableSubHeadSupplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceivableSubHeadSupplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceivableSubHeadSupplierResponse) ProtoMessage() {}

func (x *KingdeeReceivableSubHeadSupplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceivableSubHeadSupplierResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceivableSubHeadSupplierResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{189}
}

func (x *KingdeeReceivableSubHeadSupplierResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceivableSubHeadSupplierResponse) GetFEntryId() int32 {
	if x != nil && x.FEntryId != nil {
		return *x.FEntryId
	}
	return 0
}

func (x *KingdeeReceivableSubHeadSupplierResponse) GetFOrderId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOrderId
	}
	return nil
}

func (x *KingdeeReceivableSubHeadSupplierResponse) GetFTransferId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FTransferId
	}
	return nil
}

func (x *KingdeeReceivableSubHeadSupplierResponse) GetFChargeId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FChargeId
	}
	return nil
}

type KingdeeReceiveBillDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *KingdeeReceiveBillDestroyRequest) Reset() {
	*x = KingdeeReceiveBillDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillDestroyRequest) ProtoMessage() {}

func (x *KingdeeReceiveBillDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{190}
}

func (x *KingdeeReceiveBillDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type KingdeeReceiveBillFDetailLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string  `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	FlowId          *string  `protobuf:"bytes,2,opt,name=FlowId,proto3,oneof" json:"FlowId,omitempty"`
	FlowLineId      *int32   `protobuf:"varint,3,opt,name=FlowLineId,proto3,oneof" json:"FlowLineId,omitempty"`
	RuleId          *string  `protobuf:"bytes,4,opt,name=RuleId,proto3,oneof" json:"RuleId,omitempty"`
	STableId        *int32   `protobuf:"varint,5,opt,name=STableId,proto3,oneof" json:"STableId,omitempty"`
	STableName      *string  `protobuf:"bytes,6,opt,name=STableName,proto3,oneof" json:"STableName,omitempty"`
	SBillId         *string  `protobuf:"bytes,7,opt,name=SBillId,proto3,oneof" json:"SBillId,omitempty"`
	SId             *string  `protobuf:"bytes,8,opt,name=SId,proto3,oneof" json:"SId,omitempty"`
	BaseUnitQtyOld  *int32   `protobuf:"varint,9,opt,name=BaseUnitQtyOld,proto3,oneof" json:"BaseUnitQtyOld,omitempty"`
	BaseUnitQty     *int32   `protobuf:"varint,10,opt,name=BaseUnitQty,proto3,oneof" json:"BaseUnitQty,omitempty"`
	StockBaseQtyOld *int32   `protobuf:"varint,11,opt,name=StockBaseQtyOld,proto3,oneof" json:"StockBaseQtyOld,omitempty"`
	StockBaseQty    *int32   `protobuf:"varint,12,opt,name=StockBaseQty,proto3,oneof" json:"StockBaseQty,omitempty"`
	FLnkTrackerId   *string  `protobuf:"bytes,13,opt,name=FLnkTrackerId,proto3,oneof" json:"FLnkTrackerId,omitempty"`
	FLnkSState      *string  `protobuf:"bytes,14,opt,name=FLnkSState,proto3,oneof" json:"FLnkSState,omitempty"`
	FLnkAmount      *float64 `protobuf:"fixed64,15,opt,name=FLnkAmount,proto3,oneof" json:"FLnkAmount,omitempty"`
}

func (x *KingdeeReceiveBillFDetailLinkResponse) Reset() {
	*x = KingdeeReceiveBillFDetailLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillFDetailLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillFDetailLinkResponse) ProtoMessage() {}

func (x *KingdeeReceiveBillFDetailLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillFDetailLinkResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillFDetailLinkResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{191}
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetFlowId() string {
	if x != nil && x.FlowId != nil {
		return *x.FlowId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetFlowLineId() int32 {
	if x != nil && x.FlowLineId != nil {
		return *x.FlowLineId
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetRuleId() string {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetSTableId() int32 {
	if x != nil && x.STableId != nil {
		return *x.STableId
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetSTableName() string {
	if x != nil && x.STableName != nil {
		return *x.STableName
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetSBillId() string {
	if x != nil && x.SBillId != nil {
		return *x.SBillId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetSId() string {
	if x != nil && x.SId != nil {
		return *x.SId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetBaseUnitQtyOld() int32 {
	if x != nil && x.BaseUnitQtyOld != nil {
		return *x.BaseUnitQtyOld
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetBaseUnitQty() int32 {
	if x != nil && x.BaseUnitQty != nil {
		return *x.BaseUnitQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetStockBaseQtyOld() int32 {
	if x != nil && x.StockBaseQtyOld != nil {
		return *x.StockBaseQtyOld
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetStockBaseQty() int32 {
	if x != nil && x.StockBaseQty != nil {
		return *x.StockBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetFLnkTrackerId() string {
	if x != nil && x.FLnkTrackerId != nil {
		return *x.FLnkTrackerId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetFLnkSState() string {
	if x != nil && x.FLnkSState != nil {
		return *x.FLnkSState
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailLinkResponse) GetFLnkAmount() float64 {
	if x != nil && x.FLnkAmount != nil {
		return *x.FLnkAmount
	}
	return 0
}

type KingdeeReceiveBillFDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FEntryID                   *string                                  `protobuf:"bytes,1,opt,name=FEntryID,proto3,oneof" json:"FEntryID,omitempty"`
	FMaterialId                *string                                  `protobuf:"bytes,2,opt,name=FMaterialId,proto3,oneof" json:"FMaterialId,omitempty"`
	FMaterialDesc              *string                                  `protobuf:"bytes,3,opt,name=FMaterialDesc,proto3,oneof" json:"FMaterialDesc,omitempty"`
	FAssetTypeID               *string                                  `protobuf:"bytes,4,opt,name=FAssetTypeID,proto3,oneof" json:"FAssetTypeID,omitempty"`
	FAuxPropId                 *string                                  `protobuf:"bytes,5,opt,name=FAuxPropId,proto3,oneof" json:"FAuxPropId,omitempty"`
	FUnitId                    *string                                  `protobuf:"bytes,6,opt,name=FUnitId,proto3,oneof" json:"FUnitId,omitempty"`
	FActReceiveQty             *int32                                   `protobuf:"varint,7,opt,name=FActReceiveQty,proto3,oneof" json:"FActReceiveQty,omitempty"`
	FPreDeliveryDate           *string                                  `protobuf:"bytes,8,opt,name=FPreDeliveryDate,proto3,oneof" json:"FPreDeliveryDate,omitempty"`
	FSUPDELQTY                 *int32                                   `protobuf:"varint,9,opt,name=FSUPDELQTY,proto3,oneof" json:"FSUPDELQTY,omitempty"`
	FPriceUnitId               *string                                  `protobuf:"bytes,10,opt,name=FPriceUnitId,proto3,oneof" json:"FPriceUnitId,omitempty"`
	FStockID                   *string                                  `protobuf:"bytes,11,opt,name=FStockID,proto3,oneof" json:"FStockID,omitempty"`
	FStockLocId                *string                                  `protobuf:"bytes,12,opt,name=FStockLocId,proto3,oneof" json:"FStockLocId,omitempty"`
	FStockStatusId             *string                                  `protobuf:"bytes,13,opt,name=FStockStatusId,proto3,oneof" json:"FStockStatusId,omitempty"`
	FLot                       *string                                  `protobuf:"bytes,14,opt,name=FLot,proto3,oneof" json:"FLot,omitempty"`
	FRejectReason              *string                                  `protobuf:"bytes,15,opt,name=FRejectReason,proto3,oneof" json:"FRejectReason,omitempty"`
	FProduceDate               *string                                  `protobuf:"bytes,16,opt,name=FProduceDate,proto3,oneof" json:"FProduceDate,omitempty"`
	FDemandDeptId              *string                                  `protobuf:"bytes,17,opt,name=FDemandDeptId,proto3,oneof" json:"FDemandDeptId,omitempty"`
	FDemanderId                *string                                  `protobuf:"bytes,18,opt,name=FDemanderId,proto3,oneof" json:"FDemanderId,omitempty"`
	FGiveAway                  *bool                                    `protobuf:"varint,19,opt,name=FGiveAway,proto3,oneof" json:"FGiveAway,omitempty"`
	FChargeProjectID           *string                                  `protobuf:"bytes,20,opt,name=FChargeProjectID,proto3,oneof" json:"FChargeProjectID,omitempty"`
	FCtrlStockInPercent        *bool                                    `protobuf:"varint,21,opt,name=FCtrlStockInPercent,proto3,oneof" json:"FCtrlStockInPercent,omitempty"`
	FMtoNo                     *string                                  `protobuf:"bytes,22,opt,name=FMtoNo,proto3,oneof" json:"FMtoNo,omitempty"`
	FExtAuxUnitId              *string                                  `protobuf:"bytes,23,opt,name=FExtAuxUnitId,proto3,oneof" json:"FExtAuxUnitId,omitempty"`
	FExtAuxUnitQty             *int32                                   `protobuf:"varint,24,opt,name=FExtAuxUnitQty,proto3,oneof" json:"FExtAuxUnitQty,omitempty"`
	FProjectNo                 *string                                  `protobuf:"bytes,25,opt,name=FProjectNo,proto3,oneof" json:"FProjectNo,omitempty"`
	FCheckJoinBaseQty          *int32                                   `protobuf:"varint,26,opt,name=FCheckJoinBaseQty,proto3,oneof" json:"FCheckJoinBaseQty,omitempty"`
	FReceiveBaseQty            *int32                                   `protobuf:"varint,27,opt,name=FReceiveBaseQty,proto3,oneof" json:"FReceiveBaseQty,omitempty"`
	FRefuseBaseQty             *int32                                   `protobuf:"varint,28,opt,name=FRefuseBaseQty,proto3,oneof" json:"FRefuseBaseQty,omitempty"`
	FSampleDamageBaseQty       *int32                                   `protobuf:"varint,29,opt,name=FSampleDamageBaseQty,proto3,oneof" json:"FSampleDamageBaseQty,omitempty"`
	FCheckJoinQty              *int32                                   `protobuf:"varint,30,opt,name=FCheckJoinQty,proto3,oneof" json:"FCheckJoinQty,omitempty"`
	FReceiveQty                *int32                                   `protobuf:"varint,31,opt,name=FReceiveQty,proto3,oneof" json:"FReceiveQty,omitempty"`
	FRefuseQty                 *int32                                   `protobuf:"varint,32,opt,name=FRefuseQty,proto3,oneof" json:"FRefuseQty,omitempty"`
	FSampleDamageQty           *int32                                   `protobuf:"varint,33,opt,name=FSampleDamageQty,proto3,oneof" json:"FSampleDamageQty,omitempty"`
	FCheckInComing             *bool                                    `protobuf:"varint,34,opt,name=FCheckInComing,proto3,oneof" json:"FCheckInComing,omitempty"`
	FDeliverySite              *string                                  `protobuf:"bytes,35,opt,name=FDeliverySite,proto3,oneof" json:"FDeliverySite,omitempty"`
	FCardJoinQty               *int32                                   `protobuf:"varint,36,opt,name=FCardJoinQty,proto3,oneof" json:"FCardJoinQty,omitempty"`
	FCardQty                   *int32                                   `protobuf:"varint,37,opt,name=FCardQty,proto3,oneof" json:"FCardQty,omitempty"`
	FCardBaseQty               *int32                                   `protobuf:"varint,38,opt,name=FCardBaseQty,proto3,oneof" json:"FCardBaseQty,omitempty"`
	FCardJoinBaseQty           *int32                                   `protobuf:"varint,39,opt,name=FCardJoinBaseQty,proto3,oneof" json:"FCardJoinBaseQty,omitempty"`
	FCheckBaseQty              *int32                                   `protobuf:"varint,40,opt,name=FCheckBaseQty,proto3,oneof" json:"FCheckBaseQty,omitempty"`
	FCheckQty                  *int32                                   `protobuf:"varint,41,opt,name=FCheckQty,proto3,oneof" json:"FCheckQty,omitempty"`
	FTransferBaseQty           *int32                                   `protobuf:"varint,42,opt,name=FTransferBaseQty,proto3,oneof" json:"FTransferBaseQty,omitempty"`
	FIsReceiveUpdateStock      *bool                                    `protobuf:"varint,43,opt,name=FIsReceiveUpdateStock,proto3,oneof" json:"FIsReceiveUpdateStock,omitempty"`
	FTransferQty               *int32                                   `protobuf:"varint,44,opt,name=FTransferQty,proto3,oneof" json:"FTransferQty,omitempty"`
	FBomId                     *string                                  `protobuf:"bytes,45,opt,name=FBomId,proto3,oneof" json:"FBomId,omitempty"`
	FSupplierLot               *string                                  `protobuf:"bytes,46,opt,name=FSupplierLot,proto3,oneof" json:"FSupplierLot,omitempty"`
	FExpiryDate                *string                                  `protobuf:"bytes,47,opt,name=FExpiryDate,proto3,oneof" json:"FExpiryDate,omitempty"`
	FAuxUnitQty                *int32                                   `protobuf:"varint,48,opt,name=FAuxUnitQty,proto3,oneof" json:"FAuxUnitQty,omitempty"`
	FDescription               *string                                  `protobuf:"bytes,49,opt,name=FDescription,proto3,oneof" json:"FDescription,omitempty"`
	FStockInMaxQty             *int32                                   `protobuf:"varint,50,opt,name=FStockInMaxQty,proto3,oneof" json:"FStockInMaxQty,omitempty"`
	FStockInMinQty             *int32                                   `protobuf:"varint,51,opt,name=FStockInMinQty,proto3,oneof" json:"FStockInMinQty,omitempty"`
	FEntryTaxRate              *float64                                 `protobuf:"fixed64,52,opt,name=FEntryTaxRate,proto3,oneof" json:"FEntryTaxRate,omitempty"`
	FTaxCombination            *string                                  `protobuf:"bytes,53,opt,name=FTaxCombination,proto3,oneof" json:"FTaxCombination,omitempty"`
	FDiscountRate              *float64                                 `protobuf:"fixed64,54,opt,name=FDiscountRate,proto3,oneof" json:"FDiscountRate,omitempty"`
	FPrice                     *float64                                 `protobuf:"fixed64,55,opt,name=FPrice,proto3,oneof" json:"FPrice,omitempty"`
	FTaxPrice                  *float64                                 `protobuf:"fixed64,56,opt,name=FTaxPrice,proto3,oneof" json:"FTaxPrice,omitempty"`
	FSrcFormId                 *string                                  `protobuf:"bytes,57,opt,name=FSrcFormId,proto3,oneof" json:"FSrcFormId,omitempty"`
	FSrcBillNo                 *string                                  `protobuf:"bytes,58,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	FProcScrapBaseQty          *int32                                   `protobuf:"varint,59,opt,name=FProcScrapBaseQty,proto3,oneof" json:"FProcScrapBaseQty,omitempty"`
	FProcScrapQty              *int32                                   `protobuf:"varint,60,opt,name=FProcScrapQty,proto3,oneof" json:"FProcScrapQty,omitempty"`
	FMtrlScrapBaseQty          *int32                                   `protobuf:"varint,61,opt,name=FMtrlScrapBaseQty,proto3,oneof" json:"FMtrlScrapBaseQty,omitempty"`
	FMtrlScrapQty              *int32                                   `protobuf:"varint,62,opt,name=FMtrlScrapQty,proto3,oneof" json:"FMtrlScrapQty,omitempty"`
	FCsnReceiveBaseQty         *int32                                   `protobuf:"varint,63,opt,name=FCsnReceiveBaseQty,proto3,oneof" json:"FCsnReceiveBaseQty,omitempty"`
	FCsnReceiveQty             *int32                                   `protobuf:"varint,64,opt,name=FCsnReceiveQty,proto3,oneof" json:"FCsnReceiveQty,omitempty"`
	FRefuseJoinBaseQty         *int32                                   `protobuf:"varint,65,opt,name=FRefuseJoinBaseQty,proto3,oneof" json:"FRefuseJoinBaseQty,omitempty"`
	FRefuseJoinQty             *int32                                   `protobuf:"varint,66,opt,name=FRefuseJoinQty,proto3,oneof" json:"FRefuseJoinQty,omitempty"`
	FCsnReceiveJoinBaseQty     *int32                                   `protobuf:"varint,67,opt,name=FCsnReceiveJoinBaseQty,proto3,oneof" json:"FCsnReceiveJoinBaseQty,omitempty"`
	FCsnReceiveJoinQty         *int32                                   `protobuf:"varint,68,opt,name=FCsnReceiveJoinQty,proto3,oneof" json:"FCsnReceiveJoinQty,omitempty"`
	FPriceBaseQty              *int32                                   `protobuf:"varint,69,opt,name=FPriceBaseQty,proto3,oneof" json:"FPriceBaseQty,omitempty"`
	FSetPriceUnitID            *string                                  `protobuf:"bytes,70,opt,name=FSetPriceUnitID,proto3,oneof" json:"FSetPriceUnitID,omitempty"`
	FStockUnitID               *string                                  `protobuf:"bytes,71,opt,name=FStockUnitID,proto3,oneof" json:"FStockUnitID,omitempty"`
	FStockQty                  *int32                                   `protobuf:"varint,72,opt,name=FStockQty,proto3,oneof" json:"FStockQty,omitempty"`
	FStockBaseQty              *int32                                   `protobuf:"varint,73,opt,name=FStockBaseQty,proto3,oneof" json:"FStockBaseQty,omitempty"`
	FActlandQty                *int32                                   `protobuf:"varint,74,opt,name=FActlandQty,proto3,oneof" json:"FActlandQty,omitempty"`
	FConfirmDeliQty            *int32                                   `protobuf:"varint,75,opt,name=FConfirmDeliQty,proto3,oneof" json:"FConfirmDeliQty,omitempty"`
	FConfirmDeliDate           *string                                  `protobuf:"bytes,76,opt,name=FConfirmDeliDate,proto3,oneof" json:"FConfirmDeliDate,omitempty"`
	FConfirmInfo               *string                                  `protobuf:"bytes,77,opt,name=FConfirmInfo,proto3,oneof" json:"FConfirmInfo,omitempty"`
	FPriceDiscount             *float64                                 `protobuf:"fixed64,78,opt,name=FPriceDiscount,proto3,oneof" json:"FPriceDiscount,omitempty"`
	FAllAmountExceptDisCount   *float64                                 `protobuf:"fixed64,79,opt,name=FAllAmountExceptDisCount,proto3,oneof" json:"FAllAmountExceptDisCount,omitempty"`
	FACCRATE                   *float64                                 `protobuf:"fixed64,80,opt,name=FACCRATE,proto3,oneof" json:"FACCRATE,omitempty"`
	FRejectsDiscountAmount     *float64                                 `protobuf:"fixed64,81,opt,name=FRejectsDiscountAmount,proto3,oneof" json:"FRejectsDiscountAmount,omitempty"`
	FJoinRejectsDiscountAmount *float64                                 `protobuf:"fixed64,82,opt,name=FJoinRejectsDiscountAmount,proto3,oneof" json:"FJoinRejectsDiscountAmount,omitempty"`
	FSalOutStockBillNo         *string                                  `protobuf:"bytes,83,opt,name=FSalOutStockBillNo,proto3,oneof" json:"FSalOutStockBillNo,omitempty"`
	FSalOutStockEntryId        *int32                                   `protobuf:"varint,84,opt,name=FSalOutStockEntryId,proto3,oneof" json:"FSalOutStockEntryId,omitempty"`
	FSUBREQBILLNO              *string                                  `protobuf:"bytes,85,opt,name=FSUBREQBILLNO,proto3,oneof" json:"FSUBREQBILLNO,omitempty"`
	FSUBREQBILLSEQ             *int32                                   `protobuf:"varint,86,opt,name=FSUBREQBILLSEQ,proto3,oneof" json:"FSUBREQBILLSEQ,omitempty"`
	FSUBREQENTRYID             *int32                                   `protobuf:"varint,87,opt,name=FSUBREQENTRYID,proto3,oneof" json:"FSUBREQENTRYID,omitempty"`
	FDetailEntity_Link         []*KingdeeReceiveBillFDetailLinkResponse `protobuf:"bytes,88,rep,name=FDetailEntity_Link,json=FDetailEntityLink,proto3" json:"FDetailEntity_Link,omitempty"`
}

func (x *KingdeeReceiveBillFDetailResponse) Reset() {
	*x = KingdeeReceiveBillFDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillFDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillFDetailResponse) ProtoMessage() {}

func (x *KingdeeReceiveBillFDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillFDetailResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillFDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{192}
}

func (x *KingdeeReceiveBillFDetailResponse) GetFEntryID() string {
	if x != nil && x.FEntryID != nil {
		return *x.FEntryID
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFMaterialId() string {
	if x != nil && x.FMaterialId != nil {
		return *x.FMaterialId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFMaterialDesc() string {
	if x != nil && x.FMaterialDesc != nil {
		return *x.FMaterialDesc
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFAssetTypeID() string {
	if x != nil && x.FAssetTypeID != nil {
		return *x.FAssetTypeID
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFAuxPropId() string {
	if x != nil && x.FAuxPropId != nil {
		return *x.FAuxPropId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFUnitId() string {
	if x != nil && x.FUnitId != nil {
		return *x.FUnitId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFActReceiveQty() int32 {
	if x != nil && x.FActReceiveQty != nil {
		return *x.FActReceiveQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFPreDeliveryDate() string {
	if x != nil && x.FPreDeliveryDate != nil {
		return *x.FPreDeliveryDate
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSUPDELQTY() int32 {
	if x != nil && x.FSUPDELQTY != nil {
		return *x.FSUPDELQTY
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFPriceUnitId() string {
	if x != nil && x.FPriceUnitId != nil {
		return *x.FPriceUnitId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockID() string {
	if x != nil && x.FStockID != nil {
		return *x.FStockID
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockLocId() string {
	if x != nil && x.FStockLocId != nil {
		return *x.FStockLocId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockStatusId() string {
	if x != nil && x.FStockStatusId != nil {
		return *x.FStockStatusId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFLot() string {
	if x != nil && x.FLot != nil {
		return *x.FLot
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFRejectReason() string {
	if x != nil && x.FRejectReason != nil {
		return *x.FRejectReason
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFProduceDate() string {
	if x != nil && x.FProduceDate != nil {
		return *x.FProduceDate
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFDemandDeptId() string {
	if x != nil && x.FDemandDeptId != nil {
		return *x.FDemandDeptId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFDemanderId() string {
	if x != nil && x.FDemanderId != nil {
		return *x.FDemanderId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFGiveAway() bool {
	if x != nil && x.FGiveAway != nil {
		return *x.FGiveAway
	}
	return false
}

func (x *KingdeeReceiveBillFDetailResponse) GetFChargeProjectID() string {
	if x != nil && x.FChargeProjectID != nil {
		return *x.FChargeProjectID
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCtrlStockInPercent() bool {
	if x != nil && x.FCtrlStockInPercent != nil {
		return *x.FCtrlStockInPercent
	}
	return false
}

func (x *KingdeeReceiveBillFDetailResponse) GetFMtoNo() string {
	if x != nil && x.FMtoNo != nil {
		return *x.FMtoNo
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFExtAuxUnitId() string {
	if x != nil && x.FExtAuxUnitId != nil {
		return *x.FExtAuxUnitId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFExtAuxUnitQty() int32 {
	if x != nil && x.FExtAuxUnitQty != nil {
		return *x.FExtAuxUnitQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFProjectNo() string {
	if x != nil && x.FProjectNo != nil {
		return *x.FProjectNo
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCheckJoinBaseQty() int32 {
	if x != nil && x.FCheckJoinBaseQty != nil {
		return *x.FCheckJoinBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFReceiveBaseQty() int32 {
	if x != nil && x.FReceiveBaseQty != nil {
		return *x.FReceiveBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFRefuseBaseQty() int32 {
	if x != nil && x.FRefuseBaseQty != nil {
		return *x.FRefuseBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSampleDamageBaseQty() int32 {
	if x != nil && x.FSampleDamageBaseQty != nil {
		return *x.FSampleDamageBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCheckJoinQty() int32 {
	if x != nil && x.FCheckJoinQty != nil {
		return *x.FCheckJoinQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFReceiveQty() int32 {
	if x != nil && x.FReceiveQty != nil {
		return *x.FReceiveQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFRefuseQty() int32 {
	if x != nil && x.FRefuseQty != nil {
		return *x.FRefuseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSampleDamageQty() int32 {
	if x != nil && x.FSampleDamageQty != nil {
		return *x.FSampleDamageQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCheckInComing() bool {
	if x != nil && x.FCheckInComing != nil {
		return *x.FCheckInComing
	}
	return false
}

func (x *KingdeeReceiveBillFDetailResponse) GetFDeliverySite() string {
	if x != nil && x.FDeliverySite != nil {
		return *x.FDeliverySite
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCardJoinQty() int32 {
	if x != nil && x.FCardJoinQty != nil {
		return *x.FCardJoinQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCardQty() int32 {
	if x != nil && x.FCardQty != nil {
		return *x.FCardQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCardBaseQty() int32 {
	if x != nil && x.FCardBaseQty != nil {
		return *x.FCardBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCardJoinBaseQty() int32 {
	if x != nil && x.FCardJoinBaseQty != nil {
		return *x.FCardJoinBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCheckBaseQty() int32 {
	if x != nil && x.FCheckBaseQty != nil {
		return *x.FCheckBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCheckQty() int32 {
	if x != nil && x.FCheckQty != nil {
		return *x.FCheckQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFTransferBaseQty() int32 {
	if x != nil && x.FTransferBaseQty != nil {
		return *x.FTransferBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFIsReceiveUpdateStock() bool {
	if x != nil && x.FIsReceiveUpdateStock != nil {
		return *x.FIsReceiveUpdateStock
	}
	return false
}

func (x *KingdeeReceiveBillFDetailResponse) GetFTransferQty() int32 {
	if x != nil && x.FTransferQty != nil {
		return *x.FTransferQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFBomId() string {
	if x != nil && x.FBomId != nil {
		return *x.FBomId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSupplierLot() string {
	if x != nil && x.FSupplierLot != nil {
		return *x.FSupplierLot
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFExpiryDate() string {
	if x != nil && x.FExpiryDate != nil {
		return *x.FExpiryDate
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFAuxUnitQty() int32 {
	if x != nil && x.FAuxUnitQty != nil {
		return *x.FAuxUnitQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFDescription() string {
	if x != nil && x.FDescription != nil {
		return *x.FDescription
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockInMaxQty() int32 {
	if x != nil && x.FStockInMaxQty != nil {
		return *x.FStockInMaxQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockInMinQty() int32 {
	if x != nil && x.FStockInMinQty != nil {
		return *x.FStockInMinQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFEntryTaxRate() float64 {
	if x != nil && x.FEntryTaxRate != nil {
		return *x.FEntryTaxRate
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFTaxCombination() string {
	if x != nil && x.FTaxCombination != nil {
		return *x.FTaxCombination
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFDiscountRate() float64 {
	if x != nil && x.FDiscountRate != nil {
		return *x.FDiscountRate
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFPrice() float64 {
	if x != nil && x.FPrice != nil {
		return *x.FPrice
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFTaxPrice() float64 {
	if x != nil && x.FTaxPrice != nil {
		return *x.FTaxPrice
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSrcFormId() string {
	if x != nil && x.FSrcFormId != nil {
		return *x.FSrcFormId
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFProcScrapBaseQty() int32 {
	if x != nil && x.FProcScrapBaseQty != nil {
		return *x.FProcScrapBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFProcScrapQty() int32 {
	if x != nil && x.FProcScrapQty != nil {
		return *x.FProcScrapQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFMtrlScrapBaseQty() int32 {
	if x != nil && x.FMtrlScrapBaseQty != nil {
		return *x.FMtrlScrapBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFMtrlScrapQty() int32 {
	if x != nil && x.FMtrlScrapQty != nil {
		return *x.FMtrlScrapQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCsnReceiveBaseQty() int32 {
	if x != nil && x.FCsnReceiveBaseQty != nil {
		return *x.FCsnReceiveBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCsnReceiveQty() int32 {
	if x != nil && x.FCsnReceiveQty != nil {
		return *x.FCsnReceiveQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFRefuseJoinBaseQty() int32 {
	if x != nil && x.FRefuseJoinBaseQty != nil {
		return *x.FRefuseJoinBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFRefuseJoinQty() int32 {
	if x != nil && x.FRefuseJoinQty != nil {
		return *x.FRefuseJoinQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCsnReceiveJoinBaseQty() int32 {
	if x != nil && x.FCsnReceiveJoinBaseQty != nil {
		return *x.FCsnReceiveJoinBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFCsnReceiveJoinQty() int32 {
	if x != nil && x.FCsnReceiveJoinQty != nil {
		return *x.FCsnReceiveJoinQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFPriceBaseQty() int32 {
	if x != nil && x.FPriceBaseQty != nil {
		return *x.FPriceBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSetPriceUnitID() string {
	if x != nil && x.FSetPriceUnitID != nil {
		return *x.FSetPriceUnitID
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockUnitID() string {
	if x != nil && x.FStockUnitID != nil {
		return *x.FStockUnitID
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockQty() int32 {
	if x != nil && x.FStockQty != nil {
		return *x.FStockQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFStockBaseQty() int32 {
	if x != nil && x.FStockBaseQty != nil {
		return *x.FStockBaseQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFActlandQty() int32 {
	if x != nil && x.FActlandQty != nil {
		return *x.FActlandQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFConfirmDeliQty() int32 {
	if x != nil && x.FConfirmDeliQty != nil {
		return *x.FConfirmDeliQty
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFConfirmDeliDate() string {
	if x != nil && x.FConfirmDeliDate != nil {
		return *x.FConfirmDeliDate
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFConfirmInfo() string {
	if x != nil && x.FConfirmInfo != nil {
		return *x.FConfirmInfo
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFPriceDiscount() float64 {
	if x != nil && x.FPriceDiscount != nil {
		return *x.FPriceDiscount
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFAllAmountExceptDisCount() float64 {
	if x != nil && x.FAllAmountExceptDisCount != nil {
		return *x.FAllAmountExceptDisCount
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFACCRATE() float64 {
	if x != nil && x.FACCRATE != nil {
		return *x.FACCRATE
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFRejectsDiscountAmount() float64 {
	if x != nil && x.FRejectsDiscountAmount != nil {
		return *x.FRejectsDiscountAmount
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFJoinRejectsDiscountAmount() float64 {
	if x != nil && x.FJoinRejectsDiscountAmount != nil {
		return *x.FJoinRejectsDiscountAmount
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSalOutStockBillNo() string {
	if x != nil && x.FSalOutStockBillNo != nil {
		return *x.FSalOutStockBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSalOutStockEntryId() int32 {
	if x != nil && x.FSalOutStockEntryId != nil {
		return *x.FSalOutStockEntryId
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSUBREQBILLNO() string {
	if x != nil && x.FSUBREQBILLNO != nil {
		return *x.FSUBREQBILLNO
	}
	return ""
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSUBREQBILLSEQ() int32 {
	if x != nil && x.FSUBREQBILLSEQ != nil {
		return *x.FSUBREQBILLSEQ
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFSUBREQENTRYID() int32 {
	if x != nil && x.FSUBREQENTRYID != nil {
		return *x.FSUBREQENTRYID
	}
	return 0
}

func (x *KingdeeReceiveBillFDetailResponse) GetFDetailEntity_Link() []*KingdeeReceiveBillFDetailLinkResponse {
	if x != nil {
		return x.FDetailEntity_Link
	}
	return nil
}

type KingdeeReceiveBillListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeReceiveBillListRequest) Reset() {
	*x = KingdeeReceiveBillListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillListRequest) ProtoMessage() {}

func (x *KingdeeReceiveBillListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{193}
}

func (x *KingdeeReceiveBillListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeReceiveBillListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeReceiveBillListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeReceiveBillResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeReceiveBillListResponse) Reset() {
	*x = KingdeeReceiveBillListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillListResponse) ProtoMessage() {}

func (x *KingdeeReceiveBillListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{194}
}

func (x *KingdeeReceiveBillListResponse) GetResults() []*KingdeeReceiveBillResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeReceiveBillListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeReceiveBillModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FDetailEntity       []*KingdeeReceiveBillFDetailResponse `protobuf:"bytes,1,rep,name=FDetailEntity,proto3" json:"FDetailEntity,omitempty"`
	FID                 *string                              `protobuf:"bytes,2,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FBillTypeId         *string                              `protobuf:"bytes,3,opt,name=FBillTypeId,proto3,oneof" json:"FBillTypeId,omitempty"`
	FDocumentStatus     *string                              `protobuf:"bytes,4,opt,name=FDocumentStatus,proto3,oneof" json:"FDocumentStatus,omitempty"`
	FBusinessType       *string                              `protobuf:"bytes,5,opt,name=FBusinessType,proto3,oneof" json:"FBusinessType,omitempty"`
	FSrcBillNo          *string                              `protobuf:"bytes,6,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	FBillNo             *string                              `protobuf:"bytes,7,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FDate               *string                              `protobuf:"bytes,8,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	FStockOrgId         *string                              `protobuf:"bytes,9,opt,name=FStockOrgId,proto3,oneof" json:"FStockOrgId,omitempty"`
	FReceiveDeptId      *string                              `protobuf:"bytes,10,opt,name=FReceiveDeptId,proto3,oneof" json:"FReceiveDeptId,omitempty"`
	FStockGroupId       *string                              `protobuf:"bytes,11,opt,name=FStockGroupId,proto3,oneof" json:"FStockGroupId,omitempty"`
	FReceiverId         *string                              `protobuf:"bytes,12,opt,name=FReceiverId,proto3,oneof" json:"FReceiverId,omitempty"`
	FDemandOrgId        *string                              `protobuf:"bytes,13,opt,name=FDemandOrgId,proto3,oneof" json:"FDemandOrgId,omitempty"`
	FCorrespondOrgId    *string                              `protobuf:"bytes,14,opt,name=FCorrespondOrgId,proto3,oneof" json:"FCorrespondOrgId,omitempty"`
	FPurOrgId           *string                              `protobuf:"bytes,15,opt,name=FPurOrgId,proto3,oneof" json:"FPurOrgId,omitempty"`
	FPurDeptId          *string                              `protobuf:"bytes,16,opt,name=FPurDeptId,proto3,oneof" json:"FPurDeptId,omitempty"`
	FPurGroupId         *string                              `protobuf:"bytes,17,opt,name=FPurGroupId,proto3,oneof" json:"FPurGroupId,omitempty"`
	FPurchaserId        *string                              `protobuf:"bytes,18,opt,name=FPurchaserId,proto3,oneof" json:"FPurchaserId,omitempty"`
	FSupplierId         *string                              `protobuf:"bytes,19,opt,name=FSupplierId,proto3,oneof" json:"FSupplierId,omitempty"`
	FNote               *string                              `protobuf:"bytes,20,opt,name=FNote,proto3,oneof" json:"FNote,omitempty"`
	FSupplyId           *string                              `protobuf:"bytes,21,opt,name=FSupplyId,proto3,oneof" json:"FSupplyId,omitempty"`
	FSupplyAddress      *string                              `protobuf:"bytes,22,opt,name=FSupplyAddress,proto3,oneof" json:"FSupplyAddress,omitempty"`
	FSettleId           *string                              `protobuf:"bytes,23,opt,name=FSettleId,proto3,oneof" json:"FSettleId,omitempty"`
	FChargeId           *string                              `protobuf:"bytes,24,opt,name=FChargeId,proto3,oneof" json:"FChargeId,omitempty"`
	FOwnerTypeIdHead    *string                              `protobuf:"bytes,25,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
	FOwnerIdHead        *string                              `protobuf:"bytes,26,opt,name=FOwnerIdHead,proto3,oneof" json:"FOwnerIdHead,omitempty"`
	FConfirmerId        *string                              `protobuf:"bytes,27,opt,name=FConfirmerId,proto3,oneof" json:"FConfirmerId,omitempty"`
	FConfirmDate        *string                              `protobuf:"bytes,28,opt,name=FConfirmDate,proto3,oneof" json:"FConfirmDate,omitempty"`
	FIsInsideBill       *bool                                `protobuf:"varint,29,opt,name=FIsInsideBill,proto3,oneof" json:"FIsInsideBill,omitempty"`
	FIsMobile           *bool                                `protobuf:"varint,30,opt,name=FIsMobile,proto3,oneof" json:"FIsMobile,omitempty"`
	FScanBox            *string                              `protobuf:"bytes,31,opt,name=FScanBox,proto3,oneof" json:"FScanBox,omitempty"`
	FProviderContactId  *string                              `protobuf:"bytes,32,opt,name=FProviderContactId,proto3,oneof" json:"FProviderContactId,omitempty"`
	FIsChangeQty        *bool                                `protobuf:"varint,33,opt,name=FIsChangeQty,proto3,oneof" json:"FIsChangeQty,omitempty"`
	FACCTYPE            *string                              `protobuf:"bytes,34,opt,name=FACCTYPE,proto3,oneof" json:"FACCTYPE,omitempty"`
	FSupplyEMail        *string                              `protobuf:"bytes,35,opt,name=FSupplyEMail,proto3,oneof" json:"FSupplyEMail,omitempty"`
	FDocumentStatusName string                               `protobuf:"bytes,36,opt,name=FDocumentStatus_name,json=FDocumentStatusName,proto3" json:"FDocumentStatus_name,omitempty"`
}

func (x *KingdeeReceiveBillModelResponse) Reset() {
	*x = KingdeeReceiveBillModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillModelResponse) ProtoMessage() {}

func (x *KingdeeReceiveBillModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillModelResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{195}
}

func (x *KingdeeReceiveBillModelResponse) GetFDetailEntity() []*KingdeeReceiveBillFDetailResponse {
	if x != nil {
		return x.FDetailEntity
	}
	return nil
}

func (x *KingdeeReceiveBillModelResponse) GetFID() string {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFBillTypeId() string {
	if x != nil && x.FBillTypeId != nil {
		return *x.FBillTypeId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFDocumentStatus() string {
	if x != nil && x.FDocumentStatus != nil {
		return *x.FDocumentStatus
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFBusinessType() string {
	if x != nil && x.FBusinessType != nil {
		return *x.FBusinessType
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFStockOrgId() string {
	if x != nil && x.FStockOrgId != nil {
		return *x.FStockOrgId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFReceiveDeptId() string {
	if x != nil && x.FReceiveDeptId != nil {
		return *x.FReceiveDeptId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFStockGroupId() string {
	if x != nil && x.FStockGroupId != nil {
		return *x.FStockGroupId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFReceiverId() string {
	if x != nil && x.FReceiverId != nil {
		return *x.FReceiverId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFDemandOrgId() string {
	if x != nil && x.FDemandOrgId != nil {
		return *x.FDemandOrgId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFCorrespondOrgId() string {
	if x != nil && x.FCorrespondOrgId != nil {
		return *x.FCorrespondOrgId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFPurOrgId() string {
	if x != nil && x.FPurOrgId != nil {
		return *x.FPurOrgId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFPurDeptId() string {
	if x != nil && x.FPurDeptId != nil {
		return *x.FPurDeptId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFPurGroupId() string {
	if x != nil && x.FPurGroupId != nil {
		return *x.FPurGroupId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFPurchaserId() string {
	if x != nil && x.FPurchaserId != nil {
		return *x.FPurchaserId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFSupplierId() string {
	if x != nil && x.FSupplierId != nil {
		return *x.FSupplierId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFNote() string {
	if x != nil && x.FNote != nil {
		return *x.FNote
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFSupplyId() string {
	if x != nil && x.FSupplyId != nil {
		return *x.FSupplyId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFSupplyAddress() string {
	if x != nil && x.FSupplyAddress != nil {
		return *x.FSupplyAddress
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFSettleId() string {
	if x != nil && x.FSettleId != nil {
		return *x.FSettleId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFChargeId() string {
	if x != nil && x.FChargeId != nil {
		return *x.FChargeId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFOwnerIdHead() string {
	if x != nil && x.FOwnerIdHead != nil {
		return *x.FOwnerIdHead
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFConfirmerId() string {
	if x != nil && x.FConfirmerId != nil {
		return *x.FConfirmerId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFConfirmDate() string {
	if x != nil && x.FConfirmDate != nil {
		return *x.FConfirmDate
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFIsInsideBill() bool {
	if x != nil && x.FIsInsideBill != nil {
		return *x.FIsInsideBill
	}
	return false
}

func (x *KingdeeReceiveBillModelResponse) GetFIsMobile() bool {
	if x != nil && x.FIsMobile != nil {
		return *x.FIsMobile
	}
	return false
}

func (x *KingdeeReceiveBillModelResponse) GetFScanBox() string {
	if x != nil && x.FScanBox != nil {
		return *x.FScanBox
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFProviderContactId() string {
	if x != nil && x.FProviderContactId != nil {
		return *x.FProviderContactId
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFIsChangeQty() bool {
	if x != nil && x.FIsChangeQty != nil {
		return *x.FIsChangeQty
	}
	return false
}

func (x *KingdeeReceiveBillModelResponse) GetFACCTYPE() string {
	if x != nil && x.FACCTYPE != nil {
		return *x.FACCTYPE
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFSupplyEMail() string {
	if x != nil && x.FSupplyEMail != nil {
		return *x.FSupplyEMail
	}
	return ""
}

func (x *KingdeeReceiveBillModelResponse) GetFDocumentStatusName() string {
	if x != nil {
		return x.FDocumentStatusName
	}
	return ""
}

type KingdeeReceiveBillPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateTime           *string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime           *string  `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushWdtStatus        *int32   `protobuf:"varint,5,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	FBillNo              *string  `protobuf:"bytes,6,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FSrcBillNo           *string  `protobuf:"bytes,7,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	WPurchaseNo          *string  `protobuf:"bytes,8,opt,name=WPurchaseNo,proto3,oneof" json:"WPurchaseNo,omitempty"`
	NeedUpDateFields     *string  `protobuf:"bytes,9,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields     *string  `protobuf:"bytes,10,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	SyncTime             *string  `protobuf:"bytes,11,opt,name=sync_time,json=syncTime,proto3,oneof" json:"sync_time,omitempty"`
	WPurchaseStatus      *int32   `protobuf:"varint,12,opt,name=WPurchase_status,json=WPurchaseStatus,proto3,oneof" json:"WPurchase_status,omitempty"`
}

func (x *KingdeeReceiveBillPartialUpdateRequest) Reset() {
	*x = KingdeeReceiveBillPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillPartialUpdateRequest) ProtoMessage() {}

func (x *KingdeeReceiveBillPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{196}
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetWPurchaseNo() string {
	if x != nil && x.WPurchaseNo != nil {
		return *x.WPurchaseNo
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetSyncTime() string {
	if x != nil && x.SyncTime != nil {
		return *x.SyncTime
	}
	return ""
}

func (x *KingdeeReceiveBillPartialUpdateRequest) GetWPurchaseStatus() int32 {
	if x != nil && x.WPurchaseStatus != nil {
		return *x.WPurchaseStatus
	}
	return 0
}

type KingdeeReceiveBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	CreateTime       *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime       *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushWdtStatus    *int32  `protobuf:"varint,4,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	FBillNo          *string `protobuf:"bytes,5,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FSrcBillNo       *string `protobuf:"bytes,6,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	WPurchaseNo      *string `protobuf:"bytes,7,opt,name=WPurchaseNo,proto3,oneof" json:"WPurchaseNo,omitempty"`
	NeedUpDateFields *string `protobuf:"bytes,8,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields *string `protobuf:"bytes,9,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	SyncTime         *string `protobuf:"bytes,10,opt,name=sync_time,json=syncTime,proto3,oneof" json:"sync_time,omitempty"`
	WPurchaseStatus  *int32  `protobuf:"varint,11,opt,name=WPurchase_status,json=WPurchaseStatus,proto3,oneof" json:"WPurchase_status,omitempty"`
}

func (x *KingdeeReceiveBillRequest) Reset() {
	*x = KingdeeReceiveBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillRequest) ProtoMessage() {}

func (x *KingdeeReceiveBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillRequest.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{197}
}

func (x *KingdeeReceiveBillRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *KingdeeReceiveBillRequest) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetWPurchaseNo() string {
	if x != nil && x.WPurchaseNo != nil {
		return *x.WPurchaseNo
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetSyncTime() string {
	if x != nil && x.SyncTime != nil {
		return *x.SyncTime
	}
	return ""
}

func (x *KingdeeReceiveBillRequest) GetWPurchaseStatus() int32 {
	if x != nil && x.WPurchaseStatus != nil {
		return *x.WPurchaseStatus
	}
	return 0
}

type KingdeeReceiveBillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string                          `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	Model             *KingdeeReceiveBillModelResponse `protobuf:"bytes,2,opt,name=Model,proto3,oneof" json:"Model,omitempty"`
	CreateTime        *string                          `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime        *string                          `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushWdtStatus     *int32                           `protobuf:"varint,5,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	FBillNo           *string                          `protobuf:"bytes,6,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FSrcBillNo        *string                          `protobuf:"bytes,7,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	WPurchaseNo       *string                          `protobuf:"bytes,8,opt,name=WPurchaseNo,proto3,oneof" json:"WPurchaseNo,omitempty"`
	NeedUpDateFields  *string                          `protobuf:"bytes,9,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields  *string                          `protobuf:"bytes,10,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	SyncTime          *string                          `protobuf:"bytes,11,opt,name=sync_time,json=syncTime,proto3,oneof" json:"sync_time,omitempty"`
	PushWdtStatusName *string                          `protobuf:"bytes,12,opt,name=push_wdt_status_name,json=pushWdtStatusName,proto3,oneof" json:"push_wdt_status_name,omitempty"`
	WPurchaseStatus   *int32                           `protobuf:"varint,13,opt,name=WPurchase_status,json=WPurchaseStatus,proto3,oneof" json:"WPurchase_status,omitempty"`
}

func (x *KingdeeReceiveBillResponse) Reset() {
	*x = KingdeeReceiveBillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillResponse) ProtoMessage() {}

func (x *KingdeeReceiveBillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillResponse.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{198}
}

func (x *KingdeeReceiveBillResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetModel() *KingdeeReceiveBillModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeeReceiveBillResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *KingdeeReceiveBillResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetWPurchaseNo() string {
	if x != nil && x.WPurchaseNo != nil {
		return *x.WPurchaseNo
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetSyncTime() string {
	if x != nil && x.SyncTime != nil {
		return *x.SyncTime
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetPushWdtStatusName() string {
	if x != nil && x.PushWdtStatusName != nil {
		return *x.PushWdtStatusName
	}
	return ""
}

func (x *KingdeeReceiveBillResponse) GetWPurchaseStatus() int32 {
	if x != nil && x.WPurchaseStatus != nil {
		return *x.WPurchaseStatus
	}
	return 0
}

type KingdeeReceiveBillRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *KingdeeReceiveBillRetrieveRequest) Reset() {
	*x = KingdeeReceiveBillRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeReceiveBillRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeReceiveBillRetrieveRequest) ProtoMessage() {}

func (x *KingdeeReceiveBillRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeReceiveBillRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeeReceiveBillRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{199}
}

func (x *KingdeeReceiveBillRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type KingdeeSalOutStockFEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FMaterialID              string   `protobuf:"bytes,1,opt,name=FMaterialID,proto3" json:"FMaterialID,omitempty"`
	FOwnerID                 string   `protobuf:"bytes,2,opt,name=FOwnerID,proto3" json:"FOwnerID,omitempty"`
	FStockID                 string   `protobuf:"bytes,3,opt,name=FStockID,proto3" json:"FStockID,omitempty"`
	FUnitID                  string   `protobuf:"bytes,4,opt,name=FUnitID,proto3" json:"FUnitID,omitempty"`
	FENTRYID                 *int32   `protobuf:"varint,5,opt,name=FENTRYID,proto3,oneof" json:"FENTRYID,omitempty"`
	FRowType                 *string  `protobuf:"bytes,6,opt,name=FRowType,proto3,oneof" json:"FRowType,omitempty"`
	FOwnerTypeID             *string  `protobuf:"bytes,7,opt,name=FOwnerTypeID,proto3,oneof" json:"FOwnerTypeID,omitempty"`
	FSALUNITQTY              *float64 `protobuf:"fixed64,8,opt,name=FSALUNITQTY,proto3,oneof" json:"FSALUNITQTY,omitempty"`
	FRealQty                 *float64 `protobuf:"fixed64,9,opt,name=FRealQty,proto3,oneof" json:"FRealQty,omitempty"`
	FSALBASEQTY              *float64 `protobuf:"fixed64,10,opt,name=FSALBASEQTY,proto3,oneof" json:"FSALBASEQTY,omitempty"`
	FPRICEBASEQTY            *float64 `protobuf:"fixed64,11,opt,name=FPRICEBASEQTY,proto3,oneof" json:"FPRICEBASEQTY,omitempty"`
	FARNOTJOINQTY            *float64 `protobuf:"fixed64,12,opt,name=FARNOTJOINQTY,proto3,oneof" json:"FARNOTJOINQTY,omitempty"`
	FAllAmount               *float64 `protobuf:"fixed64,13,opt,name=FAllAmount,proto3,oneof" json:"FAllAmount,omitempty"`
	FDiscountRate            *int32   `protobuf:"varint,14,opt,name=FDiscountRate,proto3,oneof" json:"FDiscountRate,omitempty"`
	FOUTCONTROL              *bool    `protobuf:"varint,15,opt,name=FOUTCONTROL,proto3,oneof" json:"FOUTCONTROL,omitempty"`
	FIsOverLegalOrg          *bool    `protobuf:"varint,16,opt,name=FIsOverLegalOrg,proto3,oneof" json:"FIsOverLegalOrg,omitempty"`
	FCheckDelivery           *bool    `protobuf:"varint,17,opt,name=FCheckDelivery,proto3,oneof" json:"FCheckDelivery,omitempty"`
	FIsFree                  *bool    `protobuf:"varint,18,opt,name=FIsFree,proto3,oneof" json:"FIsFree,omitempty"`
	FEntrynote               *string  `protobuf:"bytes,19,opt,name=FEntrynote,proto3,oneof" json:"FEntrynote,omitempty"`
	FEntryTaxRate            *int32   `protobuf:"varint,20,opt,name=FEntryTaxRate,proto3,oneof" json:"FEntryTaxRate,omitempty"`
	SpecNo                   *string  `protobuf:"bytes,21,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName                *string  `protobuf:"bytes,22,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	FAllAmountExceptDisCount *float64 `protobuf:"fixed64,23,opt,name=FAllAmountExceptDisCount,proto3,oneof" json:"FAllAmountExceptDisCount,omitempty"`
	SubTradeNoList           *string  `protobuf:"bytes,24,opt,name=sub_trade_no_list,json=subTradeNoList,proto3,oneof" json:"sub_trade_no_list,omitempty"`
}

func (x *KingdeeSalOutStockFEntityResponse) Reset() {
	*x = KingdeeSalOutStockFEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockFEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockFEntityResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockFEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockFEntityResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockFEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{200}
}

func (x *KingdeeSalOutStockFEntityResponse) GetFMaterialID() string {
	if x != nil {
		return x.FMaterialID
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFOwnerID() string {
	if x != nil {
		return x.FOwnerID
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFStockID() string {
	if x != nil {
		return x.FStockID
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFUnitID() string {
	if x != nil {
		return x.FUnitID
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFENTRYID() int32 {
	if x != nil && x.FENTRYID != nil {
		return *x.FENTRYID
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFRowType() string {
	if x != nil && x.FRowType != nil {
		return *x.FRowType
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFOwnerTypeID() string {
	if x != nil && x.FOwnerTypeID != nil {
		return *x.FOwnerTypeID
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFSALUNITQTY() float64 {
	if x != nil && x.FSALUNITQTY != nil {
		return *x.FSALUNITQTY
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFRealQty() float64 {
	if x != nil && x.FRealQty != nil {
		return *x.FRealQty
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFSALBASEQTY() float64 {
	if x != nil && x.FSALBASEQTY != nil {
		return *x.FSALBASEQTY
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFPRICEBASEQTY() float64 {
	if x != nil && x.FPRICEBASEQTY != nil {
		return *x.FPRICEBASEQTY
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFARNOTJOINQTY() float64 {
	if x != nil && x.FARNOTJOINQTY != nil {
		return *x.FARNOTJOINQTY
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFAllAmount() float64 {
	if x != nil && x.FAllAmount != nil {
		return *x.FAllAmount
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFDiscountRate() int32 {
	if x != nil && x.FDiscountRate != nil {
		return *x.FDiscountRate
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetFOUTCONTROL() bool {
	if x != nil && x.FOUTCONTROL != nil {
		return *x.FOUTCONTROL
	}
	return false
}

func (x *KingdeeSalOutStockFEntityResponse) GetFIsOverLegalOrg() bool {
	if x != nil && x.FIsOverLegalOrg != nil {
		return *x.FIsOverLegalOrg
	}
	return false
}

func (x *KingdeeSalOutStockFEntityResponse) GetFCheckDelivery() bool {
	if x != nil && x.FCheckDelivery != nil {
		return *x.FCheckDelivery
	}
	return false
}

func (x *KingdeeSalOutStockFEntityResponse) GetFIsFree() bool {
	if x != nil && x.FIsFree != nil {
		return *x.FIsFree
	}
	return false
}

func (x *KingdeeSalOutStockFEntityResponse) GetFEntrynote() string {
	if x != nil && x.FEntrynote != nil {
		return *x.FEntrynote
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFEntryTaxRate() int32 {
	if x != nil && x.FEntryTaxRate != nil {
		return *x.FEntryTaxRate
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *KingdeeSalOutStockFEntityResponse) GetFAllAmountExceptDisCount() float64 {
	if x != nil && x.FAllAmountExceptDisCount != nil {
		return *x.FAllAmountExceptDisCount
	}
	return 0
}

func (x *KingdeeSalOutStockFEntityResponse) GetSubTradeNoList() string {
	if x != nil && x.SubTradeNoList != nil {
		return *x.SubTradeNoList
	}
	return ""
}

type KingdeeSalOutStockListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeSalOutStockListRequest) Reset() {
	*x = KingdeeSalOutStockListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockListRequest) ProtoMessage() {}

func (x *KingdeeSalOutStockListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{201}
}

func (x *KingdeeSalOutStockListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeSalOutStockListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeSalOutStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeSalOutStockResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeSalOutStockListResponse) Reset() {
	*x = KingdeeSalOutStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockListResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{202}
}

func (x *KingdeeSalOutStockListResponse) GetResults() []*KingdeeSalOutStockResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeSalOutStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeSalOutStockModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubHeadEntity *KingdeeSalOutStockSubHeadEntityResponse `protobuf:"bytes,1,opt,name=SubHeadEntity,proto3,oneof" json:"SubHeadEntity,omitempty"`
	FEntity       []*KingdeeSalOutStockFEntityResponse     `protobuf:"bytes,2,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	FBillTypeID   string                                   `protobuf:"bytes,3,opt,name=FBillTypeID,proto3" json:"FBillTypeID,omitempty"`
	FSaleOrgId    string                                   `protobuf:"bytes,4,opt,name=FSaleOrgId,proto3" json:"FSaleOrgId,omitempty"`
	FStockOrgId   string                                   `protobuf:"bytes,5,opt,name=FStockOrgId,proto3" json:"FStockOrgId,omitempty"`
	FBranchId     string                                   `protobuf:"bytes,6,opt,name=FBranchId,proto3" json:"FBranchId,omitempty"`
	FCustomerID   string                                   `protobuf:"bytes,7,opt,name=FCustomerID,proto3" json:"FCustomerID,omitempty"`
	FSettleID     string                                   `protobuf:"bytes,8,opt,name=FSettleID,proto3" json:"FSettleID,omitempty"`
	FPayerID      string                                   `protobuf:"bytes,9,opt,name=FPayerID,proto3" json:"FPayerID,omitempty"`
	FReceiverID   string                                   `protobuf:"bytes,10,opt,name=FReceiverID,proto3" json:"FReceiverID,omitempty"`
	FSaleDeptID   string                                   `protobuf:"bytes,11,opt,name=FSaleDeptID,proto3" json:"FSaleDeptID,omitempty"`
	FSalesManID   string                                   `protobuf:"bytes,12,opt,name=FSalesManID,proto3" json:"FSalesManID,omitempty"`
	FBillNo       *string                                  `protobuf:"bytes,13,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FDate         string                                   `protobuf:"bytes,14,opt,name=FDate,proto3" json:"FDate,omitempty"`
	FZBStockID    *string                                  `protobuf:"bytes,15,opt,name=FZBStockID,proto3,oneof" json:"FZBStockID,omitempty"`
	FOwnerIdHead  *string                                  `protobuf:"bytes,16,opt,name=FOwnerIdHead,proto3,oneof" json:"FOwnerIdHead,omitempty"`
	FNote         *string                                  `protobuf:"bytes,17,opt,name=FNote,proto3,oneof" json:"FNote,omitempty"`
	FLogisticsNos *string                                  `protobuf:"bytes,18,opt,name=FLogisticsNos,proto3,oneof" json:"FLogisticsNos,omitempty"`
	FARStatus     *string                                  `protobuf:"bytes,19,opt,name=FARStatus,proto3,oneof" json:"FARStatus,omitempty"`
	FXSBillType   *string                                  `protobuf:"bytes,20,opt,name=FXSBillType,proto3,oneof" json:"FXSBillType,omitempty"`
	Fprop2        *string                                  `protobuf:"bytes,21,opt,name=Fprop2,proto3,oneof" json:"Fprop2,omitempty"`
}

func (x *KingdeeSalOutStockModelResponse) Reset() {
	*x = KingdeeSalOutStockModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockModelResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockModelResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{203}
}

func (x *KingdeeSalOutStockModelResponse) GetSubHeadEntity() *KingdeeSalOutStockSubHeadEntityResponse {
	if x != nil {
		return x.SubHeadEntity
	}
	return nil
}

func (x *KingdeeSalOutStockModelResponse) GetFEntity() []*KingdeeSalOutStockFEntityResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *KingdeeSalOutStockModelResponse) GetFBillTypeID() string {
	if x != nil {
		return x.FBillTypeID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSaleOrgId() string {
	if x != nil {
		return x.FSaleOrgId
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFStockOrgId() string {
	if x != nil {
		return x.FStockOrgId
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFBranchId() string {
	if x != nil {
		return x.FBranchId
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFCustomerID() string {
	if x != nil {
		return x.FCustomerID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSettleID() string {
	if x != nil {
		return x.FSettleID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFPayerID() string {
	if x != nil {
		return x.FPayerID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFReceiverID() string {
	if x != nil {
		return x.FReceiverID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSaleDeptID() string {
	if x != nil {
		return x.FSaleDeptID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSalesManID() string {
	if x != nil {
		return x.FSalesManID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFZBStockID() string {
	if x != nil && x.FZBStockID != nil {
		return *x.FZBStockID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFOwnerIdHead() string {
	if x != nil && x.FOwnerIdHead != nil {
		return *x.FOwnerIdHead
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFNote() string {
	if x != nil && x.FNote != nil {
		return *x.FNote
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFLogisticsNos() string {
	if x != nil && x.FLogisticsNos != nil {
		return *x.FLogisticsNos
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFARStatus() string {
	if x != nil && x.FARStatus != nil {
		return *x.FARStatus
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFXSBillType() string {
	if x != nil && x.FXSBillType != nil {
		return *x.FXSBillType
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFprop2() string {
	if x != nil && x.Fprop2 != nil {
		return *x.Fprop2
	}
	return ""
}

type KingdeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                          `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	Model               *KingdeeSalOutStockModelResponse `protobuf:"bytes,2,opt,name=model,proto3,oneof" json:"model,omitempty"`
	AggNo               *string                          `protobuf:"bytes,3,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                          `protobuf:"bytes,4,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	NeedUpDateFields    *string                          `protobuf:"bytes,5,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string                          `protobuf:"bytes,6,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo           *string                          `protobuf:"bytes,7,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus   *int32                           `protobuf:"varint,8,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason       *string                          `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string                          `protobuf:"bytes,10,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32                           `protobuf:"varint,11,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string                          `protobuf:"bytes,12,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim          *int32                           `protobuf:"varint,13,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string                          `protobuf:"bytes,14,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32                           `protobuf:"varint,15,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string                          `protobuf:"bytes,16,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo       *string                          `protobuf:"bytes,17,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string                          `protobuf:"bytes,18,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggYear             *int32                           `protobuf:"varint,19,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth            *int32                           `protobuf:"varint,20,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek             *int32                           `protobuf:"varint,21,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay              *int32                           `protobuf:"varint,22,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
	AggShopNo           *string                          `protobuf:"bytes,23,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string                          `protobuf:"bytes,24,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string                          `protobuf:"bytes,25,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string                          `protobuf:"bytes,26,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo          *string                          `protobuf:"bytes,27,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount       *int32                           `protobuf:"varint,28,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount   *int32                           `protobuf:"varint,29,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *float64                         `protobuf:"fixed64,30,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount      *float64                         `protobuf:"fixed64,31,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *float64                         `protobuf:"fixed64,32,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *float64                         `protobuf:"fixed64,33,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *float64                         `protobuf:"fixed64,34,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod           *string                          `protobuf:"bytes,35,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	KingdeePushTime     *string                          `protobuf:"bytes,36,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	CreateTime          *string                          `protobuf:"bytes,37,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                          `protobuf:"bytes,38,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *KingdeeSalOutStockResponse) Reset() {
	*x = KingdeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{204}
}

func (x *KingdeeSalOutStockResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetModel() *KingdeeSalOutStockModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeeSalOutStockResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggTotalAmount() float64 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggDiscountAmount() float64 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggReceivableAmount() float64 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggPaidAmount() float64 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type KingdeeSalOutStockRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *KingdeeSalOutStockRetrieveRequest) Reset() {
	*x = KingdeeSalOutStockRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockRetrieveRequest) ProtoMessage() {}

func (x *KingdeeSalOutStockRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{205}
}

func (x *KingdeeSalOutStockRetrieveRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type KingdeeSalOutStockSubHeadEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FSettleCurrID   string  `protobuf:"bytes,1,opt,name=FSettleCurrID,proto3" json:"FSettleCurrID,omitempty"`
	FSettleOrgID    string  `protobuf:"bytes,2,opt,name=FSettleOrgID,proto3" json:"FSettleOrgID,omitempty"`
	FSettleTypeID   string  `protobuf:"bytes,3,opt,name=FSettleTypeID,proto3" json:"FSettleTypeID,omitempty"`
	FPriceListId    string  `protobuf:"bytes,4,opt,name=FPriceListId,proto3" json:"FPriceListId,omitempty"`
	FDiscountListId string  `protobuf:"bytes,5,opt,name=FDiscountListId,proto3" json:"FDiscountListId,omitempty"`
	FEntryId        *int32  `protobuf:"varint,6,opt,name=FEntryId,proto3,oneof" json:"FEntryId,omitempty"`
	FThirdBillNo    *string `protobuf:"bytes,7,opt,name=FThirdBillNo,proto3,oneof" json:"FThirdBillNo,omitempty"`
	FThirdBillId    *string `protobuf:"bytes,8,opt,name=FThirdBillId,proto3,oneof" json:"FThirdBillId,omitempty"`
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) Reset() {
	*x = KingdeeSalOutStockSubHeadEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockSubHeadEntityResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockSubHeadEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockSubHeadEntityResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockSubHeadEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{206}
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFSettleCurrID() string {
	if x != nil {
		return x.FSettleCurrID
	}
	return ""
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFSettleOrgID() string {
	if x != nil {
		return x.FSettleOrgID
	}
	return ""
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFSettleTypeID() string {
	if x != nil {
		return x.FSettleTypeID
	}
	return ""
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFPriceListId() string {
	if x != nil {
		return x.FPriceListId
	}
	return ""
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFDiscountListId() string {
	if x != nil {
		return x.FDiscountListId
	}
	return ""
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFEntryId() int32 {
	if x != nil && x.FEntryId != nil {
		return *x.FEntryId
	}
	return 0
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFThirdBillNo() string {
	if x != nil && x.FThirdBillNo != nil {
		return *x.FThirdBillNo
	}
	return ""
}

func (x *KingdeeSalOutStockSubHeadEntityResponse) GetFThirdBillId() string {
	if x != nil && x.FThirdBillId != nil {
		return *x.FThirdBillId
	}
	return ""
}

type KingdeeSalReturnStockDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeeSalReturnStockDestroyRequest) Reset() {
	*x = KingdeeSalReturnStockDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockDestroyRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{207}
}

func (x *KingdeeSalReturnStockDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeeSalReturnStockEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FMaterialID   *string  `protobuf:"bytes,1,opt,name=FMaterialID,proto3,oneof" json:"FMaterialID,omitempty"`
	FReturnType   *string  `protobuf:"bytes,4,opt,name=FReturnType,proto3,oneof" json:"FReturnType,omitempty"`
	FRealQty      *float64 `protobuf:"fixed64,6,opt,name=FRealQty,proto3,oneof" json:"FRealQty,omitempty"`
	FTaxPrice     *float64 `protobuf:"fixed64,12,opt,name=FTaxPrice,proto3,oneof" json:"FTaxPrice,omitempty"`
	FDeliveryDate string   `protobuf:"bytes,15,opt,name=FDeliveryDate,proto3" json:"FDeliveryDate,omitempty"`
	FUnitID       *string  `protobuf:"bytes,17,opt,name=FUnitID,proto3,oneof" json:"FUnitID,omitempty"`
	FOwnerTypeId  *string  `protobuf:"bytes,18,opt,name=FOwnerTypeId,proto3,oneof" json:"FOwnerTypeId,omitempty"`
	FOwnerId      *string  `protobuf:"bytes,19,opt,name=FOwnerId,proto3,oneof" json:"FOwnerId,omitempty"`
	SpecNo        *string  `protobuf:"bytes,20,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsName     *string  `protobuf:"bytes,21,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
}

func (x *KingdeeSalReturnStockEntityResponse) Reset() {
	*x = KingdeeSalReturnStockEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockEntityResponse) ProtoMessage() {}

func (x *KingdeeSalReturnStockEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockEntityResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{208}
}

func (x *KingdeeSalReturnStockEntityResponse) GetFMaterialID() string {
	if x != nil && x.FMaterialID != nil {
		return *x.FMaterialID
	}
	return ""
}

func (x *KingdeeSalReturnStockEntityResponse) GetFReturnType() string {
	if x != nil && x.FReturnType != nil {
		return *x.FReturnType
	}
	return ""
}

func (x *KingdeeSalReturnStockEntityResponse) GetFRealQty() float64 {
	if x != nil && x.FRealQty != nil {
		return *x.FRealQty
	}
	return 0
}

func (x *KingdeeSalReturnStockEntityResponse) GetFTaxPrice() float64 {
	if x != nil && x.FTaxPrice != nil {
		return *x.FTaxPrice
	}
	return 0
}

func (x *KingdeeSalReturnStockEntityResponse) GetFDeliveryDate() string {
	if x != nil {
		return x.FDeliveryDate
	}
	return ""
}

func (x *KingdeeSalReturnStockEntityResponse) GetFUnitID() string {
	if x != nil && x.FUnitID != nil {
		return *x.FUnitID
	}
	return ""
}

func (x *KingdeeSalReturnStockEntityResponse) GetFOwnerTypeId() string {
	if x != nil && x.FOwnerTypeId != nil {
		return *x.FOwnerTypeId
	}
	return ""
}

func (x *KingdeeSalReturnStockEntityResponse) GetFOwnerId() string {
	if x != nil && x.FOwnerId != nil {
		return *x.FOwnerId
	}
	return ""
}

func (x *KingdeeSalReturnStockEntityResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *KingdeeSalReturnStockEntityResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

type KingdeeSalReturnStockListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeSalReturnStockListRequest) Reset() {
	*x = KingdeeSalReturnStockListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockListRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{209}
}

func (x *KingdeeSalReturnStockListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeSalReturnStockListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeSalReturnStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeSalReturnStockResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeSalReturnStockListResponse) Reset() {
	*x = KingdeeSalReturnStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockListResponse) ProtoMessage() {}

func (x *KingdeeSalReturnStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{210}
}

func (x *KingdeeSalReturnStockListResponse) GetResults() []*KingdeeSalReturnStockResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeSalReturnStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeSalReturnStockModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FBillNo       string                                      `protobuf:"bytes,1,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FEntity       []*KingdeeSalReturnStockEntityResponse      `protobuf:"bytes,2,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	FBillTypeID   *string                                     `protobuf:"bytes,3,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FSaleOrgId    *string                                     `protobuf:"bytes,4,opt,name=FSaleOrgId,proto3,oneof" json:"FSaleOrgId,omitempty"`
	FStockOrgId   *string                                     `protobuf:"bytes,5,opt,name=FStockOrgId,proto3,oneof" json:"FStockOrgId,omitempty"`
	FRetcustId    *string                                     `protobuf:"bytes,7,opt,name=FRetcustId,proto3,oneof" json:"FRetcustId,omitempty"`
	FDate         string                                      `protobuf:"bytes,14,opt,name=FDate,proto3" json:"FDate,omitempty"`
	SubHeadEntity *KingdeeSalReturnStockSubHeadEntityResponse `protobuf:"bytes,15,opt,name=SubHeadEntity,proto3,oneof" json:"SubHeadEntity,omitempty"`
	FCustomerID   string                                      `protobuf:"bytes,16,opt,name=FCustomerID,proto3" json:"FCustomerID,omitempty"`
	FXSBillType   *string                                     `protobuf:"bytes,17,opt,name=FXSBillType,proto3,oneof" json:"FXSBillType,omitempty"`
}

func (x *KingdeeSalReturnStockModelResponse) Reset() {
	*x = KingdeeSalReturnStockModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockModelResponse) ProtoMessage() {}

func (x *KingdeeSalReturnStockModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockModelResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{211}
}

func (x *KingdeeSalReturnStockModelResponse) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockModelResponse) GetFEntity() []*KingdeeSalReturnStockEntityResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *KingdeeSalReturnStockModelResponse) GetFBillTypeID() string {
	if x != nil && x.FBillTypeID != nil {
		return *x.FBillTypeID
	}
	return ""
}

func (x *KingdeeSalReturnStockModelResponse) GetFSaleOrgId() string {
	if x != nil && x.FSaleOrgId != nil {
		return *x.FSaleOrgId
	}
	return ""
}

func (x *KingdeeSalReturnStockModelResponse) GetFStockOrgId() string {
	if x != nil && x.FStockOrgId != nil {
		return *x.FStockOrgId
	}
	return ""
}

func (x *KingdeeSalReturnStockModelResponse) GetFRetcustId() string {
	if x != nil && x.FRetcustId != nil {
		return *x.FRetcustId
	}
	return ""
}

func (x *KingdeeSalReturnStockModelResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *KingdeeSalReturnStockModelResponse) GetSubHeadEntity() *KingdeeSalReturnStockSubHeadEntityResponse {
	if x != nil {
		return x.SubHeadEntity
	}
	return nil
}

func (x *KingdeeSalReturnStockModelResponse) GetFCustomerID() string {
	if x != nil {
		return x.FCustomerID
	}
	return ""
}

func (x *KingdeeSalReturnStockModelResponse) GetFXSBillType() string {
	if x != nil && x.FXSBillType != nil {
		return *x.FXSBillType
	}
	return ""
}

type KingdeeSalReturnStockPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo                *string  `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	NeedUpDateFields     *string  `protobuf:"bytes,5,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields     *string  `protobuf:"bytes,6,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	FailureReason        *string  `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason         *string  `protobuf:"bytes,10,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggOrganizeNo        *string  `protobuf:"bytes,12,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName      *string  `protobuf:"bytes,13,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo            *string  `protobuf:"bytes,14,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName          *string  `protobuf:"bytes,15,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo       *string  `protobuf:"bytes,16,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName     *string  `protobuf:"bytes,17,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggGoodsTypeCount    *int32   `protobuf:"varint,20,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount        *float64 `protobuf:"fixed64,21,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	CreateTime           *string  `protobuf:"bytes,26,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime           *string  `protobuf:"bytes,27,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	KingdeePushTime      *string  `protobuf:"bytes,28,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	Id                   *int32   `protobuf:"varint,29,opt,name=id,proto3,oneof" json:"id,omitempty"`
	PushKingdeeStatus    *int32   `protobuf:"varint,30,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	FBillNo              string   `protobuf:"bytes,31,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FSrcBillNo           *string  `protobuf:"bytes,32,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	RelatedAggNo         *string  `protobuf:"bytes,33,opt,name=related_agg_no,json=relatedAggNo,proto3,oneof" json:"related_agg_no,omitempty"`
	RefundType           *int32   `protobuf:"varint,34,opt,name=refund_type,json=refundType,proto3,oneof" json:"refund_type,omitempty"`
	RefundTypeName       *string  `protobuf:"bytes,35,opt,name=refund_type_name,json=refundTypeName,proto3,oneof" json:"refund_type_name,omitempty"`
	AggRefundNo          *string  `protobuf:"bytes,36,opt,name=agg_refund_no,json=aggRefundNo,proto3,oneof" json:"agg_refund_no,omitempty"`
	AggTradeNo           *string  `protobuf:"bytes,37,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggRefundCount       *int32   `protobuf:"varint,38,opt,name=agg_refund_count,json=aggRefundCount,proto3,oneof" json:"agg_refund_count,omitempty"`
	AggRefundAmount      *float64 `protobuf:"fixed64,39,opt,name=agg_refund_amount,json=aggRefundAmount,proto3,oneof" json:"agg_refund_amount,omitempty"`
	AggYear              *int32   `protobuf:"varint,40,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth             *int32   `protobuf:"varint,41,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek              *int32   `protobuf:"varint,42,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay               *int32   `protobuf:"varint,43,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) Reset() {
	*x = KingdeeSalReturnStockPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockPartialUpdateRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{212}
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetRelatedAggNo() string {
	if x != nil && x.RelatedAggNo != nil {
		return *x.RelatedAggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetRefundType() int32 {
	if x != nil && x.RefundType != nil {
		return *x.RefundType
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetRefundTypeName() string {
	if x != nil && x.RefundTypeName != nil {
		return *x.RefundTypeName
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggRefundNo() string {
	if x != nil && x.AggRefundNo != nil {
		return *x.AggRefundNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggRefundCount() int32 {
	if x != nil && x.AggRefundCount != nil {
		return *x.AggRefundCount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggRefundAmount() float64 {
	if x != nil && x.AggRefundAmount != nil {
		return *x.AggRefundAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

type KingdeeSalReturnStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo             *string  `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	NeedUpDateFields  *string  `protobuf:"bytes,4,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields  *string  `protobuf:"bytes,5,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	FailureReason     *string  `protobuf:"bytes,8,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason      *string  `protobuf:"bytes,9,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggOrganizeNo     *string  `protobuf:"bytes,11,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName   *string  `protobuf:"bytes,12,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo         *string  `protobuf:"bytes,13,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName       *string  `protobuf:"bytes,14,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo    *string  `protobuf:"bytes,15,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName  *string  `protobuf:"bytes,16,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggGoodsTypeCount *int32   `protobuf:"varint,19,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount     *float64 `protobuf:"fixed64,20,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	CreateTime        *string  `protobuf:"bytes,25,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime        *string  `protobuf:"bytes,26,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	KingdeePushTime   *string  `protobuf:"bytes,27,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	Id                *int32   `protobuf:"varint,28,opt,name=id,proto3,oneof" json:"id,omitempty"`
	PushKingdeeStatus *int32   `protobuf:"varint,29,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	FBillNo           string   `protobuf:"bytes,30,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FSrcBillNo        *string  `protobuf:"bytes,31,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	RelatedAggNo      *string  `protobuf:"bytes,32,opt,name=related_agg_no,json=relatedAggNo,proto3,oneof" json:"related_agg_no,omitempty"`
	RefundType        *int32   `protobuf:"varint,33,opt,name=refund_type,json=refundType,proto3,oneof" json:"refund_type,omitempty"`
	RefundTypeName    *string  `protobuf:"bytes,34,opt,name=refund_type_name,json=refundTypeName,proto3,oneof" json:"refund_type_name,omitempty"`
	AggRefundNo       *string  `protobuf:"bytes,35,opt,name=agg_refund_no,json=aggRefundNo,proto3,oneof" json:"agg_refund_no,omitempty"`
	AggTradeNo        *string  `protobuf:"bytes,36,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggRefundCount    *int32   `protobuf:"varint,37,opt,name=agg_refund_count,json=aggRefundCount,proto3,oneof" json:"agg_refund_count,omitempty"`
	AggRefundAmount   *float64 `protobuf:"fixed64,38,opt,name=agg_refund_amount,json=aggRefundAmount,proto3,oneof" json:"agg_refund_amount,omitempty"`
	AggYear           *int32   `protobuf:"varint,39,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth          *int32   `protobuf:"varint,40,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek           *int32   `protobuf:"varint,41,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay            *int32   `protobuf:"varint,42,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
}

func (x *KingdeeSalReturnStockRequest) Reset() {
	*x = KingdeeSalReturnStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{213}
}

func (x *KingdeeSalReturnStockRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetRelatedAggNo() string {
	if x != nil && x.RelatedAggNo != nil {
		return *x.RelatedAggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetRefundType() int32 {
	if x != nil && x.RefundType != nil {
		return *x.RefundType
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetRefundTypeName() string {
	if x != nil && x.RefundTypeName != nil {
		return *x.RefundTypeName
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggRefundNo() string {
	if x != nil && x.AggRefundNo != nil {
		return *x.AggRefundNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggRefundCount() int32 {
	if x != nil && x.AggRefundCount != nil {
		return *x.AggRefundCount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggRefundAmount() float64 {
	if x != nil && x.AggRefundAmount != nil {
		return *x.AggRefundAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

type KingdeeSalReturnStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo                 *string                             `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	Model                 *KingdeeSalReturnStockModelResponse `protobuf:"bytes,2,opt,name=Model,proto3,oneof" json:"Model,omitempty"`
	NeedUpDateFields      *string                             `protobuf:"bytes,5,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string                             `protobuf:"bytes,6,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	FailureReason         *string                             `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason          *string                             `protobuf:"bytes,10,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggOrganizeNo         *string                             `protobuf:"bytes,12,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName       *string                             `protobuf:"bytes,13,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo             *string                             `protobuf:"bytes,14,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName           *string                             `protobuf:"bytes,15,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo        *string                             `protobuf:"bytes,16,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName      *string                             `protobuf:"bytes,17,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggGoodsTypeCount     *int32                              `protobuf:"varint,20,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount         *float64                            `protobuf:"fixed64,21,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	CreateTime            *string                             `protobuf:"bytes,26,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string                             `protobuf:"bytes,27,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	KingdeePushTime       *string                             `protobuf:"bytes,28,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	Id                    *int32                              `protobuf:"varint,29,opt,name=id,proto3,oneof" json:"id,omitempty"`
	PushKingdeeStatus     *int32                              `protobuf:"varint,30,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	FBillNo               string                              `protobuf:"bytes,31,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FSrcBillNo            *string                             `protobuf:"bytes,32,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	RelatedAggNo          *string                             `protobuf:"bytes,33,opt,name=related_agg_no,json=relatedAggNo,proto3,oneof" json:"related_agg_no,omitempty"`
	RefundType            *int32                              `protobuf:"varint,34,opt,name=refund_type,json=refundType,proto3,oneof" json:"refund_type,omitempty"`
	RefundTypeName        *string                             `protobuf:"bytes,35,opt,name=refund_type_name,json=refundTypeName,proto3,oneof" json:"refund_type_name,omitempty"`
	AggRefundNo           *string                             `protobuf:"bytes,36,opt,name=agg_refund_no,json=aggRefundNo,proto3,oneof" json:"agg_refund_no,omitempty"`
	AggTradeNo            *string                             `protobuf:"bytes,37,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggRefundCount        *int32                              `protobuf:"varint,38,opt,name=agg_refund_count,json=aggRefundCount,proto3,oneof" json:"agg_refund_count,omitempty"`
	AggRefundAmount       *float64                            `protobuf:"fixed64,39,opt,name=agg_refund_amount,json=aggRefundAmount,proto3,oneof" json:"agg_refund_amount,omitempty"`
	PushKingdeeStatusName *string                             `protobuf:"bytes,40,opt,name=push_kingdee_status_name,json=pushKingdeeStatusName,proto3,oneof" json:"push_kingdee_status_name,omitempty"`
	AggYear               *int32                              `protobuf:"varint,41,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth              *int32                              `protobuf:"varint,42,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek               *int32                              `protobuf:"varint,43,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay                *int32                              `protobuf:"varint,44,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
}

func (x *KingdeeSalReturnStockResponse) Reset() {
	*x = KingdeeSalReturnStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockResponse) ProtoMessage() {}

func (x *KingdeeSalReturnStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{214}
}

func (x *KingdeeSalReturnStockResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetModel() *KingdeeSalReturnStockModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeeSalReturnStockResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetRelatedAggNo() string {
	if x != nil && x.RelatedAggNo != nil {
		return *x.RelatedAggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetRefundType() int32 {
	if x != nil && x.RefundType != nil {
		return *x.RefundType
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetRefundTypeName() string {
	if x != nil && x.RefundTypeName != nil {
		return *x.RefundTypeName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggRefundNo() string {
	if x != nil && x.AggRefundNo != nil {
		return *x.AggRefundNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggRefundCount() int32 {
	if x != nil && x.AggRefundCount != nil {
		return *x.AggRefundCount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggRefundAmount() float64 {
	if x != nil && x.AggRefundAmount != nil {
		return *x.AggRefundAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetPushKingdeeStatusName() string {
	if x != nil && x.PushKingdeeStatusName != nil {
		return *x.PushKingdeeStatusName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

type KingdeeSalReturnStockRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeeSalReturnStockRetrieveRequest) Reset() {
	*x = KingdeeSalReturnStockRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockRetrieveRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{215}
}

func (x *KingdeeSalReturnStockRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeeSalReturnStockSubHeadEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FSettleCurrID   string  `protobuf:"bytes,1,opt,name=FSettleCurrID,proto3" json:"FSettleCurrID,omitempty"`
	FSettleOrgID    string  `protobuf:"bytes,2,opt,name=FSettleOrgID,proto3" json:"FSettleOrgID,omitempty"`
	FSettleTypeID   string  `protobuf:"bytes,3,opt,name=FSettleTypeID,proto3" json:"FSettleTypeID,omitempty"`
	FPriceListId    string  `protobuf:"bytes,4,opt,name=FPriceListId,proto3" json:"FPriceListId,omitempty"`
	FDiscountListId string  `protobuf:"bytes,5,opt,name=FDiscountListId,proto3" json:"FDiscountListId,omitempty"`
	FEntryId        *int32  `protobuf:"varint,6,opt,name=FEntryId,proto3,oneof" json:"FEntryId,omitempty"`
	FThirdBillNo    *string `protobuf:"bytes,7,opt,name=FThirdBillNo,proto3,oneof" json:"FThirdBillNo,omitempty"`
	FThirdBillId    *string `protobuf:"bytes,8,opt,name=FThirdBillId,proto3,oneof" json:"FThirdBillId,omitempty"`
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) Reset() {
	*x = KingdeeSalReturnStockSubHeadEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockSubHeadEntityResponse) ProtoMessage() {}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockSubHeadEntityResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockSubHeadEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{216}
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFSettleCurrID() string {
	if x != nil {
		return x.FSettleCurrID
	}
	return ""
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFSettleOrgID() string {
	if x != nil {
		return x.FSettleOrgID
	}
	return ""
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFSettleTypeID() string {
	if x != nil {
		return x.FSettleTypeID
	}
	return ""
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFPriceListId() string {
	if x != nil {
		return x.FPriceListId
	}
	return ""
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFDiscountListId() string {
	if x != nil {
		return x.FDiscountListId
	}
	return ""
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFEntryId() int32 {
	if x != nil && x.FEntryId != nil {
		return *x.FEntryId
	}
	return 0
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFThirdBillNo() string {
	if x != nil && x.FThirdBillNo != nil {
		return *x.FThirdBillNo
	}
	return ""
}

func (x *KingdeeSalReturnStockSubHeadEntityResponse) GetFThirdBillId() string {
	if x != nil && x.FThirdBillId != nil {
		return *x.FThirdBillId
	}
	return ""
}

type KingdeeSettleEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FSettleCurrId *KingdeeFNumberResponse `protobuf:"bytes,1,opt,name=FSettleCurrId,proto3,oneof" json:"FSettleCurrId,omitempty"`
	FSettleOrgId  *KingdeeFNumberResponse `protobuf:"bytes,2,opt,name=FSettleOrgId,proto3,oneof" json:"FSettleOrgId,omitempty"`
}

func (x *KingdeeSettleEntityResponse) Reset() {
	*x = KingdeeSettleEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSettleEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSettleEntityResponse) ProtoMessage() {}

func (x *KingdeeSettleEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSettleEntityResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSettleEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{217}
}

func (x *KingdeeSettleEntityResponse) GetFSettleCurrId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSettleCurrId
	}
	return nil
}

func (x *KingdeeSettleEntityResponse) GetFSettleOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSettleOrgId
	}
	return nil
}

type KingdeeShopNoInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopNo string `protobuf:"bytes,1,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
}

func (x *KingdeeShopNoInfoRequest) Reset() {
	*x = KingdeeShopNoInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeShopNoInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeShopNoInfoRequest) ProtoMessage() {}

func (x *KingdeeShopNoInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeShopNoInfoRequest.ProtoReflect.Descriptor instead.
func (*KingdeeShopNoInfoRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{218}
}

func (x *KingdeeShopNoInfoRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

type KingdeeShopNoInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KingdeeShopNoInfoResponse) Reset() {
	*x = KingdeeShopNoInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeShopNoInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeShopNoInfoResponse) ProtoMessage() {}

func (x *KingdeeShopNoInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeShopNoInfoResponse.ProtoReflect.Descriptor instead.
func (*KingdeeShopNoInfoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{219}
}

func (x *KingdeeShopNoInfoResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type KingdeeStkMisDeliveryFEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FEntryID         *int32                  `protobuf:"varint,2,opt,name=FEntryID,proto3,oneof" json:"FEntryID,omitempty"`
	FCustMatId       *KingdeeFNumberResponse `protobuf:"bytes,3,opt,name=FCustMatId,proto3,oneof" json:"FCustMatId,omitempty"`
	FMaterialId      *KingdeeFNumberResponse `protobuf:"bytes,4,opt,name=FMaterialId,proto3,oneof" json:"FMaterialId,omitempty"`
	FAuxPropId       *structpb.Struct        `protobuf:"bytes,5,opt,name=FAuxPropId,proto3,oneof" json:"FAuxPropId,omitempty"`
	FUnitID          *KingdeeFNumberResponse `protobuf:"bytes,6,opt,name=FUnitID,proto3,oneof" json:"FUnitID,omitempty"`
	FQty             *int32                  `protobuf:"varint,7,opt,name=FQty,proto3,oneof" json:"FQty,omitempty"`
	F_MDNK_AmountQtr float64                 `protobuf:"fixed64,8,opt,name=F_MDNK_Amount_qtr,json=FMDNKAmountQtr,proto3" json:"F_MDNK_Amount_qtr,omitempty"`
	FBaseUnitId      *KingdeeFNumberResponse `protobuf:"bytes,9,opt,name=FBaseUnitId,proto3,oneof" json:"FBaseUnitId,omitempty"`
	FStockId         *KingdeeFNumberResponse `protobuf:"bytes,10,opt,name=FStockId,proto3,oneof" json:"FStockId,omitempty"`
	FStockLocId      *structpb.Struct        `protobuf:"bytes,11,opt,name=FStockLocId,proto3,oneof" json:"FStockLocId,omitempty"`
	FLot             *KingdeeFNumberResponse `protobuf:"bytes,12,opt,name=FLot,proto3,oneof" json:"FLot,omitempty"`
	FProductGroupID  *KingdeeFNumberResponse `protobuf:"bytes,13,opt,name=FProductGroupID,proto3,oneof" json:"FProductGroupID,omitempty"`
	FOwnerId         *KingdeeFNumberResponse `protobuf:"bytes,14,opt,name=FOwnerId,proto3,oneof" json:"FOwnerId,omitempty"`
	FBomId           *KingdeeFNumberResponse `protobuf:"bytes,15,opt,name=FBomId,proto3,oneof" json:"FBomId,omitempty"`
	FCostItem        *KingdeeFNumberResponse `protobuf:"bytes,16,opt,name=FCostItem,proto3,oneof" json:"FCostItem,omitempty"`
	FKeeperId        *KingdeeFNumberResponse `protobuf:"bytes,17,opt,name=FKeeperId,proto3,oneof" json:"FKeeperId,omitempty"`
	FExtAuxUnitId    *KingdeeFNumberResponse `protobuf:"bytes,18,opt,name=FExtAuxUnitId,proto3,oneof" json:"FExtAuxUnitId,omitempty"`
	FStockStatusId   *KingdeeFNumberResponse `protobuf:"bytes,19,opt,name=FStockStatusId,proto3,oneof" json:"FStockStatusId,omitempty"`
	FSerialSubEntity *structpb.Struct        `protobuf:"bytes,20,opt,name=FSerialSubEntity,proto3,oneof" json:"FSerialSubEntity,omitempty"`
	FSrcBillTypeId   *string                 `protobuf:"bytes,21,opt,name=FSrcBillTypeId,proto3,oneof" json:"FSrcBillTypeId,omitempty"`
	FSrcBillNo       *string                 `protobuf:"bytes,22,opt,name=FSrcBillNo,proto3,oneof" json:"FSrcBillNo,omitempty"`
	FEntryNote       *string                 `protobuf:"bytes,23,opt,name=FEntryNote,proto3,oneof" json:"FEntryNote,omitempty"`
	FProjectNo       *string                 `protobuf:"bytes,24,opt,name=FProjectNo,proto3,oneof" json:"FProjectNo,omitempty"`
	FProduceDate     *string                 `protobuf:"bytes,25,opt,name=FProduceDate,proto3,oneof" json:"FProduceDate,omitempty"`
	FServiceContext  *string                 `protobuf:"bytes,26,opt,name=FServiceContext,proto3,oneof" json:"FServiceContext,omitempty"`
	FMtoNo           *string                 `protobuf:"bytes,27,opt,name=FMtoNo,proto3,oneof" json:"FMtoNo,omitempty"`
	ClassName        *string                 `protobuf:"bytes,28,opt,name=class_name,json=className,proto3,oneof" json:"class_name,omitempty"`
	SpecNo           *string                 `protobuf:"bytes,29,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsNo          *string                 `protobuf:"bytes,30,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName        *string                 `protobuf:"bytes,31,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SubtotalAmount   *float64                `protobuf:"fixed64,32,opt,name=subtotal_amount,json=subtotalAmount,proto3,oneof" json:"subtotal_amount,omitempty"`
	Paid             *float64                `protobuf:"fixed64,33,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SubOrderNoList   *string                 `protobuf:"bytes,34,opt,name=sub_order_no_list,json=subOrderNoList,proto3,oneof" json:"sub_order_no_list,omitempty"`
	FOwnerTypeId     *string                 `protobuf:"bytes,35,opt,name=FOwnerTypeId,proto3,oneof" json:"FOwnerTypeId,omitempty"`
	FKeeperTypeId    *string                 `protobuf:"bytes,36,opt,name=FKeeperTypeId,proto3,oneof" json:"FKeeperTypeId,omitempty"`
	FDistribution    *bool                   `protobuf:"varint,37,opt,name=FDistribution,proto3,oneof" json:"FDistribution,omitempty"`
	FExtAuxUnitQty   *int32                  `protobuf:"varint,38,opt,name=FExtAuxUnitQty,proto3,oneof" json:"FExtAuxUnitQty,omitempty"`
}

func (x *KingdeeStkMisDeliveryFEntityResponse) Reset() {
	*x = KingdeeStkMisDeliveryFEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStkMisDeliveryFEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStkMisDeliveryFEntityResponse) ProtoMessage() {}

func (x *KingdeeStkMisDeliveryFEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStkMisDeliveryFEntityResponse.ProtoReflect.Descriptor instead.
func (*KingdeeStkMisDeliveryFEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{220}
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFEntryID() int32 {
	if x != nil && x.FEntryID != nil {
		return *x.FEntryID
	}
	return 0
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFCustMatId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FCustMatId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFMaterialId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FMaterialId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFAuxPropId() *structpb.Struct {
	if x != nil {
		return x.FAuxPropId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFUnitID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FUnitID
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFQty() int32 {
	if x != nil && x.FQty != nil {
		return *x.FQty
	}
	return 0
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetF_MDNK_AmountQtr() float64 {
	if x != nil {
		return x.F_MDNK_AmountQtr
	}
	return 0
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFBaseUnitId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBaseUnitId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFStockId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFStockLocId() *structpb.Struct {
	if x != nil {
		return x.FStockLocId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFLot() *KingdeeFNumberResponse {
	if x != nil {
		return x.FLot
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFProductGroupID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FProductGroupID
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFOwnerId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFBomId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBomId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFCostItem() *KingdeeFNumberResponse {
	if x != nil {
		return x.FCostItem
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFKeeperId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FKeeperId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFExtAuxUnitId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FExtAuxUnitId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFStockStatusId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockStatusId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFSerialSubEntity() *structpb.Struct {
	if x != nil {
		return x.FSerialSubEntity
	}
	return nil
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFSrcBillTypeId() string {
	if x != nil && x.FSrcBillTypeId != nil {
		return *x.FSrcBillTypeId
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFSrcBillNo() string {
	if x != nil && x.FSrcBillNo != nil {
		return *x.FSrcBillNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFEntryNote() string {
	if x != nil && x.FEntryNote != nil {
		return *x.FEntryNote
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFProjectNo() string {
	if x != nil && x.FProjectNo != nil {
		return *x.FProjectNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFProduceDate() string {
	if x != nil && x.FProduceDate != nil {
		return *x.FProduceDate
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFServiceContext() string {
	if x != nil && x.FServiceContext != nil {
		return *x.FServiceContext
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFMtoNo() string {
	if x != nil && x.FMtoNo != nil {
		return *x.FMtoNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetSubtotalAmount() float64 {
	if x != nil && x.SubtotalAmount != nil {
		return *x.SubtotalAmount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetSubOrderNoList() string {
	if x != nil && x.SubOrderNoList != nil {
		return *x.SubOrderNoList
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFOwnerTypeId() string {
	if x != nil && x.FOwnerTypeId != nil {
		return *x.FOwnerTypeId
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFKeeperTypeId() string {
	if x != nil && x.FKeeperTypeId != nil {
		return *x.FKeeperTypeId
	}
	return ""
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFDistribution() bool {
	if x != nil && x.FDistribution != nil {
		return *x.FDistribution
	}
	return false
}

func (x *KingdeeStkMisDeliveryFEntityResponse) GetFExtAuxUnitQty() int32 {
	if x != nil && x.FExtAuxUnitQty != nil {
		return *x.FExtAuxUnitQty
	}
	return 0
}

type KingdeeStkMisDeliveryListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeStkMisDeliveryResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeStkMisDeliveryListResponse) Reset() {
	*x = KingdeeStkMisDeliveryListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStkMisDeliveryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStkMisDeliveryListResponse) ProtoMessage() {}

func (x *KingdeeStkMisDeliveryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStkMisDeliveryListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeStkMisDeliveryListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{221}
}

func (x *KingdeeStkMisDeliveryListResponse) GetResults() []*KingdeeStkMisDeliveryResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeStkMisDeliveryListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeStkMisDeliveryModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FBillNo          *string                                 `protobuf:"bytes,1,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FEntity          []*KingdeeStkMisDeliveryFEntityResponse `protobuf:"bytes,2,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	FID              *int32                                  `protobuf:"varint,3,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FBillTypeID      *KingdeeFNumberResponse                 `protobuf:"bytes,4,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FStockOrgId      *KingdeeFNumberResponse                 `protobuf:"bytes,5,opt,name=FStockOrgId,proto3,oneof" json:"FStockOrgId,omitempty"`
	FPickOrgId       *KingdeeFNumberResponse                 `protobuf:"bytes,6,opt,name=FPickOrgId,proto3,oneof" json:"FPickOrgId,omitempty"`
	FCustId          *KingdeeFNumberResponse                 `protobuf:"bytes,7,opt,name=FCustId,proto3,oneof" json:"FCustId,omitempty"`
	FDeptId          *KingdeeFNumberResponse                 `protobuf:"bytes,8,opt,name=FDeptId,proto3,oneof" json:"FDeptId,omitempty"`
	FPickerId        *FStaffNumberResponse                   `protobuf:"bytes,9,opt,name=FPickerId,proto3,oneof" json:"FPickerId,omitempty"`
	FStockerId       *KingdeeFNumberResponse                 `protobuf:"bytes,10,opt,name=FStockerId,proto3,oneof" json:"FStockerId,omitempty"`
	FStockerGroupId  *KingdeeFNumberResponse                 `protobuf:"bytes,11,opt,name=FStockerGroupId,proto3,oneof" json:"FStockerGroupId,omitempty"`
	FOwnerIdHead     *KingdeeFNumberResponse                 `protobuf:"bytes,12,opt,name=FOwnerIdHead,proto3,oneof" json:"FOwnerIdHead,omitempty"`
	FBaseCurrId      *KingdeeFNumberResponse                 `protobuf:"bytes,13,opt,name=FBaseCurrId,proto3,oneof" json:"FBaseCurrId,omitempty"`
	FNote            *string                                 `protobuf:"bytes,14,opt,name=FNote,proto3,oneof" json:"FNote,omitempty"`
	FScanBox         *string                                 `protobuf:"bytes,15,opt,name=FScanBox,proto3,oneof" json:"FScanBox,omitempty"`
	FQTCBillNo       *string                                 `protobuf:"bytes,16,opt,name=FQTCBillNo,proto3,oneof" json:"FQTCBillNo,omitempty"`
	FStockDirect     *string                                 `protobuf:"bytes,17,opt,name=FStockDirect,proto3,oneof" json:"FStockDirect,omitempty"`
	FDate            *string                                 `protobuf:"bytes,18,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	FBizType         *string                                 `protobuf:"bytes,19,opt,name=FBizType,proto3,oneof" json:"FBizType,omitempty"`
	FOwnerTypeIdHead *string                                 `protobuf:"bytes,20,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
	FQTBillType      *string                                 `protobuf:"bytes,21,opt,name=FQTBillType,proto3,oneof" json:"FQTBillType,omitempty"`
}

func (x *KingdeeStkMisDeliveryModelResponse) Reset() {
	*x = KingdeeStkMisDeliveryModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStkMisDeliveryModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStkMisDeliveryModelResponse) ProtoMessage() {}

func (x *KingdeeStkMisDeliveryModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStkMisDeliveryModelResponse.ProtoReflect.Descriptor instead.
func (*KingdeeStkMisDeliveryModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{222}
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFEntity() []*KingdeeStkMisDeliveryFEntityResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFID() int32 {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return 0
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFBillTypeID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBillTypeID
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFStockOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockOrgId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFPickOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FPickOrgId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFCustId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FCustId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFDeptId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FDeptId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFPickerId() *FStaffNumberResponse {
	if x != nil {
		return x.FPickerId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFStockerId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockerId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFStockerGroupId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockerGroupId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFOwnerIdHead() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerIdHead
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFBaseCurrId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBaseCurrId
	}
	return nil
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFNote() string {
	if x != nil && x.FNote != nil {
		return *x.FNote
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFScanBox() string {
	if x != nil && x.FScanBox != nil {
		return *x.FScanBox
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFQTCBillNo() string {
	if x != nil && x.FQTCBillNo != nil {
		return *x.FQTCBillNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFStockDirect() string {
	if x != nil && x.FStockDirect != nil {
		return *x.FStockDirect
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFBizType() string {
	if x != nil && x.FBizType != nil {
		return *x.FBizType
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

func (x *KingdeeStkMisDeliveryModelResponse) GetFQTBillType() string {
	if x != nil && x.FQTBillType != nil {
		return *x.FQTBillType
	}
	return ""
}

type KingdeeStkMisDeliveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                             `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggPushStatusName   *string                             `protobuf:"bytes,2,opt,name=agg_push_status_name,json=aggPushStatusName,proto3,oneof" json:"agg_push_status_name,omitempty"`
	Model               *KingdeeStkMisDeliveryModelResponse `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Receivable          *KingdeeReceivableResponse          `protobuf:"bytes,4,opt,name=receivable,proto3" json:"receivable,omitempty"`
	AggNo               *string                             `protobuf:"bytes,5,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                             `protobuf:"bytes,6,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	NeedUpDateFields    *string                             `protobuf:"bytes,7,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string                             `protobuf:"bytes,8,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo           *string                             `protobuf:"bytes,9,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	AggPushStatus       *int32                              `protobuf:"varint,10,opt,name=agg_push_status,json=aggPushStatus,proto3,oneof" json:"agg_push_status,omitempty"`
	FailureReason       *string                             `protobuf:"bytes,11,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string                             `protobuf:"bytes,12,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32                              `protobuf:"varint,13,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string                             `protobuf:"bytes,14,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim          *int32                              `protobuf:"varint,15,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string                             `protobuf:"bytes,16,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32                              `protobuf:"varint,17,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string                             `protobuf:"bytes,18,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggPeriod           *string                             `protobuf:"bytes,19,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	AggYear             *int32                              `protobuf:"varint,20,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth            *int32                              `protobuf:"varint,21,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek             *int32                              `protobuf:"varint,22,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay              *int32                              `protobuf:"varint,23,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
	AggOrganizeNo       *string                             `protobuf:"bytes,24,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string                             `protobuf:"bytes,25,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string                             `protobuf:"bytes,26,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string                             `protobuf:"bytes,27,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string                             `protobuf:"bytes,28,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string                             `protobuf:"bytes,29,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggSrcOrder         *string                             `protobuf:"bytes,30,opt,name=agg_src_order,json=aggSrcOrder,proto3,oneof" json:"agg_src_order,omitempty"`
	AggOrderNo          *string                             `protobuf:"bytes,31,opt,name=agg_order_no,json=aggOrderNo,proto3,oneof" json:"agg_order_no,omitempty"`
	AggOrderCount       *int32                              `protobuf:"varint,32,opt,name=agg_order_count,json=aggOrderCount,proto3,oneof" json:"agg_order_count,omitempty"`
	AggGoodsTypeCount   *int32                              `protobuf:"varint,33,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32                              `protobuf:"varint,34,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount      *float64                            `protobuf:"fixed64,35,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *float64                            `protobuf:"fixed64,36,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *float64                            `protobuf:"fixed64,37,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *float64                            `protobuf:"fixed64,38,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	KingdeePushTime     *string                             `protobuf:"bytes,39,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	CreateTime          *string                             `protobuf:"bytes,40,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                             `protobuf:"bytes,41,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *KingdeeStkMisDeliveryResponse) Reset() {
	*x = KingdeeStkMisDeliveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStkMisDeliveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStkMisDeliveryResponse) ProtoMessage() {}

func (x *KingdeeStkMisDeliveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStkMisDeliveryResponse.ProtoReflect.Descriptor instead.
func (*KingdeeStkMisDeliveryResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{223}
}

func (x *KingdeeStkMisDeliveryResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggPushStatusName() string {
	if x != nil && x.AggPushStatusName != nil {
		return *x.AggPushStatusName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetModel() *KingdeeStkMisDeliveryModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeeStkMisDeliveryResponse) GetReceivable() *KingdeeReceivableResponse {
	if x != nil {
		return x.Receivable
	}
	return nil
}

func (x *KingdeeStkMisDeliveryResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggPushStatus() int32 {
	if x != nil && x.AggPushStatus != nil {
		return *x.AggPushStatus
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggSrcOrder() string {
	if x != nil && x.AggSrcOrder != nil {
		return *x.AggSrcOrder
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggOrderNo() string {
	if x != nil && x.AggOrderNo != nil {
		return *x.AggOrderNo
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetAggOrderCount() int32 {
	if x != nil && x.AggOrderCount != nil {
		return *x.AggOrderCount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggTotalAmount() float64 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggDiscountAmount() float64 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggReceivableAmount() float64 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetAggPaidAmount() float64 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeStkMisDeliveryResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeStkMisDeliveryResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type KingdeeStockNoInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNo string `protobuf:"bytes,1,opt,name=stock_no,json=stockNo,proto3" json:"stock_no,omitempty"`
}

func (x *KingdeeStockNoInfoRequest) Reset() {
	*x = KingdeeStockNoInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStockNoInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStockNoInfoRequest) ProtoMessage() {}

func (x *KingdeeStockNoInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStockNoInfoRequest.ProtoReflect.Descriptor instead.
func (*KingdeeStockNoInfoRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{224}
}

func (x *KingdeeStockNoInfoRequest) GetStockNo() string {
	if x != nil {
		return x.StockNo
	}
	return ""
}

type KingdeeStockNoInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KingdeeStockNoInfoResponse) Reset() {
	*x = KingdeeStockNoInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStockNoInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStockNoInfoResponse) ProtoMessage() {}

func (x *KingdeeStockNoInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStockNoInfoResponse.ProtoReflect.Descriptor instead.
func (*KingdeeStockNoInfoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{225}
}

func (x *KingdeeStockNoInfoResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type KingdeeTradeDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeeTradeDestroyRequest) Reset() {
	*x = KingdeeTradeDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeDestroyRequest) ProtoMessage() {}

func (x *KingdeeTradeDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{226}
}

func (x *KingdeeTradeDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeeTradeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeTradeListRequest) Reset() {
	*x = KingdeeTradeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeListRequest) ProtoMessage() {}

func (x *KingdeeTradeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{227}
}

func (x *KingdeeTradeListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeTradeListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeTradeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeTradeResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeTradeListResponse) Reset() {
	*x = KingdeeTradeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeListResponse) ProtoMessage() {}

func (x *KingdeeTradeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeTradeListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{228}
}

func (x *KingdeeTradeListResponse) GetResults() []*KingdeeTradeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeTradeListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeTradePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	FormId               string   `protobuf:"bytes,3,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	KingdeeNo            *string  `protobuf:"bytes,4,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus    *int32   `protobuf:"varint,5,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason        *string  `protobuf:"bytes,6,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason         *string  `protobuf:"bytes,7,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType              *int32   `protobuf:"varint,8,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName          *string  `protobuf:"bytes,9,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim           *int32   `protobuf:"varint,10,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName       *string  `protobuf:"bytes,11,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim              *int32   `protobuf:"varint,12,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName          *string  `protobuf:"bytes,13,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo        *string  `protobuf:"bytes,14,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName      *string  `protobuf:"bytes,15,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo            *string  `protobuf:"bytes,16,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName          *string  `protobuf:"bytes,17,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo       *string  `protobuf:"bytes,18,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName     *string  `protobuf:"bytes,19,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo           *string  `protobuf:"bytes,20,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount        *int32   `protobuf:"varint,21,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount    *int32   `protobuf:"varint,22,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount        *int32   `protobuf:"varint,23,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount       *int32   `protobuf:"varint,24,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount    *int32   `protobuf:"varint,25,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount  *int32   `protobuf:"varint,26,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount        *int32   `protobuf:"varint,27,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod            *string  `protobuf:"bytes,28,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
}

func (x *KingdeeTradePartialUpdateRequest) Reset() {
	*x = KingdeeTradePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradePartialUpdateRequest) ProtoMessage() {}

func (x *KingdeeTradePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{229}
}

func (x *KingdeeTradePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeeTradePartialUpdateRequest) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTotalAmount() int32 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggDiscountAmount() int32 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggReceivableAmount() int32 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggPaidAmount() int32 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

type KingdeeTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	FormId              string  `protobuf:"bytes,2,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	KingdeeNo           *string `protobuf:"bytes,3,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus   *int32  `protobuf:"varint,4,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason       *string `protobuf:"bytes,5,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string `protobuf:"bytes,6,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32  `protobuf:"varint,7,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string `protobuf:"bytes,8,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim          *int32  `protobuf:"varint,9,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string `protobuf:"bytes,10,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32  `protobuf:"varint,11,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string `protobuf:"bytes,12,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo       *string `protobuf:"bytes,13,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string `protobuf:"bytes,14,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string `protobuf:"bytes,15,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string `protobuf:"bytes,16,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string `protobuf:"bytes,17,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string `protobuf:"bytes,18,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,19,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount       *int32  `protobuf:"varint,20,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount   *int32  `protobuf:"varint,21,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32  `protobuf:"varint,22,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount      *int32  `protobuf:"varint,23,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *int32  `protobuf:"varint,24,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *int32  `protobuf:"varint,25,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *int32  `protobuf:"varint,26,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod           *string `protobuf:"bytes,27,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
}

func (x *KingdeeTradeRequest) Reset() {
	*x = KingdeeTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeRequest) ProtoMessage() {}

func (x *KingdeeTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{230}
}

func (x *KingdeeTradeRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeTradeRequest) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *KingdeeTradeRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeTradeRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeTradeRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeTradeRequest) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeTradeRequest) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggTotalAmount() int32 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggDiscountAmount() int32 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggReceivableAmount() int32 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggPaidAmount() int32 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

type KingdeeTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreateTime          *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FormId              string  `protobuf:"bytes,4,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	KingdeeNo           *string `protobuf:"bytes,5,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus   *int32  `protobuf:"varint,6,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason       *string `protobuf:"bytes,7,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string `protobuf:"bytes,8,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32  `protobuf:"varint,9,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string `protobuf:"bytes,10,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim          *int32  `protobuf:"varint,11,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string `protobuf:"bytes,12,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32  `protobuf:"varint,13,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string `protobuf:"bytes,14,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo       *string `protobuf:"bytes,15,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string `protobuf:"bytes,16,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string `protobuf:"bytes,17,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string `protobuf:"bytes,18,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string `protobuf:"bytes,19,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string `protobuf:"bytes,20,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,21,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount       *int32  `protobuf:"varint,22,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount   *int32  `protobuf:"varint,23,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32  `protobuf:"varint,24,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount      *int32  `protobuf:"varint,25,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *int32  `protobuf:"varint,26,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *int32  `protobuf:"varint,27,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *int32  `protobuf:"varint,28,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod           *string `protobuf:"bytes,29,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
}

func (x *KingdeeTradeResponse) Reset() {
	*x = KingdeeTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeResponse) ProtoMessage() {}

func (x *KingdeeTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeResponse.ProtoReflect.Descriptor instead.
func (*KingdeeTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{231}
}

func (x *KingdeeTradeResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeTradeResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeTradeResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeTradeResponse) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *KingdeeTradeResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeTradeResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeTradeResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeTradeResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeTradeResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggTotalAmount() int32 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggDiscountAmount() int32 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggReceivableAmount() int32 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggPaidAmount() int32 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

type KingdeeTradeRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeeTradeRetrieveRequest) Reset() {
	*x = KingdeeTradeRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeRetrieveRequest) ProtoMessage() {}

func (x *KingdeeTradeRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{232}
}

func (x *KingdeeTradeRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeeTransferListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeTransferListRequest) Reset() {
	*x = KingdeeTransferListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTransferListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTransferListRequest) ProtoMessage() {}

func (x *KingdeeTransferListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTransferListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTransferListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{233}
}

func (x *KingdeeTransferListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeTransferListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeTransferOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeTransferOrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeTransferOrderListResponse) Reset() {
	*x = KingdeeTransferOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTransferOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTransferOrderListResponse) ProtoMessage() {}

func (x *KingdeeTransferOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTransferOrderListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeTransferOrderListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{234}
}

func (x *KingdeeTransferOrderListResponse) GetResults() []*KingdeeTransferOrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeTransferOrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushWdtStatusName   *string `protobuf:"bytes,1,opt,name=push_wdt_status_name,json=pushWdtStatusName,proto3,oneof" json:"push_wdt_status_name,omitempty"`
	WTransferStatusName *string `protobuf:"bytes,2,opt,name=WTransfer_status_name,json=WTransferStatusName,proto3,oneof" json:"WTransfer_status_name,omitempty"`
	CreateTime          *string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	PushWdtStatus       *int32  `protobuf:"varint,5,opt,name=push_wdt_status,json=pushWdtStatus,proto3,oneof" json:"push_wdt_status,omitempty"`
	WTransferStatus     *int32  `protobuf:"varint,6,opt,name=WTransfer_status,json=WTransferStatus,proto3,oneof" json:"WTransfer_status,omitempty"`
	FBillNo             *string `protobuf:"bytes,7,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	WdtTransferNo       *string `protobuf:"bytes,8,opt,name=WdtTransferNo,proto3,oneof" json:"WdtTransferNo,omitempty"`
	WarehouseNoOut      *string `protobuf:"bytes,9,opt,name=warehouse_no_out,json=warehouseNoOut,proto3,oneof" json:"warehouse_no_out,omitempty"`
	WarehouseNoIn       *string `protobuf:"bytes,10,opt,name=warehouse_no_in,json=warehouseNoIn,proto3,oneof" json:"warehouse_no_in,omitempty"`
	NeedUpDateFields    *string `protobuf:"bytes,11,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string `protobuf:"bytes,12,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
}

func (x *KingdeeTransferOrderResponse) Reset() {
	*x = KingdeeTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTransferOrderResponse) ProtoMessage() {}

func (x *KingdeeTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*KingdeeTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{235}
}

func (x *KingdeeTransferOrderResponse) GetPushWdtStatusName() string {
	if x != nil && x.PushWdtStatusName != nil {
		return *x.PushWdtStatusName
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetWTransferStatusName() string {
	if x != nil && x.WTransferStatusName != nil {
		return *x.WTransferStatusName
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetPushWdtStatus() int32 {
	if x != nil && x.PushWdtStatus != nil {
		return *x.PushWdtStatus
	}
	return 0
}

func (x *KingdeeTransferOrderResponse) GetWTransferStatus() int32 {
	if x != nil && x.WTransferStatus != nil {
		return *x.WTransferStatus
	}
	return 0
}

func (x *KingdeeTransferOrderResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetWdtTransferNo() string {
	if x != nil && x.WdtTransferNo != nil {
		return *x.WdtTransferNo
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetWarehouseNoOut() string {
	if x != nil && x.WarehouseNoOut != nil {
		return *x.WarehouseNoOut
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetWarehouseNoIn() string {
	if x != nil && x.WarehouseNoIn != nil {
		return *x.WarehouseNoIn
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeTransferOrderResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

type LabelNumberValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label *string `protobuf:"bytes,2,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Count *int32  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *LabelNumberValueResponse) Reset() {
	*x = LabelNumberValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueResponse) ProtoMessage() {}

func (x *LabelNumberValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{236}
}

func (x *LabelNumberValueResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LabelNumberValueResponse) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *LabelNumberValueResponse) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type LabelValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelValueResponse) Reset() {
	*x = LabelValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValueResponse) ProtoMessage() {}

func (x *LabelValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValueResponse.ProtoReflect.Descriptor instead.
func (*LabelValueResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{237}
}

func (x *LabelValueResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LabelValueResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type MatchTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundList []string `protobuf:"bytes,1,rep,name=refund_list,json=refundList,proto3" json:"refund_list,omitempty"`
}

func (x *MatchTradeRefundRequest) Reset() {
	*x = MatchTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTradeRefundRequest) ProtoMessage() {}

func (x *MatchTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*MatchTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{238}
}

func (x *MatchTradeRefundRequest) GetRefundList() []string {
	if x != nil {
		return x.RefundList
	}
	return nil
}

type MatchTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MatchTradeRefundResponse) Reset() {
	*x = MatchTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTradeRefundResponse) ProtoMessage() {}

func (x *MatchTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*MatchTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{239}
}

func (x *MatchTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MatchTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MatchTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type PeriodAggTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PeriodStart string `protobuf:"bytes,2,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd   string `protobuf:"bytes,3,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	ConfigNo    string `protobuf:"bytes,4,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *PeriodAggTradeRequest) Reset() {
	*x = PeriodAggTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodAggTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodAggTradeRequest) ProtoMessage() {}

func (x *PeriodAggTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodAggTradeRequest.ProtoReflect.Descriptor instead.
func (*PeriodAggTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{240}
}

func (x *PeriodAggTradeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PeriodAggTradeRequest) GetPeriodStart() string {
	if x != nil {
		return x.PeriodStart
	}
	return ""
}

func (x *PeriodAggTradeRequest) GetPeriodEnd() string {
	if x != nil {
		return x.PeriodEnd
	}
	return ""
}

func (x *PeriodAggTradeRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type PeriodAggTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PeriodAggTradeResponse) Reset() {
	*x = PeriodAggTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodAggTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodAggTradeResponse) ProtoMessage() {}

func (x *PeriodAggTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodAggTradeResponse.ProtoReflect.Descriptor instead.
func (*PeriodAggTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{241}
}

func (x *PeriodAggTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PeriodAggTradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PeriodAggTradeResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PeriodicTaskCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	Name            string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Task            string                   `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Args            *string                  `protobuf:"bytes,5,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs          *string                  `protobuf:"bytes,6,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue           *string                  `protobuf:"bytes,7,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange        *string                  `protobuf:"bytes,8,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey      *string                  `protobuf:"bytes,9,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority        *int32                   `protobuf:"varint,10,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires         *string                  `protobuf:"bytes,11,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds   *int32                   `protobuf:"varint,12,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff          *bool                    `protobuf:"varint,13,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime       *string                  `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled         *bool                    `protobuf:"varint,15,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description     *string                  `protobuf:"bytes,16,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab         *int32                   `protobuf:"varint,17,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar           *int32                   `protobuf:"varint,18,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked         *int32                   `protobuf:"varint,19,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskCreateRequest) Reset() {
	*x = PeriodicTaskCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskCreateRequest) ProtoMessage() {}

func (x *PeriodicTaskCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskCreateRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{242}
}

func (x *PeriodicTaskCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskCreateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskCreateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PeriodicTaskDestroyRequest) Reset() {
	*x = PeriodicTaskDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskDestroyRequest) ProtoMessage() {}

func (x *PeriodicTaskDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskDestroyRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{243}
}

func (x *PeriodicTaskDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PeriodicTaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *PeriodicTaskListRequest) Reset() {
	*x = PeriodicTaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskListRequest) ProtoMessage() {}

func (x *PeriodicTaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskListRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{244}
}

func (x *PeriodicTaskListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *PeriodicTaskListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type PeriodicTaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*PeriodicTaskResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PeriodicTaskListResponse) Reset() {
	*x = PeriodicTaskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskListResponse) ProtoMessage() {}

func (x *PeriodicTaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskListResponse.ProtoReflect.Descriptor instead.
func (*PeriodicTaskListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{245}
}

func (x *PeriodicTaskListResponse) GetResults() []*PeriodicTaskResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PeriodicTaskListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PeriodicTaskPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent      *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	XPartialUpdateFields []string                 `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Task                 string                   `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	Args                 *string                  `protobuf:"bytes,6,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs               *string                  `protobuf:"bytes,7,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue                *string                  `protobuf:"bytes,8,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange             *string                  `protobuf:"bytes,9,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey           *string                  `protobuf:"bytes,10,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority             *int32                   `protobuf:"varint,11,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires              *string                  `protobuf:"bytes,12,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds        *int32                   `protobuf:"varint,13,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff               *bool                    `protobuf:"varint,14,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime            *string                  `protobuf:"bytes,15,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled              *bool                    `protobuf:"varint,16,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description          *string                  `protobuf:"bytes,17,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab              *int32                   `protobuf:"varint,18,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar                *int32                   `protobuf:"varint,19,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked              *int32                   `protobuf:"varint,20,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskPartialUpdateRequest) Reset() {
	*x = PeriodicTaskPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskPartialUpdateRequest) ProtoMessage() {}

func (x *PeriodicTaskPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{246}
}

func (x *PeriodicTaskPartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *PeriodicTaskPartialUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskPartialUpdateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskPartialUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	Name            string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Task            string                   `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Args            *string                  `protobuf:"bytes,5,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs          *string                  `protobuf:"bytes,6,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue           *string                  `protobuf:"bytes,7,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange        *string                  `protobuf:"bytes,8,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey      *string                  `protobuf:"bytes,9,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority        *int32                   `protobuf:"varint,10,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires         *string                  `protobuf:"bytes,11,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds   *int32                   `protobuf:"varint,12,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff          *bool                    `protobuf:"varint,13,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime       *string                  `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled         *bool                    `protobuf:"varint,15,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description     *string                  `protobuf:"bytes,16,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab         *int32                   `protobuf:"varint,17,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar           *int32                   `protobuf:"varint,18,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked         *int32                   `protobuf:"varint,19,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskRequest) Reset() {
	*x = PeriodicTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskRequest) ProtoMessage() {}

func (x *PeriodicTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{247}
}

func (x *PeriodicTaskRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32                    `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Interval      *IntervalScheduleResponse `protobuf:"bytes,2,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
	Name          string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Task          string                    `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Args          *string                   `protobuf:"bytes,5,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs        *string                   `protobuf:"bytes,6,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue         *string                   `protobuf:"bytes,7,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange      *string                   `protobuf:"bytes,8,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey    *string                   `protobuf:"bytes,9,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority      *int32                    `protobuf:"varint,10,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires       *string                   `protobuf:"bytes,11,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds *int32                    `protobuf:"varint,12,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff        *bool                     `protobuf:"varint,13,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime     *string                   `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled       *bool                     `protobuf:"varint,15,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	LastRunAt     *string                   `protobuf:"bytes,16,opt,name=last_run_at,json=lastRunAt,proto3,oneof" json:"last_run_at,omitempty"`
	TotalRunCount *int32                    `protobuf:"varint,17,opt,name=total_run_count,json=totalRunCount,proto3,oneof" json:"total_run_count,omitempty"`
	DateChanged   *string                   `protobuf:"bytes,18,opt,name=date_changed,json=dateChanged,proto3,oneof" json:"date_changed,omitempty"`
	Description   *string                   `protobuf:"bytes,19,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab       *int32                    `protobuf:"varint,20,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar         *int32                    `protobuf:"varint,21,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked       *int32                    `protobuf:"varint,22,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskResponse) Reset() {
	*x = PeriodicTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskResponse) ProtoMessage() {}

func (x *PeriodicTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskResponse.ProtoReflect.Descriptor instead.
func (*PeriodicTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{248}
}

func (x *PeriodicTaskResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskResponse) GetInterval() *IntervalScheduleResponse {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *PeriodicTaskResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskResponse) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskResponse) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskResponse) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskResponse) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskResponse) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskResponse) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskResponse) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskResponse) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskResponse) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskResponse) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskResponse) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskResponse) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskResponse) GetLastRunAt() string {
	if x != nil && x.LastRunAt != nil {
		return *x.LastRunAt
	}
	return ""
}

func (x *PeriodicTaskResponse) GetTotalRunCount() int32 {
	if x != nil && x.TotalRunCount != nil {
		return *x.TotalRunCount
	}
	return 0
}

func (x *PeriodicTaskResponse) GetDateChanged() string {
	if x != nil && x.DateChanged != nil {
		return *x.DateChanged
	}
	return ""
}

func (x *PeriodicTaskResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskResponse) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskResponse) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskResponse) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PeriodicTaskRetrieveRequest) Reset() {
	*x = PeriodicTaskRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskRetrieveRequest) ProtoMessage() {}

func (x *PeriodicTaskRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskRetrieveRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{249}
}

func (x *PeriodicTaskRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PeriodicTaskUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent      *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	XPartialUpdateFields []string                 `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Task                 string                   `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	Args                 *string                  `protobuf:"bytes,6,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs               *string                  `protobuf:"bytes,7,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue                *string                  `protobuf:"bytes,8,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange             *string                  `protobuf:"bytes,9,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey           *string                  `protobuf:"bytes,10,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority             *int32                   `protobuf:"varint,11,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires              *string                  `protobuf:"bytes,12,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds        *int32                   `protobuf:"varint,13,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff               *bool                    `protobuf:"varint,14,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime            *string                  `protobuf:"bytes,15,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled              *bool                    `protobuf:"varint,16,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description          *string                  `protobuf:"bytes,17,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab              *int32                   `protobuf:"varint,18,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar                *int32                   `protobuf:"varint,19,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked              *int32                   `protobuf:"varint,20,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskUpdateRequest) Reset() {
	*x = PeriodicTaskUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskUpdateRequest) ProtoMessage() {}

func (x *PeriodicTaskUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskUpdateRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{250}
}

func (x *PeriodicTaskUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *PeriodicTaskUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskUpdateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PushToKingDeeSalOutStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList string `protobuf:"bytes,1,opt,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *PushToKingDeeSalOutStockRequest) Reset() {
	*x = PushToKingDeeSalOutStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToKingDeeSalOutStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToKingDeeSalOutStockRequest) ProtoMessage() {}

func (x *PushToKingDeeSalOutStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToKingDeeSalOutStockRequest.ProtoReflect.Descriptor instead.
func (*PushToKingDeeSalOutStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{251}
}

func (x *PushToKingDeeSalOutStockRequest) GetAggNoList() string {
	if x != nil {
		return x.AggNoList
	}
	return ""
}

type PushToKingDeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *PushToKingDeeSalOutStockResponse) Reset() {
	*x = PushToKingDeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToKingDeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToKingDeeSalOutStockResponse) ProtoMessage() {}

func (x *PushToKingDeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToKingDeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*PushToKingDeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{252}
}

func (x *PushToKingDeeSalOutStockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PushToKingDeeSalOutStockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PushToKingDeeSalOutStockResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type PushToKingDeeSalReturnStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList string `protobuf:"bytes,1,opt,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *PushToKingDeeSalReturnStockRequest) Reset() {
	*x = PushToKingDeeSalReturnStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToKingDeeSalReturnStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToKingDeeSalReturnStockRequest) ProtoMessage() {}

func (x *PushToKingDeeSalReturnStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToKingDeeSalReturnStockRequest.ProtoReflect.Descriptor instead.
func (*PushToKingDeeSalReturnStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{253}
}

func (x *PushToKingDeeSalReturnStockRequest) GetAggNoList() string {
	if x != nil {
		return x.AggNoList
	}
	return ""
}

type PushToKingDeeSalReturnStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *PushToKingDeeSalReturnStockResponse) Reset() {
	*x = PushToKingDeeSalReturnStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToKingDeeSalReturnStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToKingDeeSalReturnStockResponse) ProtoMessage() {}

func (x *PushToKingDeeSalReturnStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToKingDeeSalReturnStockResponse.ProtoReflect.Descriptor instead.
func (*PushToKingDeeSalReturnStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{254}
}

func (x *PushToKingDeeSalReturnStockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PushToKingDeeSalReturnStockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PushToKingDeeSalReturnStockResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type QueryKdPurchaseNoSyncStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KdPurchaseNo string `protobuf:"bytes,1,opt,name=kd_purchase_no,json=kdPurchaseNo,proto3" json:"kd_purchase_no,omitempty"`
}

func (x *QueryKdPurchaseNoSyncStatusRequest) Reset() {
	*x = QueryKdPurchaseNoSyncStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdPurchaseNoSyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdPurchaseNoSyncStatusRequest) ProtoMessage() {}

func (x *QueryKdPurchaseNoSyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdPurchaseNoSyncStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryKdPurchaseNoSyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{255}
}

func (x *QueryKdPurchaseNoSyncStatusRequest) GetKdPurchaseNo() string {
	if x != nil {
		return x.KdPurchaseNo
	}
	return ""
}

type QueryKdPurchaseNoSyncStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryKdPurchaseNoSyncStatusResponse) Reset() {
	*x = QueryKdPurchaseNoSyncStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdPurchaseNoSyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdPurchaseNoSyncStatusResponse) ProtoMessage() {}

func (x *QueryKdPurchaseNoSyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdPurchaseNoSyncStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryKdPurchaseNoSyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{256}
}

func (x *QueryKdPurchaseNoSyncStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryKdPurchaseNoSyncStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryKdPurchaseNoSyncStatusResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type QueryKdPurchaseReturnSyncStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseReturnNo string `protobuf:"bytes,1,opt,name=purchase_return_no,json=purchaseReturnNo,proto3" json:"purchase_return_no,omitempty"`
}

func (x *QueryKdPurchaseReturnSyncStatusRequest) Reset() {
	*x = QueryKdPurchaseReturnSyncStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdPurchaseReturnSyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdPurchaseReturnSyncStatusRequest) ProtoMessage() {}

func (x *QueryKdPurchaseReturnSyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdPurchaseReturnSyncStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryKdPurchaseReturnSyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{257}
}

func (x *QueryKdPurchaseReturnSyncStatusRequest) GetPurchaseReturnNo() string {
	if x != nil {
		return x.PurchaseReturnNo
	}
	return ""
}

type QueryKdPurchaseReturnSyncStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryKdPurchaseReturnSyncStatusResponse) Reset() {
	*x = QueryKdPurchaseReturnSyncStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdPurchaseReturnSyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdPurchaseReturnSyncStatusResponse) ProtoMessage() {}

func (x *QueryKdPurchaseReturnSyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdPurchaseReturnSyncStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryKdPurchaseReturnSyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{258}
}

func (x *QueryKdPurchaseReturnSyncStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryKdPurchaseReturnSyncStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryKdPurchaseReturnSyncStatusResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type QueryKdReceiveBillSyncStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveBill string `protobuf:"bytes,1,opt,name=receive_bill,json=receiveBill,proto3" json:"receive_bill,omitempty"`
}

func (x *QueryKdReceiveBillSyncStatusRequest) Reset() {
	*x = QueryKdReceiveBillSyncStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdReceiveBillSyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdReceiveBillSyncStatusRequest) ProtoMessage() {}

func (x *QueryKdReceiveBillSyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdReceiveBillSyncStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryKdReceiveBillSyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{259}
}

func (x *QueryKdReceiveBillSyncStatusRequest) GetReceiveBill() string {
	if x != nil {
		return x.ReceiveBill
	}
	return ""
}

type QueryKdReceiveBillSyncStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryKdReceiveBillSyncStatusResponse) Reset() {
	*x = QueryKdReceiveBillSyncStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdReceiveBillSyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdReceiveBillSyncStatusResponse) ProtoMessage() {}

func (x *QueryKdReceiveBillSyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdReceiveBillSyncStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryKdReceiveBillSyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{260}
}

func (x *QueryKdReceiveBillSyncStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryKdReceiveBillSyncStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryKdReceiveBillSyncStatusResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type QueryKdTransferOrderSyncStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferOrder string `protobuf:"bytes,1,opt,name=transfer_order,json=transferOrder,proto3" json:"transfer_order,omitempty"`
}

func (x *QueryKdTransferOrderSyncStatusRequest) Reset() {
	*x = QueryKdTransferOrderSyncStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdTransferOrderSyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdTransferOrderSyncStatusRequest) ProtoMessage() {}

func (x *QueryKdTransferOrderSyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdTransferOrderSyncStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryKdTransferOrderSyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{261}
}

func (x *QueryKdTransferOrderSyncStatusRequest) GetTransferOrder() string {
	if x != nil {
		return x.TransferOrder
	}
	return ""
}

type QueryKdTransferOrderSyncStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryKdTransferOrderSyncStatusResponse) Reset() {
	*x = QueryKdTransferOrderSyncStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKdTransferOrderSyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKdTransferOrderSyncStatusResponse) ProtoMessage() {}

func (x *QueryKdTransferOrderSyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKdTransferOrderSyncStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryKdTransferOrderSyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{262}
}

func (x *QueryKdTransferOrderSyncStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryKdTransferOrderSyncStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryKdTransferOrderSyncStatusResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type QueryKingdeePurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateOrgId *int32  `protobuf:"varint,1,opt,name=CreateOrgId,proto3,oneof" json:"CreateOrgId,omitempty"`
	Number      *string `protobuf:"bytes,2,opt,name=Number,proto3,oneof" json:"Number,omitempty"`
	Id          *string `protobuf:"bytes,3,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
}

func (x *QueryKingdeePurchaseOrderRequest) Reset() {
	*x = QueryKingdeePurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKingdeePurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKingdeePurchaseOrderRequest) ProtoMessage() {}

func (x *QueryKingdeePurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKingdeePurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*QueryKingdeePurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{263}
}

func (x *QueryKingdeePurchaseOrderRequest) GetCreateOrgId() int32 {
	if x != nil && x.CreateOrgId != nil {
		return *x.CreateOrgId
	}
	return 0
}

func (x *QueryKingdeePurchaseOrderRequest) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *QueryKingdeePurchaseOrderRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type QueryKingdeePurchaseOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *QueryKingdeePurchaseOrderResponse) Reset() {
	*x = QueryKingdeePurchaseOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKingdeePurchaseOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKingdeePurchaseOrderResponse) ProtoMessage() {}

func (x *QueryKingdeePurchaseOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKingdeePurchaseOrderResponse.ProtoReflect.Descriptor instead.
func (*QueryKingdeePurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{264}
}

func (x *QueryKingdeePurchaseOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryKingdeePurchaseOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryKingdeePurchaseOrderResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type RevokeKingdeeSalOutstockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action     int32    `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	DocNumbers []string `protobuf:"bytes,2,rep,name=doc_numbers,json=docNumbers,proto3" json:"doc_numbers,omitempty"`
}

func (x *RevokeKingdeeSalOutstockRequest) Reset() {
	*x = RevokeKingdeeSalOutstockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeKingdeeSalOutstockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeKingdeeSalOutstockRequest) ProtoMessage() {}

func (x *RevokeKingdeeSalOutstockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeKingdeeSalOutstockRequest.ProtoReflect.Descriptor instead.
func (*RevokeKingdeeSalOutstockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{265}
}

func (x *RevokeKingdeeSalOutstockRequest) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *RevokeKingdeeSalOutstockRequest) GetDocNumbers() []string {
	if x != nil {
		return x.DocNumbers
	}
	return nil
}

type RevokeKingdeeSalOutstockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RevokeKingdeeSalOutstockResponse) Reset() {
	*x = RevokeKingdeeSalOutstockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeKingdeeSalOutstockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeKingdeeSalOutstockResponse) ProtoMessage() {}

func (x *RevokeKingdeeSalOutstockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeKingdeeSalOutstockResponse.ProtoReflect.Descriptor instead.
func (*RevokeKingdeeSalOutstockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{266}
}

func (x *RevokeKingdeeSalOutstockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RevokeKingdeeSalOutstockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RevokeKingdeeSalOutstockResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodAggSharedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggTaskName string `protobuf:"bytes,2,opt,name=agg_task_name,json=aggTaskName,proto3" json:"agg_task_name,omitempty"`
	PeriodStart string `protobuf:"bytes,3,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd   string `protobuf:"bytes,4,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	ConfigNo    string `protobuf:"bytes,5,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *RunPeriodAggSharedTaskRequest) Reset() {
	*x = RunPeriodAggSharedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodAggSharedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodAggSharedTaskRequest) ProtoMessage() {}

func (x *RunPeriodAggSharedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodAggSharedTaskRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodAggSharedTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{267}
}

func (x *RunPeriodAggSharedTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetAggTaskName() string {
	if x != nil {
		return x.AggTaskName
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetPeriodStart() string {
	if x != nil {
		return x.PeriodStart
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetPeriodEnd() string {
	if x != nil {
		return x.PeriodEnd
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type RunPeriodAggSharedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodAggSharedTaskResponse) Reset() {
	*x = RunPeriodAggSharedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodAggSharedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodAggSharedTaskResponse) ProtoMessage() {}

func (x *RunPeriodAggSharedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodAggSharedTaskResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodAggSharedTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{268}
}

func (x *RunPeriodAggSharedTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodAggSharedTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodAggSharedTaskResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodPushRepairToKingdeeMisDeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList   []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggTaskName *string  `protobuf:"bytes,3,opt,name=agg_task_name,json=aggTaskName,proto3,oneof" json:"agg_task_name,omitempty"`
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryRequest) Reset() {
	*x = RunPeriodPushRepairToKingdeeMisDeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushRepairToKingdeeMisDeliveryRequest) ProtoMessage() {}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushRepairToKingdeeMisDeliveryRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodPushRepairToKingdeeMisDeliveryRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{269}
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryRequest) GetAggTaskName() string {
	if x != nil && x.AggTaskName != nil {
		return *x.AggTaskName
	}
	return ""
}

type RunPeriodPushRepairToKingdeeMisDeliveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryResponse) Reset() {
	*x = RunPeriodPushRepairToKingdeeMisDeliveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushRepairToKingdeeMisDeliveryResponse) ProtoMessage() {}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushRepairToKingdeeMisDeliveryResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodPushRepairToKingdeeMisDeliveryResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{270}
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodPushRepairToKingdeeMisDeliveryResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodPushSeedingToKingdeeTransferDirectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList   []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggTaskName *string  `protobuf:"bytes,3,opt,name=agg_task_name,json=aggTaskName,proto3,oneof" json:"agg_task_name,omitempty"`
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectRequest) Reset() {
	*x = RunPeriodPushSeedingToKingdeeTransferDirectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushSeedingToKingdeeTransferDirectRequest) ProtoMessage() {}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushSeedingToKingdeeTransferDirectRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodPushSeedingToKingdeeTransferDirectRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{271}
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectRequest) GetAggTaskName() string {
	if x != nil && x.AggTaskName != nil {
		return *x.AggTaskName
	}
	return ""
}

type RunPeriodPushSeedingToKingdeeTransferDirectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectResponse) Reset() {
	*x = RunPeriodPushSeedingToKingdeeTransferDirectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushSeedingToKingdeeTransferDirectResponse) ProtoMessage() {}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushSeedingToKingdeeTransferDirectResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodPushSeedingToKingdeeTransferDirectResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{272}
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodPushSeedingToKingdeeTransferDirectResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodPushSwapRefundToKingdeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList   []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggTaskName *string  `protobuf:"bytes,3,opt,name=agg_task_name,json=aggTaskName,proto3,oneof" json:"agg_task_name,omitempty"`
}

func (x *RunPeriodPushSwapRefundToKingdeeRequest) Reset() {
	*x = RunPeriodPushSwapRefundToKingdeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushSwapRefundToKingdeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushSwapRefundToKingdeeRequest) ProtoMessage() {}

func (x *RunPeriodPushSwapRefundToKingdeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushSwapRefundToKingdeeRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodPushSwapRefundToKingdeeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{273}
}

func (x *RunPeriodPushSwapRefundToKingdeeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodPushSwapRefundToKingdeeRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *RunPeriodPushSwapRefundToKingdeeRequest) GetAggTaskName() string {
	if x != nil && x.AggTaskName != nil {
		return *x.AggTaskName
	}
	return ""
}

type RunPeriodPushSwapRefundToKingdeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodPushSwapRefundToKingdeeResponse) Reset() {
	*x = RunPeriodPushSwapRefundToKingdeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushSwapRefundToKingdeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushSwapRefundToKingdeeResponse) ProtoMessage() {}

func (x *RunPeriodPushSwapRefundToKingdeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushSwapRefundToKingdeeResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodPushSwapRefundToKingdeeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{274}
}

func (x *RunPeriodPushSwapRefundToKingdeeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodPushSwapRefundToKingdeeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodPushSwapRefundToKingdeeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodPushSwapSalOutStockToKingdeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList   []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggTaskName *string  `protobuf:"bytes,3,opt,name=agg_task_name,json=aggTaskName,proto3,oneof" json:"agg_task_name,omitempty"`
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeRequest) Reset() {
	*x = RunPeriodPushSwapSalOutStockToKingdeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushSwapSalOutStockToKingdeeRequest) ProtoMessage() {}

func (x *RunPeriodPushSwapSalOutStockToKingdeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushSwapSalOutStockToKingdeeRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodPushSwapSalOutStockToKingdeeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{275}
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeRequest) GetAggTaskName() string {
	if x != nil && x.AggTaskName != nil {
		return *x.AggTaskName
	}
	return ""
}

type RunPeriodPushSwapSalOutStockToKingdeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeResponse) Reset() {
	*x = RunPeriodPushSwapSalOutStockToKingdeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushSwapSalOutStockToKingdeeResponse) ProtoMessage() {}

func (x *RunPeriodPushSwapSalOutStockToKingdeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushSwapSalOutStockToKingdeeResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodPushSwapSalOutStockToKingdeeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{276}
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodPushSwapSalOutStockToKingdeeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodPushToKingDeeSalOutStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList   string  `protobuf:"bytes,2,opt,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggTaskName *string `protobuf:"bytes,3,opt,name=agg_task_name,json=aggTaskName,proto3,oneof" json:"agg_task_name,omitempty"`
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) Reset() {
	*x = RunPeriodPushToKingDeeSalOutStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushToKingDeeSalOutStockRequest) ProtoMessage() {}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushToKingDeeSalOutStockRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodPushToKingDeeSalOutStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{277}
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) GetAggNoList() string {
	if x != nil {
		return x.AggNoList
	}
	return ""
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) GetAggTaskName() string {
	if x != nil && x.AggTaskName != nil {
		return *x.AggTaskName
	}
	return ""
}

type RunPeriodPushToKingDeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) Reset() {
	*x = RunPeriodPushToKingDeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushToKingDeeSalOutStockResponse) ProtoMessage() {}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushToKingDeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodPushToKingDeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{278}
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodicTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RequireStart   string  `protobuf:"bytes,2,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd     *string `protobuf:"bytes,3,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	AggName        string  `protobuf:"bytes,4,opt,name=agg_name,json=aggName,proto3" json:"agg_name,omitempty"`
	IntervalEvery  *string `protobuf:"bytes,5,opt,name=interval_every,json=intervalEvery,proto3,oneof" json:"interval_every,omitempty"`
	PeriodicStart  *string `protobuf:"bytes,6,opt,name=periodic_start,json=periodicStart,proto3,oneof" json:"periodic_start,omitempty"`
	PeriodicExpire *string `protobuf:"bytes,7,opt,name=periodic_expire,json=periodicExpire,proto3,oneof" json:"periodic_expire,omitempty"`
	SliceEvery     *int32  `protobuf:"varint,8,opt,name=slice_every,json=sliceEvery,proto3,oneof" json:"slice_every,omitempty"`
	SliceOverlap   *int32  `protobuf:"varint,9,opt,name=slice_overlap,json=sliceOverlap,proto3,oneof" json:"slice_overlap,omitempty"`
}

func (x *RunPeriodicTaskRequest) Reset() {
	*x = RunPeriodicTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodicTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodicTaskRequest) ProtoMessage() {}

func (x *RunPeriodicTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodicTaskRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodicTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{279}
}

func (x *RunPeriodicTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetAggName() string {
	if x != nil {
		return x.AggName
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetIntervalEvery() string {
	if x != nil && x.IntervalEvery != nil {
		return *x.IntervalEvery
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetPeriodicStart() string {
	if x != nil && x.PeriodicStart != nil {
		return *x.PeriodicStart
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetPeriodicExpire() string {
	if x != nil && x.PeriodicExpire != nil {
		return *x.PeriodicExpire
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetSliceEvery() int32 {
	if x != nil && x.SliceEvery != nil {
		return *x.SliceEvery
	}
	return 0
}

func (x *RunPeriodicTaskRequest) GetSliceOverlap() int32 {
	if x != nil && x.SliceOverlap != nil {
		return *x.SliceOverlap
	}
	return 0
}

type RunPeriodicTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data int32  `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodicTaskResponse) Reset() {
	*x = RunPeriodicTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodicTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodicTaskResponse) ProtoMessage() {}

func (x *RunPeriodicTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodicTaskResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodicTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{280}
}

func (x *RunPeriodicTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodicTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodicTaskResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type RunSharedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid             string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SliceTaskName    string  `protobuf:"bytes,2,opt,name=slice_task_name,json=sliceTaskName,proto3" json:"slice_task_name,omitempty"`
	RequireStart     string  `protobuf:"bytes,3,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd       *string `protobuf:"bytes,4,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,5,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	SliceEvery       *int32  `protobuf:"varint,6,opt,name=slice_every,json=sliceEvery,proto3,oneof" json:"slice_every,omitempty"`
	SliceOverlap     *int32  `protobuf:"varint,7,opt,name=slice_overlap,json=sliceOverlap,proto3,oneof" json:"slice_overlap,omitempty"`
}

func (x *RunSharedTaskRequest) Reset() {
	*x = RunSharedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSharedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSharedTaskRequest) ProtoMessage() {}

func (x *RunSharedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSharedTaskRequest.ProtoReflect.Descriptor instead.
func (*RunSharedTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{281}
}

func (x *RunSharedTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunSharedTaskRequest) GetSliceTaskName() string {
	if x != nil {
		return x.SliceTaskName
	}
	return ""
}

func (x *RunSharedTaskRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *RunSharedTaskRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *RunSharedTaskRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *RunSharedTaskRequest) GetSliceEvery() int32 {
	if x != nil && x.SliceEvery != nil {
		return *x.SliceEvery
	}
	return 0
}

func (x *RunSharedTaskRequest) GetSliceOverlap() int32 {
	if x != nil && x.SliceOverlap != nil {
		return *x.SliceOverlap
	}
	return 0
}

type RunSharedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data int32  `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunSharedTaskResponse) Reset() {
	*x = RunSharedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSharedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSharedTaskResponse) ProtoMessage() {}

func (x *RunSharedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSharedTaskResponse.ProtoReflect.Descriptor instead.
func (*RunSharedTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{282}
}

func (x *RunSharedTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunSharedTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunSharedTaskResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type SeedingKingdeeStkTransferDirectEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                *string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FEntryID           *int32                  `protobuf:"varint,2,opt,name=FEntryID,proto3,oneof" json:"FEntryID,omitempty"`
	FMaterialID        *KingdeeFNumberResponse `protobuf:"bytes,3,opt,name=FMaterialID,proto3,oneof" json:"FMaterialID,omitempty"`
	FUnitID            *KingdeeFNumberResponse `protobuf:"bytes,4,opt,name=FUnitID,proto3,oneof" json:"FUnitID,omitempty"`
	FSrcStockId        *KingdeeFNumberResponse `protobuf:"bytes,5,opt,name=FSrcStockId,proto3,oneof" json:"FSrcStockId,omitempty"`
	FDestStockId       *KingdeeFNumberResponse `protobuf:"bytes,6,opt,name=FDestStockId,proto3,oneof" json:"FDestStockId,omitempty"`
	FSrcStockStatusId  *KingdeeFNumberResponse `protobuf:"bytes,7,opt,name=FSrcStockStatusId,proto3,oneof" json:"FSrcStockStatusId,omitempty"`
	FDestStockStatusId *KingdeeFNumberResponse `protobuf:"bytes,8,opt,name=FDestStockStatusId,proto3,oneof" json:"FDestStockStatusId,omitempty"`
	FBusinessDate      *string                 `protobuf:"bytes,9,opt,name=FBusinessDate,proto3,oneof" json:"FBusinessDate,omitempty"`
	FBaseUnitId        *KingdeeFNumberResponse `protobuf:"bytes,10,opt,name=FBaseUnitId,proto3,oneof" json:"FBaseUnitId,omitempty"`
	FKeeperId          *KingdeeFNumberResponse `protobuf:"bytes,11,opt,name=FKeeperId,proto3,oneof" json:"FKeeperId,omitempty"`
	FOwnerId           *KingdeeFNumberResponse `protobuf:"bytes,12,opt,name=FOwnerId,proto3,oneof" json:"FOwnerId,omitempty"`
	FKeeperOutId       *KingdeeFNumberResponse `protobuf:"bytes,13,opt,name=FKeeperOutId,proto3,oneof" json:"FKeeperOutId,omitempty"`
	FOwnerOutId        *KingdeeFNumberResponse `protobuf:"bytes,14,opt,name=FOwnerOutId,proto3,oneof" json:"FOwnerOutId,omitempty"`
	FDestMaterialId    *KingdeeFNumberResponse `protobuf:"bytes,15,opt,name=FDestMaterialId,proto3,oneof" json:"FDestMaterialId,omitempty"`
	FSaleUnitId        *KingdeeFNumberResponse `protobuf:"bytes,16,opt,name=FSaleUnitId,proto3,oneof" json:"FSaleUnitId,omitempty"`
	FPriceUnitID       *KingdeeFNumberResponse `protobuf:"bytes,17,opt,name=FPriceUnitID,proto3,oneof" json:"FPriceUnitID,omitempty"`
	FQty               *float64                `protobuf:"fixed64,18,opt,name=FQty,proto3,oneof" json:"FQty,omitempty"`
	FBaseQty           *float64                `protobuf:"fixed64,19,opt,name=FBaseQty,proto3,oneof" json:"FBaseQty,omitempty"`
	FSaleQty           *float64                `protobuf:"fixed64,20,opt,name=FSaleQty,proto3,oneof" json:"FSaleQty,omitempty"`
	FSalBaseQty        *float64                `protobuf:"fixed64,21,opt,name=FSalBaseQty,proto3,oneof" json:"FSalBaseQty,omitempty"`
	FPriceQty          *float64                `protobuf:"fixed64,22,opt,name=FPriceQty,proto3,oneof" json:"FPriceQty,omitempty"`
	FPriceBaseQty      *float64                `protobuf:"fixed64,23,opt,name=FPriceBaseQty,proto3,oneof" json:"FPriceBaseQty,omitempty"`
	SpecNo             *string                 `protobuf:"bytes,24,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsNo            *string                 `protobuf:"bytes,25,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName          *string                 `protobuf:"bytes,26,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	LineQty            *int32                  `protobuf:"varint,27,opt,name=line_qty,json=lineQty,proto3,oneof" json:"line_qty,omitempty"`
	LineAmount         *float64                `protobuf:"fixed64,28,opt,name=line_amount,json=lineAmount,proto3,oneof" json:"line_amount,omitempty"`
	Paid               *float64                `protobuf:"fixed64,29,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SubOrderNoList     *string                 `protobuf:"bytes,30,opt,name=sub_order_no_list,json=subOrderNoList,proto3,oneof" json:"sub_order_no_list,omitempty"`
	SubServiceNoList   *string                 `protobuf:"bytes,31,opt,name=sub_service_no_list,json=subServiceNoList,proto3,oneof" json:"sub_service_no_list,omitempty"`
	SubTradeNoList     *string                 `protobuf:"bytes,32,opt,name=sub_trade_no_list,json=subTradeNoList,proto3,oneof" json:"sub_trade_no_list,omitempty"`
	SubSrcTidsList     *string                 `protobuf:"bytes,33,opt,name=sub_src_tids_list,json=subSrcTidsList,proto3,oneof" json:"sub_src_tids_list,omitempty"`
	FRowType           *string                 `protobuf:"bytes,34,opt,name=FRowType,proto3,oneof" json:"FRowType,omitempty"`
	FKeeperTypeId      *string                 `protobuf:"bytes,35,opt,name=FKeeperTypeId,proto3,oneof" json:"FKeeperTypeId,omitempty"`
	FOwnerTypeId       *string                 `protobuf:"bytes,36,opt,name=FOwnerTypeId,proto3,oneof" json:"FOwnerTypeId,omitempty"`
	FKeeperTypeOutId   *string                 `protobuf:"bytes,37,opt,name=FKeeperTypeOutId,proto3,oneof" json:"FKeeperTypeOutId,omitempty"`
	FOwnerTypeOutId    *string                 `protobuf:"bytes,38,opt,name=FOwnerTypeOutId,proto3,oneof" json:"FOwnerTypeOutId,omitempty"`
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) Reset() {
	*x = SeedingKingdeeStkTransferDirectEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedingKingdeeStkTransferDirectEntityResponse) ProtoMessage() {}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedingKingdeeStkTransferDirectEntityResponse.ProtoReflect.Descriptor instead.
func (*SeedingKingdeeStkTransferDirectEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{283}
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFEntryID() int32 {
	if x != nil && x.FEntryID != nil {
		return *x.FEntryID
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFMaterialID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FMaterialID
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFUnitID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FUnitID
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFSrcStockId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSrcStockId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFDestStockId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FDestStockId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFSrcStockStatusId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSrcStockStatusId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFDestStockStatusId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FDestStockStatusId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFBusinessDate() string {
	if x != nil && x.FBusinessDate != nil {
		return *x.FBusinessDate
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFBaseUnitId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBaseUnitId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFKeeperId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FKeeperId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFOwnerId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFKeeperOutId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FKeeperOutId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFOwnerOutId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerOutId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFDestMaterialId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FDestMaterialId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFSaleUnitId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSaleUnitId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFPriceUnitID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FPriceUnitID
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFQty() float64 {
	if x != nil && x.FQty != nil {
		return *x.FQty
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFBaseQty() float64 {
	if x != nil && x.FBaseQty != nil {
		return *x.FBaseQty
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFSaleQty() float64 {
	if x != nil && x.FSaleQty != nil {
		return *x.FSaleQty
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFSalBaseQty() float64 {
	if x != nil && x.FSalBaseQty != nil {
		return *x.FSalBaseQty
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFPriceQty() float64 {
	if x != nil && x.FPriceQty != nil {
		return *x.FPriceQty
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFPriceBaseQty() float64 {
	if x != nil && x.FPriceBaseQty != nil {
		return *x.FPriceBaseQty
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetLineQty() int32 {
	if x != nil && x.LineQty != nil {
		return *x.LineQty
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetLineAmount() float64 {
	if x != nil && x.LineAmount != nil {
		return *x.LineAmount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetSubOrderNoList() string {
	if x != nil && x.SubOrderNoList != nil {
		return *x.SubOrderNoList
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetSubServiceNoList() string {
	if x != nil && x.SubServiceNoList != nil {
		return *x.SubServiceNoList
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetSubTradeNoList() string {
	if x != nil && x.SubTradeNoList != nil {
		return *x.SubTradeNoList
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetSubSrcTidsList() string {
	if x != nil && x.SubSrcTidsList != nil {
		return *x.SubSrcTidsList
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFRowType() string {
	if x != nil && x.FRowType != nil {
		return *x.FRowType
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFKeeperTypeId() string {
	if x != nil && x.FKeeperTypeId != nil {
		return *x.FKeeperTypeId
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFOwnerTypeId() string {
	if x != nil && x.FOwnerTypeId != nil {
		return *x.FOwnerTypeId
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFKeeperTypeOutId() string {
	if x != nil && x.FKeeperTypeOutId != nil {
		return *x.FKeeperTypeOutId
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectEntityResponse) GetFOwnerTypeOutId() string {
	if x != nil && x.FOwnerTypeOutId != nil {
		return *x.FOwnerTypeOutId
	}
	return ""
}

type SeedingKingdeeStkTransferDirectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SeedingKingdeeStkTransferDirectResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SeedingKingdeeStkTransferDirectListResponse) Reset() {
	*x = SeedingKingdeeStkTransferDirectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedingKingdeeStkTransferDirectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedingKingdeeStkTransferDirectListResponse) ProtoMessage() {}

func (x *SeedingKingdeeStkTransferDirectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedingKingdeeStkTransferDirectListResponse.ProtoReflect.Descriptor instead.
func (*SeedingKingdeeStkTransferDirectListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{284}
}

func (x *SeedingKingdeeStkTransferDirectListResponse) GetResults() []*SeedingKingdeeStkTransferDirectResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SeedingKingdeeStkTransferDirectModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FBillNo             *string                                          `protobuf:"bytes,1,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	XId                 *string                                          `protobuf:"bytes,2,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FID                 *int32                                           `protobuf:"varint,3,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FBillTypeID         *KingdeeFNumberResponse                          `protobuf:"bytes,4,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FTransferBizType    *KingdeeFNumberResponse                          `protobuf:"bytes,5,opt,name=FTransferBizType,proto3,oneof" json:"FTransferBizType,omitempty"`
	FStockOutOrgId      *KingdeeFNumberResponse                          `protobuf:"bytes,6,opt,name=FStockOutOrgId,proto3,oneof" json:"FStockOutOrgId,omitempty"`
	FOwnerOutIdHead     *KingdeeFNumberResponse                          `protobuf:"bytes,7,opt,name=FOwnerOutIdHead,proto3,oneof" json:"FOwnerOutIdHead,omitempty"`
	FStockOrgId         *KingdeeFNumberResponse                          `protobuf:"bytes,8,opt,name=FStockOrgId,proto3,oneof" json:"FStockOrgId,omitempty"`
	FOwnerIdHead        *KingdeeFNumberResponse                          `protobuf:"bytes,9,opt,name=FOwnerIdHead,proto3,oneof" json:"FOwnerIdHead,omitempty"`
	FBillEntry          []*SeedingKingdeeStkTransferDirectEntityResponse `protobuf:"bytes,10,rep,name=FBillEntry,proto3" json:"FBillEntry,omitempty"`
	FDate               *string                                          `protobuf:"bytes,11,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	FBizType            *string                                          `protobuf:"bytes,12,opt,name=FBizType,proto3,oneof" json:"FBizType,omitempty"`
	FTransferDirect     *string                                          `protobuf:"bytes,13,opt,name=FTransferDirect,proto3,oneof" json:"FTransferDirect,omitempty"`
	FOwnerTypeOutIdHead *string                                          `protobuf:"bytes,14,opt,name=FOwnerTypeOutIdHead,proto3,oneof" json:"FOwnerTypeOutIdHead,omitempty"`
	FOwnerTypeIdHead    *string                                          `protobuf:"bytes,15,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) Reset() {
	*x = SeedingKingdeeStkTransferDirectModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedingKingdeeStkTransferDirectModelResponse) ProtoMessage() {}

func (x *SeedingKingdeeStkTransferDirectModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedingKingdeeStkTransferDirectModelResponse.ProtoReflect.Descriptor instead.
func (*SeedingKingdeeStkTransferDirectModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{285}
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFID() int32 {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFBillTypeID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBillTypeID
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFTransferBizType() *KingdeeFNumberResponse {
	if x != nil {
		return x.FTransferBizType
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFStockOutOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockOutOrgId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFOwnerOutIdHead() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerOutIdHead
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFStockOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockOrgId
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFOwnerIdHead() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerIdHead
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFBillEntry() []*SeedingKingdeeStkTransferDirectEntityResponse {
	if x != nil {
		return x.FBillEntry
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFBizType() string {
	if x != nil && x.FBizType != nil {
		return *x.FBizType
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFTransferDirect() string {
	if x != nil && x.FTransferDirect != nil {
		return *x.FTransferDirect
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFOwnerTypeOutIdHead() string {
	if x != nil && x.FOwnerTypeOutIdHead != nil {
		return *x.FOwnerTypeOutIdHead
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

type SeedingKingdeeStkTransferDirectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                                       `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggPushStatusName   *string                                       `protobuf:"bytes,2,opt,name=agg_push_status_name,json=aggPushStatusName,proto3,oneof" json:"agg_push_status_name,omitempty"`
	Model               *SeedingKingdeeStkTransferDirectModelResponse `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	AggNo               *string                                       `protobuf:"bytes,4,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                                       `protobuf:"bytes,5,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	NeedUpDateFields    *string                                       `protobuf:"bytes,6,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string                                       `protobuf:"bytes,7,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo           *string                                       `protobuf:"bytes,8,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	AggPushStatus       *int32                                        `protobuf:"varint,9,opt,name=agg_push_status,json=aggPushStatus,proto3,oneof" json:"agg_push_status,omitempty"`
	FailureReason       *string                                       `protobuf:"bytes,10,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string                                       `protobuf:"bytes,11,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32                                        `protobuf:"varint,12,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string                                       `protobuf:"bytes,13,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelCode         *int32                                        `protobuf:"varint,14,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	ChannelCodeName     *string                                       `protobuf:"bytes,15,opt,name=channel_code_name,json=channelCodeName,proto3,oneof" json:"channel_code_name,omitempty"`
	ChannelDim          *int32                                        `protobuf:"varint,16,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string                                       `protobuf:"bytes,17,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32                                        `protobuf:"varint,18,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string                                       `protobuf:"bytes,19,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggPeriod           *string                                       `protobuf:"bytes,20,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	AggYear             *int32                                        `protobuf:"varint,21,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth            *int32                                        `protobuf:"varint,22,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek             *int32                                        `protobuf:"varint,23,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay              *int32                                        `protobuf:"varint,24,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
	AggOrganizeNo       *string                                       `protobuf:"bytes,25,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string                                       `protobuf:"bytes,26,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string                                       `protobuf:"bytes,27,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string                                       `protobuf:"bytes,28,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string                                       `protobuf:"bytes,29,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string                                       `protobuf:"bytes,30,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggServiceNo        *string                                       `protobuf:"bytes,31,opt,name=agg_service_no,json=aggServiceNo,proto3,oneof" json:"agg_service_no,omitempty"`
	AggSrcOrder         *string                                       `protobuf:"bytes,32,opt,name=agg_src_order,json=aggSrcOrder,proto3,oneof" json:"agg_src_order,omitempty"`
	AggOrderNo          *string                                       `protobuf:"bytes,33,opt,name=agg_order_no,json=aggOrderNo,proto3,oneof" json:"agg_order_no,omitempty"`
	AggOrderCount       *int32                                        `protobuf:"varint,34,opt,name=agg_order_count,json=aggOrderCount,proto3,oneof" json:"agg_order_count,omitempty"`
	AggGoodsTypeCount   *int32                                        `protobuf:"varint,35,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32                                        `protobuf:"varint,36,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	RefundType          *int32                                        `protobuf:"varint,37,opt,name=refund_type,json=refundType,proto3,oneof" json:"refund_type,omitempty"`
	RefundTypeName      *string                                       `protobuf:"bytes,38,opt,name=refund_type_name,json=refundTypeName,proto3,oneof" json:"refund_type_name,omitempty"`
	AggTotalAmount      *float64                                      `protobuf:"fixed64,39,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *float64                                      `protobuf:"fixed64,40,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *float64                                      `protobuf:"fixed64,41,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *float64                                      `protobuf:"fixed64,42,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggRefundAmount     *float64                                      `protobuf:"fixed64,43,opt,name=agg_refund_amount,json=aggRefundAmount,proto3,oneof" json:"agg_refund_amount,omitempty"`
	KingdeePushTime     *string                                       `protobuf:"bytes,44,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	CreateTime          *string                                       `protobuf:"bytes,45,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                                       `protobuf:"bytes,46,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *SeedingKingdeeStkTransferDirectResponse) Reset() {
	*x = SeedingKingdeeStkTransferDirectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedingKingdeeStkTransferDirectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedingKingdeeStkTransferDirectResponse) ProtoMessage() {}

func (x *SeedingKingdeeStkTransferDirectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedingKingdeeStkTransferDirectResponse.ProtoReflect.Descriptor instead.
func (*SeedingKingdeeStkTransferDirectResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{286}
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggPushStatusName() string {
	if x != nil && x.AggPushStatusName != nil {
		return *x.AggPushStatusName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetModel() *SeedingKingdeeStkTransferDirectModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggPushStatus() int32 {
	if x != nil && x.AggPushStatus != nil {
		return *x.AggPushStatus
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetChannelCode() int32 {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetChannelCodeName() string {
	if x != nil && x.ChannelCodeName != nil {
		return *x.ChannelCodeName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggServiceNo() string {
	if x != nil && x.AggServiceNo != nil {
		return *x.AggServiceNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggSrcOrder() string {
	if x != nil && x.AggSrcOrder != nil {
		return *x.AggSrcOrder
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggOrderNo() string {
	if x != nil && x.AggOrderNo != nil {
		return *x.AggOrderNo
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggOrderCount() int32 {
	if x != nil && x.AggOrderCount != nil {
		return *x.AggOrderCount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetRefundType() int32 {
	if x != nil && x.RefundType != nil {
		return *x.RefundType
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetRefundTypeName() string {
	if x != nil && x.RefundTypeName != nil {
		return *x.RefundTypeName
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggTotalAmount() float64 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggDiscountAmount() float64 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggReceivableAmount() float64 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggPaidAmount() float64 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetAggRefundAmount() float64 {
	if x != nil && x.AggRefundAmount != nil {
		return *x.AggRefundAmount
	}
	return 0
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *SeedingKingdeeStkTransferDirectResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type StaticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StaticsRequest) Reset() {
	*x = StaticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticsRequest) ProtoMessage() {}

func (x *StaticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticsRequest.ProtoReflect.Descriptor instead.
func (*StaticsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{287}
}

type StaticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggWait            *int32  `protobuf:"varint,1,opt,name=agg_wait,json=aggWait,proto3,oneof" json:"agg_wait,omitempty"`
	ConsignWaitPush    *int32  `protobuf:"varint,2,opt,name=consign_wait_push,json=consignWaitPush,proto3,oneof" json:"consign_wait_push,omitempty"`
	ConsignSuccessPush *int32  `protobuf:"varint,3,opt,name=consign_success_push,json=consignSuccessPush,proto3,oneof" json:"consign_success_push,omitempty"`
	ConsignFailedPush  *int32  `protobuf:"varint,4,opt,name=consign_failed_push,json=consignFailedPush,proto3,oneof" json:"consign_failed_push,omitempty"`
	TotalAmount        *string `protobuf:"bytes,5,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
}

func (x *StaticsResponse) Reset() {
	*x = StaticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticsResponse) ProtoMessage() {}

func (x *StaticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticsResponse.ProtoReflect.Descriptor instead.
func (*StaticsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{288}
}

func (x *StaticsResponse) GetAggWait() int32 {
	if x != nil && x.AggWait != nil {
		return *x.AggWait
	}
	return 0
}

func (x *StaticsResponse) GetConsignWaitPush() int32 {
	if x != nil && x.ConsignWaitPush != nil {
		return *x.ConsignWaitPush
	}
	return 0
}

func (x *StaticsResponse) GetConsignSuccessPush() int32 {
	if x != nil && x.ConsignSuccessPush != nil {
		return *x.ConsignSuccessPush
	}
	return 0
}

func (x *StaticsResponse) GetConsignFailedPush() int32 {
	if x != nil && x.ConsignFailedPush != nil {
		return *x.ConsignFailedPush
	}
	return 0
}

func (x *StaticsResponse) GetTotalAmount() string {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return ""
}

type StopKdReceiveBillFromWdtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveBill string `protobuf:"bytes,1,opt,name=receive_bill,json=receiveBill,proto3" json:"receive_bill,omitempty"`
}

func (x *StopKdReceiveBillFromWdtRequest) Reset() {
	*x = StopKdReceiveBillFromWdtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopKdReceiveBillFromWdtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopKdReceiveBillFromWdtRequest) ProtoMessage() {}

func (x *StopKdReceiveBillFromWdtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopKdReceiveBillFromWdtRequest.ProtoReflect.Descriptor instead.
func (*StopKdReceiveBillFromWdtRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{289}
}

func (x *StopKdReceiveBillFromWdtRequest) GetReceiveBill() string {
	if x != nil {
		return x.ReceiveBill
	}
	return ""
}

type StopKdReceiveBillFromWdtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StopKdReceiveBillFromWdtResponse) Reset() {
	*x = StopKdReceiveBillFromWdtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopKdReceiveBillFromWdtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopKdReceiveBillFromWdtResponse) ProtoMessage() {}

func (x *StopKdReceiveBillFromWdtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopKdReceiveBillFromWdtResponse.ProtoReflect.Descriptor instead.
func (*StopKdReceiveBillFromWdtResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{290}
}

func (x *StopKdReceiveBillFromWdtResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StopKdReceiveBillFromWdtResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *StopKdReceiveBillFromWdtResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type StopPeriodicTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeriodicTaskName string `protobuf:"bytes,1,opt,name=periodic_task_name,json=periodicTaskName,proto3" json:"periodic_task_name,omitempty"`
}

func (x *StopPeriodicTaskRequest) Reset() {
	*x = StopPeriodicTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPeriodicTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPeriodicTaskRequest) ProtoMessage() {}

func (x *StopPeriodicTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPeriodicTaskRequest.ProtoReflect.Descriptor instead.
func (*StopPeriodicTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{291}
}

func (x *StopPeriodicTaskRequest) GetPeriodicTaskName() string {
	if x != nil {
		return x.PeriodicTaskName
	}
	return ""
}

type StopPeriodicTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StopPeriodicTaskResponse) Reset() {
	*x = StopPeriodicTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPeriodicTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPeriodicTaskResponse) ProtoMessage() {}

func (x *StopPeriodicTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPeriodicTaskResponse.ProtoReflect.Descriptor instead.
func (*StopPeriodicTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{292}
}

func (x *StopPeriodicTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StopPeriodicTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SwapKingdeeSalOutStockEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FEntryID         *int32                  `protobuf:"varint,2,opt,name=FEntryID,proto3,oneof" json:"FEntryID,omitempty"`
	FMaterialID      *KingdeeFNumberResponse `protobuf:"bytes,3,opt,name=FMaterialID,proto3,oneof" json:"FMaterialID,omitempty"`
	FOwnerId         *KingdeeFNumberResponse `protobuf:"bytes,4,opt,name=FOwnerId,proto3,oneof" json:"FOwnerId,omitempty"`
	FStockId         *KingdeeFNumberResponse `protobuf:"bytes,5,opt,name=FStockId,proto3,oneof" json:"FStockId,omitempty"`
	FUnitID          *KingdeeFNumberResponse `protobuf:"bytes,6,opt,name=FUnitID,proto3,oneof" json:"FUnitID,omitempty"`
	FSalUnitQty      *float64                `protobuf:"fixed64,7,opt,name=FSalUnitQty,proto3,oneof" json:"FSalUnitQty,omitempty"`
	FRealQty         *float64                `protobuf:"fixed64,8,opt,name=FRealQty,proto3,oneof" json:"FRealQty,omitempty"`
	FSalBaseQty      *float64                `protobuf:"fixed64,9,opt,name=FSalBaseQty,proto3,oneof" json:"FSalBaseQty,omitempty"`
	FPriceBaseQty    *float64                `protobuf:"fixed64,10,opt,name=FPriceBaseQty,proto3,oneof" json:"FPriceBaseQty,omitempty"`
	FARNOTJoinQty    *float64                `protobuf:"fixed64,11,opt,name=FARNOTJoinQty,proto3,oneof" json:"FARNOTJoinQty,omitempty"`
	FAllAmount       *float64                `protobuf:"fixed64,12,opt,name=FAllAmount,proto3,oneof" json:"FAllAmount,omitempty"`
	SpecNo           *string                 `protobuf:"bytes,13,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsNo          *string                 `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName        *string                 `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	LineQty          *int32                  `protobuf:"varint,16,opt,name=line_qty,json=lineQty,proto3,oneof" json:"line_qty,omitempty"`
	LineAmount       *float64                `protobuf:"fixed64,17,opt,name=line_amount,json=lineAmount,proto3,oneof" json:"line_amount,omitempty"`
	Paid             *float64                `protobuf:"fixed64,18,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SubOrderNoList   *string                 `protobuf:"bytes,19,opt,name=sub_order_no_list,json=subOrderNoList,proto3,oneof" json:"sub_order_no_list,omitempty"`
	SubServiceNoList *string                 `protobuf:"bytes,20,opt,name=sub_service_no_list,json=subServiceNoList,proto3,oneof" json:"sub_service_no_list,omitempty"`
	SubTradeNoList   *string                 `protobuf:"bytes,21,opt,name=sub_trade_no_list,json=subTradeNoList,proto3,oneof" json:"sub_trade_no_list,omitempty"`
	SubSrcTidsList   *string                 `protobuf:"bytes,22,opt,name=sub_src_tids_list,json=subSrcTidsList,proto3,oneof" json:"sub_src_tids_list,omitempty"`
	FRowType         *string                 `protobuf:"bytes,23,opt,name=FRowType,proto3,oneof" json:"FRowType,omitempty"`
	FOwnerTypeId     *string                 `protobuf:"bytes,24,opt,name=FOwnerTypeId,proto3,oneof" json:"FOwnerTypeId,omitempty"`
	FOutControl      *bool                   `protobuf:"varint,25,opt,name=FOutControl,proto3,oneof" json:"FOutControl,omitempty"`
	FIsOverLegalOrg  *bool                   `protobuf:"varint,26,opt,name=FIsOverLegalOrg,proto3,oneof" json:"FIsOverLegalOrg,omitempty"`
	FCheckDelivery   *bool                   `protobuf:"varint,27,opt,name=FCheckDelivery,proto3,oneof" json:"FCheckDelivery,omitempty"`
	FIsFree          *bool                   `protobuf:"varint,28,opt,name=FIsFree,proto3,oneof" json:"FIsFree,omitempty"`
}

func (x *SwapKingdeeSalOutStockEntityResponse) Reset() {
	*x = SwapKingdeeSalOutStockEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalOutStockEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalOutStockEntityResponse) ProtoMessage() {}

func (x *SwapKingdeeSalOutStockEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalOutStockEntityResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalOutStockEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{293}
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFEntryID() int32 {
	if x != nil && x.FEntryID != nil {
		return *x.FEntryID
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFMaterialID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FMaterialID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFOwnerId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerId
	}
	return nil
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFStockId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockId
	}
	return nil
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFUnitID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FUnitID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFSalUnitQty() float64 {
	if x != nil && x.FSalUnitQty != nil {
		return *x.FSalUnitQty
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFRealQty() float64 {
	if x != nil && x.FRealQty != nil {
		return *x.FRealQty
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFSalBaseQty() float64 {
	if x != nil && x.FSalBaseQty != nil {
		return *x.FSalBaseQty
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFPriceBaseQty() float64 {
	if x != nil && x.FPriceBaseQty != nil {
		return *x.FPriceBaseQty
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFARNOTJoinQty() float64 {
	if x != nil && x.FARNOTJoinQty != nil {
		return *x.FARNOTJoinQty
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFAllAmount() float64 {
	if x != nil && x.FAllAmount != nil {
		return *x.FAllAmount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetLineQty() int32 {
	if x != nil && x.LineQty != nil {
		return *x.LineQty
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetLineAmount() float64 {
	if x != nil && x.LineAmount != nil {
		return *x.LineAmount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetSubOrderNoList() string {
	if x != nil && x.SubOrderNoList != nil {
		return *x.SubOrderNoList
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetSubServiceNoList() string {
	if x != nil && x.SubServiceNoList != nil {
		return *x.SubServiceNoList
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetSubTradeNoList() string {
	if x != nil && x.SubTradeNoList != nil {
		return *x.SubTradeNoList
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetSubSrcTidsList() string {
	if x != nil && x.SubSrcTidsList != nil {
		return *x.SubSrcTidsList
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFRowType() string {
	if x != nil && x.FRowType != nil {
		return *x.FRowType
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFOwnerTypeId() string {
	if x != nil && x.FOwnerTypeId != nil {
		return *x.FOwnerTypeId
	}
	return ""
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFOutControl() bool {
	if x != nil && x.FOutControl != nil {
		return *x.FOutControl
	}
	return false
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFIsOverLegalOrg() bool {
	if x != nil && x.FIsOverLegalOrg != nil {
		return *x.FIsOverLegalOrg
	}
	return false
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFCheckDelivery() bool {
	if x != nil && x.FCheckDelivery != nil {
		return *x.FCheckDelivery
	}
	return false
}

func (x *SwapKingdeeSalOutStockEntityResponse) GetFIsFree() bool {
	if x != nil && x.FIsFree != nil {
		return *x.FIsFree
	}
	return false
}

type SwapKingdeeSalOutStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SwapKingdeeSalOutStockResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SwapKingdeeSalOutStockListResponse) Reset() {
	*x = SwapKingdeeSalOutStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalOutStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalOutStockListResponse) ProtoMessage() {}

func (x *SwapKingdeeSalOutStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalOutStockListResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalOutStockListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{294}
}

func (x *SwapKingdeeSalOutStockListResponse) GetResults() []*SwapKingdeeSalOutStockResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SwapKingdeeSalOutStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SwapKingdeeSalOutStockModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FBillNo          *string                                 `protobuf:"bytes,1,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	XId              *string                                 `protobuf:"bytes,2,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FID              *int32                                  `protobuf:"varint,3,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FBillTypeID      *KingdeeFNumberResponse                 `protobuf:"bytes,4,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FZBStockID       *KingdeeFNumberResponse                 `protobuf:"bytes,5,opt,name=FZBStockID,proto3,oneof" json:"FZBStockID,omitempty"`
	FXSBillType      *KingdeeFNumberResponse                 `protobuf:"bytes,6,opt,name=FXSBillType,proto3,oneof" json:"FXSBillType,omitempty"`
	FOwnerIdHead     *KingdeeFNumberResponse                 `protobuf:"bytes,7,opt,name=FOwnerIdHead,proto3,oneof" json:"FOwnerIdHead,omitempty"`
	FSaleOrgId       *KingdeeFNumberResponse                 `protobuf:"bytes,8,opt,name=FSaleOrgId,proto3,oneof" json:"FSaleOrgId,omitempty"`
	FStockOrgId      *KingdeeFNumberResponse                 `protobuf:"bytes,9,opt,name=FStockOrgId,proto3,oneof" json:"FStockOrgId,omitempty"`
	FBranchId        *KingdeeFNumberResponse                 `protobuf:"bytes,10,opt,name=FBranchId,proto3,oneof" json:"FBranchId,omitempty"`
	FCustomerID      *KingdeeFNumberResponse                 `protobuf:"bytes,11,opt,name=FCustomerID,proto3,oneof" json:"FCustomerID,omitempty"`
	FSettleID        *KingdeeFNumberResponse                 `protobuf:"bytes,12,opt,name=FSettleID,proto3,oneof" json:"FSettleID,omitempty"`
	FPayerID         *KingdeeFNumberResponse                 `protobuf:"bytes,13,opt,name=FPayerID,proto3,oneof" json:"FPayerID,omitempty"`
	FReceiverID      *KingdeeFNumberResponse                 `protobuf:"bytes,14,opt,name=FReceiverID,proto3,oneof" json:"FReceiverID,omitempty"`
	FTransferBizType *KingdeeFNumberResponse                 `protobuf:"bytes,15,opt,name=FTransferBizType,proto3,oneof" json:"FTransferBizType,omitempty"`
	FProp2           *KingdeeFNumberResponse                 `protobuf:"bytes,16,opt,name=FProp2,proto3,oneof" json:"FProp2,omitempty"`
	FEntity          []*SwapKingdeeSalOutStockEntityResponse `protobuf:"bytes,17,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	SubHeadEntity    *KingdeeSettleEntityResponse            `protobuf:"bytes,18,opt,name=SubHeadEntity,proto3,oneof" json:"SubHeadEntity,omitempty"`
	FDate            *string                                 `protobuf:"bytes,19,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	FOwnerTypeIdHead *string                                 `protobuf:"bytes,20,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
	FNote            *string                                 `protobuf:"bytes,21,opt,name=FNote,proto3,oneof" json:"FNote,omitempty"`
}

func (x *SwapKingdeeSalOutStockModelResponse) Reset() {
	*x = SwapKingdeeSalOutStockModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalOutStockModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalOutStockModelResponse) ProtoMessage() {}

func (x *SwapKingdeeSalOutStockModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalOutStockModelResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalOutStockModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{295}
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockModelResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFID() int32 {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return 0
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFBillTypeID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBillTypeID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFZBStockID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FZBStockID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFXSBillType() *KingdeeFNumberResponse {
	if x != nil {
		return x.FXSBillType
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFOwnerIdHead() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerIdHead
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFSaleOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSaleOrgId
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFStockOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockOrgId
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFBranchId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBranchId
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFCustomerID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FCustomerID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFSettleID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSettleID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFPayerID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FPayerID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFReceiverID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FReceiverID
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFTransferBizType() *KingdeeFNumberResponse {
	if x != nil {
		return x.FTransferBizType
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFProp2() *KingdeeFNumberResponse {
	if x != nil {
		return x.FProp2
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFEntity() []*SwapKingdeeSalOutStockEntityResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetSubHeadEntity() *KingdeeSettleEntityResponse {
	if x != nil {
		return x.SubHeadEntity
	}
	return nil
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

func (x *SwapKingdeeSalOutStockModelResponse) GetFNote() string {
	if x != nil && x.FNote != nil {
		return *x.FNote
	}
	return ""
}

type SwapKingdeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                              `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggPushStatusName   *string                              `protobuf:"bytes,2,opt,name=agg_push_status_name,json=aggPushStatusName,proto3,oneof" json:"agg_push_status_name,omitempty"`
	Model               *SwapKingdeeSalOutStockModelResponse `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	AggNo               *string                              `protobuf:"bytes,4,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                              `protobuf:"bytes,5,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	NeedUpDateFields    *string                              `protobuf:"bytes,6,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string                              `protobuf:"bytes,7,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo           *string                              `protobuf:"bytes,8,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	AggPushStatus       *int32                               `protobuf:"varint,9,opt,name=agg_push_status,json=aggPushStatus,proto3,oneof" json:"agg_push_status,omitempty"`
	FailureReason       *string                              `protobuf:"bytes,10,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string                              `protobuf:"bytes,11,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32                               `protobuf:"varint,12,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string                              `protobuf:"bytes,13,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelCode         *int32                               `protobuf:"varint,14,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	ChannelCodeName     *string                              `protobuf:"bytes,15,opt,name=channel_code_name,json=channelCodeName,proto3,oneof" json:"channel_code_name,omitempty"`
	ChannelDim          *int32                               `protobuf:"varint,16,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string                              `protobuf:"bytes,17,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32                               `protobuf:"varint,18,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string                              `protobuf:"bytes,19,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggPeriod           *string                              `protobuf:"bytes,20,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	AggYear             *int32                               `protobuf:"varint,21,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth            *int32                               `protobuf:"varint,22,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek             *int32                               `protobuf:"varint,23,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay              *int32                               `protobuf:"varint,24,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
	AggOrganizeNo       *string                              `protobuf:"bytes,25,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string                              `protobuf:"bytes,26,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string                              `protobuf:"bytes,27,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string                              `protobuf:"bytes,28,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string                              `protobuf:"bytes,29,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string                              `protobuf:"bytes,30,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggServiceNo        *string                              `protobuf:"bytes,31,opt,name=agg_service_no,json=aggServiceNo,proto3,oneof" json:"agg_service_no,omitempty"`
	AggSrcOrder         *string                              `protobuf:"bytes,32,opt,name=agg_src_order,json=aggSrcOrder,proto3,oneof" json:"agg_src_order,omitempty"`
	AggOrderNo          *string                              `protobuf:"bytes,33,opt,name=agg_order_no,json=aggOrderNo,proto3,oneof" json:"agg_order_no,omitempty"`
	AggOrderCount       *int32                               `protobuf:"varint,34,opt,name=agg_order_count,json=aggOrderCount,proto3,oneof" json:"agg_order_count,omitempty"`
	AggGoodsTypeCount   *int32                               `protobuf:"varint,35,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32                               `protobuf:"varint,36,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	RefundType          *int32                               `protobuf:"varint,37,opt,name=refund_type,json=refundType,proto3,oneof" json:"refund_type,omitempty"`
	RefundTypeName      *string                              `protobuf:"bytes,38,opt,name=refund_type_name,json=refundTypeName,proto3,oneof" json:"refund_type_name,omitempty"`
	AggTotalAmount      *float64                             `protobuf:"fixed64,39,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *float64                             `protobuf:"fixed64,40,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *float64                             `protobuf:"fixed64,41,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *float64                             `protobuf:"fixed64,42,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggRefundAmount     *float64                             `protobuf:"fixed64,43,opt,name=agg_refund_amount,json=aggRefundAmount,proto3,oneof" json:"agg_refund_amount,omitempty"`
	KingdeePushTime     *string                              `protobuf:"bytes,44,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	CreateTime          *string                              `protobuf:"bytes,45,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                              `protobuf:"bytes,46,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *SwapKingdeeSalOutStockResponse) Reset() {
	*x = SwapKingdeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalOutStockResponse) ProtoMessage() {}

func (x *SwapKingdeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{296}
}

func (x *SwapKingdeeSalOutStockResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggPushStatusName() string {
	if x != nil && x.AggPushStatusName != nil {
		return *x.AggPushStatusName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetModel() *SwapKingdeeSalOutStockModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *SwapKingdeeSalOutStockResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggPushStatus() int32 {
	if x != nil && x.AggPushStatus != nil {
		return *x.AggPushStatus
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetChannelCode() int32 {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetChannelCodeName() string {
	if x != nil && x.ChannelCodeName != nil {
		return *x.ChannelCodeName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggServiceNo() string {
	if x != nil && x.AggServiceNo != nil {
		return *x.AggServiceNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggSrcOrder() string {
	if x != nil && x.AggSrcOrder != nil {
		return *x.AggSrcOrder
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggOrderNo() string {
	if x != nil && x.AggOrderNo != nil {
		return *x.AggOrderNo
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggOrderCount() int32 {
	if x != nil && x.AggOrderCount != nil {
		return *x.AggOrderCount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetRefundType() int32 {
	if x != nil && x.RefundType != nil {
		return *x.RefundType
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetRefundTypeName() string {
	if x != nil && x.RefundTypeName != nil {
		return *x.RefundTypeName
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetAggTotalAmount() float64 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggDiscountAmount() float64 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggReceivableAmount() float64 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggPaidAmount() float64 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetAggRefundAmount() float64 {
	if x != nil && x.AggRefundAmount != nil {
		return *x.AggRefundAmount
	}
	return 0
}

func (x *SwapKingdeeSalOutStockResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *SwapKingdeeSalOutStockResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type SwapKingdeeSalReturnStockEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FEntryID         *int32                  `protobuf:"varint,2,opt,name=FEntryID,proto3,oneof" json:"FEntryID,omitempty"`
	FMaterialID      *KingdeeFNumberResponse `protobuf:"bytes,3,opt,name=FMaterialID,proto3,oneof" json:"FMaterialID,omitempty"`
	FUnitID          *KingdeeFNumberResponse `protobuf:"bytes,4,opt,name=FUnitID,proto3,oneof" json:"FUnitID,omitempty"`
	FReturnType      *KingdeeFNumberResponse `protobuf:"bytes,5,opt,name=FReturnType,proto3,oneof" json:"FReturnType,omitempty"`
	FOwnerId         *KingdeeFNumberResponse `protobuf:"bytes,6,opt,name=FOwnerId,proto3,oneof" json:"FOwnerId,omitempty"`
	FStockId         *KingdeeFNumberResponse `protobuf:"bytes,7,opt,name=FStockId,proto3,oneof" json:"FStockId,omitempty"`
	FStockStatusId   *KingdeeFNumberResponse `protobuf:"bytes,8,opt,name=FStockStatusId,proto3,oneof" json:"FStockStatusId,omitempty"`
	FRealQty         *float64                `protobuf:"fixed64,9,opt,name=FRealQty,proto3,oneof" json:"FRealQty,omitempty"`
	FTaxPrice        *float64                `protobuf:"fixed64,10,opt,name=FTaxPrice,proto3,oneof" json:"FTaxPrice,omitempty"`
	SpecNo           *string                 `protobuf:"bytes,11,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsNo          *string                 `protobuf:"bytes,12,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName        *string                 `protobuf:"bytes,13,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	LineQty          *int32                  `protobuf:"varint,14,opt,name=line_qty,json=lineQty,proto3,oneof" json:"line_qty,omitempty"`
	LineAmount       *float64                `protobuf:"fixed64,15,opt,name=line_amount,json=lineAmount,proto3,oneof" json:"line_amount,omitempty"`
	Paid             *float64                `protobuf:"fixed64,16,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SubOrderNoList   *string                 `protobuf:"bytes,17,opt,name=sub_order_no_list,json=subOrderNoList,proto3,oneof" json:"sub_order_no_list,omitempty"`
	SubServiceNoList *string                 `protobuf:"bytes,18,opt,name=sub_service_no_list,json=subServiceNoList,proto3,oneof" json:"sub_service_no_list,omitempty"`
	SubTradeNoList   *string                 `protobuf:"bytes,19,opt,name=sub_trade_no_list,json=subTradeNoList,proto3,oneof" json:"sub_trade_no_list,omitempty"`
	SubSrcTidsList   *string                 `protobuf:"bytes,20,opt,name=sub_src_tids_list,json=subSrcTidsList,proto3,oneof" json:"sub_src_tids_list,omitempty"`
	FIsFree          *bool                   `protobuf:"varint,21,opt,name=FIsFree,proto3,oneof" json:"FIsFree,omitempty"`
	FOwnerTypeId     *string                 `protobuf:"bytes,22,opt,name=FOwnerTypeId,proto3,oneof" json:"FOwnerTypeId,omitempty"`
	FDeliveryDate    *string                 `protobuf:"bytes,23,opt,name=FDeliveryDate,proto3,oneof" json:"FDeliveryDate,omitempty"`
}

func (x *SwapKingdeeSalReturnStockEntityResponse) Reset() {
	*x = SwapKingdeeSalReturnStockEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalReturnStockEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalReturnStockEntityResponse) ProtoMessage() {}

func (x *SwapKingdeeSalReturnStockEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalReturnStockEntityResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalReturnStockEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{297}
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFEntryID() int32 {
	if x != nil && x.FEntryID != nil {
		return *x.FEntryID
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFMaterialID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FMaterialID
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFUnitID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FUnitID
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFReturnType() *KingdeeFNumberResponse {
	if x != nil {
		return x.FReturnType
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFOwnerId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerId
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFStockId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockId
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFStockStatusId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockStatusId
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFRealQty() float64 {
	if x != nil && x.FRealQty != nil {
		return *x.FRealQty
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFTaxPrice() float64 {
	if x != nil && x.FTaxPrice != nil {
		return *x.FTaxPrice
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetLineQty() int32 {
	if x != nil && x.LineQty != nil {
		return *x.LineQty
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetLineAmount() float64 {
	if x != nil && x.LineAmount != nil {
		return *x.LineAmount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetSubOrderNoList() string {
	if x != nil && x.SubOrderNoList != nil {
		return *x.SubOrderNoList
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetSubServiceNoList() string {
	if x != nil && x.SubServiceNoList != nil {
		return *x.SubServiceNoList
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetSubTradeNoList() string {
	if x != nil && x.SubTradeNoList != nil {
		return *x.SubTradeNoList
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetSubSrcTidsList() string {
	if x != nil && x.SubSrcTidsList != nil {
		return *x.SubSrcTidsList
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFIsFree() bool {
	if x != nil && x.FIsFree != nil {
		return *x.FIsFree
	}
	return false
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFOwnerTypeId() string {
	if x != nil && x.FOwnerTypeId != nil {
		return *x.FOwnerTypeId
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockEntityResponse) GetFDeliveryDate() string {
	if x != nil && x.FDeliveryDate != nil {
		return *x.FDeliveryDate
	}
	return ""
}

type SwapKingdeeSalReturnStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SwapKingdeeSalReturnStockResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SwapKingdeeSalReturnStockListResponse) Reset() {
	*x = SwapKingdeeSalReturnStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalReturnStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalReturnStockListResponse) ProtoMessage() {}

func (x *SwapKingdeeSalReturnStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalReturnStockListResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalReturnStockListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{298}
}

func (x *SwapKingdeeSalReturnStockListResponse) GetResults() []*SwapKingdeeSalReturnStockResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SwapKingdeeSalReturnStockModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FBillNo          *string                                    `protobuf:"bytes,1,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	XId              *string                                    `protobuf:"bytes,2,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	FID              *int32                                     `protobuf:"varint,3,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FBillTypeID      *KingdeeFNumberResponse                    `protobuf:"bytes,4,opt,name=FBillTypeID,proto3,oneof" json:"FBillTypeID,omitempty"`
	FReturnReason    *KingdeeFNumberResponse                    `protobuf:"bytes,5,opt,name=FReturnReason,proto3,oneof" json:"FReturnReason,omitempty"`
	FSaleOrgId       *KingdeeFNumberResponse                    `protobuf:"bytes,6,opt,name=FSaleOrgId,proto3,oneof" json:"FSaleOrgId,omitempty"`
	FTransferBizType *KingdeeFNumberResponse                    `protobuf:"bytes,7,opt,name=FTransferBizType,proto3,oneof" json:"FTransferBizType,omitempty"`
	FStockOrgId      *KingdeeFNumberResponse                    `protobuf:"bytes,8,opt,name=FStockOrgId,proto3,oneof" json:"FStockOrgId,omitempty"`
	FOwnerIdHead     *KingdeeFNumberResponse                    `protobuf:"bytes,9,opt,name=FOwnerIdHead,proto3,oneof" json:"FOwnerIdHead,omitempty"`
	FZBStockID       *KingdeeFNumberResponse                    `protobuf:"bytes,10,opt,name=FZBStockID,proto3,oneof" json:"FZBStockID,omitempty"`
	FProp2           *KingdeeFNumberResponse                    `protobuf:"bytes,11,opt,name=FProp2,proto3,oneof" json:"FProp2,omitempty"`
	FEntity          []*SwapKingdeeSalReturnStockEntityResponse `protobuf:"bytes,12,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	SubHeadEntity    *KingdeeSettleEntityResponse               `protobuf:"bytes,13,opt,name=SubHeadEntity,proto3,oneof" json:"SubHeadEntity,omitempty"`
	FHeadNote        *string                                    `protobuf:"bytes,14,opt,name=FHeadNote,proto3,oneof" json:"FHeadNote,omitempty"`
	FDate            *string                                    `protobuf:"bytes,15,opt,name=FDate,proto3,oneof" json:"FDate,omitempty"`
	FRetCustId       *string                                    `protobuf:"bytes,16,opt,name=FRetCustId,proto3,oneof" json:"FRetCustId,omitempty"`
	FOwnerTypeIdHead *string                                    `protobuf:"bytes,17,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
}

func (x *SwapKingdeeSalReturnStockModelResponse) Reset() {
	*x = SwapKingdeeSalReturnStockModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalReturnStockModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalReturnStockModelResponse) ProtoMessage() {}

func (x *SwapKingdeeSalReturnStockModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalReturnStockModelResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalReturnStockModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{299}
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFID() int32 {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFBillTypeID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FBillTypeID
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFReturnReason() *KingdeeFNumberResponse {
	if x != nil {
		return x.FReturnReason
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFSaleOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FSaleOrgId
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFTransferBizType() *KingdeeFNumberResponse {
	if x != nil {
		return x.FTransferBizType
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFStockOrgId() *KingdeeFNumberResponse {
	if x != nil {
		return x.FStockOrgId
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFOwnerIdHead() *KingdeeFNumberResponse {
	if x != nil {
		return x.FOwnerIdHead
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFZBStockID() *KingdeeFNumberResponse {
	if x != nil {
		return x.FZBStockID
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFProp2() *KingdeeFNumberResponse {
	if x != nil {
		return x.FProp2
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFEntity() []*SwapKingdeeSalReturnStockEntityResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetSubHeadEntity() *KingdeeSettleEntityResponse {
	if x != nil {
		return x.SubHeadEntity
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFHeadNote() string {
	if x != nil && x.FHeadNote != nil {
		return *x.FHeadNote
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFDate() string {
	if x != nil && x.FDate != nil {
		return *x.FDate
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFRetCustId() string {
	if x != nil && x.FRetCustId != nil {
		return *x.FRetCustId
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockModelResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

type SwapKingdeeSalReturnStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggPushStatusName   *string                                 `protobuf:"bytes,2,opt,name=agg_push_status_name,json=aggPushStatusName,proto3,oneof" json:"agg_push_status_name,omitempty"`
	Model               *SwapKingdeeSalReturnStockModelResponse `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	AggNo               *string                                 `protobuf:"bytes,4,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                                 `protobuf:"bytes,5,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	NeedUpDateFields    *string                                 `protobuf:"bytes,6,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string                                 `protobuf:"bytes,7,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo           *string                                 `protobuf:"bytes,8,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	AggPushStatus       *int32                                  `protobuf:"varint,9,opt,name=agg_push_status,json=aggPushStatus,proto3,oneof" json:"agg_push_status,omitempty"`
	FailureReason       *string                                 `protobuf:"bytes,10,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string                                 `protobuf:"bytes,11,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32                                  `protobuf:"varint,12,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string                                 `protobuf:"bytes,13,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelCode         *int32                                  `protobuf:"varint,14,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	ChannelCodeName     *string                                 `protobuf:"bytes,15,opt,name=channel_code_name,json=channelCodeName,proto3,oneof" json:"channel_code_name,omitempty"`
	ChannelDim          *int32                                  `protobuf:"varint,16,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string                                 `protobuf:"bytes,17,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32                                  `protobuf:"varint,18,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string                                 `protobuf:"bytes,19,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggPeriod           *string                                 `protobuf:"bytes,20,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	AggYear             *int32                                  `protobuf:"varint,21,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth            *int32                                  `protobuf:"varint,22,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek             *int32                                  `protobuf:"varint,23,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay              *int32                                  `protobuf:"varint,24,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
	AggOrganizeNo       *string                                 `protobuf:"bytes,25,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string                                 `protobuf:"bytes,26,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string                                 `protobuf:"bytes,27,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string                                 `protobuf:"bytes,28,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string                                 `protobuf:"bytes,29,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string                                 `protobuf:"bytes,30,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggServiceNo        *string                                 `protobuf:"bytes,31,opt,name=agg_service_no,json=aggServiceNo,proto3,oneof" json:"agg_service_no,omitempty"`
	AggSrcOrder         *string                                 `protobuf:"bytes,32,opt,name=agg_src_order,json=aggSrcOrder,proto3,oneof" json:"agg_src_order,omitempty"`
	AggOrderNo          *string                                 `protobuf:"bytes,33,opt,name=agg_order_no,json=aggOrderNo,proto3,oneof" json:"agg_order_no,omitempty"`
	AggOrderCount       *int32                                  `protobuf:"varint,34,opt,name=agg_order_count,json=aggOrderCount,proto3,oneof" json:"agg_order_count,omitempty"`
	AggGoodsTypeCount   *int32                                  `protobuf:"varint,35,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32                                  `protobuf:"varint,36,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	RefundType          *int32                                  `protobuf:"varint,37,opt,name=refund_type,json=refundType,proto3,oneof" json:"refund_type,omitempty"`
	RefundTypeName      *string                                 `protobuf:"bytes,38,opt,name=refund_type_name,json=refundTypeName,proto3,oneof" json:"refund_type_name,omitempty"`
	AggTotalAmount      *float64                                `protobuf:"fixed64,39,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *float64                                `protobuf:"fixed64,40,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *float64                                `protobuf:"fixed64,41,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *float64                                `protobuf:"fixed64,42,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggRefundAmount     *float64                                `protobuf:"fixed64,43,opt,name=agg_refund_amount,json=aggRefundAmount,proto3,oneof" json:"agg_refund_amount,omitempty"`
	KingdeePushTime     *string                                 `protobuf:"bytes,44,opt,name=kingdee_push_time,json=kingdeePushTime,proto3,oneof" json:"kingdee_push_time,omitempty"`
	CreateTime          *string                                 `protobuf:"bytes,45,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                                 `protobuf:"bytes,46,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *SwapKingdeeSalReturnStockResponse) Reset() {
	*x = SwapKingdeeSalReturnStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKingdeeSalReturnStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKingdeeSalReturnStockResponse) ProtoMessage() {}

func (x *SwapKingdeeSalReturnStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKingdeeSalReturnStockResponse.ProtoReflect.Descriptor instead.
func (*SwapKingdeeSalReturnStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{300}
}

func (x *SwapKingdeeSalReturnStockResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggPushStatusName() string {
	if x != nil && x.AggPushStatusName != nil {
		return *x.AggPushStatusName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetModel() *SwapKingdeeSalReturnStockModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggPushStatus() int32 {
	if x != nil && x.AggPushStatus != nil {
		return *x.AggPushStatus
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetChannelCode() int32 {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetChannelCodeName() string {
	if x != nil && x.ChannelCodeName != nil {
		return *x.ChannelCodeName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggServiceNo() string {
	if x != nil && x.AggServiceNo != nil {
		return *x.AggServiceNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggSrcOrder() string {
	if x != nil && x.AggSrcOrder != nil {
		return *x.AggSrcOrder
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggOrderNo() string {
	if x != nil && x.AggOrderNo != nil {
		return *x.AggOrderNo
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggOrderCount() int32 {
	if x != nil && x.AggOrderCount != nil {
		return *x.AggOrderCount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetRefundType() int32 {
	if x != nil && x.RefundType != nil {
		return *x.RefundType
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetRefundTypeName() string {
	if x != nil && x.RefundTypeName != nil {
		return *x.RefundTypeName
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggTotalAmount() float64 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggDiscountAmount() float64 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggReceivableAmount() float64 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggPaidAmount() float64 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetAggRefundAmount() float64 {
	if x != nil && x.AggRefundAmount != nil {
		return *x.AggRefundAmount
	}
	return 0
}

func (x *SwapKingdeeSalReturnStockResponse) GetKingdeePushTime() string {
	if x != nil && x.KingdeePushTime != nil {
		return *x.KingdeePushTime
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *SwapKingdeeSalReturnStockResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type SyncKdPurchaseReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PurchaseReturnList string `protobuf:"bytes,2,opt,name=purchase_return_list,json=purchaseReturnList,proto3" json:"purchase_return_list,omitempty"`
}

func (x *SyncKdPurchaseReturnRequest) Reset() {
	*x = SyncKdPurchaseReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncKdPurchaseReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncKdPurchaseReturnRequest) ProtoMessage() {}

func (x *SyncKdPurchaseReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncKdPurchaseReturnRequest.ProtoReflect.Descriptor instead.
func (*SyncKdPurchaseReturnRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{301}
}

func (x *SyncKdPurchaseReturnRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SyncKdPurchaseReturnRequest) GetPurchaseReturnList() string {
	if x != nil {
		return x.PurchaseReturnList
	}
	return ""
}

type SyncKdPurchaseReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *SyncKdPurchaseReturnResponse) Reset() {
	*x = SyncKdPurchaseReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncKdPurchaseReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncKdPurchaseReturnResponse) ProtoMessage() {}

func (x *SyncKdPurchaseReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncKdPurchaseReturnResponse.ProtoReflect.Descriptor instead.
func (*SyncKdPurchaseReturnResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{302}
}

func (x *SyncKdPurchaseReturnResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SyncKdPurchaseReturnResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SyncKdPurchaseReturnResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type SyncKdTransferOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TransferOrderList string `protobuf:"bytes,2,opt,name=transfer_order_list,json=transferOrderList,proto3" json:"transfer_order_list,omitempty"`
}

func (x *SyncKdTransferOrderRequest) Reset() {
	*x = SyncKdTransferOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncKdTransferOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncKdTransferOrderRequest) ProtoMessage() {}

func (x *SyncKdTransferOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncKdTransferOrderRequest.ProtoReflect.Descriptor instead.
func (*SyncKdTransferOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{303}
}

func (x *SyncKdTransferOrderRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SyncKdTransferOrderRequest) GetTransferOrderList() string {
	if x != nil {
		return x.TransferOrderList
	}
	return ""
}

type SyncKdTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *SyncKdTransferOrderResponse) Reset() {
	*x = SyncKdTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncKdTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncKdTransferOrderResponse) ProtoMessage() {}

func (x *SyncKdTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncKdTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*SyncKdTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{304}
}

func (x *SyncKdTransferOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SyncKdTransferOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SyncKdTransferOrderResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type TaskProgressDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskProgressDestroyRequest) Reset() {
	*x = TaskProgressDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgressDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgressDestroyRequest) ProtoMessage() {}

func (x *TaskProgressDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgressDestroyRequest.ProtoReflect.Descriptor instead.
func (*TaskProgressDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{305}
}

func (x *TaskProgressDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskProgressListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *TaskProgressListRequest) Reset() {
	*x = TaskProgressListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgressListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgressListRequest) ProtoMessage() {}

func (x *TaskProgressListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgressListRequest.ProtoReflect.Descriptor instead.
func (*TaskProgressListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{306}
}

func (x *TaskProgressListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *TaskProgressListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type TaskProgressListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TaskProgressResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TaskProgressListResponse) Reset() {
	*x = TaskProgressListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgressListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgressListResponse) ProtoMessage() {}

func (x *TaskProgressListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgressListResponse.ProtoReflect.Descriptor instead.
func (*TaskProgressListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{307}
}

func (x *TaskProgressListResponse) GetResults() []*TaskProgressResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TaskProgressListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TaskProgressPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Code                 *int32   `protobuf:"varint,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Progress             *int32   `protobuf:"varint,5,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
	Msg                  *string  `protobuf:"bytes,6,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	SliceStart           *string  `protobuf:"bytes,7,opt,name=slice_start,json=sliceStart,proto3,oneof" json:"slice_start,omitempty"`
	SliceEnd             *string  `protobuf:"bytes,8,opt,name=slice_end,json=sliceEnd,proto3,oneof" json:"slice_end,omitempty"`
	RequireStart         *string  `protobuf:"bytes,9,opt,name=require_start,json=requireStart,proto3,oneof" json:"require_start,omitempty"`
	RequireEnd           *string  `protobuf:"bytes,10,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	FromUuid             string   `protobuf:"bytes,12,opt,name=from_uuid,json=fromUuid,proto3" json:"from_uuid,omitempty"`
	TaskName             string   `protobuf:"bytes,13,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Id                   *int32   `protobuf:"varint,14,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserUuid             string   `protobuf:"bytes,15,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *TaskProgressPartialUpdateRequest) Reset() {
	*x = TaskProgressPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgressPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgressPartialUpdateRequest) ProtoMessage() {}

func (x *TaskProgressPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgressPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaskProgressPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{308}
}

func (x *TaskProgressPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *TaskProgressPartialUpdateRequest) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *TaskProgressPartialUpdateRequest) GetProgress() int32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *TaskProgressPartialUpdateRequest) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *TaskProgressPartialUpdateRequest) GetSliceStart() string {
	if x != nil && x.SliceStart != nil {
		return *x.SliceStart
	}
	return ""
}

func (x *TaskProgressPartialUpdateRequest) GetSliceEnd() string {
	if x != nil && x.SliceEnd != nil {
		return *x.SliceEnd
	}
	return ""
}

func (x *TaskProgressPartialUpdateRequest) GetRequireStart() string {
	if x != nil && x.RequireStart != nil {
		return *x.RequireStart
	}
	return ""
}

func (x *TaskProgressPartialUpdateRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *TaskProgressPartialUpdateRequest) GetFromUuid() string {
	if x != nil {
		return x.FromUuid
	}
	return ""
}

func (x *TaskProgressPartialUpdateRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskProgressPartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskProgressPartialUpdateRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type TaskProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         *int32  `protobuf:"varint,3,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Progress     *int32  `protobuf:"varint,4,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
	Msg          *string `protobuf:"bytes,5,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	SliceStart   *string `protobuf:"bytes,6,opt,name=slice_start,json=sliceStart,proto3,oneof" json:"slice_start,omitempty"`
	SliceEnd     *string `protobuf:"bytes,7,opt,name=slice_end,json=sliceEnd,proto3,oneof" json:"slice_end,omitempty"`
	RequireStart *string `protobuf:"bytes,8,opt,name=require_start,json=requireStart,proto3,oneof" json:"require_start,omitempty"`
	RequireEnd   *string `protobuf:"bytes,9,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	FromUuid     string  `protobuf:"bytes,11,opt,name=from_uuid,json=fromUuid,proto3" json:"from_uuid,omitempty"`
	TaskName     string  `protobuf:"bytes,12,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Id           *int32  `protobuf:"varint,13,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserUuid     string  `protobuf:"bytes,14,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *TaskProgressRequest) Reset() {
	*x = TaskProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgressRequest) ProtoMessage() {}

func (x *TaskProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgressRequest.ProtoReflect.Descriptor instead.
func (*TaskProgressRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{309}
}

func (x *TaskProgressRequest) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *TaskProgressRequest) GetProgress() int32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *TaskProgressRequest) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *TaskProgressRequest) GetSliceStart() string {
	if x != nil && x.SliceStart != nil {
		return *x.SliceStart
	}
	return ""
}

func (x *TaskProgressRequest) GetSliceEnd() string {
	if x != nil && x.SliceEnd != nil {
		return *x.SliceEnd
	}
	return ""
}

func (x *TaskProgressRequest) GetRequireStart() string {
	if x != nil && x.RequireStart != nil {
		return *x.RequireStart
	}
	return ""
}

func (x *TaskProgressRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *TaskProgressRequest) GetFromUuid() string {
	if x != nil {
		return x.FromUuid
	}
	return ""
}

func (x *TaskProgressRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskProgressRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskProgressRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type TaskProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         *int32  `protobuf:"varint,3,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Progress     *int32  `protobuf:"varint,4,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
	Msg          *string `protobuf:"bytes,5,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	UpdateTime   *string `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	SliceStart   *string `protobuf:"bytes,7,opt,name=slice_start,json=sliceStart,proto3,oneof" json:"slice_start,omitempty"`
	SliceEnd     *string `protobuf:"bytes,8,opt,name=slice_end,json=sliceEnd,proto3,oneof" json:"slice_end,omitempty"`
	RequireStart *string `protobuf:"bytes,9,opt,name=require_start,json=requireStart,proto3,oneof" json:"require_start,omitempty"`
	RequireEnd   *string `protobuf:"bytes,10,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	FromUuid     string  `protobuf:"bytes,12,opt,name=from_uuid,json=fromUuid,proto3" json:"from_uuid,omitempty"`
	TaskName     string  `protobuf:"bytes,13,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Id           *int32  `protobuf:"varint,14,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserUuid     string  `protobuf:"bytes,15,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *TaskProgressResponse) Reset() {
	*x = TaskProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgressResponse) ProtoMessage() {}

func (x *TaskProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgressResponse.ProtoReflect.Descriptor instead.
func (*TaskProgressResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{310}
}

func (x *TaskProgressResponse) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *TaskProgressResponse) GetProgress() int32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *TaskProgressResponse) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *TaskProgressResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *TaskProgressResponse) GetSliceStart() string {
	if x != nil && x.SliceStart != nil {
		return *x.SliceStart
	}
	return ""
}

func (x *TaskProgressResponse) GetSliceEnd() string {
	if x != nil && x.SliceEnd != nil {
		return *x.SliceEnd
	}
	return ""
}

func (x *TaskProgressResponse) GetRequireStart() string {
	if x != nil && x.RequireStart != nil {
		return *x.RequireStart
	}
	return ""
}

func (x *TaskProgressResponse) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *TaskProgressResponse) GetFromUuid() string {
	if x != nil {
		return x.FromUuid
	}
	return ""
}

func (x *TaskProgressResponse) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskProgressResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskProgressResponse) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type TaskProgressRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskProgressRetrieveRequest) Reset() {
	*x = TaskProgressRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgressRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgressRetrieveRequest) ProtoMessage() {}

func (x *TaskProgressRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgressRetrieveRequest.ProtoReflect.Descriptor instead.
func (*TaskProgressRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{311}
}

func (x *TaskProgressRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskResultCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId           string  `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName         *string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs         *string `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs       *string `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status           *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker           *string `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType      string  `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding  string  `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback        *string `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
}

func (x *TaskResultCreateRequest) Reset() {
	*x = TaskResultCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultCreateRequest) ProtoMessage() {}

func (x *TaskResultCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultCreateRequest.ProtoReflect.Descriptor instead.
func (*TaskResultCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{312}
}

func (x *TaskResultCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultCreateRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultCreateRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultCreateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultCreateRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultCreateRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultCreateRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

type TaskResultDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskResultDestroyRequest) Reset() {
	*x = TaskResultDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultDestroyRequest) ProtoMessage() {}

func (x *TaskResultDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultDestroyRequest.ProtoReflect.Descriptor instead.
func (*TaskResultDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{313}
}

func (x *TaskResultDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskResultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *TaskResultListRequest) Reset() {
	*x = TaskResultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultListRequest) ProtoMessage() {}

func (x *TaskResultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultListRequest.ProtoReflect.Descriptor instead.
func (*TaskResultListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{314}
}

func (x *TaskResultListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *TaskResultListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type TaskResultListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TaskResultResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TaskResultListResponse) Reset() {
	*x = TaskResultListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultListResponse) ProtoMessage() {}

func (x *TaskResultListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultListResponse.ProtoReflect.Descriptor instead.
func (*TaskResultListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{315}
}

func (x *TaskResultListResponse) GetResults() []*TaskResultResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TaskResultListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TaskResultPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId               string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName             *string  `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName     *string  `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs             *string  `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs           *string  `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status               *string  `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker               *string  `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType          string   `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding      string   `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback            *string  `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,12,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *TaskResultPartialUpdateRequest) Reset() {
	*x = TaskResultPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultPartialUpdateRequest) ProtoMessage() {}

func (x *TaskResultPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaskResultPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{316}
}

func (x *TaskResultPartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultPartialUpdateRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type TaskResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId           string  `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName         *string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs         *string `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs       *string `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status           *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker           *string `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType      string  `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding  string  `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback        *string `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
}

func (x *TaskResultRequest) Reset() {
	*x = TaskResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultRequest) ProtoMessage() {}

func (x *TaskResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultRequest.ProtoReflect.Descriptor instead.
func (*TaskResultRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{317}
}

func (x *TaskResultRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

type TaskResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId           string  `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName         *string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs         *string `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs       *string `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Result           *string `protobuf:"bytes,7,opt,name=result,proto3,oneof" json:"result,omitempty"`
	Status           *string `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker           *string `protobuf:"bytes,9,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType      string  `protobuf:"bytes,10,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding  string  `protobuf:"bytes,11,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	DateCreated      *string `protobuf:"bytes,12,opt,name=date_created,json=dateCreated,proto3,oneof" json:"date_created,omitempty"`
	DateDone         *string `protobuf:"bytes,13,opt,name=date_done,json=dateDone,proto3,oneof" json:"date_done,omitempty"`
	Traceback        *string `protobuf:"bytes,14,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
	Meta             *string `protobuf:"bytes,15,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (x *TaskResultResponse) Reset() {
	*x = TaskResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultResponse) ProtoMessage() {}

func (x *TaskResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultResponse.ProtoReflect.Descriptor instead.
func (*TaskResultResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{318}
}

func (x *TaskResultResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultResponse) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultResponse) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultResponse) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultResponse) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultResponse) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *TaskResultResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultResponse) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultResponse) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultResponse) GetDateCreated() string {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return ""
}

func (x *TaskResultResponse) GetDateDone() string {
	if x != nil && x.DateDone != nil {
		return *x.DateDone
	}
	return ""
}

func (x *TaskResultResponse) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

func (x *TaskResultResponse) GetMeta() string {
	if x != nil && x.Meta != nil {
		return *x.Meta
	}
	return ""
}

type TaskResultRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskResultRetrieveRequest) Reset() {
	*x = TaskResultRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultRetrieveRequest) ProtoMessage() {}

func (x *TaskResultRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultRetrieveRequest.ProtoReflect.Descriptor instead.
func (*TaskResultRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{319}
}

func (x *TaskResultRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskResultUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId               string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName             *string  `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName     *string  `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs             *string  `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs           *string  `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status               *string  `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker               *string  `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType          string   `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding      string   `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback            *string  `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,12,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *TaskResultUpdateRequest) Reset() {
	*x = TaskResultUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultUpdateRequest) ProtoMessage() {}

func (x *TaskResultUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaskResultUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{320}
}

func (x *TaskResultUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultUpdateRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type TaskSigAggAlipayBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PreSliceEnd  *string `protobuf:"bytes,2,opt,name=pre_slice_end,json=preSliceEnd,proto3,oneof" json:"pre_slice_end,omitempty"`
	RequireStart string  `protobuf:"bytes,3,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd   *string `protobuf:"bytes,4,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	AggPeriod    string  `protobuf:"bytes,5,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
}

func (x *TaskSigAggAlipayBillRequest) Reset() {
	*x = TaskSigAggAlipayBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggAlipayBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggAlipayBillRequest) ProtoMessage() {}

func (x *TaskSigAggAlipayBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggAlipayBillRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggAlipayBillRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{321}
}

func (x *TaskSigAggAlipayBillRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggAlipayBillRequest) GetPreSliceEnd() string {
	if x != nil && x.PreSliceEnd != nil {
		return *x.PreSliceEnd
	}
	return ""
}

func (x *TaskSigAggAlipayBillRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *TaskSigAggAlipayBillRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *TaskSigAggAlipayBillRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

type TaskSigAggAlipayBillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigAggAlipayBillResponse) Reset() {
	*x = TaskSigAggAlipayBillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggAlipayBillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggAlipayBillResponse) ProtoMessage() {}

func (x *TaskSigAggAlipayBillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggAlipayBillResponse.ProtoReflect.Descriptor instead.
func (*TaskSigAggAlipayBillResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{322}
}

func (x *TaskSigAggAlipayBillResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigAggAlipayBillResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigAggAlipayBillResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigAggRepairStockoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggPeriod string `protobuf:"bytes,2,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	ConfigNo  string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *TaskSigAggRepairStockoutRequest) Reset() {
	*x = TaskSigAggRepairStockoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggRepairStockoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggRepairStockoutRequest) ProtoMessage() {}

func (x *TaskSigAggRepairStockoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggRepairStockoutRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggRepairStockoutRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{323}
}

func (x *TaskSigAggRepairStockoutRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggRepairStockoutRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *TaskSigAggRepairStockoutRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type TaskSigAggRepairStockoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigAggRepairStockoutResponse) Reset() {
	*x = TaskSigAggRepairStockoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggRepairStockoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggRepairStockoutResponse) ProtoMessage() {}

func (x *TaskSigAggRepairStockoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggRepairStockoutResponse.ProtoReflect.Descriptor instead.
func (*TaskSigAggRepairStockoutResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{324}
}

func (x *TaskSigAggRepairStockoutResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigAggRepairStockoutResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigAggRepairStockoutResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigAggSeedingTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggPeriod string `protobuf:"bytes,2,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	ConfigNo  string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *TaskSigAggSeedingTradeRequest) Reset() {
	*x = TaskSigAggSeedingTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggSeedingTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggSeedingTradeRequest) ProtoMessage() {}

func (x *TaskSigAggSeedingTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggSeedingTradeRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggSeedingTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{325}
}

func (x *TaskSigAggSeedingTradeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggSeedingTradeRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *TaskSigAggSeedingTradeRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type TaskSigAggSeedingTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigAggSeedingTradeResponse) Reset() {
	*x = TaskSigAggSeedingTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggSeedingTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggSeedingTradeResponse) ProtoMessage() {}

func (x *TaskSigAggSeedingTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggSeedingTradeResponse.ProtoReflect.Descriptor instead.
func (*TaskSigAggSeedingTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{326}
}

func (x *TaskSigAggSeedingTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigAggSeedingTradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigAggSeedingTradeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigAggSwapStockinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggPeriod string `protobuf:"bytes,2,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	ConfigNo  string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *TaskSigAggSwapStockinRequest) Reset() {
	*x = TaskSigAggSwapStockinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggSwapStockinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggSwapStockinRequest) ProtoMessage() {}

func (x *TaskSigAggSwapStockinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggSwapStockinRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggSwapStockinRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{327}
}

func (x *TaskSigAggSwapStockinRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggSwapStockinRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *TaskSigAggSwapStockinRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type TaskSigAggSwapStockinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigAggSwapStockinResponse) Reset() {
	*x = TaskSigAggSwapStockinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggSwapStockinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggSwapStockinResponse) ProtoMessage() {}

func (x *TaskSigAggSwapStockinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggSwapStockinResponse.ProtoReflect.Descriptor instead.
func (*TaskSigAggSwapStockinResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{328}
}

func (x *TaskSigAggSwapStockinResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigAggSwapStockinResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigAggSwapStockinResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigAggSwapTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggPeriod string `protobuf:"bytes,2,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	ConfigNo  string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *TaskSigAggSwapTradeRequest) Reset() {
	*x = TaskSigAggSwapTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggSwapTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggSwapTradeRequest) ProtoMessage() {}

func (x *TaskSigAggSwapTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggSwapTradeRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggSwapTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{329}
}

func (x *TaskSigAggSwapTradeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggSwapTradeRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *TaskSigAggSwapTradeRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type TaskSigAggSwapTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigAggSwapTradeResponse) Reset() {
	*x = TaskSigAggSwapTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggSwapTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggSwapTradeResponse) ProtoMessage() {}

func (x *TaskSigAggSwapTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggSwapTradeResponse.ProtoReflect.Descriptor instead.
func (*TaskSigAggSwapTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{330}
}

func (x *TaskSigAggSwapTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigAggSwapTradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigAggSwapTradeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigAggTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TaskSigAggTradeRefundRequest) Reset() {
	*x = TaskSigAggTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggTradeRefundRequest) ProtoMessage() {}

func (x *TaskSigAggTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{331}
}

func (x *TaskSigAggTradeRefundRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type TaskSigAggTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigAggTradeRefundResponse) Reset() {
	*x = TaskSigAggTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggTradeRefundResponse) ProtoMessage() {}

func (x *TaskSigAggTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*TaskSigAggTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{332}
}

func (x *TaskSigAggTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigAggTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigAggTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigAggTradeRefundStockInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggPeriod string  `protobuf:"bytes,2,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	ConfigNo  *string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3,oneof" json:"config_no,omitempty"`
}

func (x *TaskSigAggTradeRefundStockInRequest) Reset() {
	*x = TaskSigAggTradeRefundStockInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggTradeRefundStockInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggTradeRefundStockInRequest) ProtoMessage() {}

func (x *TaskSigAggTradeRefundStockInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggTradeRefundStockInRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggTradeRefundStockInRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{333}
}

func (x *TaskSigAggTradeRefundStockInRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggTradeRefundStockInRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *TaskSigAggTradeRefundStockInRequest) GetConfigNo() string {
	if x != nil && x.ConfigNo != nil {
		return *x.ConfigNo
	}
	return ""
}

type TaskSigAggTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggPeriod string `protobuf:"bytes,1,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
	ConfigNo  string `protobuf:"bytes,2,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
	Uuid      string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TaskSigAggTradeRequest) Reset() {
	*x = TaskSigAggTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggTradeRequest) ProtoMessage() {}

func (x *TaskSigAggTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggTradeRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{334}
}

func (x *TaskSigAggTradeRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

func (x *TaskSigAggTradeRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

func (x *TaskSigAggTradeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type TaskSigAggTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigAggTradeResponse) Reset() {
	*x = TaskSigAggTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggTradeResponse) ProtoMessage() {}

func (x *TaskSigAggTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggTradeResponse.ProtoReflect.Descriptor instead.
func (*TaskSigAggTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{335}
}

func (x *TaskSigAggTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigAggTradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigAggTradeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigAggTransStockOutInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *TaskSigAggTransStockOutInRequest) Reset() {
	*x = TaskSigAggTransStockOutInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggTransStockOutInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggTransStockOutInRequest) ProtoMessage() {}

func (x *TaskSigAggTransStockOutInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggTransStockOutInRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggTransStockOutInRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{336}
}

func (x *TaskSigAggTransStockOutInRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggTransStockOutInRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type TaskSigAggTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggPeriod string `protobuf:"bytes,2,opt,name=agg_period,json=aggPeriod,proto3" json:"agg_period,omitempty"`
}

func (x *TaskSigAggTransferRequest) Reset() {
	*x = TaskSigAggTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigAggTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigAggTransferRequest) ProtoMessage() {}

func (x *TaskSigAggTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigAggTransferRequest.ProtoReflect.Descriptor instead.
func (*TaskSigAggTransferRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{337}
}

func (x *TaskSigAggTransferRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigAggTransferRequest) GetAggPeriod() string {
	if x != nil {
		return x.AggPeriod
	}
	return ""
}

type TaskSigFetchStockinOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PreSliceEnd  *string `protobuf:"bytes,2,opt,name=pre_slice_end,json=preSliceEnd,proto3,oneof" json:"pre_slice_end,omitempty"`
	RequireStart string  `protobuf:"bytes,3,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd   *string `protobuf:"bytes,4,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
}

func (x *TaskSigFetchStockinOrderRequest) Reset() {
	*x = TaskSigFetchStockinOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigFetchStockinOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigFetchStockinOrderRequest) ProtoMessage() {}

func (x *TaskSigFetchStockinOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigFetchStockinOrderRequest.ProtoReflect.Descriptor instead.
func (*TaskSigFetchStockinOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{338}
}

func (x *TaskSigFetchStockinOrderRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigFetchStockinOrderRequest) GetPreSliceEnd() string {
	if x != nil && x.PreSliceEnd != nil {
		return *x.PreSliceEnd
	}
	return ""
}

func (x *TaskSigFetchStockinOrderRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *TaskSigFetchStockinOrderRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

type TaskSigFetchStockinOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigFetchStockinOrderResponse) Reset() {
	*x = TaskSigFetchStockinOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigFetchStockinOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigFetchStockinOrderResponse) ProtoMessage() {}

func (x *TaskSigFetchStockinOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigFetchStockinOrderResponse.ProtoReflect.Descriptor instead.
func (*TaskSigFetchStockinOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{339}
}

func (x *TaskSigFetchStockinOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigFetchStockinOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigFetchStockinOrderResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigFetchTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PreSliceEnd  *string `protobuf:"bytes,2,opt,name=pre_slice_end,json=preSliceEnd,proto3,oneof" json:"pre_slice_end,omitempty"`
	RequireStart string  `protobuf:"bytes,3,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd   *string `protobuf:"bytes,4,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
}

func (x *TaskSigFetchTradeRefundRequest) Reset() {
	*x = TaskSigFetchTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigFetchTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigFetchTradeRefundRequest) ProtoMessage() {}

func (x *TaskSigFetchTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigFetchTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*TaskSigFetchTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{340}
}

func (x *TaskSigFetchTradeRefundRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigFetchTradeRefundRequest) GetPreSliceEnd() string {
	if x != nil && x.PreSliceEnd != nil {
		return *x.PreSliceEnd
	}
	return ""
}

func (x *TaskSigFetchTradeRefundRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *TaskSigFetchTradeRefundRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

type TaskSigFetchTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigFetchTradeRefundResponse) Reset() {
	*x = TaskSigFetchTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigFetchTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigFetchTradeRefundResponse) ProtoMessage() {}

func (x *TaskSigFetchTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigFetchTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*TaskSigFetchTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{341}
}

func (x *TaskSigFetchTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigFetchTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigFetchTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigFetchWdtTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RequireStart string  `protobuf:"bytes,2,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd   *string `protobuf:"bytes,3,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	PreSliceEnd  *string `protobuf:"bytes,4,opt,name=pre_slice_end,json=preSliceEnd,proto3,oneof" json:"pre_slice_end,omitempty"`
}

func (x *TaskSigFetchWdtTradeRequest) Reset() {
	*x = TaskSigFetchWdtTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigFetchWdtTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigFetchWdtTradeRequest) ProtoMessage() {}

func (x *TaskSigFetchWdtTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigFetchWdtTradeRequest.ProtoReflect.Descriptor instead.
func (*TaskSigFetchWdtTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{342}
}

func (x *TaskSigFetchWdtTradeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigFetchWdtTradeRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *TaskSigFetchWdtTradeRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *TaskSigFetchWdtTradeRequest) GetPreSliceEnd() string {
	if x != nil && x.PreSliceEnd != nil {
		return *x.PreSliceEnd
	}
	return ""
}

type TaskSigFetchWdtTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigFetchWdtTradeResponse) Reset() {
	*x = TaskSigFetchWdtTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigFetchWdtTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigFetchWdtTradeResponse) ProtoMessage() {}

func (x *TaskSigFetchWdtTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigFetchWdtTradeResponse.ProtoReflect.Descriptor instead.
func (*TaskSigFetchWdtTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{343}
}

func (x *TaskSigFetchWdtTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigFetchWdtTradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigFetchWdtTradeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigMatchTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RefundList []string `protobuf:"bytes,2,rep,name=refund_list,json=refundList,proto3" json:"refund_list,omitempty"`
}

func (x *TaskSigMatchTradeRefundRequest) Reset() {
	*x = TaskSigMatchTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigMatchTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigMatchTradeRefundRequest) ProtoMessage() {}

func (x *TaskSigMatchTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigMatchTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*TaskSigMatchTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{344}
}

func (x *TaskSigMatchTradeRefundRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigMatchTradeRefundRequest) GetRefundList() []string {
	if x != nil {
		return x.RefundList
	}
	return nil
}

type TaskSigMatchTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigMatchTradeRefundResponse) Reset() {
	*x = TaskSigMatchTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigMatchTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigMatchTradeRefundResponse) ProtoMessage() {}

func (x *TaskSigMatchTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigMatchTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*TaskSigMatchTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{345}
}

func (x *TaskSigMatchTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigMatchTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigMatchTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigPushTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList string `protobuf:"bytes,2,opt,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *TaskSigPushTradeRefundRequest) Reset() {
	*x = TaskSigPushTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigPushTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigPushTradeRefundRequest) ProtoMessage() {}

func (x *TaskSigPushTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigPushTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*TaskSigPushTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{346}
}

func (x *TaskSigPushTradeRefundRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigPushTradeRefundRequest) GetAggNoList() string {
	if x != nil {
		return x.AggNoList
	}
	return ""
}

type TaskSigPushTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskSigPushTradeRefundResponse) Reset() {
	*x = TaskSigPushTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigPushTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigPushTradeRefundResponse) ProtoMessage() {}

func (x *TaskSigPushTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigPushTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*TaskSigPushTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{347}
}

func (x *TaskSigPushTradeRefundResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskSigPushTradeRefundResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TaskSigPushTradeRefundResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TaskSigPushTransStockInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *TaskSigPushTransStockInRequest) Reset() {
	*x = TaskSigPushTransStockInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigPushTransStockInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigPushTransStockInRequest) ProtoMessage() {}

func (x *TaskSigPushTransStockInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigPushTransStockInRequest.ProtoReflect.Descriptor instead.
func (*TaskSigPushTransStockInRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{348}
}

func (x *TaskSigPushTransStockInRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigPushTransStockInRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type TaskSigPushTransStockOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *TaskSigPushTransStockOutRequest) Reset() {
	*x = TaskSigPushTransStockOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigPushTransStockOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigPushTransStockOutRequest) ProtoMessage() {}

func (x *TaskSigPushTransStockOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigPushTransStockOutRequest.ProtoReflect.Descriptor instead.
func (*TaskSigPushTransStockOutRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{349}
}

func (x *TaskSigPushTransStockOutRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigPushTransStockOutRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type TaskSigPushTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList []string `protobuf:"bytes,2,rep,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *TaskSigPushTransferRequest) Reset() {
	*x = TaskSigPushTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSigPushTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSigPushTransferRequest) ProtoMessage() {}

func (x *TaskSigPushTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSigPushTransferRequest.ProtoReflect.Descriptor instead.
func (*TaskSigPushTransferRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{350}
}

func (x *TaskSigPushTransferRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskSigPushTransferRequest) GetAggNoList() []string {
	if x != nil {
		return x.AggNoList
	}
	return nil
}

type TransferCreateOptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OuterNo         string                          `protobuf:"bytes,1,opt,name=outer_no,json=outerNo,proto3" json:"outer_no,omitempty"`
	SourceFrom      string                          `protobuf:"bytes,2,opt,name=source_from,json=sourceFrom,proto3" json:"source_from,omitempty"`
	FromWarehouseNo string                          `protobuf:"bytes,3,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3" json:"from_warehouse_no,omitempty"`
	ToWarehouseNo   string                          `protobuf:"bytes,4,opt,name=to_warehouse_no,json=toWarehouseNo,proto3" json:"to_warehouse_no,omitempty"`
	Remark          string                          `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
	TransferType    *int32                          `protobuf:"varint,6,opt,name=transfer_type,json=transferType,proto3,oneof" json:"transfer_type,omitempty"`
	Mode            *int32                          `protobuf:"varint,7,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	Autocheck       *int32                          `protobuf:"varint,8,opt,name=autocheck,proto3,oneof" json:"autocheck,omitempty"`
	Skus            []*TransferCreateSKUOptsRequest `protobuf:"bytes,9,rep,name=skus,proto3" json:"skus,omitempty"`
}

func (x *TransferCreateOptsRequest) Reset() {
	*x = TransferCreateOptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCreateOptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCreateOptsRequest) ProtoMessage() {}

func (x *TransferCreateOptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCreateOptsRequest.ProtoReflect.Descriptor instead.
func (*TransferCreateOptsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{351}
}

func (x *TransferCreateOptsRequest) GetOuterNo() string {
	if x != nil {
		return x.OuterNo
	}
	return ""
}

func (x *TransferCreateOptsRequest) GetSourceFrom() string {
	if x != nil {
		return x.SourceFrom
	}
	return ""
}

func (x *TransferCreateOptsRequest) GetFromWarehouseNo() string {
	if x != nil {
		return x.FromWarehouseNo
	}
	return ""
}

func (x *TransferCreateOptsRequest) GetToWarehouseNo() string {
	if x != nil {
		return x.ToWarehouseNo
	}
	return ""
}

func (x *TransferCreateOptsRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TransferCreateOptsRequest) GetTransferType() int32 {
	if x != nil && x.TransferType != nil {
		return *x.TransferType
	}
	return 0
}

func (x *TransferCreateOptsRequest) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *TransferCreateOptsRequest) GetAutocheck() int32 {
	if x != nil && x.Autocheck != nil {
		return *x.Autocheck
	}
	return 0
}

func (x *TransferCreateOptsRequest) GetSkus() []*TransferCreateSKUOptsRequest {
	if x != nil {
		return x.Skus
	}
	return nil
}

type TransferCreateSKUOptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecNo         string `protobuf:"bytes,1,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	FromPositionNo string `protobuf:"bytes,2,opt,name=from_position_no,json=fromPositionNo,proto3" json:"from_position_no,omitempty"`
	ToPositionNo   string `protobuf:"bytes,3,opt,name=to_position_no,json=toPositionNo,proto3" json:"to_position_no,omitempty"`
	Num            int32  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Remark         string `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *TransferCreateSKUOptsRequest) Reset() {
	*x = TransferCreateSKUOptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCreateSKUOptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCreateSKUOptsRequest) ProtoMessage() {}

func (x *TransferCreateSKUOptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCreateSKUOptsRequest.ProtoReflect.Descriptor instead.
func (*TransferCreateSKUOptsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{352}
}

func (x *TransferCreateSKUOptsRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *TransferCreateSKUOptsRequest) GetFromPositionNo() string {
	if x != nil {
		return x.FromPositionNo
	}
	return ""
}

func (x *TransferCreateSKUOptsRequest) GetToPositionNo() string {
	if x != nil {
		return x.ToPositionNo
	}
	return ""
}

func (x *TransferCreateSKUOptsRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TransferCreateSKUOptsRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type TransferOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      []*LabelNumberValueResponse     `protobuf:"bytes,1,rep,name=type,proto3" json:"type,omitempty"`
	Mode      []*LabelNumberValueResponse     `protobuf:"bytes,2,rep,name=mode,proto3" json:"mode,omitempty"`
	Status    []*LabelNumberValueResponse     `protobuf:"bytes,3,rep,name=status,proto3" json:"status,omitempty"`
	WmsStatus []*LabelNumberValueResponse     `protobuf:"bytes,4,rep,name=wms_status,json=wmsStatus,proto3" json:"wms_status,omitempty"`
	StockOut  *TransferStockoutOptionResponse `protobuf:"bytes,5,opt,name=stock_out,json=stockOut,proto3" json:"stock_out,omitempty"`
	StockIn   *TransferStockinOptionResponse  `protobuf:"bytes,6,opt,name=stock_in,json=stockIn,proto3" json:"stock_in,omitempty"`
}

func (x *TransferOptionResponse) Reset() {
	*x = TransferOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOptionResponse) ProtoMessage() {}

func (x *TransferOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOptionResponse.ProtoReflect.Descriptor instead.
func (*TransferOptionResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{353}
}

func (x *TransferOptionResponse) GetType() []*LabelNumberValueResponse {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TransferOptionResponse) GetMode() []*LabelNumberValueResponse {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *TransferOptionResponse) GetStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransferOptionResponse) GetWmsStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.WmsStatus
	}
	return nil
}

func (x *TransferOptionResponse) GetStockOut() *TransferStockoutOptionResponse {
	if x != nil {
		return x.StockOut
	}
	return nil
}

func (x *TransferOptionResponse) GetStockIn() *TransferStockinOptionResponse {
	if x != nil {
		return x.StockIn
	}
	return nil
}

type TransferStockinOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	PushKingdeeStatus []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=push_kingdee_status,json=pushKingdeeStatus,proto3" json:"push_kingdee_status,omitempty"`
	SrcOrderType      []*LabelNumberValueResponse `protobuf:"bytes,3,rep,name=src_order_type,json=srcOrderType,proto3" json:"src_order_type,omitempty"`
}

func (x *TransferStockinOptionResponse) Reset() {
	*x = TransferStockinOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStockinOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStockinOptionResponse) ProtoMessage() {}

func (x *TransferStockinOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStockinOptionResponse.ProtoReflect.Descriptor instead.
func (*TransferStockinOptionResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{354}
}

func (x *TransferStockinOptionResponse) GetStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransferStockinOptionResponse) GetPushKingdeeStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.PushKingdeeStatus
	}
	return nil
}

func (x *TransferStockinOptionResponse) GetSrcOrderType() []*LabelNumberValueResponse {
	if x != nil {
		return x.SrcOrderType
	}
	return nil
}

type TransferStockoutOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	PushKingdeeStatus []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=push_kingdee_status,json=pushKingdeeStatus,proto3" json:"push_kingdee_status,omitempty"`
}

func (x *TransferStockoutOptionResponse) Reset() {
	*x = TransferStockoutOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStockoutOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStockoutOptionResponse) ProtoMessage() {}

func (x *TransferStockoutOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStockoutOptionResponse.ProtoReflect.Descriptor instead.
func (*TransferStockoutOptionResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{355}
}

func (x *TransferStockoutOptionResponse) GetStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransferStockoutOptionResponse) GetPushKingdeeStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.PushKingdeeStatus
	}
	return nil
}

type VasOrderAggListRepairKingdeeStkMisDeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *VasOrderAggListRepairKingdeeStkMisDeliveryRequest) Reset() {
	*x = VasOrderAggListRepairKingdeeStkMisDeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VasOrderAggListRepairKingdeeStkMisDeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VasOrderAggListRepairKingdeeStkMisDeliveryRequest) ProtoMessage() {}

func (x *VasOrderAggListRepairKingdeeStkMisDeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VasOrderAggListRepairKingdeeStkMisDeliveryRequest.ProtoReflect.Descriptor instead.
func (*VasOrderAggListRepairKingdeeStkMisDeliveryRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{356}
}

func (x *VasOrderAggListRepairKingdeeStkMisDeliveryRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *VasOrderAggListRepairKingdeeStkMisDeliveryRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type VasOrderAggListSeedingKingdeeStkTransferDirectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *VasOrderAggListSeedingKingdeeStkTransferDirectRequest) Reset() {
	*x = VasOrderAggListSeedingKingdeeStkTransferDirectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VasOrderAggListSeedingKingdeeStkTransferDirectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VasOrderAggListSeedingKingdeeStkTransferDirectRequest) ProtoMessage() {}

func (x *VasOrderAggListSeedingKingdeeStkTransferDirectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VasOrderAggListSeedingKingdeeStkTransferDirectRequest.ProtoReflect.Descriptor instead.
func (*VasOrderAggListSeedingKingdeeStkTransferDirectRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{357}
}

func (x *VasOrderAggListSeedingKingdeeStkTransferDirectRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *VasOrderAggListSeedingKingdeeStkTransferDirectRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type VasOrderAggListSwapKingdeeSalOutStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *VasOrderAggListSwapKingdeeSalOutStockRequest) Reset() {
	*x = VasOrderAggListSwapKingdeeSalOutStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VasOrderAggListSwapKingdeeSalOutStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VasOrderAggListSwapKingdeeSalOutStockRequest) ProtoMessage() {}

func (x *VasOrderAggListSwapKingdeeSalOutStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VasOrderAggListSwapKingdeeSalOutStockRequest.ProtoReflect.Descriptor instead.
func (*VasOrderAggListSwapKingdeeSalOutStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{358}
}

func (x *VasOrderAggListSwapKingdeeSalOutStockRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *VasOrderAggListSwapKingdeeSalOutStockRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type VasOrderAggListSwapKingdeeSalReturnStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *VasOrderAggListSwapKingdeeSalReturnStockRequest) Reset() {
	*x = VasOrderAggListSwapKingdeeSalReturnStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VasOrderAggListSwapKingdeeSalReturnStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VasOrderAggListSwapKingdeeSalReturnStockRequest) ProtoMessage() {}

func (x *VasOrderAggListSwapKingdeeSalReturnStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VasOrderAggListSwapKingdeeSalReturnStockRequest.ProtoReflect.Descriptor instead.
func (*VasOrderAggListSwapKingdeeSalReturnStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{359}
}

func (x *VasOrderAggListSwapKingdeeSalReturnStockRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *VasOrderAggListSwapKingdeeSalReturnStockRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brand        []*LabelValueResponse       `protobuf:"bytes,1,rep,name=brand,proto3" json:"brand,omitempty"`
	BusinessType []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
}

func (x *WdtOptionResponse) Reset() {
	*x = WdtOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtOptionResponse) ProtoMessage() {}

func (x *WdtOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtOptionResponse.ProtoReflect.Descriptor instead.
func (*WdtOptionResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{360}
}

func (x *WdtOptionResponse) GetBrand() []*LabelValueResponse {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *WdtOptionResponse) GetBusinessType() []*LabelNumberValueResponse {
	if x != nil {
		return x.BusinessType
	}
	return nil
}

type WdtPurchaseOrderDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *WdtPurchaseOrderDestroyRequest) Reset() {
	*x = WdtPurchaseOrderDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderDestroyRequest) ProtoMessage() {}

func (x *WdtPurchaseOrderDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderDestroyRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{361}
}

func (x *WdtPurchaseOrderDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type WdtPurchaseOrderDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId           *int32   `protobuf:"varint,2,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	PurchaseId      *int32   `protobuf:"varint,3,opt,name=purchase_id,json=purchaseId,proto3,oneof" json:"purchase_id,omitempty"`
	SpecNo          *string  `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	BrandName       *string  `protobuf:"bytes,5,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	Num             *float64 `protobuf:"fixed64,6,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Price           *float64 `protobuf:"fixed64,7,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Discount        *float64 `protobuf:"fixed64,8,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	Tax             *float64 `protobuf:"fixed64,9,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TaxPrice        *float64 `protobuf:"fixed64,10,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	TaxAmount       *float64 `protobuf:"fixed64,11,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	Amount          *float64 `protobuf:"fixed64,12,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	StockinAmount   *float64 `protobuf:"fixed64,13,opt,name=stockin_amount,json=stockinAmount,proto3,oneof" json:"stockin_amount,omitempty"`
	StockinNum      *float64 `protobuf:"fixed64,14,opt,name=stockin_num,json=stockinNum,proto3,oneof" json:"stockin_num,omitempty"`
	Prop1           *string  `protobuf:"bytes,15,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2           *string  `protobuf:"bytes,16,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Remark          *string  `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified        *string  `protobuf:"bytes,18,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ProviderGoodsNo *string  `protobuf:"bytes,19,opt,name=provider_goods_no,json=providerGoodsNo,proto3,oneof" json:"provider_goods_no,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,20,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName       *string  `protobuf:"bytes,21,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	ShortName       *string  `protobuf:"bytes,22,opt,name=short_name,json=shortName,proto3,oneof" json:"short_name,omitempty"`
	SpecName        *string  `protobuf:"bytes,23,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode        *string  `protobuf:"bytes,24,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	BaseUnit        *string  `protobuf:"bytes,25,opt,name=base_unit,json=baseUnit,proto3,oneof" json:"base_unit,omitempty"`
	PurchaseUnit    *string  `protobuf:"bytes,26,opt,name=purchase_unit,json=purchaseUnit,proto3,oneof" json:"purchase_unit,omitempty"`
	ArriveNum       *float64 `protobuf:"fixed64,27,opt,name=arrive_num,json=arriveNum,proto3,oneof" json:"arrive_num,omitempty"`
	StopwaitNum     *float64 `protobuf:"fixed64,28,opt,name=stopwait_num,json=stopwaitNum,proto3,oneof" json:"stopwait_num,omitempty"`
	PurchasePrice   *float64 `protobuf:"fixed64,29,opt,name=purchase_price,json=purchasePrice,proto3,oneof" json:"purchase_price,omitempty"`
	LastPrice       *float64 `protobuf:"fixed64,30,opt,name=last_price,json=lastPrice,proto3,oneof" json:"last_price,omitempty"`
	LastSecondPrice *float64 `protobuf:"fixed64,31,opt,name=last_second_price,json=lastSecondPrice,proto3,oneof" json:"last_second_price,omitempty"`
	LowestPrice     *float64 `protobuf:"fixed64,32,opt,name=lowest_price,json=lowestPrice,proto3,oneof" json:"lowest_price,omitempty"`
	Weight          *float64 `protobuf:"fixed64,33,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	ArriveMoreNum   *float64 `protobuf:"fixed64,34,opt,name=arrive_more_num,json=arriveMoreNum,proto3,oneof" json:"arrive_more_num,omitempty"`
	LackNum         *float64 `protobuf:"fixed64,35,opt,name=lack_num,json=lackNum,proto3,oneof" json:"lack_num,omitempty"`
	SpecId          *int32   `protobuf:"varint,36,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	WarehouseId     *int32   `protobuf:"varint,37,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	Tag             *int32   `protobuf:"varint,38,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	Num2            *float64 `protobuf:"fixed64,39,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	UnitRatio       *float64 `protobuf:"fixed64,40,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	UnitId          *int32   `protobuf:"varint,41,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId      *int32   `protobuf:"varint,42,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	Created         *string  `protobuf:"bytes,43,opt,name=created,proto3,oneof" json:"created,omitempty"`
}

func (x *WdtPurchaseOrderDetailsResponse) Reset() {
	*x = WdtPurchaseOrderDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderDetailsResponse) ProtoMessage() {}

func (x *WdtPurchaseOrderDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderDetailsResponse.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderDetailsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{362}
}

func (x *WdtPurchaseOrderDetailsResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetPurchaseId() int32 {
	if x != nil && x.PurchaseId != nil {
		return *x.PurchaseId
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetStockinAmount() float64 {
	if x != nil && x.StockinAmount != nil {
		return *x.StockinAmount
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetStockinNum() float64 {
	if x != nil && x.StockinNum != nil {
		return *x.StockinNum
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetProviderGoodsNo() string {
	if x != nil && x.ProviderGoodsNo != nil {
		return *x.ProviderGoodsNo
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetBaseUnit() string {
	if x != nil && x.BaseUnit != nil {
		return *x.BaseUnit
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetPurchaseUnit() string {
	if x != nil && x.PurchaseUnit != nil {
		return *x.PurchaseUnit
	}
	return ""
}

func (x *WdtPurchaseOrderDetailsResponse) GetArriveNum() float64 {
	if x != nil && x.ArriveNum != nil {
		return *x.ArriveNum
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetStopwaitNum() float64 {
	if x != nil && x.StopwaitNum != nil {
		return *x.StopwaitNum
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetPurchasePrice() float64 {
	if x != nil && x.PurchasePrice != nil {
		return *x.PurchasePrice
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetLastPrice() float64 {
	if x != nil && x.LastPrice != nil {
		return *x.LastPrice
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetLastSecondPrice() float64 {
	if x != nil && x.LastSecondPrice != nil {
		return *x.LastSecondPrice
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetLowestPrice() float64 {
	if x != nil && x.LowestPrice != nil {
		return *x.LowestPrice
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetArriveMoreNum() float64 {
	if x != nil && x.ArriveMoreNum != nil {
		return *x.ArriveMoreNum
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetLackNum() float64 {
	if x != nil && x.LackNum != nil {
		return *x.LackNum
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetTag() int32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtPurchaseOrderDetailsResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

type WdtPurchaseOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtPurchaseOrderListRequest) Reset() {
	*x = WdtPurchaseOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderListRequest) ProtoMessage() {}

func (x *WdtPurchaseOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderListRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{363}
}

func (x *WdtPurchaseOrderListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtPurchaseOrderListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtPurchaseOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtPurchaseOrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtPurchaseOrderListResponse) Reset() {
	*x = WdtPurchaseOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderListResponse) ProtoMessage() {}

func (x *WdtPurchaseOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderListResponse.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{364}
}

func (x *WdtPurchaseOrderListResponse) GetResults() []*WdtPurchaseOrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtPurchaseOrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtPurchaseOrderPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PurchaseId           *int32   `protobuf:"varint,3,opt,name=purchase_id,json=purchaseId,proto3,oneof" json:"purchase_id,omitempty"`
	PurchaseNo           *string  `protobuf:"bytes,4,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	PurchaseOuterNo      *string  `protobuf:"bytes,5,opt,name=purchase_outer_no,json=purchaseOuterNo,proto3,oneof" json:"purchase_outer_no,omitempty"`
	OuterNo              *string  `protobuf:"bytes,6,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	WarehouseName        *string  `protobuf:"bytes,7,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseNo          *string  `protobuf:"bytes,8,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProviderNo           *string  `protobuf:"bytes,10,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName         *string  `protobuf:"bytes,11,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Contact              *string  `protobuf:"bytes,12,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno                *string  `protobuf:"bytes,13,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	PurchaserName        *string  `protobuf:"bytes,14,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	ReceiveAddress       *string  `protobuf:"bytes,15,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	LogisticsType        *int32   `protobuf:"varint,16,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	CheckTime            *string  `protobuf:"bytes,17,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	GoodsAmount          *float64 `protobuf:"fixed64,18,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostFee              *float64 `protobuf:"fixed64,19,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee             *float64 `protobuf:"fixed64,20,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	TaxGoodsAmount       *float64 `protobuf:"fixed64,21,opt,name=tax_goods_amount,json=taxGoodsAmount,proto3,oneof" json:"tax_goods_amount,omitempty"`
	Remark               *string  `protobuf:"bytes,22,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified             *string  `protobuf:"bytes,23,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Prop1                *string  `protobuf:"bytes,24,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2                *string  `protobuf:"bytes,25,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Created              *string  `protobuf:"bytes,26,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatorId            *int32   `protobuf:"varint,27,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName          *string  `protobuf:"bytes,28,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	WarehouseId          *int32   `protobuf:"varint,29,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ApiOuterNo           *string  `protobuf:"bytes,30,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	WmsOuterNo           *string  `protobuf:"bytes,31,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32   `protobuf:"varint,32,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo            *string  `protobuf:"bytes,33,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	PurchaserId          *int32   `protobuf:"varint,34,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	OrderType            *int32   `protobuf:"varint,35,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	FlagId               *int32   `protobuf:"varint,36,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	ProviderId           *int32   `protobuf:"varint,37,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	CheckOperatorId      *int32   `protobuf:"varint,38,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	FacheckOperatorId    *int32   `protobuf:"varint,39,opt,name=facheck_operator_id,json=facheckOperatorId,proto3,oneof" json:"facheck_operator_id,omitempty"`
	FacheckTime          *string  `protobuf:"bytes,40,opt,name=facheck_time,json=facheckTime,proto3,oneof" json:"facheck_time,omitempty"`
	GoodsFee             *float64 `protobuf:"fixed64,41,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount           *float64 `protobuf:"fixed64,42,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	TaxFee               *float64 `protobuf:"fixed64,43,opt,name=tax_fee,json=taxFee,proto3,oneof" json:"tax_fee,omitempty"`
	GoodsTypeCount       *int32   `protobuf:"varint,44,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsArriveCount     *float64 `protobuf:"fixed64,45,opt,name=goods_arrive_count,json=goodsArriveCount,proto3,oneof" json:"goods_arrive_count,omitempty"`
	RevertReason         *int32   `protobuf:"varint,46,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	VersionId            *int32   `protobuf:"varint,47,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	NoteCount            *int32   `protobuf:"varint,48,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	PropTime1            *string  `protobuf:"bytes,49,opt,name=prop_time1,json=propTime1,proto3,oneof" json:"prop_time1,omitempty"`
	CheckOperatorName    *string  `protobuf:"bytes,50,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	FacheckOperatorName  *string  `protobuf:"bytes,51,opt,name=facheck_operator_name,json=facheckOperatorName,proto3,oneof" json:"facheck_operator_name,omitempty"`
	ExpectArriveTime     *string  `protobuf:"bytes,53,opt,name=expect_arrive_time,json=expectArriveTime,proto3,oneof" json:"expect_arrive_time,omitempty"`
}

func (x *WdtPurchaseOrderPartialUpdateRequest) Reset() {
	*x = WdtPurchaseOrderPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderPartialUpdateRequest) ProtoMessage() {}

func (x *WdtPurchaseOrderPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{365}
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetPurchaseId() int32 {
	if x != nil && x.PurchaseId != nil {
		return *x.PurchaseId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetPurchaseOuterNo() string {
	if x != nil && x.PurchaseOuterNo != nil {
		return *x.PurchaseOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetTaxGoodsAmount() float64 {
	if x != nil && x.TaxGoodsAmount != nil {
		return *x.TaxGoodsAmount
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetFacheckOperatorId() int32 {
	if x != nil && x.FacheckOperatorId != nil {
		return *x.FacheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetFacheckTime() string {
	if x != nil && x.FacheckTime != nil {
		return *x.FacheckTime
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetTaxFee() float64 {
	if x != nil && x.TaxFee != nil {
		return *x.TaxFee
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetGoodsArriveCount() float64 {
	if x != nil && x.GoodsArriveCount != nil {
		return *x.GoodsArriveCount
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetPropTime1() string {
	if x != nil && x.PropTime1 != nil {
		return *x.PropTime1
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetFacheckOperatorName() string {
	if x != nil && x.FacheckOperatorName != nil {
		return *x.FacheckOperatorName
	}
	return ""
}

func (x *WdtPurchaseOrderPartialUpdateRequest) GetExpectArriveTime() string {
	if x != nil && x.ExpectArriveTime != nil {
		return *x.ExpectArriveTime
	}
	return ""
}

type WdtPurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PurchaseId          *int32   `protobuf:"varint,2,opt,name=purchase_id,json=purchaseId,proto3,oneof" json:"purchase_id,omitempty"`
	PurchaseNo          *string  `protobuf:"bytes,3,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	PurchaseOuterNo     *string  `protobuf:"bytes,4,opt,name=purchase_outer_no,json=purchaseOuterNo,proto3,oneof" json:"purchase_outer_no,omitempty"`
	OuterNo             *string  `protobuf:"bytes,5,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	WarehouseName       *string  `protobuf:"bytes,6,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseNo         *string  `protobuf:"bytes,7,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	Status              *int32   `protobuf:"varint,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProviderNo          *string  `protobuf:"bytes,9,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName        *string  `protobuf:"bytes,10,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Contact             *string  `protobuf:"bytes,11,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno               *string  `protobuf:"bytes,12,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	PurchaserName       *string  `protobuf:"bytes,13,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	ReceiveAddress      *string  `protobuf:"bytes,14,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	LogisticsType       *int32   `protobuf:"varint,15,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	CheckTime           *string  `protobuf:"bytes,16,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	GoodsAmount         *float64 `protobuf:"fixed64,17,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostFee             *float64 `protobuf:"fixed64,18,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee            *float64 `protobuf:"fixed64,19,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	TaxGoodsAmount      *float64 `protobuf:"fixed64,20,opt,name=tax_goods_amount,json=taxGoodsAmount,proto3,oneof" json:"tax_goods_amount,omitempty"`
	Remark              *string  `protobuf:"bytes,21,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified            *string  `protobuf:"bytes,22,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Prop1               *string  `protobuf:"bytes,23,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2               *string  `protobuf:"bytes,24,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Created             *string  `protobuf:"bytes,25,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatorId           *int32   `protobuf:"varint,26,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName         *string  `protobuf:"bytes,27,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	WarehouseId         *int32   `protobuf:"varint,28,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ApiOuterNo          *string  `protobuf:"bytes,29,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	WmsOuterNo          *string  `protobuf:"bytes,30,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus           *int32   `protobuf:"varint,31,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo           *string  `protobuf:"bytes,32,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	PurchaserId         *int32   `protobuf:"varint,33,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	OrderType           *int32   `protobuf:"varint,34,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	FlagId              *int32   `protobuf:"varint,35,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	ProviderId          *int32   `protobuf:"varint,36,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	CheckOperatorId     *int32   `protobuf:"varint,37,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	FacheckOperatorId   *int32   `protobuf:"varint,38,opt,name=facheck_operator_id,json=facheckOperatorId,proto3,oneof" json:"facheck_operator_id,omitempty"`
	FacheckTime         *string  `protobuf:"bytes,39,opt,name=facheck_time,json=facheckTime,proto3,oneof" json:"facheck_time,omitempty"`
	GoodsFee            *float64 `protobuf:"fixed64,40,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount          *float64 `protobuf:"fixed64,41,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	TaxFee              *float64 `protobuf:"fixed64,42,opt,name=tax_fee,json=taxFee,proto3,oneof" json:"tax_fee,omitempty"`
	GoodsTypeCount      *int32   `protobuf:"varint,43,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsArriveCount    *float64 `protobuf:"fixed64,44,opt,name=goods_arrive_count,json=goodsArriveCount,proto3,oneof" json:"goods_arrive_count,omitempty"`
	RevertReason        *int32   `protobuf:"varint,45,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	VersionId           *int32   `protobuf:"varint,46,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	NoteCount           *int32   `protobuf:"varint,47,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	PropTime1           *string  `protobuf:"bytes,48,opt,name=prop_time1,json=propTime1,proto3,oneof" json:"prop_time1,omitempty"`
	CheckOperatorName   *string  `protobuf:"bytes,49,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	FacheckOperatorName *string  `protobuf:"bytes,50,opt,name=facheck_operator_name,json=facheckOperatorName,proto3,oneof" json:"facheck_operator_name,omitempty"`
	ExpectArriveTime    *string  `protobuf:"bytes,52,opt,name=expect_arrive_time,json=expectArriveTime,proto3,oneof" json:"expect_arrive_time,omitempty"`
}

func (x *WdtPurchaseOrderRequest) Reset() {
	*x = WdtPurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderRequest) ProtoMessage() {}

func (x *WdtPurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{366}
}

func (x *WdtPurchaseOrderRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetPurchaseId() int32 {
	if x != nil && x.PurchaseId != nil {
		return *x.PurchaseId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetPurchaseOuterNo() string {
	if x != nil && x.PurchaseOuterNo != nil {
		return *x.PurchaseOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetTaxGoodsAmount() float64 {
	if x != nil && x.TaxGoodsAmount != nil {
		return *x.TaxGoodsAmount
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetFacheckOperatorId() int32 {
	if x != nil && x.FacheckOperatorId != nil {
		return *x.FacheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetFacheckTime() string {
	if x != nil && x.FacheckTime != nil {
		return *x.FacheckTime
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetTaxFee() float64 {
	if x != nil && x.TaxFee != nil {
		return *x.TaxFee
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetGoodsArriveCount() float64 {
	if x != nil && x.GoodsArriveCount != nil {
		return *x.GoodsArriveCount
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtPurchaseOrderRequest) GetPropTime1() string {
	if x != nil && x.PropTime1 != nil {
		return *x.PropTime1
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetFacheckOperatorName() string {
	if x != nil && x.FacheckOperatorName != nil {
		return *x.FacheckOperatorName
	}
	return ""
}

func (x *WdtPurchaseOrderRequest) GetExpectArriveTime() string {
	if x != nil && x.ExpectArriveTime != nil {
		return *x.ExpectArriveTime
	}
	return ""
}

type WdtPurchaseOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                            `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	StatusName          *string                            `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3,oneof" json:"status_name,omitempty"`
	DetailsList         []*WdtPurchaseOrderDetailsResponse `protobuf:"bytes,4,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	PurchaseId          *int32                             `protobuf:"varint,5,opt,name=purchase_id,json=purchaseId,proto3,oneof" json:"purchase_id,omitempty"`
	PurchaseNo          *string                            `protobuf:"bytes,6,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	PurchaseOuterNo     *string                            `protobuf:"bytes,7,opt,name=purchase_outer_no,json=purchaseOuterNo,proto3,oneof" json:"purchase_outer_no,omitempty"`
	OuterNo             *string                            `protobuf:"bytes,8,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	WarehouseName       *string                            `protobuf:"bytes,9,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseNo         *string                            `protobuf:"bytes,10,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	Status              *int32                             `protobuf:"varint,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProviderNo          *string                            `protobuf:"bytes,12,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName        *string                            `protobuf:"bytes,13,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Contact             *string                            `protobuf:"bytes,14,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno               *string                            `protobuf:"bytes,15,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	PurchaserName       *string                            `protobuf:"bytes,16,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	ReceiveAddress      *string                            `protobuf:"bytes,17,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	LogisticsType       *int32                             `protobuf:"varint,18,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	CheckTime           *string                            `protobuf:"bytes,19,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	GoodsAmount         *float64                           `protobuf:"fixed64,20,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostFee             *float64                           `protobuf:"fixed64,21,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee            *float64                           `protobuf:"fixed64,22,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	TaxGoodsAmount      *float64                           `protobuf:"fixed64,23,opt,name=tax_goods_amount,json=taxGoodsAmount,proto3,oneof" json:"tax_goods_amount,omitempty"`
	Remark              *string                            `protobuf:"bytes,24,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified            *string                            `protobuf:"bytes,25,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Prop1               *string                            `protobuf:"bytes,26,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2               *string                            `protobuf:"bytes,27,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Created             *string                            `protobuf:"bytes,28,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatorId           *int32                             `protobuf:"varint,29,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName         *string                            `protobuf:"bytes,30,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	WarehouseId         *int32                             `protobuf:"varint,31,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ApiOuterNo          *string                            `protobuf:"bytes,32,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	WmsOuterNo          *string                            `protobuf:"bytes,33,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus           *int32                             `protobuf:"varint,34,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo           *string                            `protobuf:"bytes,35,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	PurchaserId         *int32                             `protobuf:"varint,36,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	OrderType           *int32                             `protobuf:"varint,37,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	FlagId              *int32                             `protobuf:"varint,38,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	ProviderId          *int32                             `protobuf:"varint,39,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	CheckOperatorId     *int32                             `protobuf:"varint,40,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	FacheckOperatorId   *int32                             `protobuf:"varint,41,opt,name=facheck_operator_id,json=facheckOperatorId,proto3,oneof" json:"facheck_operator_id,omitempty"`
	FacheckTime         *string                            `protobuf:"bytes,42,opt,name=facheck_time,json=facheckTime,proto3,oneof" json:"facheck_time,omitempty"`
	GoodsFee            *float64                           `protobuf:"fixed64,43,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount          *float64                           `protobuf:"fixed64,44,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	TaxFee              *float64                           `protobuf:"fixed64,45,opt,name=tax_fee,json=taxFee,proto3,oneof" json:"tax_fee,omitempty"`
	GoodsTypeCount      *int32                             `protobuf:"varint,46,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsArriveCount    *float64                           `protobuf:"fixed64,47,opt,name=goods_arrive_count,json=goodsArriveCount,proto3,oneof" json:"goods_arrive_count,omitempty"`
	RevertReason        *int32                             `protobuf:"varint,48,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	VersionId           *int32                             `protobuf:"varint,49,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	NoteCount           *int32                             `protobuf:"varint,50,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	PropTime1           *string                            `protobuf:"bytes,51,opt,name=prop_time1,json=propTime1,proto3,oneof" json:"prop_time1,omitempty"`
	CheckOperatorName   *string                            `protobuf:"bytes,52,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	FacheckOperatorName *string                            `protobuf:"bytes,53,opt,name=facheck_operator_name,json=facheckOperatorName,proto3,oneof" json:"facheck_operator_name,omitempty"`
	ExpectArriveTime    *string                            `protobuf:"bytes,55,opt,name=expect_arrive_time,json=expectArriveTime,proto3,oneof" json:"expect_arrive_time,omitempty"`
	OrderTypeName       *string                            `protobuf:"bytes,56,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
}

func (x *WdtPurchaseOrderResponse) Reset() {
	*x = WdtPurchaseOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderResponse) ProtoMessage() {}

func (x *WdtPurchaseOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderResponse.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{367}
}

func (x *WdtPurchaseOrderResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetStatusName() string {
	if x != nil && x.StatusName != nil {
		return *x.StatusName
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetDetailsList() []*WdtPurchaseOrderDetailsResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtPurchaseOrderResponse) GetPurchaseId() int32 {
	if x != nil && x.PurchaseId != nil {
		return *x.PurchaseId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetPurchaseOuterNo() string {
	if x != nil && x.PurchaseOuterNo != nil {
		return *x.PurchaseOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetTaxGoodsAmount() float64 {
	if x != nil && x.TaxGoodsAmount != nil {
		return *x.TaxGoodsAmount
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetFacheckOperatorId() int32 {
	if x != nil && x.FacheckOperatorId != nil {
		return *x.FacheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetFacheckTime() string {
	if x != nil && x.FacheckTime != nil {
		return *x.FacheckTime
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetTaxFee() float64 {
	if x != nil && x.TaxFee != nil {
		return *x.TaxFee
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetGoodsArriveCount() float64 {
	if x != nil && x.GoodsArriveCount != nil {
		return *x.GoodsArriveCount
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtPurchaseOrderResponse) GetPropTime1() string {
	if x != nil && x.PropTime1 != nil {
		return *x.PropTime1
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetFacheckOperatorName() string {
	if x != nil && x.FacheckOperatorName != nil {
		return *x.FacheckOperatorName
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetExpectArriveTime() string {
	if x != nil && x.ExpectArriveTime != nil {
		return *x.ExpectArriveTime
	}
	return ""
}

func (x *WdtPurchaseOrderResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

type WdtPurchaseOrderRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *WdtPurchaseOrderRetrieveRequest) Reset() {
	*x = WdtPurchaseOrderRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseOrderRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseOrderRetrieveRequest) ProtoMessage() {}

func (x *WdtPurchaseOrderRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseOrderRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseOrderRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{368}
}

func (x *WdtPurchaseOrderRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type WdtPurchaseReturnDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnId int32 `protobuf:"varint,1,opt,name=return_id,json=returnId,proto3" json:"return_id,omitempty"`
}

func (x *WdtPurchaseReturnDestroyRequest) Reset() {
	*x = WdtPurchaseReturnDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnDestroyRequest) ProtoMessage() {}

func (x *WdtPurchaseReturnDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnDestroyRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{369}
}

func (x *WdtPurchaseReturnDestroyRequest) GetReturnId() int32 {
	if x != nil {
		return x.ReturnId
	}
	return 0
}

type WdtPurchaseReturnDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId           *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	ReturnId        *int32   `protobuf:"varint,2,opt,name=return_id,json=returnId,proto3,oneof" json:"return_id,omitempty"`
	ProviderGoodsNo *string  `protobuf:"bytes,3,opt,name=provider_goods_no,json=providerGoodsNo,proto3,oneof" json:"provider_goods_no,omitempty"`
	SpecNo          *string  `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,5,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName       *string  `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName        *string  `protobuf:"bytes,7,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode        *string  `protobuf:"bytes,8,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Num             *float64 `protobuf:"fixed64,9,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Num2            *float64 `protobuf:"fixed64,10,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	UnitId          *int32   `protobuf:"varint,11,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	UnitRatio       *float64 `protobuf:"fixed64,12,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	BaseUnitId      *int32   `protobuf:"varint,13,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	Price           *float64 `protobuf:"fixed64,14,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Discount        *float64 `protobuf:"fixed64,15,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	Amount          *float64 `protobuf:"fixed64,16,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	UnitName        *string  `protobuf:"bytes,17,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	BaseUnitName    *string  `protobuf:"bytes,18,opt,name=base_unit_name,json=baseUnitName,proto3,oneof" json:"base_unit_name,omitempty"`
	Remark          *string  `protobuf:"bytes,19,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Tax             *float64 `protobuf:"fixed64,20,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TaxAmount       *float64 `protobuf:"fixed64,21,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	SpecId          *int32   `protobuf:"varint,22,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	OutNum          *float64 `protobuf:"fixed64,23,opt,name=out_num,json=outNum,proto3,oneof" json:"out_num,omitempty"`
	OutAmount       *float64 `protobuf:"fixed64,24,opt,name=out_amount,json=outAmount,proto3,oneof" json:"out_amount,omitempty"`
	TaxPrice        *float64 `protobuf:"fixed64,25,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	Modified        *string  `protobuf:"bytes,26,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created         *string  `protobuf:"bytes,27,opt,name=created,proto3,oneof" json:"created,omitempty"`
	BrandName       *string  `protobuf:"bytes,28,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
}

func (x *WdtPurchaseReturnDetailResponse) Reset() {
	*x = WdtPurchaseReturnDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnDetailResponse) ProtoMessage() {}

func (x *WdtPurchaseReturnDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnDetailResponse.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{370}
}

func (x *WdtPurchaseReturnDetailResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetReturnId() int32 {
	if x != nil && x.ReturnId != nil {
		return *x.ReturnId
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetProviderGoodsNo() string {
	if x != nil && x.ProviderGoodsNo != nil {
		return *x.ProviderGoodsNo
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetBaseUnitName() string {
	if x != nil && x.BaseUnitName != nil {
		return *x.BaseUnitName
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetOutNum() float64 {
	if x != nil && x.OutNum != nil {
		return *x.OutNum
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetOutAmount() float64 {
	if x != nil && x.OutAmount != nil {
		return *x.OutAmount
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *WdtPurchaseReturnDetailResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseReturnDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

type WdtPurchaseReturnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtPurchaseReturnListRequest) Reset() {
	*x = WdtPurchaseReturnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnListRequest) ProtoMessage() {}

func (x *WdtPurchaseReturnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnListRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{371}
}

func (x *WdtPurchaseReturnListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtPurchaseReturnListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtPurchaseReturnListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtPurchaseReturnResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtPurchaseReturnListResponse) Reset() {
	*x = WdtPurchaseReturnListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnListResponse) ProtoMessage() {}

func (x *WdtPurchaseReturnListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnListResponse.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{372}
}

func (x *WdtPurchaseReturnListResponse) GetResults() []*WdtPurchaseReturnResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtPurchaseReturnListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtPurchaseReturnLogisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnId      *int32   `protobuf:"varint,1,opt,name=return_id,json=returnId,proto3,oneof" json:"return_id,omitempty"`
	LogisticsName *string  `protobuf:"bytes,2,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo   *string  `protobuf:"bytes,3,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	StockoutNo    *string  `protobuf:"bytes,4,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	Weight        *float64 `protobuf:"fixed64,5,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Shortname     *string  `protobuf:"bytes,6,opt,name=shortname,proto3,oneof" json:"shortname,omitempty"`
	Created       *string  `protobuf:"bytes,7,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Modified      *string  `protobuf:"bytes,8,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
}

func (x *WdtPurchaseReturnLogisticsResponse) Reset() {
	*x = WdtPurchaseReturnLogisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnLogisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnLogisticsResponse) ProtoMessage() {}

func (x *WdtPurchaseReturnLogisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnLogisticsResponse.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnLogisticsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{373}
}

func (x *WdtPurchaseReturnLogisticsResponse) GetReturnId() int32 {
	if x != nil && x.ReturnId != nil {
		return *x.ReturnId
	}
	return 0
}

func (x *WdtPurchaseReturnLogisticsResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtPurchaseReturnLogisticsResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtPurchaseReturnLogisticsResponse) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *WdtPurchaseReturnLogisticsResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtPurchaseReturnLogisticsResponse) GetShortname() string {
	if x != nil && x.Shortname != nil {
		return *x.Shortname
	}
	return ""
}

func (x *WdtPurchaseReturnLogisticsResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseReturnLogisticsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

type WdtPurchaseReturnPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnId             *int32   `protobuf:"varint,1,opt,name=return_id,json=returnId,proto3,oneof" json:"return_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ReturnNo             *string  `protobuf:"bytes,3,opt,name=return_no,json=returnNo,proto3,oneof" json:"return_no,omitempty"`
	ProviderName         *string  `protobuf:"bytes,4,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Status               *int32   `protobuf:"varint,5,opt,name=status,proto3,oneof" json:"status,omitempty"`
	WarehouseNo          *string  `protobuf:"bytes,6,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string  `protobuf:"bytes,7,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	PurchaserId          *int32   `protobuf:"varint,8,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	PurchaserName        *string  `protobuf:"bytes,9,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	LogisticsType        *int32   `protobuf:"varint,10,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	OtherFee             *float64 `protobuf:"fixed64,11,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	PostFee              *float64 `protobuf:"fixed64,12,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	GoodsFee             *float64 `protobuf:"fixed64,13,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount           *float64 `protobuf:"fixed64,14,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount       *int32   `protobuf:"varint,15,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsOutCount        *float64 `protobuf:"fixed64,16,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Remark               *string  `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Created              *string  `protobuf:"bytes,18,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Modified             *string  `protobuf:"bytes,19,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ApiOuterNo           *string  `protobuf:"bytes,20,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	OuterNo              *string  `protobuf:"bytes,21,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	Prop1                *string  `protobuf:"bytes,22,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2                *string  `protobuf:"bytes,23,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	ProviderNo           *string  `protobuf:"bytes,24,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	PurchaseNo           *string  `protobuf:"bytes,25,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	CreatorId            *int32   `protobuf:"varint,26,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName          *string  `protobuf:"bytes,27,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Type                 *int32   `protobuf:"varint,28,opt,name=type,proto3,oneof" json:"type,omitempty"`
	FlagId               *int32   `protobuf:"varint,29,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	WarehouseId          *string  `protobuf:"bytes,30,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ProviderId           *int32   `protobuf:"varint,31,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	Contact              *string  `protobuf:"bytes,32,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno                *string  `protobuf:"bytes,33,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	ReceiveAddress       *string  `protobuf:"bytes,34,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	CheckOperatorId      *int32   `protobuf:"varint,35,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	CheckTime            *string  `protobuf:"bytes,36,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	NoteCount            *int32   `protobuf:"varint,37,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	Province             *string  `protobuf:"bytes,38,opt,name=province,proto3,oneof" json:"province,omitempty"`
	City                 *string  `protobuf:"bytes,39,opt,name=city,proto3,oneof" json:"city,omitempty"`
	District             *string  `protobuf:"bytes,40,opt,name=district,proto3,oneof" json:"district,omitempty"`
	WmsOuterNo           *string  `protobuf:"bytes,41,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32   `protobuf:"varint,42,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo            *string  `protobuf:"bytes,43,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	VersionId            *int32   `protobuf:"varint,44,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	LastLoadPurchaseId   *int32   `protobuf:"varint,45,opt,name=last_load_purchase_id,json=lastLoadPurchaseId,proto3,oneof" json:"last_load_purchase_id,omitempty"`
	CheckOperatorName    *string  `protobuf:"bytes,46,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
}

func (x *WdtPurchaseReturnPartialUpdateRequest) Reset() {
	*x = WdtPurchaseReturnPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnPartialUpdateRequest) ProtoMessage() {}

func (x *WdtPurchaseReturnPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{374}
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetReturnId() int32 {
	if x != nil && x.ReturnId != nil {
		return *x.ReturnId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetReturnNo() string {
	if x != nil && x.ReturnNo != nil {
		return *x.ReturnNo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetWarehouseId() string {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetLastLoadPurchaseId() int32 {
	if x != nil && x.LastLoadPurchaseId != nil {
		return *x.LastLoadPurchaseId
	}
	return 0
}

func (x *WdtPurchaseReturnPartialUpdateRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

type WdtPurchaseReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnId           *int32   `protobuf:"varint,1,opt,name=return_id,json=returnId,proto3,oneof" json:"return_id,omitempty"`
	ReturnNo           *string  `protobuf:"bytes,2,opt,name=return_no,json=returnNo,proto3,oneof" json:"return_no,omitempty"`
	ProviderName       *string  `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Status             *int32   `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	WarehouseNo        *string  `protobuf:"bytes,5,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName      *string  `protobuf:"bytes,6,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	PurchaserId        *int32   `protobuf:"varint,7,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	PurchaserName      *string  `protobuf:"bytes,8,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	LogisticsType      *int32   `protobuf:"varint,9,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	OtherFee           *float64 `protobuf:"fixed64,10,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	PostFee            *float64 `protobuf:"fixed64,11,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	GoodsFee           *float64 `protobuf:"fixed64,12,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount         *float64 `protobuf:"fixed64,13,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount     *int32   `protobuf:"varint,14,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsOutCount      *float64 `protobuf:"fixed64,15,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Remark             *string  `protobuf:"bytes,16,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Created            *string  `protobuf:"bytes,17,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Modified           *string  `protobuf:"bytes,18,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ApiOuterNo         *string  `protobuf:"bytes,19,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	OuterNo            *string  `protobuf:"bytes,20,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	Prop1              *string  `protobuf:"bytes,21,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2              *string  `protobuf:"bytes,22,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	ProviderNo         *string  `protobuf:"bytes,23,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	PurchaseNo         *string  `protobuf:"bytes,24,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	CreatorId          *int32   `protobuf:"varint,25,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName        *string  `protobuf:"bytes,26,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Type               *int32   `protobuf:"varint,27,opt,name=type,proto3,oneof" json:"type,omitempty"`
	FlagId             *int32   `protobuf:"varint,28,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	WarehouseId        *string  `protobuf:"bytes,29,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ProviderId         *int32   `protobuf:"varint,30,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	Contact            *string  `protobuf:"bytes,31,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno              *string  `protobuf:"bytes,32,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	ReceiveAddress     *string  `protobuf:"bytes,33,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	CheckOperatorId    *int32   `protobuf:"varint,34,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	CheckTime          *string  `protobuf:"bytes,35,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	NoteCount          *int32   `protobuf:"varint,36,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	Province           *string  `protobuf:"bytes,37,opt,name=province,proto3,oneof" json:"province,omitempty"`
	City               *string  `protobuf:"bytes,38,opt,name=city,proto3,oneof" json:"city,omitempty"`
	District           *string  `protobuf:"bytes,39,opt,name=district,proto3,oneof" json:"district,omitempty"`
	WmsOuterNo         *string  `protobuf:"bytes,40,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus          *int32   `protobuf:"varint,41,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo          *string  `protobuf:"bytes,42,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	VersionId          *int32   `protobuf:"varint,43,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	LastLoadPurchaseId *int32   `protobuf:"varint,44,opt,name=last_load_purchase_id,json=lastLoadPurchaseId,proto3,oneof" json:"last_load_purchase_id,omitempty"`
	CheckOperatorName  *string  `protobuf:"bytes,45,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
}

func (x *WdtPurchaseReturnRequest) Reset() {
	*x = WdtPurchaseReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnRequest) ProtoMessage() {}

func (x *WdtPurchaseReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{375}
}

func (x *WdtPurchaseReturnRequest) GetReturnId() int32 {
	if x != nil && x.ReturnId != nil {
		return *x.ReturnId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetReturnNo() string {
	if x != nil && x.ReturnNo != nil {
		return *x.ReturnNo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetWarehouseId() string {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtPurchaseReturnRequest) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetLastLoadPurchaseId() int32 {
	if x != nil && x.LastLoadPurchaseId != nil {
		return *x.LastLoadPurchaseId
	}
	return 0
}

func (x *WdtPurchaseReturnRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

type WdtPurchaseReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnId            *int32                                `protobuf:"varint,1,opt,name=return_id,json=returnId,proto3,oneof" json:"return_id,omitempty"`
	DetailList          []*WdtPurchaseReturnDetailResponse    `protobuf:"bytes,2,rep,name=detail_list,json=detailList,proto3" json:"detail_list,omitempty"`
	LogisticsDetailList []*WdtPurchaseReturnLogisticsResponse `protobuf:"bytes,3,rep,name=logistics_detail_list,json=logisticsDetailList,proto3" json:"logistics_detail_list,omitempty"`
	ReturnNo            *string                               `protobuf:"bytes,4,opt,name=return_no,json=returnNo,proto3,oneof" json:"return_no,omitempty"`
	ProviderName        *string                               `protobuf:"bytes,5,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Status              *int32                                `protobuf:"varint,6,opt,name=status,proto3,oneof" json:"status,omitempty"`
	WarehouseNo         *string                               `protobuf:"bytes,7,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName       *string                               `protobuf:"bytes,8,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	PurchaserId         *int32                                `protobuf:"varint,9,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	PurchaserName       *string                               `protobuf:"bytes,10,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	LogisticsType       *int32                                `protobuf:"varint,11,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	OtherFee            *float64                              `protobuf:"fixed64,12,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	PostFee             *float64                              `protobuf:"fixed64,13,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	GoodsFee            *float64                              `protobuf:"fixed64,14,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount          *float64                              `protobuf:"fixed64,15,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount      *int32                                `protobuf:"varint,16,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsOutCount       *float64                              `protobuf:"fixed64,17,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Remark              *string                               `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Created             *string                               `protobuf:"bytes,19,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Modified            *string                               `protobuf:"bytes,20,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ApiOuterNo          *string                               `protobuf:"bytes,21,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	OuterNo             *string                               `protobuf:"bytes,22,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	Prop1               *string                               `protobuf:"bytes,23,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2               *string                               `protobuf:"bytes,24,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	ProviderNo          *string                               `protobuf:"bytes,25,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	PurchaseNo          *string                               `protobuf:"bytes,26,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	CreatorId           *int32                                `protobuf:"varint,27,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName         *string                               `protobuf:"bytes,28,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Type                *int32                                `protobuf:"varint,29,opt,name=type,proto3,oneof" json:"type,omitempty"`
	FlagId              *int32                                `protobuf:"varint,30,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	WarehouseId         *string                               `protobuf:"bytes,31,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ProviderId          *int32                                `protobuf:"varint,32,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	Contact             *string                               `protobuf:"bytes,33,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno               *string                               `protobuf:"bytes,34,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	ReceiveAddress      *string                               `protobuf:"bytes,35,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	CheckOperatorId     *int32                                `protobuf:"varint,36,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	CheckTime           *string                               `protobuf:"bytes,37,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	NoteCount           *int32                                `protobuf:"varint,38,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	Province            *string                               `protobuf:"bytes,39,opt,name=province,proto3,oneof" json:"province,omitempty"`
	City                *string                               `protobuf:"bytes,40,opt,name=city,proto3,oneof" json:"city,omitempty"`
	District            *string                               `protobuf:"bytes,41,opt,name=district,proto3,oneof" json:"district,omitempty"`
	WmsOuterNo          *string                               `protobuf:"bytes,42,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus           *int32                                `protobuf:"varint,43,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo           *string                               `protobuf:"bytes,44,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	VersionId           *int32                                `protobuf:"varint,45,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	LastLoadPurchaseId  *int32                                `protobuf:"varint,46,opt,name=last_load_purchase_id,json=lastLoadPurchaseId,proto3,oneof" json:"last_load_purchase_id,omitempty"`
	CheckOperatorName   *string                               `protobuf:"bytes,47,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	ReturnType          *string                               `protobuf:"bytes,48,opt,name=return_type,json=returnType,proto3,oneof" json:"return_type,omitempty"`
}

func (x *WdtPurchaseReturnResponse) Reset() {
	*x = WdtPurchaseReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnResponse) ProtoMessage() {}

func (x *WdtPurchaseReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnResponse.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{376}
}

func (x *WdtPurchaseReturnResponse) GetReturnId() int32 {
	if x != nil && x.ReturnId != nil {
		return *x.ReturnId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetDetailList() []*WdtPurchaseReturnDetailResponse {
	if x != nil {
		return x.DetailList
	}
	return nil
}

func (x *WdtPurchaseReturnResponse) GetLogisticsDetailList() []*WdtPurchaseReturnLogisticsResponse {
	if x != nil {
		return x.LogisticsDetailList
	}
	return nil
}

func (x *WdtPurchaseReturnResponse) GetReturnNo() string {
	if x != nil && x.ReturnNo != nil {
		return *x.ReturnNo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetWarehouseId() string {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetLastLoadPurchaseId() int32 {
	if x != nil && x.LastLoadPurchaseId != nil {
		return *x.LastLoadPurchaseId
	}
	return 0
}

func (x *WdtPurchaseReturnResponse) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtPurchaseReturnResponse) GetReturnType() string {
	if x != nil && x.ReturnType != nil {
		return *x.ReturnType
	}
	return ""
}

type WdtPurchaseReturnRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnId int32 `protobuf:"varint,1,opt,name=return_id,json=returnId,proto3" json:"return_id,omitempty"`
}

func (x *WdtPurchaseReturnRetrieveRequest) Reset() {
	*x = WdtPurchaseReturnRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtPurchaseReturnRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtPurchaseReturnRetrieveRequest) ProtoMessage() {}

func (x *WdtPurchaseReturnRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtPurchaseReturnRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtPurchaseReturnRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{377}
}

func (x *WdtPurchaseReturnRetrieveRequest) GetReturnId() int32 {
	if x != nil {
		return x.ReturnId
	}
	return 0
}

type WdtShopListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtShopListRequest) Reset() {
	*x = WdtShopListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtShopListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtShopListRequest) ProtoMessage() {}

func (x *WdtShopListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtShopListRequest.ProtoReflect.Descriptor instead.
func (*WdtShopListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{378}
}

func (x *WdtShopListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtShopListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtShopListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtShopResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtShopListResponse) Reset() {
	*x = WdtShopListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtShopListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtShopListResponse) ProtoMessage() {}

func (x *WdtShopListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtShopListResponse.ProtoReflect.Descriptor instead.
func (*WdtShopListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{379}
}

func (x *WdtShopListResponse) GetResults() []*WdtShopResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtShopListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtShopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopCode   string `protobuf:"bytes,1,opt,name=shop_code,json=shopCode,proto3" json:"shop_code,omitempty"`
	ShopName   string `protobuf:"bytes,2,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	PlatformId int32  `protobuf:"varint,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
}

func (x *WdtShopResponse) Reset() {
	*x = WdtShopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtShopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtShopResponse) ProtoMessage() {}

func (x *WdtShopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtShopResponse.ProtoReflect.Descriptor instead.
func (*WdtShopResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{380}
}

func (x *WdtShopResponse) GetShopCode() string {
	if x != nil {
		return x.ShopCode
	}
	return ""
}

func (x *WdtShopResponse) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *WdtShopResponse) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

type WdtStockListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtStockListRequest) Reset() {
	*x = WdtStockListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockListRequest) ProtoMessage() {}

func (x *WdtStockListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockListRequest.ProtoReflect.Descriptor instead.
func (*WdtStockListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{381}
}

func (x *WdtStockListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtStockListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtStockResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtStockListResponse) Reset() {
	*x = WdtStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockListResponse) ProtoMessage() {}

func (x *WdtStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockListResponse.ProtoReflect.Descriptor instead.
func (*WdtStockListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{382}
}

func (x *WdtStockListResponse) GetResults() []*WdtStockResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockCode      string `protobuf:"bytes,1,opt,name=stock_code,json=stockCode,proto3" json:"stock_code,omitempty"`
	StockName      string `protobuf:"bytes,2,opt,name=stock_name,json=stockName,proto3" json:"stock_name,omitempty"`
	StockType      int32  `protobuf:"varint,3,opt,name=stock_type,json=stockType,proto3" json:"stock_type,omitempty"`
	ExtWarehouseNo string `protobuf:"bytes,4,opt,name=ext_warehouse_no,json=extWarehouseNo,proto3" json:"ext_warehouse_no,omitempty"`
}

func (x *WdtStockResponse) Reset() {
	*x = WdtStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockResponse) ProtoMessage() {}

func (x *WdtStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockResponse.ProtoReflect.Descriptor instead.
func (*WdtStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{383}
}

func (x *WdtStockResponse) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *WdtStockResponse) GetStockName() string {
	if x != nil {
		return x.StockName
	}
	return ""
}

func (x *WdtStockResponse) GetStockType() int32 {
	if x != nil {
		return x.StockType
	}
	return 0
}

func (x *WdtStockResponse) GetExtWarehouseNo() string {
	if x != nil {
		return x.ExtWarehouseNo
	}
	return ""
}

type WdtStockinDetailModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId               int32    `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	StockinId           int32    `protobuf:"varint,2,opt,name=stockin_id,json=stockinId,proto3" json:"stockin_id,omitempty"`
	SrcOrderDetailId    int32    `protobuf:"varint,3,opt,name=src_order_detail_id,json=srcOrderDetailId,proto3" json:"src_order_detail_id,omitempty"`
	SrcOrderType        int32    `protobuf:"varint,4,opt,name=src_order_type,json=srcOrderType,proto3" json:"src_order_type,omitempty"`
	OrgStockinDetailId  int32    `protobuf:"varint,5,opt,name=org_stockin_detail_id,json=orgStockinDetailId,proto3" json:"org_stockin_detail_id,omitempty"`
	Num                 int32    `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	Num2                int32    `protobuf:"varint,7,opt,name=num2,proto3" json:"num2,omitempty"`
	ExpectNum           int32    `protobuf:"varint,8,opt,name=expect_num,json=expectNum,proto3" json:"expect_num,omitempty"`
	RightNum            int32    `protobuf:"varint,9,opt,name=right_num,json=rightNum,proto3" json:"right_num,omitempty"`
	AdjustNum           int32    `protobuf:"varint,10,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	GoodsCount          int32    `protobuf:"varint,11,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	SpecId              *string  `protobuf:"bytes,12,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	BatchId             *string  `protobuf:"bytes,13,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	PositionId          *string  `protobuf:"bytes,14,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	UnitId              *string  `protobuf:"bytes,15,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId          *string  `protobuf:"bytes,16,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitRatio           *float64 `protobuf:"fixed64,17,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	CostPrice2          *float64 `protobuf:"fixed64,18,opt,name=cost_price2,json=costPrice2,proto3,oneof" json:"cost_price2,omitempty"`
	SharePostCost       *float64 `protobuf:"fixed64,19,opt,name=share_post_cost,json=sharePostCost,proto3,oneof" json:"share_post_cost,omitempty"`
	SharePostTotal      *float64 `protobuf:"fixed64,20,opt,name=share_post_total,json=sharePostTotal,proto3,oneof" json:"share_post_total,omitempty"`
	Modified            *string  `protobuf:"bytes,21,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created             *string  `protobuf:"bytes,22,opt,name=created,proto3,oneof" json:"created,omitempty"`
	SpecNo              *string  `protobuf:"bytes,23,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	Discount            *float64 `protobuf:"fixed64,24,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	RightPrice          *float64 `protobuf:"fixed64,25,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	RightCost           *float64 `protobuf:"fixed64,26,opt,name=right_cost,json=rightCost,proto3,oneof" json:"right_cost,omitempty"`
	CostPrice           *float64 `protobuf:"fixed64,27,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	ProductionDate      *string  `protobuf:"bytes,28,opt,name=production_date,json=productionDate,proto3,oneof" json:"production_date,omitempty"`
	ValidityDays        *string  `protobuf:"bytes,29,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	ExpireDate          *string  `protobuf:"bytes,30,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	SrcPrice            *float64 `protobuf:"fixed64,31,opt,name=src_price,json=srcPrice,proto3,oneof" json:"src_price,omitempty"`
	TaxPrice            *float64 `protobuf:"fixed64,32,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	TaxAmount           *float64 `protobuf:"fixed64,33,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	Tax                 *float64 `protobuf:"fixed64,34,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TotalCost           *float64 `protobuf:"fixed64,35,opt,name=total_cost,json=totalCost,proto3,oneof" json:"total_cost,omitempty"`
	Remark              *string  `protobuf:"bytes,36,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdjustPrice         *float64 `protobuf:"fixed64,37,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	BrandNo             *string  `protobuf:"bytes,38,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName           *string  `protobuf:"bytes,39,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName           *string  `protobuf:"bytes,40,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo             *string  `protobuf:"bytes,41,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecName            *string  `protobuf:"bytes,42,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode            *string  `protobuf:"bytes,43,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Prop2               *string  `protobuf:"bytes,44,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	GoodsUnit           *string  `protobuf:"bytes,45,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	BatchNo             *string  `protobuf:"bytes,46,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark         *string  `protobuf:"bytes,47,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	PositionNo          *string  `protobuf:"bytes,48,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	AdjustStockinAmount *float64 `protobuf:"fixed64,49,opt,name=adjust_stockin_amount,json=adjustStockinAmount,proto3,oneof" json:"adjust_stockin_amount,omitempty"`
}

func (x *WdtStockinDetailModelResponse) Reset() {
	*x = WdtStockinDetailModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinDetailModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinDetailModelResponse) ProtoMessage() {}

func (x *WdtStockinDetailModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinDetailModelResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinDetailModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{384}
}

func (x *WdtStockinDetailModelResponse) GetRecId() int32 {
	if x != nil {
		return x.RecId
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetStockinId() int32 {
	if x != nil {
		return x.StockinId
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetSrcOrderDetailId() int32 {
	if x != nil {
		return x.SrcOrderDetailId
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetSrcOrderType() int32 {
	if x != nil {
		return x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetOrgStockinDetailId() int32 {
	if x != nil {
		return x.OrgStockinDetailId
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetNum2() int32 {
	if x != nil {
		return x.Num2
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetExpectNum() int32 {
	if x != nil {
		return x.ExpectNum
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetRightNum() int32 {
	if x != nil {
		return x.RightNum
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetAdjustNum() int32 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetSpecId() string {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetBatchId() string {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetUnitId() string {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetBaseUnitId() string {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetCostPrice2() float64 {
	if x != nil && x.CostPrice2 != nil {
		return *x.CostPrice2
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetSharePostCost() float64 {
	if x != nil && x.SharePostCost != nil {
		return *x.SharePostCost
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetSharePostTotal() float64 {
	if x != nil && x.SharePostTotal != nil {
		return *x.SharePostTotal
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetRightCost() float64 {
	if x != nil && x.RightCost != nil {
		return *x.RightCost
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetProductionDate() string {
	if x != nil && x.ProductionDate != nil {
		return *x.ProductionDate
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetValidityDays() string {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetSrcPrice() float64 {
	if x != nil && x.SrcPrice != nil {
		return *x.SrcPrice
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetTotalCost() float64 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinDetailModelResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtStockinDetailModelResponse) GetAdjustStockinAmount() float64 {
	if x != nil && x.AdjustStockinAmount != nil {
		return *x.AdjustStockinAmount
	}
	return 0
}

type WdtStockinModelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtStockinModelListRequest) Reset() {
	*x = WdtStockinModelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinModelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinModelListRequest) ProtoMessage() {}

func (x *WdtStockinModelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinModelListRequest.ProtoReflect.Descriptor instead.
func (*WdtStockinModelListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{385}
}

func (x *WdtStockinModelListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtStockinModelListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtStockinModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtStockinModelResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtStockinModelListResponse) Reset() {
	*x = WdtStockinModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinModelListResponse) ProtoMessage() {}

func (x *WdtStockinModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinModelListResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinModelListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{386}
}

func (x *WdtStockinModelListResponse) GetResults() []*WdtStockinModelResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtStockinModelListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtStockinModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string                          `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	DetailsList       []*WdtStockinDetailModelResponse `protobuf:"bytes,2,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	StockinId         int32                            `protobuf:"varint,3,opt,name=stockin_id,json=stockinId,proto3" json:"stockin_id,omitempty"`
	AdjustNum         int32                            `protobuf:"varint,4,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	GoodsTypeCount    int32                            `protobuf:"varint,5,opt,name=goods_type_count,json=goodsTypeCount,proto3" json:"goods_type_count,omitempty"`
	GoodsCount        int32                            `protobuf:"varint,6,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	WmsStatus         int32                            `protobuf:"varint,7,opt,name=wms_status,json=wmsStatus,proto3" json:"wms_status,omitempty"`
	WarehouseId       int32                            `protobuf:"varint,8,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	SrcOrderType      int32                            `protobuf:"varint,9,opt,name=src_order_type,json=srcOrderType,proto3" json:"src_order_type,omitempty"`
	SrcOrderId        int32                            `protobuf:"varint,10,opt,name=src_order_id,json=srcOrderId,proto3" json:"src_order_id,omitempty"`
	ReasonId          int32                            `protobuf:"varint,11,opt,name=reason_id,json=reasonId,proto3" json:"reason_id,omitempty"`
	FaStatus          int32                            `protobuf:"varint,12,opt,name=fa_status,json=faStatus,proto3" json:"fa_status,omitempty"`
	LogisticsId       int32                            `protobuf:"varint,13,opt,name=logistics_id,json=logisticsId,proto3" json:"logistics_id,omitempty"`
	PostShareType     int32                            `protobuf:"varint,14,opt,name=post_share_type,json=postShareType,proto3" json:"post_share_type,omitempty"`
	OperatorId        int32                            `protobuf:"varint,15,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	NoteCount         int32                            `protobuf:"varint,16,opt,name=note_count,json=noteCount,proto3" json:"note_count,omitempty"`
	OrderType         int32                            `protobuf:"varint,17,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	Status            int32                            `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	OrderNo           *string                          `protobuf:"bytes,19,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	StockinNo         *string                          `protobuf:"bytes,20,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	WmsResult         *string                          `protobuf:"bytes,21,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	FlagId            *string                          `protobuf:"bytes,22,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified          *string                          `protobuf:"bytes,23,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	WarehouseNo       *string                          `protobuf:"bytes,24,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName     *string                          `protobuf:"bytes,25,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	StockinTime       *string                          `protobuf:"bytes,26,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime       *string                          `protobuf:"bytes,27,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	Remark            *string                          `protobuf:"bytes,28,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CheckOperatorId   *string                          `protobuf:"bytes,29,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	StockinReason     *string                          `protobuf:"bytes,30,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	OrderTypeName     *string                          `protobuf:"bytes,31,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsAmount       *float64                         `protobuf:"fixed64,32,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TotalPrice        *float64                         `protobuf:"fixed64,33,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount          *float64                         `protobuf:"fixed64,34,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount         *float64                         `protobuf:"fixed64,35,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	AdjustPrice       *float64                         `protobuf:"fixed64,36,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	PostFee           *float64                         `protobuf:"fixed64,37,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee          *float64                         `protobuf:"fixed64,38,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	LogisticsType     *string                          `protobuf:"bytes,39,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	CheckTime         *string                          `protobuf:"bytes,40,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	SrcOrderNo        *string                          `protobuf:"bytes,41,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	OuterNo           *string                          `protobuf:"bytes,42,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	WmsOuterNo        *string                          `protobuf:"bytes,43,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	LogisticsNo       *string                          `protobuf:"bytes,44,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	OperatorName      *string                          `protobuf:"bytes,45,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	RightPrice        *float64                         `protobuf:"fixed64,46,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	ProviderNo        *string                          `protobuf:"bytes,47,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName      *string                          `protobuf:"bytes,48,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	PurchaseNo        *string                          `protobuf:"bytes,49,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	FromWarehouseNo   *string                          `protobuf:"bytes,50,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	FromWarehouseName *string                          `protobuf:"bytes,51,opt,name=from_warehouse_name,json=fromWarehouseName,proto3,oneof" json:"from_warehouse_name,omitempty"`
	ToWarehouseNo     *string                          `protobuf:"bytes,52,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	ToWarehouseName   *string                          `protobuf:"bytes,53,opt,name=to_warehouse_name,json=toWarehouseName,proto3,oneof" json:"to_warehouse_name,omitempty"`
	StOuterNo         *string                          `protobuf:"bytes,54,opt,name=st_outer_no,json=stOuterNo,proto3,oneof" json:"st_outer_no,omitempty"`
	StCreated         *string                          `protobuf:"bytes,55,opt,name=st_created,json=stCreated,proto3,oneof" json:"st_created,omitempty"`
	LogisticsName     *string                          `protobuf:"bytes,56,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode     *string                          `protobuf:"bytes,57,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	BusinessType      *int32                           `protobuf:"varint,58,opt,name=business_type,json=businessType,proto3,oneof" json:"business_type,omitempty"`
	AggNo             *string                          `protobuf:"bytes,60,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggConsignStatus  *int32                           `protobuf:"varint,61,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	ChannelCode       *int32                           `protobuf:"varint,62,opt,name=channel_code,json=channelCode,proto3,oneof" json:"channel_code,omitempty"`
	ServiceOrderNo    *string                          `protobuf:"bytes,63,opt,name=service_order_no,json=serviceOrderNo,proto3,oneof" json:"service_order_no,omitempty"`
}

func (x *WdtStockinModelResponse) Reset() {
	*x = WdtStockinModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinModelResponse) ProtoMessage() {}

func (x *WdtStockinModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinModelResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{387}
}

func (x *WdtStockinModelResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockinModelResponse) GetDetailsList() []*WdtStockinDetailModelResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtStockinModelResponse) GetStockinId() int32 {
	if x != nil {
		return x.StockinId
	}
	return 0
}

func (x *WdtStockinModelResponse) GetAdjustNum() int32 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *WdtStockinModelResponse) GetGoodsTypeCount() int32 {
	if x != nil {
		return x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockinModelResponse) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *WdtStockinModelResponse) GetWmsStatus() int32 {
	if x != nil {
		return x.WmsStatus
	}
	return 0
}

func (x *WdtStockinModelResponse) GetWarehouseId() int32 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *WdtStockinModelResponse) GetSrcOrderType() int32 {
	if x != nil {
		return x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinModelResponse) GetSrcOrderId() int32 {
	if x != nil {
		return x.SrcOrderId
	}
	return 0
}

func (x *WdtStockinModelResponse) GetReasonId() int32 {
	if x != nil {
		return x.ReasonId
	}
	return 0
}

func (x *WdtStockinModelResponse) GetFaStatus() int32 {
	if x != nil {
		return x.FaStatus
	}
	return 0
}

func (x *WdtStockinModelResponse) GetLogisticsId() int32 {
	if x != nil {
		return x.LogisticsId
	}
	return 0
}

func (x *WdtStockinModelResponse) GetPostShareType() int32 {
	if x != nil {
		return x.PostShareType
	}
	return 0
}

func (x *WdtStockinModelResponse) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *WdtStockinModelResponse) GetNoteCount() int32 {
	if x != nil {
		return x.NoteCount
	}
	return 0
}

func (x *WdtStockinModelResponse) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *WdtStockinModelResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WdtStockinModelResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtStockinModelResponse) GetFlagId() string {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return ""
}

func (x *WdtStockinModelResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinModelResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtStockinModelResponse) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtStockinModelResponse) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtStockinModelResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinModelResponse) GetCheckOperatorId() string {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return ""
}

func (x *WdtStockinModelResponse) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtStockinModelResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockinModelResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtStockinModelResponse) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtStockinModelResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinModelResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinModelResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinModelResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockinModelResponse) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtStockinModelResponse) GetLogisticsType() string {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return ""
}

func (x *WdtStockinModelResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtStockinModelResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *WdtStockinModelResponse) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtStockinModelResponse) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtStockinModelResponse) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetFromWarehouseName() string {
	if x != nil && x.FromWarehouseName != nil {
		return *x.FromWarehouseName
	}
	return ""
}

func (x *WdtStockinModelResponse) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetToWarehouseName() string {
	if x != nil && x.ToWarehouseName != nil {
		return *x.ToWarehouseName
	}
	return ""
}

func (x *WdtStockinModelResponse) GetStOuterNo() string {
	if x != nil && x.StOuterNo != nil {
		return *x.StOuterNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetStCreated() string {
	if x != nil && x.StCreated != nil {
		return *x.StCreated
	}
	return ""
}

func (x *WdtStockinModelResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtStockinModelResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtStockinModelResponse) GetBusinessType() int32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

func (x *WdtStockinModelResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *WdtStockinModelResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtStockinModelResponse) GetChannelCode() int32 {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return 0
}

func (x *WdtStockinModelResponse) GetServiceOrderNo() string {
	if x != nil && x.ServiceOrderNo != nil {
		return *x.ServiceOrderNo
	}
	return ""
}

type WdtStockinOrderPurchaseDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *WdtStockinOrderPurchaseDestroyRequest) Reset() {
	*x = WdtStockinOrderPurchaseDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchaseDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchaseDestroyRequest) ProtoMessage() {}

func (x *WdtStockinOrderPurchaseDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchaseDestroyRequest.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchaseDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{388}
}

func (x *WdtStockinOrderPurchaseDestroyRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type WdtStockinOrderPurchaseDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId          *int32   `protobuf:"varint,2,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	RecId              *int32   `protobuf:"varint,3,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	SrcOrderDetailId   *int32   `protobuf:"varint,4,opt,name=src_order_detail_id,json=srcOrderDetailId,proto3,oneof" json:"src_order_detail_id,omitempty"`
	SpecNo             *string  `protobuf:"bytes,5,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount         *float64 `protobuf:"fixed64,6,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	Discount           *float64 `protobuf:"fixed64,7,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	CostPrice          *float64 `protobuf:"fixed64,8,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	ProductionDate     *string  `protobuf:"bytes,9,opt,name=production_date,json=productionDate,proto3,oneof" json:"production_date,omitempty"`
	ValidityDays       *int32   `protobuf:"varint,10,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	ExpireDate         *string  `protobuf:"bytes,11,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	SrcPrice           *float64 `protobuf:"fixed64,12,opt,name=src_price,json=srcPrice,proto3,oneof" json:"src_price,omitempty"`
	TaxPrice           *float64 `protobuf:"fixed64,13,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	TaxAmount          *float64 `protobuf:"fixed64,14,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	Tax                *float64 `protobuf:"fixed64,15,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TotalCost          *float64 `protobuf:"fixed64,16,opt,name=total_cost,json=totalCost,proto3,oneof" json:"total_cost,omitempty"`
	Remark             *string  `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdjustNum          *float64 `protobuf:"fixed64,18,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice        *float64 `protobuf:"fixed64,19,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightNum           *float64 `protobuf:"fixed64,20,opt,name=right_num,json=rightNum,proto3,oneof" json:"right_num,omitempty"`
	RightPrice         *float64 `protobuf:"fixed64,21,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	RightCost          *float64 `protobuf:"fixed64,22,opt,name=right_cost,json=rightCost,proto3,oneof" json:"right_cost,omitempty"`
	BrandNo            *string  `protobuf:"bytes,23,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName          *string  `protobuf:"bytes,24,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName          *string  `protobuf:"bytes,25,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo            *string  `protobuf:"bytes,26,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecName           *string  `protobuf:"bytes,27,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode           *string  `protobuf:"bytes,28,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Prop2              *string  `protobuf:"bytes,29,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	GoodsUnit          *string  `protobuf:"bytes,30,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	BatchNo            *string  `protobuf:"bytes,31,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark        *string  `protobuf:"bytes,32,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	PositionNo         *string  `protobuf:"bytes,33,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	SrcOrderType       *int32   `protobuf:"varint,34,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	OrgStockinDetailId *int32   `protobuf:"varint,35,opt,name=org_stockin_detail_id,json=orgStockinDetailId,proto3,oneof" json:"org_stockin_detail_id,omitempty"`
	SpecId             *int32   `protobuf:"varint,36,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	BatchId            *int32   `protobuf:"varint,37,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	PositionId         *int32   `protobuf:"varint,38,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	Num                *float64 `protobuf:"fixed64,39,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Num2               *float64 `protobuf:"fixed64,40,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	UnitId             *int32   `protobuf:"varint,41,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId         *int32   `protobuf:"varint,42,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitRatio          *float64 `protobuf:"fixed64,43,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	ExpectNum          *float64 `protobuf:"fixed64,44,opt,name=expect_num,json=expectNum,proto3,oneof" json:"expect_num,omitempty"`
	CostPrice2         *float64 `protobuf:"fixed64,45,opt,name=cost_price2,json=costPrice2,proto3,oneof" json:"cost_price2,omitempty"`
	SharePostCost      *float64 `protobuf:"fixed64,46,opt,name=share_post_cost,json=sharePostCost,proto3,oneof" json:"share_post_cost,omitempty"`
	SharePostTotal     *float64 `protobuf:"fixed64,47,opt,name=share_post_total,json=sharePostTotal,proto3,oneof" json:"share_post_total,omitempty"`
	Modified           *string  `protobuf:"bytes,48,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	SrcOrderTypeName   *string  `protobuf:"bytes,49,opt,name=src_order_type_name,json=srcOrderTypeName,proto3,oneof" json:"src_order_type_name,omitempty"`
}

func (x *WdtStockinOrderPurchaseDetailResponse) Reset() {
	*x = WdtStockinOrderPurchaseDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchaseDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchaseDetailResponse) ProtoMessage() {}

func (x *WdtStockinOrderPurchaseDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchaseDetailResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchaseDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{389}
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSrcOrderDetailId() int32 {
	if x != nil && x.SrcOrderDetailId != nil {
		return *x.SrcOrderDetailId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetProductionDate() string {
	if x != nil && x.ProductionDate != nil {
		return *x.ProductionDate
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetValidityDays() int32 {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSrcPrice() float64 {
	if x != nil && x.SrcPrice != nil {
		return *x.SrcPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetTotalCost() float64 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetRightNum() float64 {
	if x != nil && x.RightNum != nil {
		return *x.RightNum
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetRightCost() float64 {
	if x != nil && x.RightCost != nil {
		return *x.RightCost
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetOrgStockinDetailId() int32 {
	if x != nil && x.OrgStockinDetailId != nil {
		return *x.OrgStockinDetailId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetExpectNum() float64 {
	if x != nil && x.ExpectNum != nil {
		return *x.ExpectNum
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetCostPrice2() float64 {
	if x != nil && x.CostPrice2 != nil {
		return *x.CostPrice2
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSharePostCost() float64 {
	if x != nil && x.SharePostCost != nil {
		return *x.SharePostCost
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSharePostTotal() float64 {
	if x != nil && x.SharePostTotal != nil {
		return *x.SharePostTotal
	}
	return 0
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinOrderPurchaseDetailResponse) GetSrcOrderTypeName() string {
	if x != nil && x.SrcOrderTypeName != nil {
		return *x.SrcOrderTypeName
	}
	return ""
}

type WdtStockinOrderPurchaseListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtStockinOrderPurchaseListRequest) Reset() {
	*x = WdtStockinOrderPurchaseListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchaseListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchaseListRequest) ProtoMessage() {}

func (x *WdtStockinOrderPurchaseListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchaseListRequest.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchaseListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{390}
}

func (x *WdtStockinOrderPurchaseListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtStockinOrderPurchaseListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtStockinOrderPurchaseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtStockinOrderPurchaseResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtStockinOrderPurchaseListResponse) Reset() {
	*x = WdtStockinOrderPurchaseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchaseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchaseListResponse) ProtoMessage() {}

func (x *WdtStockinOrderPurchaseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchaseListResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchaseListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{391}
}

func (x *WdtStockinOrderPurchaseListResponse) GetResults() []*WdtStockinOrderPurchaseResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtStockinOrderPurchaseListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtStockinOrderPurchasePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PushKingdeeStatus    *int32   `protobuf:"varint,3,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdPurchaseOrder      *string  `protobuf:"bytes,4,opt,name=kd_purchase_order,json=kdPurchaseOrder,proto3,oneof" json:"kd_purchase_order,omitempty"`
	KdBillNo             *string  `protobuf:"bytes,5,opt,name=kd_bill_no,json=kdBillNo,proto3,oneof" json:"kd_bill_no,omitempty"`
	WdtPurchaseOrder     *string  `protobuf:"bytes,6,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	StockinNo            *string  `protobuf:"bytes,7,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	KdStockinNo          *string  `protobuf:"bytes,8,opt,name=kd_stockin_no,json=kdStockinNo,proto3,oneof" json:"kd_stockin_no,omitempty"`
	StockinId            *int32   `protobuf:"varint,9,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	OrderNo              *string  `protobuf:"bytes,10,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	Status               *int32   `protobuf:"varint,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	WarehouseNo          string   `protobuf:"bytes,12,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName        *string  `protobuf:"bytes,13,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	StockinTime          *string  `protobuf:"bytes,14,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CheckTime            *string  `protobuf:"bytes,15,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CreatedTime          *string  `protobuf:"bytes,16,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	SrcOrderNo           *string  `protobuf:"bytes,17,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	Remark               *string  `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StockinReason        *string  `protobuf:"bytes,19,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	OrderType            *int32   `protobuf:"varint,20,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName        *string  `protobuf:"bytes,21,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsAmount          *float64 `protobuf:"fixed64,22,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TotalPrice           *float64 `protobuf:"fixed64,23,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount             *float64 `protobuf:"fixed64,24,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount            *float64 `protobuf:"fixed64,25,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	PostFee              *float64 `protobuf:"fixed64,26,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee             *float64 `protobuf:"fixed64,27,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	LogisticsType        *int32   `protobuf:"varint,28,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsCode        *string  `protobuf:"bytes,29,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsName        *string  `protobuf:"bytes,30,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo          *string  `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PurchaseNo           *string  `protobuf:"bytes,32,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	ProviderNo           *string  `protobuf:"bytes,33,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName         *string  `protobuf:"bytes,34,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	OuterNo              *string  `protobuf:"bytes,35,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	GoodsCount           *float64 `protobuf:"fixed64,36,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	AdjustNum            *float64 `protobuf:"fixed64,37,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice          *float64 `protobuf:"fixed64,38,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightNums            *float64 `protobuf:"fixed64,39,opt,name=right_nums,json=rightNums,proto3,oneof" json:"right_nums,omitempty"`
	RightPrice           *float64 `protobuf:"fixed64,40,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	WmsOuterNo           *string  `protobuf:"bytes,41,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32   `protobuf:"varint,42,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult            *string  `protobuf:"bytes,43,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	WarehouseId          *int32   `protobuf:"varint,44,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType         *int32   `protobuf:"varint,45,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId           *int32   `protobuf:"varint,46,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId             *int32   `protobuf:"varint,47,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus             *int32   `protobuf:"varint,48,opt,name=fa_status,json=faStatus,proto3,oneof" json:"fa_status,omitempty"`
	LogisticsId          *int32   `protobuf:"varint,49,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType        *int32   `protobuf:"varint,50,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId           *int32   `protobuf:"varint,51,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	CheckOperatorId      *int32   `protobuf:"varint,52,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	GoodsTypeCount       *int32   `protobuf:"varint,53,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	NoteCount            *int32   `protobuf:"varint,54,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId               *int32   `protobuf:"varint,55,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified             *string  `protobuf:"bytes,56,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	CheckOperatorName    *string  `protobuf:"bytes,57,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	OperatorName         *string  `protobuf:"bytes,58,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) Reset() {
	*x = WdtStockinOrderPurchasePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchasePartialUpdateRequest) ProtoMessage() {}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchasePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchasePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{392}
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetKdPurchaseOrder() string {
	if x != nil && x.KdPurchaseOrder != nil {
		return *x.KdPurchaseOrder
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetKdBillNo() string {
	if x != nil && x.KdBillNo != nil {
		return *x.KdBillNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetKdStockinNo() string {
	if x != nil && x.KdStockinNo != nil {
		return *x.KdStockinNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetRightNums() float64 {
	if x != nil && x.RightNums != nil {
		return *x.RightNums
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetFaStatus() int32 {
	if x != nil && x.FaStatus != nil {
		return *x.FaStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtStockinOrderPurchasePartialUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

type WdtStockinOrderPurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId               *string  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PushKingdeeStatus *int32   `protobuf:"varint,2,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdPurchaseOrder   *string  `protobuf:"bytes,3,opt,name=kd_purchase_order,json=kdPurchaseOrder,proto3,oneof" json:"kd_purchase_order,omitempty"`
	KdBillNo          *string  `protobuf:"bytes,4,opt,name=kd_bill_no,json=kdBillNo,proto3,oneof" json:"kd_bill_no,omitempty"`
	WdtPurchaseOrder  *string  `protobuf:"bytes,5,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	StockinNo         *string  `protobuf:"bytes,6,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	KdStockinNo       *string  `protobuf:"bytes,7,opt,name=kd_stockin_no,json=kdStockinNo,proto3,oneof" json:"kd_stockin_no,omitempty"`
	StockinId         *int32   `protobuf:"varint,8,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	OrderNo           *string  `protobuf:"bytes,9,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	Status            *int32   `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	WarehouseNo       string   `protobuf:"bytes,11,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName     *string  `protobuf:"bytes,12,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	StockinTime       *string  `protobuf:"bytes,13,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CheckTime         *string  `protobuf:"bytes,14,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CreatedTime       *string  `protobuf:"bytes,15,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	SrcOrderNo        *string  `protobuf:"bytes,16,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	Remark            *string  `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StockinReason     *string  `protobuf:"bytes,18,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	OrderType         *int32   `protobuf:"varint,19,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName     *string  `protobuf:"bytes,20,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsAmount       *float64 `protobuf:"fixed64,21,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TotalPrice        *float64 `protobuf:"fixed64,22,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount          *float64 `protobuf:"fixed64,23,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount         *float64 `protobuf:"fixed64,24,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	PostFee           *float64 `protobuf:"fixed64,25,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee          *float64 `protobuf:"fixed64,26,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	LogisticsType     *int32   `protobuf:"varint,27,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsCode     *string  `protobuf:"bytes,28,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsName     *string  `protobuf:"bytes,29,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo       *string  `protobuf:"bytes,30,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PurchaseNo        *string  `protobuf:"bytes,31,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	ProviderNo        *string  `protobuf:"bytes,32,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName      *string  `protobuf:"bytes,33,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	OuterNo           *string  `protobuf:"bytes,34,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	GoodsCount        *float64 `protobuf:"fixed64,35,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	AdjustNum         *float64 `protobuf:"fixed64,36,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice       *float64 `protobuf:"fixed64,37,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightNums         *float64 `protobuf:"fixed64,38,opt,name=right_nums,json=rightNums,proto3,oneof" json:"right_nums,omitempty"`
	RightPrice        *float64 `protobuf:"fixed64,39,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	WmsOuterNo        *string  `protobuf:"bytes,40,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus         *int32   `protobuf:"varint,41,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult         *string  `protobuf:"bytes,42,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	WarehouseId       *int32   `protobuf:"varint,43,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType      *int32   `protobuf:"varint,44,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId        *int32   `protobuf:"varint,45,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId          *int32   `protobuf:"varint,46,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus          *int32   `protobuf:"varint,47,opt,name=fa_status,json=faStatus,proto3,oneof" json:"fa_status,omitempty"`
	LogisticsId       *int32   `protobuf:"varint,48,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType     *int32   `protobuf:"varint,49,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId        *int32   `protobuf:"varint,50,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	CheckOperatorId   *int32   `protobuf:"varint,51,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	GoodsTypeCount    *int32   `protobuf:"varint,52,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	NoteCount         *int32   `protobuf:"varint,53,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId            *int32   `protobuf:"varint,54,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified          *string  `protobuf:"bytes,55,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	CheckOperatorName *string  `protobuf:"bytes,56,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	OperatorName      *string  `protobuf:"bytes,57,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
}

func (x *WdtStockinOrderPurchaseRequest) Reset() {
	*x = WdtStockinOrderPurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchaseRequest) ProtoMessage() {}

func (x *WdtStockinOrderPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchaseRequest.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{393}
}

func (x *WdtStockinOrderPurchaseRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetKdPurchaseOrder() string {
	if x != nil && x.KdPurchaseOrder != nil {
		return *x.KdPurchaseOrder
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetKdBillNo() string {
	if x != nil && x.KdBillNo != nil {
		return *x.KdBillNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetKdStockinNo() string {
	if x != nil && x.KdStockinNo != nil {
		return *x.KdStockinNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetRightNums() float64 {
	if x != nil && x.RightNums != nil {
		return *x.RightNums
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetFaStatus() int32 {
	if x != nil && x.FaStatus != nil {
		return *x.FaStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

type WdtStockinOrderPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                                  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	DetailsList           []*WdtStockinOrderPurchaseDetailResponse `protobuf:"bytes,2,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	PushKingdeeStatus     *int32                                   `protobuf:"varint,3,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdPurchaseOrder       *string                                  `protobuf:"bytes,4,opt,name=kd_purchase_order,json=kdPurchaseOrder,proto3,oneof" json:"kd_purchase_order,omitempty"`
	KdBillNo              *string                                  `protobuf:"bytes,5,opt,name=kd_bill_no,json=kdBillNo,proto3,oneof" json:"kd_bill_no,omitempty"`
	WdtPurchaseOrder      *string                                  `protobuf:"bytes,6,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	StockinNo             *string                                  `protobuf:"bytes,7,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	KdStockinNo           *string                                  `protobuf:"bytes,8,opt,name=kd_stockin_no,json=kdStockinNo,proto3,oneof" json:"kd_stockin_no,omitempty"`
	StockinId             *int32                                   `protobuf:"varint,9,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	OrderNo               *string                                  `protobuf:"bytes,10,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	Status                *int32                                   `protobuf:"varint,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	WarehouseNo           string                                   `protobuf:"bytes,12,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName         *string                                  `protobuf:"bytes,13,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	StockinTime           *string                                  `protobuf:"bytes,14,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CheckTime             *string                                  `protobuf:"bytes,15,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CreatedTime           *string                                  `protobuf:"bytes,16,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	SrcOrderNo            *string                                  `protobuf:"bytes,17,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	Remark                *string                                  `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StockinReason         *string                                  `protobuf:"bytes,19,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	OrderType             *int32                                   `protobuf:"varint,20,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName         *string                                  `protobuf:"bytes,21,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsAmount           *float64                                 `protobuf:"fixed64,22,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TotalPrice            *float64                                 `protobuf:"fixed64,23,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount              *float64                                 `protobuf:"fixed64,24,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount             *float64                                 `protobuf:"fixed64,25,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	PostFee               *float64                                 `protobuf:"fixed64,26,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee              *float64                                 `protobuf:"fixed64,27,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	LogisticsType         *int32                                   `protobuf:"varint,28,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsCode         *string                                  `protobuf:"bytes,29,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsName         *string                                  `protobuf:"bytes,30,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo           *string                                  `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PurchaseNo            *string                                  `protobuf:"bytes,32,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	ProviderNo            *string                                  `protobuf:"bytes,33,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName          *string                                  `protobuf:"bytes,34,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	OuterNo               *string                                  `protobuf:"bytes,35,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	GoodsCount            *float64                                 `protobuf:"fixed64,36,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	AdjustNum             *float64                                 `protobuf:"fixed64,37,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice           *float64                                 `protobuf:"fixed64,38,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightNums             *float64                                 `protobuf:"fixed64,39,opt,name=right_nums,json=rightNums,proto3,oneof" json:"right_nums,omitempty"`
	RightPrice            *float64                                 `protobuf:"fixed64,40,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	WmsOuterNo            *string                                  `protobuf:"bytes,41,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus             *int32                                   `protobuf:"varint,42,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult             *string                                  `protobuf:"bytes,43,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	WarehouseId           *int32                                   `protobuf:"varint,44,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType          *int32                                   `protobuf:"varint,45,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId            *int32                                   `protobuf:"varint,46,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId              *int32                                   `protobuf:"varint,47,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus              *int32                                   `protobuf:"varint,48,opt,name=fa_status,json=faStatus,proto3,oneof" json:"fa_status,omitempty"`
	LogisticsId           *int32                                   `protobuf:"varint,49,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType         *int32                                   `protobuf:"varint,50,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId            *int32                                   `protobuf:"varint,51,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	CheckOperatorId       *int32                                   `protobuf:"varint,52,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	GoodsTypeCount        *int32                                   `protobuf:"varint,53,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	NoteCount             *int32                                   `protobuf:"varint,54,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId                *int32                                   `protobuf:"varint,55,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified              *string                                  `protobuf:"bytes,56,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	CheckOperatorName     *string                                  `protobuf:"bytes,57,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	OperatorName          *string                                  `protobuf:"bytes,58,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	PushKingdeeStatusName *string                                  `protobuf:"bytes,59,opt,name=push_kingdee_status_name,json=pushKingdeeStatusName,proto3,oneof" json:"push_kingdee_status_name,omitempty"`
	StatusName            *string                                  `protobuf:"bytes,60,opt,name=status_name,json=statusName,proto3,oneof" json:"status_name,omitempty"`
	WmsStatusName         *string                                  `protobuf:"bytes,61,opt,name=wms_status_name,json=wmsStatusName,proto3,oneof" json:"wms_status_name,omitempty"`
	SrcOrderTypeName      *string                                  `protobuf:"bytes,62,opt,name=src_order_type_name,json=srcOrderTypeName,proto3,oneof" json:"src_order_type_name,omitempty"`
}

func (x *WdtStockinOrderPurchaseResponse) Reset() {
	*x = WdtStockinOrderPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchaseResponse) ProtoMessage() {}

func (x *WdtStockinOrderPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchaseResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{394}
}

func (x *WdtStockinOrderPurchaseResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetDetailsList() []*WdtStockinOrderPurchaseDetailResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtStockinOrderPurchaseResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetKdPurchaseOrder() string {
	if x != nil && x.KdPurchaseOrder != nil {
		return *x.KdPurchaseOrder
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetKdBillNo() string {
	if x != nil && x.KdBillNo != nil {
		return *x.KdBillNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetKdStockinNo() string {
	if x != nil && x.KdStockinNo != nil {
		return *x.KdStockinNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetRightNums() float64 {
	if x != nil && x.RightNums != nil {
		return *x.RightNums
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetFaStatus() int32 {
	if x != nil && x.FaStatus != nil {
		return *x.FaStatus
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtStockinOrderPurchaseResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetPushKingdeeStatusName() string {
	if x != nil && x.PushKingdeeStatusName != nil {
		return *x.PushKingdeeStatusName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetStatusName() string {
	if x != nil && x.StatusName != nil {
		return *x.StatusName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetWmsStatusName() string {
	if x != nil && x.WmsStatusName != nil {
		return *x.WmsStatusName
	}
	return ""
}

func (x *WdtStockinOrderPurchaseResponse) GetSrcOrderTypeName() string {
	if x != nil && x.SrcOrderTypeName != nil {
		return *x.SrcOrderTypeName
	}
	return ""
}

type WdtStockinOrderPurchaseRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *WdtStockinOrderPurchaseRetrieveRequest) Reset() {
	*x = WdtStockinOrderPurchaseRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinOrderPurchaseRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinOrderPurchaseRetrieveRequest) ProtoMessage() {}

func (x *WdtStockinOrderPurchaseRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinOrderPurchaseRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtStockinOrderPurchaseRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{395}
}

func (x *WdtStockinOrderPurchaseRetrieveRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type WdtStockinTransferOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId              *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	StockinId          *int32   `protobuf:"varint,2,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	SrcOrderDetailId   *int32   `protobuf:"varint,3,opt,name=src_order_detail_id,json=srcOrderDetailId,proto3,oneof" json:"src_order_detail_id,omitempty"`
	SrcOrderType       *int32   `protobuf:"varint,4,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	OrgStockinDetailId *int32   `protobuf:"varint,5,opt,name=org_stockin_detail_id,json=orgStockinDetailId,proto3,oneof" json:"org_stockin_detail_id,omitempty"`
	SpecId             *int32   `protobuf:"varint,6,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	BatchId            *int32   `protobuf:"varint,7,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	PositionId         *int32   `protobuf:"varint,8,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	Num                *float64 `protobuf:"fixed64,9,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Num2               *float64 `protobuf:"fixed64,10,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	UnitId             *int32   `protobuf:"varint,11,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId         *int32   `protobuf:"varint,12,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitRatio          *float64 `protobuf:"fixed64,13,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	ExpectNum          *float64 `protobuf:"fixed64,14,opt,name=expect_num,json=expectNum,proto3,oneof" json:"expect_num,omitempty"`
	CostPrice2         *float64 `protobuf:"fixed64,15,opt,name=cost_price2,json=costPrice2,proto3,oneof" json:"cost_price2,omitempty"`
	SharePostCost      *float64 `protobuf:"fixed64,16,opt,name=share_post_cost,json=sharePostCost,proto3,oneof" json:"share_post_cost,omitempty"`
	SharePostTotal     *float64 `protobuf:"fixed64,17,opt,name=share_post_total,json=sharePostTotal,proto3,oneof" json:"share_post_total,omitempty"`
	Modified           *string  `protobuf:"bytes,18,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created            *string  `protobuf:"bytes,19,opt,name=created,proto3,oneof" json:"created,omitempty"`
	SpecNo             *string  `protobuf:"bytes,20,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount         *float64 `protobuf:"fixed64,21,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	Discount           *float64 `protobuf:"fixed64,22,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	RightNum           *float64 `protobuf:"fixed64,23,opt,name=right_num,json=rightNum,proto3,oneof" json:"right_num,omitempty"`
	RightPrice         *float64 `protobuf:"fixed64,24,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	RightCost          *float64 `protobuf:"fixed64,25,opt,name=right_cost,json=rightCost,proto3,oneof" json:"right_cost,omitempty"`
	CostPrice          *float64 `protobuf:"fixed64,26,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	ProductionDate     *string  `protobuf:"bytes,27,opt,name=production_date,json=productionDate,proto3,oneof" json:"production_date,omitempty"`
	ValidityDays       *int32   `protobuf:"varint,28,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	ExpireDate         *string  `protobuf:"bytes,29,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	SrcPrice           *float64 `protobuf:"fixed64,30,opt,name=src_price,json=srcPrice,proto3,oneof" json:"src_price,omitempty"`
	TaxPrice           *float64 `protobuf:"fixed64,31,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	TaxAmount          *float64 `protobuf:"fixed64,32,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	Tax                *float64 `protobuf:"fixed64,33,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TotalCost          *float64 `protobuf:"fixed64,34,opt,name=total_cost,json=totalCost,proto3,oneof" json:"total_cost,omitempty"`
	Remark             *string  `protobuf:"bytes,35,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdjustNum          *float64 `protobuf:"fixed64,36,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice        *float64 `protobuf:"fixed64,37,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	BrandNo            *string  `protobuf:"bytes,38,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName          *string  `protobuf:"bytes,39,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName          *string  `protobuf:"bytes,40,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo            *string  `protobuf:"bytes,41,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecName           *string  `protobuf:"bytes,42,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode           *string  `protobuf:"bytes,43,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Prop2              *string  `protobuf:"bytes,44,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	GoodsUnit          *string  `protobuf:"bytes,45,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	BatchNo            *string  `protobuf:"bytes,46,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark        *string  `protobuf:"bytes,47,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	PositionNo         *string  `protobuf:"bytes,48,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	SrcOrderTypeName   *string  `protobuf:"bytes,49,opt,name=src_order_type_name,json=srcOrderTypeName,proto3,oneof" json:"src_order_type_name,omitempty"`
}

func (x *WdtStockinTransferOrderDetailResponse) Reset() {
	*x = WdtStockinTransferOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinTransferOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinTransferOrderDetailResponse) ProtoMessage() {}

func (x *WdtStockinTransferOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinTransferOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinTransferOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{396}
}

func (x *WdtStockinTransferOrderDetailResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetSrcOrderDetailId() int32 {
	if x != nil && x.SrcOrderDetailId != nil {
		return *x.SrcOrderDetailId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetOrgStockinDetailId() int32 {
	if x != nil && x.OrgStockinDetailId != nil {
		return *x.OrgStockinDetailId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetExpectNum() float64 {
	if x != nil && x.ExpectNum != nil {
		return *x.ExpectNum
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetCostPrice2() float64 {
	if x != nil && x.CostPrice2 != nil {
		return *x.CostPrice2
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetSharePostCost() float64 {
	if x != nil && x.SharePostCost != nil {
		return *x.SharePostCost
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetSharePostTotal() float64 {
	if x != nil && x.SharePostTotal != nil {
		return *x.SharePostTotal
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetRightNum() float64 {
	if x != nil && x.RightNum != nil {
		return *x.RightNum
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetRightCost() float64 {
	if x != nil && x.RightCost != nil {
		return *x.RightCost
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetProductionDate() string {
	if x != nil && x.ProductionDate != nil {
		return *x.ProductionDate
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetValidityDays() int32 {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetSrcPrice() float64 {
	if x != nil && x.SrcPrice != nil {
		return *x.SrcPrice
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetTotalCost() float64 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinTransferOrderDetailResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtStockinTransferOrderDetailResponse) GetSrcOrderTypeName() string {
	if x != nil && x.SrcOrderTypeName != nil {
		return *x.SrcOrderTypeName
	}
	return ""
}

type WdtStockinTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                                  `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PushKingdeeStatusName *string                                  `protobuf:"bytes,2,opt,name=push_kingdee_status_name,json=pushKingdeeStatusName,proto3,oneof" json:"push_kingdee_status_name,omitempty"`
	SrcOrderTypeName      *string                                  `protobuf:"bytes,3,opt,name=src_order_type_name,json=srcOrderTypeName,proto3,oneof" json:"src_order_type_name,omitempty"`
	StatusName            *string                                  `protobuf:"bytes,4,opt,name=status_name,json=statusName,proto3,oneof" json:"status_name,omitempty"`
	DetailsList           []*WdtStockinTransferOrderDetailResponse `protobuf:"bytes,5,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	StockinId             *int32                                   `protobuf:"varint,6,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	GoodsTypeCount        *int32                                   `protobuf:"varint,7,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	WmsStatus             *int32                                   `protobuf:"varint,8,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WarehouseId           *int32                                   `protobuf:"varint,9,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType          *int32                                   `protobuf:"varint,10,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId            *int32                                   `protobuf:"varint,11,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId              *int32                                   `protobuf:"varint,12,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus              *int32                                   `protobuf:"varint,13,opt,name=fa_status,json=faStatus,proto3,oneof" json:"fa_status,omitempty"`
	LogisticsId           *int32                                   `protobuf:"varint,14,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType         *int32                                   `protobuf:"varint,15,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId            *int32                                   `protobuf:"varint,16,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	NoteCount             *int32                                   `protobuf:"varint,17,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	OrderType             *int32                                   `protobuf:"varint,18,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	Status                *int32                                   `protobuf:"varint,19,opt,name=status,proto3,oneof" json:"status,omitempty"`
	PushKingdeeStatus     *int32                                   `protobuf:"varint,20,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdTransferApply       *string                                  `protobuf:"bytes,21,opt,name=kd_transfer_apply,json=kdTransferApply,proto3,oneof" json:"kd_transfer_apply,omitempty"`
	WdtTransferOrder      *string                                  `protobuf:"bytes,22,opt,name=wdt_transfer_order,json=wdtTransferOrder,proto3,oneof" json:"wdt_transfer_order,omitempty"`
	StockinNo             *string                                  `protobuf:"bytes,23,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	WarehouseNoOut        *string                                  `protobuf:"bytes,24,opt,name=warehouse_no_out,json=warehouseNoOut,proto3,oneof" json:"warehouse_no_out,omitempty"`
	WarehouseNoIn         *string                                  `protobuf:"bytes,25,opt,name=warehouse_no_in,json=warehouseNoIn,proto3,oneof" json:"warehouse_no_in,omitempty"`
	KdStockinNo           *string                                  `protobuf:"bytes,26,opt,name=kd_stockin_no,json=kdStockinNo,proto3,oneof" json:"kd_stockin_no,omitempty"`
	OrderNo               *string                                  `protobuf:"bytes,27,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	WmsResult             *string                                  `protobuf:"bytes,28,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	FlagId                *int32                                   `protobuf:"varint,29,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified              *string                                  `protobuf:"bytes,30,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	WarehouseNo           *string                                  `protobuf:"bytes,31,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName         *string                                  `protobuf:"bytes,32,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	StockinTime           *string                                  `protobuf:"bytes,33,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime           *string                                  `protobuf:"bytes,34,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	Remark                *string                                  `protobuf:"bytes,35,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	CheckOperatorId       *int32                                   `protobuf:"varint,36,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	StockinReason         *string                                  `protobuf:"bytes,37,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	OrderTypeName         *string                                  `protobuf:"bytes,38,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsCount            *float64                                 `protobuf:"fixed64,39,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsAmount           *float64                                 `protobuf:"fixed64,40,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TotalPrice            *float64                                 `protobuf:"fixed64,41,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount              *float64                                 `protobuf:"fixed64,42,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount             *float64                                 `protobuf:"fixed64,43,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	AdjustNum             *float64                                 `protobuf:"fixed64,44,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice           *float64                                 `protobuf:"fixed64,45,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	PostFee               *float64                                 `protobuf:"fixed64,46,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee              *float64                                 `protobuf:"fixed64,47,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	LogisticsType         *int32                                   `protobuf:"varint,48,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	CheckTime             *string                                  `protobuf:"bytes,49,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	SrcOrderNo            *string                                  `protobuf:"bytes,50,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	OuterNo               *string                                  `protobuf:"bytes,51,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	WmsOuterNo            *string                                  `protobuf:"bytes,52,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	LogisticsNo           *string                                  `protobuf:"bytes,53,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	OperatorName          *string                                  `protobuf:"bytes,54,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
}

func (x *WdtStockinTransferOrderResponse) Reset() {
	*x = WdtStockinTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockinTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockinTransferOrderResponse) ProtoMessage() {}

func (x *WdtStockinTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockinTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*WdtStockinTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{397}
}

func (x *WdtStockinTransferOrderResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetPushKingdeeStatusName() string {
	if x != nil && x.PushKingdeeStatusName != nil {
		return *x.PushKingdeeStatusName
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetSrcOrderTypeName() string {
	if x != nil && x.SrcOrderTypeName != nil {
		return *x.SrcOrderTypeName
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetStatusName() string {
	if x != nil && x.StatusName != nil {
		return *x.StatusName
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetDetailsList() []*WdtStockinTransferOrderDetailResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtStockinTransferOrderResponse) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetFaStatus() int32 {
	if x != nil && x.FaStatus != nil {
		return *x.FaStatus
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetKdTransferApply() string {
	if x != nil && x.KdTransferApply != nil {
		return *x.KdTransferApply
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetWdtTransferOrder() string {
	if x != nil && x.WdtTransferOrder != nil {
		return *x.WdtTransferOrder
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetWarehouseNoOut() string {
	if x != nil && x.WarehouseNoOut != nil {
		return *x.WarehouseNoOut
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetWarehouseNoIn() string {
	if x != nil && x.WarehouseNoIn != nil {
		return *x.WarehouseNoIn
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetKdStockinNo() string {
	if x != nil && x.KdStockinNo != nil {
		return *x.KdStockinNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtStockinTransferOrderResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockinTransferOrderResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

type WdtStockoutPurchaseReturnDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockoutId int32 `protobuf:"varint,1,opt,name=stockout_id,json=stockoutId,proto3" json:"stockout_id,omitempty"`
}

func (x *WdtStockoutPurchaseReturnDestroyRequest) Reset() {
	*x = WdtStockoutPurchaseReturnDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnDestroyRequest) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnDestroyRequest.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{398}
}

func (x *WdtStockoutPurchaseReturnDestroyRequest) GetStockoutId() int32 {
	if x != nil {
		return x.StockoutId
	}
	return 0
}

type WdtStockoutPurchaseReturnDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId            *int32                                      `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	PositionList     []*WdtStockoutPurchaseReturnPositionRequest `protobuf:"bytes,2,rep,name=position_list,json=positionList,proto3" json:"position_list,omitempty"`
	StockoutId       *int32                                      `protobuf:"varint,3,opt,name=stockout_id,json=stockoutId,proto3,oneof" json:"stockout_id,omitempty"`
	SpecNo           *string                                     `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount       *float64                                    `protobuf:"fixed64,5,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	SellPrice        *float64                                    `protobuf:"fixed64,6,opt,name=sell_price,json=sellPrice,proto3,oneof" json:"sell_price,omitempty"`
	BrandNo          *string                                     `protobuf:"bytes,7,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName        *string                                     `protobuf:"bytes,8,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName        *string                                     `protobuf:"bytes,9,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo          *string                                     `protobuf:"bytes,10,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecName         *string                                     `protobuf:"bytes,11,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode         *string                                     `protobuf:"bytes,12,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	CostPrice        *float64                                    `protobuf:"fixed64,13,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	TotalAmount      *float64                                    `protobuf:"fixed64,14,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
	Weight           *float64                                    `protobuf:"fixed64,15,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	GoodsType        *int32                                      `protobuf:"varint,16,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	GoodsUnit        *string                                     `protobuf:"bytes,17,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	BatchNo          *string                                     `protobuf:"bytes,18,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark      *string                                     `protobuf:"bytes,19,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	ExpireDate       *string                                     `protobuf:"bytes,20,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	Remark           *string                                     `protobuf:"bytes,21,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	GoodsId          *int32                                      `protobuf:"varint,22,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	SpecId           *int32                                      `protobuf:"varint,23,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	PositionId       *int32                                      `protobuf:"varint,24,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	SrcOrderType     *int32                                      `protobuf:"varint,25,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderDetailId *int32                                      `protobuf:"varint,26,opt,name=src_order_detail_id,json=srcOrderDetailId,proto3,oneof" json:"src_order_detail_id,omitempty"`
	BaseUnitId       *int32                                      `protobuf:"varint,27,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitId           *int32                                      `protobuf:"varint,28,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	UnitRatio        *float64                                    `protobuf:"fixed64,29,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	Num2             *float64                                    `protobuf:"fixed64,30,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	Num              *float64                                    `protobuf:"fixed64,31,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Price            *float64                                    `protobuf:"fixed64,32,opt,name=price,proto3,oneof" json:"price,omitempty"`
	BatchId          *int32                                      `protobuf:"varint,33,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	IsExamined       *int32                                      `protobuf:"varint,34,opt,name=is_examined,json=isExamined,proto3,oneof" json:"is_examined,omitempty"`
	IsPackage        *int32                                      `protobuf:"varint,35,opt,name=is_package,json=isPackage,proto3,oneof" json:"is_package,omitempty"`
	IsZeroCost       *int32                                      `protobuf:"varint,36,opt,name=is_zero_cost,json=isZeroCost,proto3,oneof" json:"is_zero_cost,omitempty"`
	ScanType         *int32                                      `protobuf:"varint,37,opt,name=scan_type,json=scanType,proto3,oneof" json:"scan_type,omitempty"`
	Modified         *string                                     `protobuf:"bytes,38,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created          *string                                     `protobuf:"bytes,39,opt,name=created,proto3,oneof" json:"created,omitempty"`
}

func (x *WdtStockoutPurchaseReturnDetailRequest) Reset() {
	*x = WdtStockoutPurchaseReturnDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnDetailRequest) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnDetailRequest.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnDetailRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{399}
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetPositionList() []*WdtStockoutPurchaseReturnPositionRequest {
	if x != nil {
		return x.PositionList
	}
	return nil
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetStockoutId() int32 {
	if x != nil && x.StockoutId != nil {
		return *x.StockoutId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetSellPrice() float64 {
	if x != nil && x.SellPrice != nil {
		return *x.SellPrice
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetSrcOrderDetailId() int32 {
	if x != nil && x.SrcOrderDetailId != nil {
		return *x.SrcOrderDetailId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetIsExamined() int32 {
	if x != nil && x.IsExamined != nil {
		return *x.IsExamined
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetIsPackage() int32 {
	if x != nil && x.IsPackage != nil {
		return *x.IsPackage
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetIsZeroCost() int32 {
	if x != nil && x.IsZeroCost != nil {
		return *x.IsZeroCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetScanType() int32 {
	if x != nil && x.ScanType != nil {
		return *x.ScanType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

type WdtStockoutPurchaseReturnDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId            *int32                                       `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	PositionList     []*WdtStockoutPurchaseReturnPositionResponse `protobuf:"bytes,2,rep,name=position_list,json=positionList,proto3" json:"position_list,omitempty"`
	StockoutId       *int32                                       `protobuf:"varint,3,opt,name=stockout_id,json=stockoutId,proto3,oneof" json:"stockout_id,omitempty"`
	SpecNo           *string                                      `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount       *float64                                     `protobuf:"fixed64,5,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	SellPrice        *float64                                     `protobuf:"fixed64,6,opt,name=sell_price,json=sellPrice,proto3,oneof" json:"sell_price,omitempty"`
	BrandNo          *string                                      `protobuf:"bytes,7,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName        *string                                      `protobuf:"bytes,8,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName        *string                                      `protobuf:"bytes,9,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo          *string                                      `protobuf:"bytes,10,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecName         *string                                      `protobuf:"bytes,11,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode         *string                                      `protobuf:"bytes,12,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	CostPrice        *float64                                     `protobuf:"fixed64,13,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	TotalAmount      *float64                                     `protobuf:"fixed64,14,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
	Weight           *float64                                     `protobuf:"fixed64,15,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	GoodsType        *int32                                       `protobuf:"varint,16,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	GoodsUnit        *string                                      `protobuf:"bytes,17,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	BatchNo          *string                                      `protobuf:"bytes,18,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark      *string                                      `protobuf:"bytes,19,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	ExpireDate       *string                                      `protobuf:"bytes,20,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	Remark           *string                                      `protobuf:"bytes,21,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	GoodsId          *int32                                       `protobuf:"varint,22,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	SpecId           *int32                                       `protobuf:"varint,23,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	PositionId       *int32                                       `protobuf:"varint,24,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	SrcOrderType     *int32                                       `protobuf:"varint,25,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderDetailId *int32                                       `protobuf:"varint,26,opt,name=src_order_detail_id,json=srcOrderDetailId,proto3,oneof" json:"src_order_detail_id,omitempty"`
	BaseUnitId       *int32                                       `protobuf:"varint,27,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitId           *int32                                       `protobuf:"varint,28,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	UnitRatio        *float64                                     `protobuf:"fixed64,29,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	Num2             *float64                                     `protobuf:"fixed64,30,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	Num              *float64                                     `protobuf:"fixed64,31,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Price            *float64                                     `protobuf:"fixed64,32,opt,name=price,proto3,oneof" json:"price,omitempty"`
	BatchId          *int32                                       `protobuf:"varint,33,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	IsExamined       *int32                                       `protobuf:"varint,34,opt,name=is_examined,json=isExamined,proto3,oneof" json:"is_examined,omitempty"`
	IsPackage        *int32                                       `protobuf:"varint,35,opt,name=is_package,json=isPackage,proto3,oneof" json:"is_package,omitempty"`
	IsZeroCost       *int32                                       `protobuf:"varint,36,opt,name=is_zero_cost,json=isZeroCost,proto3,oneof" json:"is_zero_cost,omitempty"`
	ScanType         *int32                                       `protobuf:"varint,37,opt,name=scan_type,json=scanType,proto3,oneof" json:"scan_type,omitempty"`
	Modified         *string                                      `protobuf:"bytes,38,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created          *string                                      `protobuf:"bytes,39,opt,name=created,proto3,oneof" json:"created,omitempty"`
}

func (x *WdtStockoutPurchaseReturnDetailResponse) Reset() {
	*x = WdtStockoutPurchaseReturnDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnDetailResponse) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnDetailResponse.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{400}
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetPositionList() []*WdtStockoutPurchaseReturnPositionResponse {
	if x != nil {
		return x.PositionList
	}
	return nil
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetStockoutId() int32 {
	if x != nil && x.StockoutId != nil {
		return *x.StockoutId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetSellPrice() float64 {
	if x != nil && x.SellPrice != nil {
		return *x.SellPrice
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetSrcOrderDetailId() int32 {
	if x != nil && x.SrcOrderDetailId != nil {
		return *x.SrcOrderDetailId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetIsExamined() int32 {
	if x != nil && x.IsExamined != nil {
		return *x.IsExamined
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetIsPackage() int32 {
	if x != nil && x.IsPackage != nil {
		return *x.IsPackage
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetIsZeroCost() int32 {
	if x != nil && x.IsZeroCost != nil {
		return *x.IsZeroCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetScanType() int32 {
	if x != nil && x.ScanType != nil {
		return *x.ScanType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnDetailResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

type WdtStockoutPurchaseReturnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtStockoutPurchaseReturnListRequest) Reset() {
	*x = WdtStockoutPurchaseReturnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnListRequest) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnListRequest.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{401}
}

func (x *WdtStockoutPurchaseReturnListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtStockoutPurchaseReturnListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtStockoutPurchaseReturnListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtStockoutPurchaseReturnResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtStockoutPurchaseReturnListResponse) Reset() {
	*x = WdtStockoutPurchaseReturnListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnListResponse) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnListResponse.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{402}
}

func (x *WdtStockoutPurchaseReturnListResponse) GetResults() []*WdtStockoutPurchaseReturnResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtStockoutPurchaseReturnListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtStockoutPurchaseReturnPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string                                   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	XPartialUpdateFields []string                                  `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PushKingdeeStatus    *int32                                    `protobuf:"varint,3,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdBillNo             *string                                   `protobuf:"bytes,4,opt,name=kd_bill_no,json=kdBillNo,proto3,oneof" json:"kd_bill_no,omitempty"`
	KdPurchaseReturn     *string                                   `protobuf:"bytes,5,opt,name=kd_purchase_return,json=kdPurchaseReturn,proto3,oneof" json:"kd_purchase_return,omitempty"`
	WdtPurchaseReturn    *string                                   `protobuf:"bytes,6,opt,name=wdt_purchase_return,json=wdtPurchaseReturn,proto3,oneof" json:"wdt_purchase_return,omitempty"`
	StockoutNo           *string                                   `protobuf:"bytes,7,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	KdStockoutNo         *string                                   `protobuf:"bytes,8,opt,name=kd_stockout_no,json=kdStockoutNo,proto3,oneof" json:"kd_stockout_no,omitempty"`
	Status               *int32                                    `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	StockoutId           *int32                                    `protobuf:"varint,10,opt,name=stockout_id,json=stockoutId,proto3,oneof" json:"stockout_id,omitempty"`
	OrderNo              *string                                   `protobuf:"bytes,11,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	SrcOrderNo           *string                                   `protobuf:"bytes,12,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	WarehouseNo          *string                                   `protobuf:"bytes,13,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	ConsignTime          *string                                   `protobuf:"bytes,14,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	OrderType            *int32                                    `protobuf:"varint,15,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName        *string                                   `protobuf:"bytes,16,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Subtype              *string                                   `protobuf:"bytes,17,opt,name=subtype,proto3,oneof" json:"subtype,omitempty"`
	GoodsCount           *float64                                  `protobuf:"fixed64,18,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTotalAmount     *float64                                  `protobuf:"fixed64,19,opt,name=goods_total_amount,json=goodsTotalAmount,proto3,oneof" json:"goods_total_amount,omitempty"`
	GoodsTotalCost       *float64                                  `protobuf:"fixed64,20,opt,name=goods_total_cost,json=goodsTotalCost,proto3,oneof" json:"goods_total_cost,omitempty"`
	PostFee              *float64                                  `protobuf:"fixed64,21,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	LogisticsNo          *string                                   `protobuf:"bytes,22,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PackageFee           *float64                                  `protobuf:"fixed64,23,opt,name=package_fee,json=packageFee,proto3,oneof" json:"package_fee,omitempty"`
	ReceiverName         *string                                   `protobuf:"bytes,24,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverCountry      *int32                                    `protobuf:"varint,25,opt,name=receiver_country,json=receiverCountry,proto3,oneof" json:"receiver_country,omitempty"`
	ReceiverProvince     *int32                                    `protobuf:"varint,26,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *int32                                    `protobuf:"varint,27,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *int32                                    `protobuf:"varint,28,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string                                   `protobuf:"bytes,29,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string                                   `protobuf:"bytes,30,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverTelno        *string                                   `protobuf:"bytes,31,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReceiverZip          *string                                   `protobuf:"bytes,32,opt,name=receiver_zip,json=receiverZip,proto3,oneof" json:"receiver_zip,omitempty"`
	Weight               *float64                                  `protobuf:"fixed64,33,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Remark               *string                                   `protobuf:"bytes,34,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StockoutReason       *string                                   `protobuf:"bytes,35,opt,name=stockout_reason,json=stockoutReason,proto3,oneof" json:"stockout_reason,omitempty"`
	OuterNo              *string                                   `protobuf:"bytes,36,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	OperatorName         *string                                   `protobuf:"bytes,37,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	ReceiverArea         *string                                   `protobuf:"bytes,38,opt,name=receiver_area,json=receiverArea,proto3,oneof" json:"receiver_area,omitempty"`
	ReturnNo             *string                                   `protobuf:"bytes,39,opt,name=return_no,json=returnNo,proto3,oneof" json:"return_no,omitempty"`
	ProviderNo           *string                                   `protobuf:"bytes,40,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName         *string                                   `protobuf:"bytes,41,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Modified             *string                                   `protobuf:"bytes,42,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	PrApiOuterNo         *string                                   `protobuf:"bytes,43,opt,name=pr_api_outer_no,json=prApiOuterNo,proto3,oneof" json:"pr_api_outer_no,omitempty"`
	LastLoadPurchaseNo   *string                                   `protobuf:"bytes,44,opt,name=last_load_purchase_no,json=lastLoadPurchaseNo,proto3,oneof" json:"last_load_purchase_no,omitempty"`
	PicklistPrintStatus  *int32                                    `protobuf:"varint,45,opt,name=picklist_print_status,json=picklistPrintStatus,proto3,oneof" json:"picklist_print_status,omitempty"`
	LogisticsPrintStatus *int32                                    `protobuf:"varint,46,opt,name=logistics_print_status,json=logisticsPrintStatus,proto3,oneof" json:"logistics_print_status,omitempty"`
	SendbillPrintStatus  *int32                                    `protobuf:"varint,47,opt,name=sendbill_print_status,json=sendbillPrintStatus,proto3,oneof" json:"sendbill_print_status,omitempty"`
	SrcOrderType         *int32                                    `protobuf:"varint,48,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId           *int32                                    `protobuf:"varint,49,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	WmsStatus            *int32                                    `protobuf:"varint,50,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo            *string                                   `protobuf:"bytes,51,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WarehouseType        *int32                                    `protobuf:"varint,52,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	WarehouseId          *int32                                    `protobuf:"varint,53,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	CustomerId           *int32                                    `protobuf:"varint,54,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	FreezeReason         *int32                                    `protobuf:"varint,55,opt,name=freeze_reason,json=freezeReason,proto3,oneof" json:"freeze_reason,omitempty"`
	IsAllocated          *int32                                    `protobuf:"varint,56,opt,name=is_allocated,json=isAllocated,proto3,oneof" json:"is_allocated,omitempty"`
	ConsignStatus        *int32                                    `protobuf:"varint,57,opt,name=consign_status,json=consignStatus,proto3,oneof" json:"consign_status,omitempty"`
	EbillStatus          *int32                                    `protobuf:"varint,58,opt,name=ebill_status,json=ebillStatus,proto3,oneof" json:"ebill_status,omitempty"`
	OperatorId           *int32                                    `protobuf:"varint,59,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	GoodsTypeCount       *int32                                    `protobuf:"varint,60,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	Md5Str               *string                                   `protobuf:"bytes,61,opt,name=md5_str,json=md5Str,proto3,oneof" json:"md5_str,omitempty"`
	RawGoodsCount        *float64                                  `protobuf:"fixed64,62,opt,name=raw_goods_count,json=rawGoodsCount,proto3,oneof" json:"raw_goods_count,omitempty"`
	CustomType           *int32                                    `protobuf:"varint,63,opt,name=custom_type,json=customType,proto3,oneof" json:"custom_type,omitempty"`
	ReceiverRing         *string                                   `protobuf:"bytes,64,opt,name=receiver_ring,json=receiverRing,proto3,oneof" json:"receiver_ring,omitempty"`
	ToDeliverTime        *string                                   `protobuf:"bytes,65,opt,name=to_deliver_time,json=toDeliverTime,proto3,oneof" json:"to_deliver_time,omitempty"`
	PreChargeTime        *string                                   `protobuf:"bytes,66,opt,name=pre_charge_time,json=preChargeTime,proto3,oneof" json:"pre_charge_time,omitempty"`
	LogisticsId          *int32                                    `protobuf:"varint,67,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	UnknownGoodsAmount   *float64                                  `protobuf:"fixed64,68,opt,name=unknown_goods_amount,json=unknownGoodsAmount,proto3,oneof" json:"unknown_goods_amount,omitempty"`
	CalcPostCost         *float64                                  `protobuf:"fixed64,69,opt,name=calc_post_cost,json=calcPostCost,proto3,oneof" json:"calc_post_cost,omitempty"`
	PostCost             *float64                                  `protobuf:"fixed64,70,opt,name=post_cost,json=postCost,proto3,oneof" json:"post_cost,omitempty"`
	CalcWeight           *float64                                  `protobuf:"fixed64,71,opt,name=calc_weight,json=calcWeight,proto3,oneof" json:"calc_weight,omitempty"`
	PostWeight           *float64                                  `protobuf:"fixed64,72,opt,name=post_weight,json=postWeight,proto3,oneof" json:"post_weight,omitempty"`
	PackageId            *int32                                    `protobuf:"varint,73,opt,name=package_id,json=packageId,proto3,oneof" json:"package_id,omitempty"`
	PackageCost          *float64                                  `protobuf:"fixed64,74,opt,name=package_cost,json=packageCost,proto3,oneof" json:"package_cost,omitempty"`
	HasInvoice           *int32                                    `protobuf:"varint,75,opt,name=has_invoice,json=hasInvoice,proto3,oneof" json:"has_invoice,omitempty"`
	PrinterId            *int32                                    `protobuf:"varint,76,opt,name=printer_id,json=printerId,proto3,oneof" json:"printer_id,omitempty"`
	PickErrorCount       *int32                                    `protobuf:"varint,77,opt,name=pick_error_count,json=pickErrorCount,proto3,oneof" json:"pick_error_count,omitempty"`
	PickerId             *int32                                    `protobuf:"varint,78,opt,name=picker_id,json=pickerId,proto3,oneof" json:"picker_id,omitempty"`
	SorterId             *int32                                    `protobuf:"varint,79,opt,name=sorter_id,json=sorterId,proto3,oneof" json:"sorter_id,omitempty"`
	ExaminerId           *int32                                    `protobuf:"varint,80,opt,name=examiner_id,json=examinerId,proto3,oneof" json:"examiner_id,omitempty"`
	ConsignerId          *int32                                    `protobuf:"varint,81,opt,name=consigner_id,json=consignerId,proto3,oneof" json:"consigner_id,omitempty"`
	PackagerId           *int32                                    `protobuf:"varint,82,opt,name=packager_id,json=packagerId,proto3,oneof" json:"packager_id,omitempty"`
	PackScore            *int32                                    `protobuf:"varint,83,opt,name=pack_score,json=packScore,proto3,oneof" json:"pack_score,omitempty"`
	PickScore            *int32                                    `protobuf:"varint,84,opt,name=pick_score,json=pickScore,proto3,oneof" json:"pick_score,omitempty"`
	CheckouterId         *int32                                    `protobuf:"varint,85,opt,name=checkouter_id,json=checkouterId,proto3,oneof" json:"checkouter_id,omitempty"`
	WatcherId            *int32                                    `protobuf:"varint,86,opt,name=watcher_id,json=watcherId,proto3,oneof" json:"watcher_id,omitempty"`
	PicklistNo           *string                                   `protobuf:"bytes,87,opt,name=picklist_no,json=picklistNo,proto3,oneof" json:"picklist_no,omitempty"`
	PicklistSeq          *int32                                    `protobuf:"varint,88,opt,name=picklist_seq,json=picklistSeq,proto3,oneof" json:"picklist_seq,omitempty"`
	InvoicePrintStatus   *int32                                    `protobuf:"varint,89,opt,name=invoice_print_status,json=invoicePrintStatus,proto3,oneof" json:"invoice_print_status,omitempty"`
	FlagId               *int32                                    `protobuf:"varint,90,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	LogisticsTemplateId  *int32                                    `protobuf:"varint,91,opt,name=logistics_template_id,json=logisticsTemplateId,proto3,oneof" json:"logistics_template_id,omitempty"`
	SendbillTemplateId   *int32                                    `protobuf:"varint,92,opt,name=sendbill_template_id,json=sendbillTemplateId,proto3,oneof" json:"sendbill_template_id,omitempty"`
	PosAllocateMode      *int32                                    `protobuf:"varint,93,opt,name=pos_allocate_mode,json=posAllocateMode,proto3,oneof" json:"pos_allocate_mode,omitempty"`
	NoteCount            *int32                                    `protobuf:"varint,94,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	ReasonId             *int32                                    `protobuf:"varint,95,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	LockId               *int32                                    `protobuf:"varint,96,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	Reserve              *string                                   `protobuf:"bytes,97,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	BlockReason          *int32                                    `protobuf:"varint,98,opt,name=block_reason,json=blockReason,proto3,oneof" json:"block_reason,omitempty"`
	BatchNo              *string                                   `protobuf:"bytes,99,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	StockCheckTime       *string                                   `protobuf:"bytes,100,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	PickerName           *string                                   `protobuf:"bytes,101,opt,name=picker_name,json=pickerName,proto3,oneof" json:"picker_name,omitempty"`
	SorterName           *string                                   `protobuf:"bytes,102,opt,name=sorter_name,json=sorterName,proto3,oneof" json:"sorter_name,omitempty"`
	ExaminerName         *string                                   `protobuf:"bytes,103,opt,name=examiner_name,json=examinerName,proto3,oneof" json:"examiner_name,omitempty"`
	ConsignerName        *string                                   `protobuf:"bytes,104,opt,name=consigner_name,json=consignerName,proto3,oneof" json:"consigner_name,omitempty"`
	PackagerName         *string                                   `protobuf:"bytes,105,opt,name=packager_name,json=packagerName,proto3,oneof" json:"packager_name,omitempty"`
	CheckouterName       *string                                   `protobuf:"bytes,106,opt,name=checkouter_name,json=checkouterName,proto3,oneof" json:"checkouter_name,omitempty"`
	WatcherName          *string                                   `protobuf:"bytes,107,opt,name=watcher_name,json=watcherName,proto3,oneof" json:"watcher_name,omitempty"`
	DetailsList          []*WdtStockoutPurchaseReturnDetailRequest `protobuf:"bytes,108,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) Reset() {
	*x = WdtStockoutPurchaseReturnPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnPartialUpdateRequest) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{403}
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetKdBillNo() string {
	if x != nil && x.KdBillNo != nil {
		return *x.KdBillNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetKdPurchaseReturn() string {
	if x != nil && x.KdPurchaseReturn != nil {
		return *x.KdPurchaseReturn
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWdtPurchaseReturn() string {
	if x != nil && x.WdtPurchaseReturn != nil {
		return *x.WdtPurchaseReturn
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetKdStockoutNo() string {
	if x != nil && x.KdStockoutNo != nil {
		return *x.KdStockoutNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetStockoutId() int32 {
	if x != nil && x.StockoutId != nil {
		return *x.StockoutId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetGoodsTotalAmount() float64 {
	if x != nil && x.GoodsTotalAmount != nil {
		return *x.GoodsTotalAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetGoodsTotalCost() float64 {
	if x != nil && x.GoodsTotalCost != nil {
		return *x.GoodsTotalCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPackageFee() float64 {
	if x != nil && x.PackageFee != nil {
		return *x.PackageFee
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverCountry() int32 {
	if x != nil && x.ReceiverCountry != nil {
		return *x.ReceiverCountry
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverProvince() int32 {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverCity() int32 {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverDistrict() int32 {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverZip() string {
	if x != nil && x.ReceiverZip != nil {
		return *x.ReceiverZip
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetStockoutReason() string {
	if x != nil && x.StockoutReason != nil {
		return *x.StockoutReason
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverArea() string {
	if x != nil && x.ReceiverArea != nil {
		return *x.ReceiverArea
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReturnNo() string {
	if x != nil && x.ReturnNo != nil {
		return *x.ReturnNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPrApiOuterNo() string {
	if x != nil && x.PrApiOuterNo != nil {
		return *x.PrApiOuterNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetLastLoadPurchaseNo() string {
	if x != nil && x.LastLoadPurchaseNo != nil {
		return *x.LastLoadPurchaseNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPicklistPrintStatus() int32 {
	if x != nil && x.PicklistPrintStatus != nil {
		return *x.PicklistPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetLogisticsPrintStatus() int32 {
	if x != nil && x.LogisticsPrintStatus != nil {
		return *x.LogisticsPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSendbillPrintStatus() int32 {
	if x != nil && x.SendbillPrintStatus != nil {
		return *x.SendbillPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetCustomerId() int32 {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetFreezeReason() int32 {
	if x != nil && x.FreezeReason != nil {
		return *x.FreezeReason
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetIsAllocated() int32 {
	if x != nil && x.IsAllocated != nil {
		return *x.IsAllocated
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetConsignStatus() int32 {
	if x != nil && x.ConsignStatus != nil {
		return *x.ConsignStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetEbillStatus() int32 {
	if x != nil && x.EbillStatus != nil {
		return *x.EbillStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetMd5Str() string {
	if x != nil && x.Md5Str != nil {
		return *x.Md5Str
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetRawGoodsCount() float64 {
	if x != nil && x.RawGoodsCount != nil {
		return *x.RawGoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetCustomType() int32 {
	if x != nil && x.CustomType != nil {
		return *x.CustomType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReceiverRing() string {
	if x != nil && x.ReceiverRing != nil {
		return *x.ReceiverRing
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetToDeliverTime() string {
	if x != nil && x.ToDeliverTime != nil {
		return *x.ToDeliverTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPreChargeTime() string {
	if x != nil && x.PreChargeTime != nil {
		return *x.PreChargeTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetUnknownGoodsAmount() float64 {
	if x != nil && x.UnknownGoodsAmount != nil {
		return *x.UnknownGoodsAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetCalcPostCost() float64 {
	if x != nil && x.CalcPostCost != nil {
		return *x.CalcPostCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPostCost() float64 {
	if x != nil && x.PostCost != nil {
		return *x.PostCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetCalcWeight() float64 {
	if x != nil && x.CalcWeight != nil {
		return *x.CalcWeight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPostWeight() float64 {
	if x != nil && x.PostWeight != nil {
		return *x.PostWeight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPackageId() int32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPackageCost() float64 {
	if x != nil && x.PackageCost != nil {
		return *x.PackageCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetHasInvoice() int32 {
	if x != nil && x.HasInvoice != nil {
		return *x.HasInvoice
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPrinterId() int32 {
	if x != nil && x.PrinterId != nil {
		return *x.PrinterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPickErrorCount() int32 {
	if x != nil && x.PickErrorCount != nil {
		return *x.PickErrorCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPickerId() int32 {
	if x != nil && x.PickerId != nil {
		return *x.PickerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSorterId() int32 {
	if x != nil && x.SorterId != nil {
		return *x.SorterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetExaminerId() int32 {
	if x != nil && x.ExaminerId != nil {
		return *x.ExaminerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetConsignerId() int32 {
	if x != nil && x.ConsignerId != nil {
		return *x.ConsignerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPackagerId() int32 {
	if x != nil && x.PackagerId != nil {
		return *x.PackagerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPackScore() int32 {
	if x != nil && x.PackScore != nil {
		return *x.PackScore
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPickScore() int32 {
	if x != nil && x.PickScore != nil {
		return *x.PickScore
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetCheckouterId() int32 {
	if x != nil && x.CheckouterId != nil {
		return *x.CheckouterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWatcherId() int32 {
	if x != nil && x.WatcherId != nil {
		return *x.WatcherId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPicklistNo() string {
	if x != nil && x.PicklistNo != nil {
		return *x.PicklistNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPicklistSeq() int32 {
	if x != nil && x.PicklistSeq != nil {
		return *x.PicklistSeq
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetInvoicePrintStatus() int32 {
	if x != nil && x.InvoicePrintStatus != nil {
		return *x.InvoicePrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetLogisticsTemplateId() int32 {
	if x != nil && x.LogisticsTemplateId != nil {
		return *x.LogisticsTemplateId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSendbillTemplateId() int32 {
	if x != nil && x.SendbillTemplateId != nil {
		return *x.SendbillTemplateId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPosAllocateMode() int32 {
	if x != nil && x.PosAllocateMode != nil {
		return *x.PosAllocateMode
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetReserve() string {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetBlockReason() int32 {
	if x != nil && x.BlockReason != nil {
		return *x.BlockReason
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPickerName() string {
	if x != nil && x.PickerName != nil {
		return *x.PickerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetSorterName() string {
	if x != nil && x.SorterName != nil {
		return *x.SorterName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetExaminerName() string {
	if x != nil && x.ExaminerName != nil {
		return *x.ExaminerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetConsignerName() string {
	if x != nil && x.ConsignerName != nil {
		return *x.ConsignerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetPackagerName() string {
	if x != nil && x.PackagerName != nil {
		return *x.PackagerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetCheckouterName() string {
	if x != nil && x.CheckouterName != nil {
		return *x.CheckouterName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetWatcherName() string {
	if x != nil && x.WatcherName != nil {
		return *x.WatcherName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPartialUpdateRequest) GetDetailsList() []*WdtStockoutPurchaseReturnDetailRequest {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

type WdtStockoutPurchaseReturnPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId         *int32  `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	PositionNo         *string `protobuf:"bytes,2,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	PositionGoodsCount *int32  `protobuf:"varint,3,opt,name=position_goods_count,json=positionGoodsCount,proto3,oneof" json:"position_goods_count,omitempty"`
	ExpireDate         *string `protobuf:"bytes,4,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	BatchId            *int32  `protobuf:"varint,5,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	BatchNo            *string `protobuf:"bytes,6,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark        *string `protobuf:"bytes,7,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	StockinNo          *string `protobuf:"bytes,8,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	Remark             *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *WdtStockoutPurchaseReturnPositionRequest) Reset() {
	*x = WdtStockoutPurchaseReturnPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnPositionRequest) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnPositionRequest.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnPositionRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{404}
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetPositionGoodsCount() int32 {
	if x != nil && x.PositionGoodsCount != nil {
		return *x.PositionGoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type WdtStockoutPurchaseReturnPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId         *int32  `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	PositionNo         *string `protobuf:"bytes,2,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	PositionGoodsCount *int32  `protobuf:"varint,3,opt,name=position_goods_count,json=positionGoodsCount,proto3,oneof" json:"position_goods_count,omitempty"`
	ExpireDate         *string `protobuf:"bytes,4,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	BatchId            *int32  `protobuf:"varint,5,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	BatchNo            *string `protobuf:"bytes,6,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark        *string `protobuf:"bytes,7,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	StockinNo          *string `protobuf:"bytes,8,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	Remark             *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *WdtStockoutPurchaseReturnPositionResponse) Reset() {
	*x = WdtStockoutPurchaseReturnPositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnPositionResponse) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnPositionResponse.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnPositionResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{405}
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetPositionGoodsCount() int32 {
	if x != nil && x.PositionGoodsCount != nil {
		return *x.PositionGoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnPositionResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type WdtStockoutPurchaseReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string                                   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PushKingdeeStatus    *int32                                    `protobuf:"varint,2,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdBillNo             *string                                   `protobuf:"bytes,3,opt,name=kd_bill_no,json=kdBillNo,proto3,oneof" json:"kd_bill_no,omitempty"`
	KdPurchaseReturn     *string                                   `protobuf:"bytes,4,opt,name=kd_purchase_return,json=kdPurchaseReturn,proto3,oneof" json:"kd_purchase_return,omitempty"`
	WdtPurchaseReturn    *string                                   `protobuf:"bytes,5,opt,name=wdt_purchase_return,json=wdtPurchaseReturn,proto3,oneof" json:"wdt_purchase_return,omitempty"`
	StockoutNo           *string                                   `protobuf:"bytes,6,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	KdStockoutNo         *string                                   `protobuf:"bytes,7,opt,name=kd_stockout_no,json=kdStockoutNo,proto3,oneof" json:"kd_stockout_no,omitempty"`
	Status               *int32                                    `protobuf:"varint,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	StockoutId           *int32                                    `protobuf:"varint,9,opt,name=stockout_id,json=stockoutId,proto3,oneof" json:"stockout_id,omitempty"`
	OrderNo              *string                                   `protobuf:"bytes,10,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	SrcOrderNo           *string                                   `protobuf:"bytes,11,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	WarehouseNo          *string                                   `protobuf:"bytes,12,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	ConsignTime          *string                                   `protobuf:"bytes,13,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	OrderType            *int32                                    `protobuf:"varint,14,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName        *string                                   `protobuf:"bytes,15,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Subtype              *string                                   `protobuf:"bytes,16,opt,name=subtype,proto3,oneof" json:"subtype,omitempty"`
	GoodsCount           *float64                                  `protobuf:"fixed64,17,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTotalAmount     *float64                                  `protobuf:"fixed64,18,opt,name=goods_total_amount,json=goodsTotalAmount,proto3,oneof" json:"goods_total_amount,omitempty"`
	GoodsTotalCost       *float64                                  `protobuf:"fixed64,19,opt,name=goods_total_cost,json=goodsTotalCost,proto3,oneof" json:"goods_total_cost,omitempty"`
	PostFee              *float64                                  `protobuf:"fixed64,20,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	LogisticsNo          *string                                   `protobuf:"bytes,21,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PackageFee           *float64                                  `protobuf:"fixed64,22,opt,name=package_fee,json=packageFee,proto3,oneof" json:"package_fee,omitempty"`
	ReceiverName         *string                                   `protobuf:"bytes,23,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverCountry      *int32                                    `protobuf:"varint,24,opt,name=receiver_country,json=receiverCountry,proto3,oneof" json:"receiver_country,omitempty"`
	ReceiverProvince     *int32                                    `protobuf:"varint,25,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *int32                                    `protobuf:"varint,26,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *int32                                    `protobuf:"varint,27,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string                                   `protobuf:"bytes,28,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string                                   `protobuf:"bytes,29,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverTelno        *string                                   `protobuf:"bytes,30,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReceiverZip          *string                                   `protobuf:"bytes,31,opt,name=receiver_zip,json=receiverZip,proto3,oneof" json:"receiver_zip,omitempty"`
	Weight               *float64                                  `protobuf:"fixed64,32,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Remark               *string                                   `protobuf:"bytes,33,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StockoutReason       *string                                   `protobuf:"bytes,34,opt,name=stockout_reason,json=stockoutReason,proto3,oneof" json:"stockout_reason,omitempty"`
	OuterNo              *string                                   `protobuf:"bytes,35,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	OperatorName         *string                                   `protobuf:"bytes,36,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	ReceiverArea         *string                                   `protobuf:"bytes,37,opt,name=receiver_area,json=receiverArea,proto3,oneof" json:"receiver_area,omitempty"`
	ReturnNo             *string                                   `protobuf:"bytes,38,opt,name=return_no,json=returnNo,proto3,oneof" json:"return_no,omitempty"`
	ProviderNo           *string                                   `protobuf:"bytes,39,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName         *string                                   `protobuf:"bytes,40,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Modified             *string                                   `protobuf:"bytes,41,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	PrApiOuterNo         *string                                   `protobuf:"bytes,42,opt,name=pr_api_outer_no,json=prApiOuterNo,proto3,oneof" json:"pr_api_outer_no,omitempty"`
	LastLoadPurchaseNo   *string                                   `protobuf:"bytes,43,opt,name=last_load_purchase_no,json=lastLoadPurchaseNo,proto3,oneof" json:"last_load_purchase_no,omitempty"`
	PicklistPrintStatus  *int32                                    `protobuf:"varint,44,opt,name=picklist_print_status,json=picklistPrintStatus,proto3,oneof" json:"picklist_print_status,omitempty"`
	LogisticsPrintStatus *int32                                    `protobuf:"varint,45,opt,name=logistics_print_status,json=logisticsPrintStatus,proto3,oneof" json:"logistics_print_status,omitempty"`
	SendbillPrintStatus  *int32                                    `protobuf:"varint,46,opt,name=sendbill_print_status,json=sendbillPrintStatus,proto3,oneof" json:"sendbill_print_status,omitempty"`
	SrcOrderType         *int32                                    `protobuf:"varint,47,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId           *int32                                    `protobuf:"varint,48,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	WmsStatus            *int32                                    `protobuf:"varint,49,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo            *string                                   `protobuf:"bytes,50,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WarehouseType        *int32                                    `protobuf:"varint,51,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	WarehouseId          *int32                                    `protobuf:"varint,52,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	CustomerId           *int32                                    `protobuf:"varint,53,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	FreezeReason         *int32                                    `protobuf:"varint,54,opt,name=freeze_reason,json=freezeReason,proto3,oneof" json:"freeze_reason,omitempty"`
	IsAllocated          *int32                                    `protobuf:"varint,55,opt,name=is_allocated,json=isAllocated,proto3,oneof" json:"is_allocated,omitempty"`
	ConsignStatus        *int32                                    `protobuf:"varint,56,opt,name=consign_status,json=consignStatus,proto3,oneof" json:"consign_status,omitempty"`
	EbillStatus          *int32                                    `protobuf:"varint,57,opt,name=ebill_status,json=ebillStatus,proto3,oneof" json:"ebill_status,omitempty"`
	OperatorId           *int32                                    `protobuf:"varint,58,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	GoodsTypeCount       *int32                                    `protobuf:"varint,59,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	Md5Str               *string                                   `protobuf:"bytes,60,opt,name=md5_str,json=md5Str,proto3,oneof" json:"md5_str,omitempty"`
	RawGoodsCount        *float64                                  `protobuf:"fixed64,61,opt,name=raw_goods_count,json=rawGoodsCount,proto3,oneof" json:"raw_goods_count,omitempty"`
	CustomType           *int32                                    `protobuf:"varint,62,opt,name=custom_type,json=customType,proto3,oneof" json:"custom_type,omitempty"`
	ReceiverRing         *string                                   `protobuf:"bytes,63,opt,name=receiver_ring,json=receiverRing,proto3,oneof" json:"receiver_ring,omitempty"`
	ToDeliverTime        *string                                   `protobuf:"bytes,64,opt,name=to_deliver_time,json=toDeliverTime,proto3,oneof" json:"to_deliver_time,omitempty"`
	PreChargeTime        *string                                   `protobuf:"bytes,65,opt,name=pre_charge_time,json=preChargeTime,proto3,oneof" json:"pre_charge_time,omitempty"`
	LogisticsId          *int32                                    `protobuf:"varint,66,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	UnknownGoodsAmount   *float64                                  `protobuf:"fixed64,67,opt,name=unknown_goods_amount,json=unknownGoodsAmount,proto3,oneof" json:"unknown_goods_amount,omitempty"`
	CalcPostCost         *float64                                  `protobuf:"fixed64,68,opt,name=calc_post_cost,json=calcPostCost,proto3,oneof" json:"calc_post_cost,omitempty"`
	PostCost             *float64                                  `protobuf:"fixed64,69,opt,name=post_cost,json=postCost,proto3,oneof" json:"post_cost,omitempty"`
	CalcWeight           *float64                                  `protobuf:"fixed64,70,opt,name=calc_weight,json=calcWeight,proto3,oneof" json:"calc_weight,omitempty"`
	PostWeight           *float64                                  `protobuf:"fixed64,71,opt,name=post_weight,json=postWeight,proto3,oneof" json:"post_weight,omitempty"`
	PackageId            *int32                                    `protobuf:"varint,72,opt,name=package_id,json=packageId,proto3,oneof" json:"package_id,omitempty"`
	PackageCost          *float64                                  `protobuf:"fixed64,73,opt,name=package_cost,json=packageCost,proto3,oneof" json:"package_cost,omitempty"`
	HasInvoice           *int32                                    `protobuf:"varint,74,opt,name=has_invoice,json=hasInvoice,proto3,oneof" json:"has_invoice,omitempty"`
	PrinterId            *int32                                    `protobuf:"varint,75,opt,name=printer_id,json=printerId,proto3,oneof" json:"printer_id,omitempty"`
	PickErrorCount       *int32                                    `protobuf:"varint,76,opt,name=pick_error_count,json=pickErrorCount,proto3,oneof" json:"pick_error_count,omitempty"`
	PickerId             *int32                                    `protobuf:"varint,77,opt,name=picker_id,json=pickerId,proto3,oneof" json:"picker_id,omitempty"`
	SorterId             *int32                                    `protobuf:"varint,78,opt,name=sorter_id,json=sorterId,proto3,oneof" json:"sorter_id,omitempty"`
	ExaminerId           *int32                                    `protobuf:"varint,79,opt,name=examiner_id,json=examinerId,proto3,oneof" json:"examiner_id,omitempty"`
	ConsignerId          *int32                                    `protobuf:"varint,80,opt,name=consigner_id,json=consignerId,proto3,oneof" json:"consigner_id,omitempty"`
	PackagerId           *int32                                    `protobuf:"varint,81,opt,name=packager_id,json=packagerId,proto3,oneof" json:"packager_id,omitempty"`
	PackScore            *int32                                    `protobuf:"varint,82,opt,name=pack_score,json=packScore,proto3,oneof" json:"pack_score,omitempty"`
	PickScore            *int32                                    `protobuf:"varint,83,opt,name=pick_score,json=pickScore,proto3,oneof" json:"pick_score,omitempty"`
	CheckouterId         *int32                                    `protobuf:"varint,84,opt,name=checkouter_id,json=checkouterId,proto3,oneof" json:"checkouter_id,omitempty"`
	WatcherId            *int32                                    `protobuf:"varint,85,opt,name=watcher_id,json=watcherId,proto3,oneof" json:"watcher_id,omitempty"`
	PicklistNo           *string                                   `protobuf:"bytes,86,opt,name=picklist_no,json=picklistNo,proto3,oneof" json:"picklist_no,omitempty"`
	PicklistSeq          *int32                                    `protobuf:"varint,87,opt,name=picklist_seq,json=picklistSeq,proto3,oneof" json:"picklist_seq,omitempty"`
	InvoicePrintStatus   *int32                                    `protobuf:"varint,88,opt,name=invoice_print_status,json=invoicePrintStatus,proto3,oneof" json:"invoice_print_status,omitempty"`
	FlagId               *int32                                    `protobuf:"varint,89,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	LogisticsTemplateId  *int32                                    `protobuf:"varint,90,opt,name=logistics_template_id,json=logisticsTemplateId,proto3,oneof" json:"logistics_template_id,omitempty"`
	SendbillTemplateId   *int32                                    `protobuf:"varint,91,opt,name=sendbill_template_id,json=sendbillTemplateId,proto3,oneof" json:"sendbill_template_id,omitempty"`
	PosAllocateMode      *int32                                    `protobuf:"varint,92,opt,name=pos_allocate_mode,json=posAllocateMode,proto3,oneof" json:"pos_allocate_mode,omitempty"`
	NoteCount            *int32                                    `protobuf:"varint,93,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	ReasonId             *int32                                    `protobuf:"varint,94,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	LockId               *int32                                    `protobuf:"varint,95,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	Reserve              *string                                   `protobuf:"bytes,96,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	BlockReason          *int32                                    `protobuf:"varint,97,opt,name=block_reason,json=blockReason,proto3,oneof" json:"block_reason,omitempty"`
	BatchNo              *string                                   `protobuf:"bytes,98,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	StockCheckTime       *string                                   `protobuf:"bytes,99,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	PickerName           *string                                   `protobuf:"bytes,100,opt,name=picker_name,json=pickerName,proto3,oneof" json:"picker_name,omitempty"`
	SorterName           *string                                   `protobuf:"bytes,101,opt,name=sorter_name,json=sorterName,proto3,oneof" json:"sorter_name,omitempty"`
	ExaminerName         *string                                   `protobuf:"bytes,102,opt,name=examiner_name,json=examinerName,proto3,oneof" json:"examiner_name,omitempty"`
	ConsignerName        *string                                   `protobuf:"bytes,103,opt,name=consigner_name,json=consignerName,proto3,oneof" json:"consigner_name,omitempty"`
	PackagerName         *string                                   `protobuf:"bytes,104,opt,name=packager_name,json=packagerName,proto3,oneof" json:"packager_name,omitempty"`
	CheckouterName       *string                                   `protobuf:"bytes,105,opt,name=checkouter_name,json=checkouterName,proto3,oneof" json:"checkouter_name,omitempty"`
	WatcherName          *string                                   `protobuf:"bytes,106,opt,name=watcher_name,json=watcherName,proto3,oneof" json:"watcher_name,omitempty"`
	DetailsList          []*WdtStockoutPurchaseReturnDetailRequest `protobuf:"bytes,107,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
}

func (x *WdtStockoutPurchaseReturnRequest) Reset() {
	*x = WdtStockoutPurchaseReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnRequest) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnRequest.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{406}
}

func (x *WdtStockoutPurchaseReturnRequest) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetKdBillNo() string {
	if x != nil && x.KdBillNo != nil {
		return *x.KdBillNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetKdPurchaseReturn() string {
	if x != nil && x.KdPurchaseReturn != nil {
		return *x.KdPurchaseReturn
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetWdtPurchaseReturn() string {
	if x != nil && x.WdtPurchaseReturn != nil {
		return *x.WdtPurchaseReturn
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetKdStockoutNo() string {
	if x != nil && x.KdStockoutNo != nil {
		return *x.KdStockoutNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetStockoutId() int32 {
	if x != nil && x.StockoutId != nil {
		return *x.StockoutId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetGoodsTotalAmount() float64 {
	if x != nil && x.GoodsTotalAmount != nil {
		return *x.GoodsTotalAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetGoodsTotalCost() float64 {
	if x != nil && x.GoodsTotalCost != nil {
		return *x.GoodsTotalCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPackageFee() float64 {
	if x != nil && x.PackageFee != nil {
		return *x.PackageFee
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverCountry() int32 {
	if x != nil && x.ReceiverCountry != nil {
		return *x.ReceiverCountry
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverProvince() int32 {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverCity() int32 {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverDistrict() int32 {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverZip() string {
	if x != nil && x.ReceiverZip != nil {
		return *x.ReceiverZip
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetStockoutReason() string {
	if x != nil && x.StockoutReason != nil {
		return *x.StockoutReason
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverArea() string {
	if x != nil && x.ReceiverArea != nil {
		return *x.ReceiverArea
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetReturnNo() string {
	if x != nil && x.ReturnNo != nil {
		return *x.ReturnNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPrApiOuterNo() string {
	if x != nil && x.PrApiOuterNo != nil {
		return *x.PrApiOuterNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetLastLoadPurchaseNo() string {
	if x != nil && x.LastLoadPurchaseNo != nil {
		return *x.LastLoadPurchaseNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPicklistPrintStatus() int32 {
	if x != nil && x.PicklistPrintStatus != nil {
		return *x.PicklistPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetLogisticsPrintStatus() int32 {
	if x != nil && x.LogisticsPrintStatus != nil {
		return *x.LogisticsPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetSendbillPrintStatus() int32 {
	if x != nil && x.SendbillPrintStatus != nil {
		return *x.SendbillPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetCustomerId() int32 {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetFreezeReason() int32 {
	if x != nil && x.FreezeReason != nil {
		return *x.FreezeReason
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetIsAllocated() int32 {
	if x != nil && x.IsAllocated != nil {
		return *x.IsAllocated
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetConsignStatus() int32 {
	if x != nil && x.ConsignStatus != nil {
		return *x.ConsignStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetEbillStatus() int32 {
	if x != nil && x.EbillStatus != nil {
		return *x.EbillStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetMd5Str() string {
	if x != nil && x.Md5Str != nil {
		return *x.Md5Str
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetRawGoodsCount() float64 {
	if x != nil && x.RawGoodsCount != nil {
		return *x.RawGoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetCustomType() int32 {
	if x != nil && x.CustomType != nil {
		return *x.CustomType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReceiverRing() string {
	if x != nil && x.ReceiverRing != nil {
		return *x.ReceiverRing
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetToDeliverTime() string {
	if x != nil && x.ToDeliverTime != nil {
		return *x.ToDeliverTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPreChargeTime() string {
	if x != nil && x.PreChargeTime != nil {
		return *x.PreChargeTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetUnknownGoodsAmount() float64 {
	if x != nil && x.UnknownGoodsAmount != nil {
		return *x.UnknownGoodsAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetCalcPostCost() float64 {
	if x != nil && x.CalcPostCost != nil {
		return *x.CalcPostCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPostCost() float64 {
	if x != nil && x.PostCost != nil {
		return *x.PostCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetCalcWeight() float64 {
	if x != nil && x.CalcWeight != nil {
		return *x.CalcWeight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPostWeight() float64 {
	if x != nil && x.PostWeight != nil {
		return *x.PostWeight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPackageId() int32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPackageCost() float64 {
	if x != nil && x.PackageCost != nil {
		return *x.PackageCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetHasInvoice() int32 {
	if x != nil && x.HasInvoice != nil {
		return *x.HasInvoice
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPrinterId() int32 {
	if x != nil && x.PrinterId != nil {
		return *x.PrinterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPickErrorCount() int32 {
	if x != nil && x.PickErrorCount != nil {
		return *x.PickErrorCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPickerId() int32 {
	if x != nil && x.PickerId != nil {
		return *x.PickerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetSorterId() int32 {
	if x != nil && x.SorterId != nil {
		return *x.SorterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetExaminerId() int32 {
	if x != nil && x.ExaminerId != nil {
		return *x.ExaminerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetConsignerId() int32 {
	if x != nil && x.ConsignerId != nil {
		return *x.ConsignerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPackagerId() int32 {
	if x != nil && x.PackagerId != nil {
		return *x.PackagerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPackScore() int32 {
	if x != nil && x.PackScore != nil {
		return *x.PackScore
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPickScore() int32 {
	if x != nil && x.PickScore != nil {
		return *x.PickScore
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetCheckouterId() int32 {
	if x != nil && x.CheckouterId != nil {
		return *x.CheckouterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetWatcherId() int32 {
	if x != nil && x.WatcherId != nil {
		return *x.WatcherId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPicklistNo() string {
	if x != nil && x.PicklistNo != nil {
		return *x.PicklistNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPicklistSeq() int32 {
	if x != nil && x.PicklistSeq != nil {
		return *x.PicklistSeq
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetInvoicePrintStatus() int32 {
	if x != nil && x.InvoicePrintStatus != nil {
		return *x.InvoicePrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetLogisticsTemplateId() int32 {
	if x != nil && x.LogisticsTemplateId != nil {
		return *x.LogisticsTemplateId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetSendbillTemplateId() int32 {
	if x != nil && x.SendbillTemplateId != nil {
		return *x.SendbillTemplateId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetPosAllocateMode() int32 {
	if x != nil && x.PosAllocateMode != nil {
		return *x.PosAllocateMode
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetReserve() string {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetBlockReason() int32 {
	if x != nil && x.BlockReason != nil {
		return *x.BlockReason
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPickerName() string {
	if x != nil && x.PickerName != nil {
		return *x.PickerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetSorterName() string {
	if x != nil && x.SorterName != nil {
		return *x.SorterName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetExaminerName() string {
	if x != nil && x.ExaminerName != nil {
		return *x.ExaminerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetConsignerName() string {
	if x != nil && x.ConsignerName != nil {
		return *x.ConsignerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetPackagerName() string {
	if x != nil && x.PackagerName != nil {
		return *x.PackagerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetCheckouterName() string {
	if x != nil && x.CheckouterName != nil {
		return *x.CheckouterName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetWatcherName() string {
	if x != nil && x.WatcherName != nil {
		return *x.WatcherName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnRequest) GetDetailsList() []*WdtStockoutPurchaseReturnDetailRequest {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

type WdtStockoutPurchaseReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                                    `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PushKingdeeStatusName *string                                    `protobuf:"bytes,2,opt,name=push_kingdee_status_name,json=pushKingdeeStatusName,proto3,oneof" json:"push_kingdee_status_name,omitempty"`
	StatusName            *string                                    `protobuf:"bytes,3,opt,name=status_name,json=statusName,proto3,oneof" json:"status_name,omitempty"`
	PushKingdeeStatus     *int32                                     `protobuf:"varint,4,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdBillNo              *string                                    `protobuf:"bytes,5,opt,name=kd_bill_no,json=kdBillNo,proto3,oneof" json:"kd_bill_no,omitempty"`
	KdPurchaseReturn      *string                                    `protobuf:"bytes,6,opt,name=kd_purchase_return,json=kdPurchaseReturn,proto3,oneof" json:"kd_purchase_return,omitempty"`
	WdtPurchaseReturn     *string                                    `protobuf:"bytes,7,opt,name=wdt_purchase_return,json=wdtPurchaseReturn,proto3,oneof" json:"wdt_purchase_return,omitempty"`
	StockoutNo            *string                                    `protobuf:"bytes,8,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	KdStockoutNo          *string                                    `protobuf:"bytes,9,opt,name=kd_stockout_no,json=kdStockoutNo,proto3,oneof" json:"kd_stockout_no,omitempty"`
	Status                *int32                                     `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	DetailsList           []*WdtStockoutPurchaseReturnDetailResponse `protobuf:"bytes,11,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	StockoutId            *int32                                     `protobuf:"varint,12,opt,name=stockout_id,json=stockoutId,proto3,oneof" json:"stockout_id,omitempty"`
	OrderNo               *string                                    `protobuf:"bytes,13,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	SrcOrderNo            *string                                    `protobuf:"bytes,14,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	WarehouseNo           *string                                    `protobuf:"bytes,15,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	ConsignTime           *string                                    `protobuf:"bytes,16,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	OrderType             *int32                                     `protobuf:"varint,17,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName         *string                                    `protobuf:"bytes,18,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Subtype               *string                                    `protobuf:"bytes,19,opt,name=subtype,proto3,oneof" json:"subtype,omitempty"`
	GoodsCount            *float64                                   `protobuf:"fixed64,20,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTotalAmount      *float64                                   `protobuf:"fixed64,21,opt,name=goods_total_amount,json=goodsTotalAmount,proto3,oneof" json:"goods_total_amount,omitempty"`
	GoodsTotalCost        *float64                                   `protobuf:"fixed64,22,opt,name=goods_total_cost,json=goodsTotalCost,proto3,oneof" json:"goods_total_cost,omitempty"`
	PostFee               *float64                                   `protobuf:"fixed64,23,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	LogisticsNo           *string                                    `protobuf:"bytes,24,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PackageFee            *float64                                   `protobuf:"fixed64,25,opt,name=package_fee,json=packageFee,proto3,oneof" json:"package_fee,omitempty"`
	ReceiverName          *string                                    `protobuf:"bytes,26,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverCountry       *int32                                     `protobuf:"varint,27,opt,name=receiver_country,json=receiverCountry,proto3,oneof" json:"receiver_country,omitempty"`
	ReceiverProvince      *int32                                     `protobuf:"varint,28,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity          *int32                                     `protobuf:"varint,29,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict      *int32                                     `protobuf:"varint,30,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress       *string                                    `protobuf:"bytes,31,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile        *string                                    `protobuf:"bytes,32,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverTelno         *string                                    `protobuf:"bytes,33,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReceiverZip           *string                                    `protobuf:"bytes,34,opt,name=receiver_zip,json=receiverZip,proto3,oneof" json:"receiver_zip,omitempty"`
	Weight                *float64                                   `protobuf:"fixed64,35,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Remark                *string                                    `protobuf:"bytes,36,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	StockoutReason        *string                                    `protobuf:"bytes,37,opt,name=stockout_reason,json=stockoutReason,proto3,oneof" json:"stockout_reason,omitempty"`
	OuterNo               *string                                    `protobuf:"bytes,38,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	OperatorName          *string                                    `protobuf:"bytes,39,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	ReceiverArea          *string                                    `protobuf:"bytes,40,opt,name=receiver_area,json=receiverArea,proto3,oneof" json:"receiver_area,omitempty"`
	ReturnNo              *string                                    `protobuf:"bytes,41,opt,name=return_no,json=returnNo,proto3,oneof" json:"return_no,omitempty"`
	ProviderNo            *string                                    `protobuf:"bytes,42,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName          *string                                    `protobuf:"bytes,43,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Modified              *string                                    `protobuf:"bytes,44,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	PrApiOuterNo          *string                                    `protobuf:"bytes,45,opt,name=pr_api_outer_no,json=prApiOuterNo,proto3,oneof" json:"pr_api_outer_no,omitempty"`
	LastLoadPurchaseNo    *string                                    `protobuf:"bytes,46,opt,name=last_load_purchase_no,json=lastLoadPurchaseNo,proto3,oneof" json:"last_load_purchase_no,omitempty"`
	PicklistPrintStatus   *int32                                     `protobuf:"varint,47,opt,name=picklist_print_status,json=picklistPrintStatus,proto3,oneof" json:"picklist_print_status,omitempty"`
	LogisticsPrintStatus  *int32                                     `protobuf:"varint,48,opt,name=logistics_print_status,json=logisticsPrintStatus,proto3,oneof" json:"logistics_print_status,omitempty"`
	SendbillPrintStatus   *int32                                     `protobuf:"varint,49,opt,name=sendbill_print_status,json=sendbillPrintStatus,proto3,oneof" json:"sendbill_print_status,omitempty"`
	SrcOrderType          *int32                                     `protobuf:"varint,50,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId            *int32                                     `protobuf:"varint,51,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	WmsStatus             *int32                                     `protobuf:"varint,52,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo             *string                                    `protobuf:"bytes,53,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WarehouseType         *int32                                     `protobuf:"varint,54,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	WarehouseId           *int32                                     `protobuf:"varint,55,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	CustomerId            *int32                                     `protobuf:"varint,56,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	FreezeReason          *int32                                     `protobuf:"varint,57,opt,name=freeze_reason,json=freezeReason,proto3,oneof" json:"freeze_reason,omitempty"`
	IsAllocated           *int32                                     `protobuf:"varint,58,opt,name=is_allocated,json=isAllocated,proto3,oneof" json:"is_allocated,omitempty"`
	ConsignStatus         *int32                                     `protobuf:"varint,59,opt,name=consign_status,json=consignStatus,proto3,oneof" json:"consign_status,omitempty"`
	EbillStatus           *int32                                     `protobuf:"varint,60,opt,name=ebill_status,json=ebillStatus,proto3,oneof" json:"ebill_status,omitempty"`
	OperatorId            *int32                                     `protobuf:"varint,61,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	GoodsTypeCount        *int32                                     `protobuf:"varint,62,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	Md5Str                *string                                    `protobuf:"bytes,63,opt,name=md5_str,json=md5Str,proto3,oneof" json:"md5_str,omitempty"`
	RawGoodsCount         *float64                                   `protobuf:"fixed64,64,opt,name=raw_goods_count,json=rawGoodsCount,proto3,oneof" json:"raw_goods_count,omitempty"`
	CustomType            *int32                                     `protobuf:"varint,65,opt,name=custom_type,json=customType,proto3,oneof" json:"custom_type,omitempty"`
	ReceiverRing          *string                                    `protobuf:"bytes,66,opt,name=receiver_ring,json=receiverRing,proto3,oneof" json:"receiver_ring,omitempty"`
	ToDeliverTime         *string                                    `protobuf:"bytes,67,opt,name=to_deliver_time,json=toDeliverTime,proto3,oneof" json:"to_deliver_time,omitempty"`
	PreChargeTime         *string                                    `protobuf:"bytes,68,opt,name=pre_charge_time,json=preChargeTime,proto3,oneof" json:"pre_charge_time,omitempty"`
	LogisticsId           *int32                                     `protobuf:"varint,69,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	UnknownGoodsAmount    *float64                                   `protobuf:"fixed64,70,opt,name=unknown_goods_amount,json=unknownGoodsAmount,proto3,oneof" json:"unknown_goods_amount,omitempty"`
	CalcPostCost          *float64                                   `protobuf:"fixed64,71,opt,name=calc_post_cost,json=calcPostCost,proto3,oneof" json:"calc_post_cost,omitempty"`
	PostCost              *float64                                   `protobuf:"fixed64,72,opt,name=post_cost,json=postCost,proto3,oneof" json:"post_cost,omitempty"`
	CalcWeight            *float64                                   `protobuf:"fixed64,73,opt,name=calc_weight,json=calcWeight,proto3,oneof" json:"calc_weight,omitempty"`
	PostWeight            *float64                                   `protobuf:"fixed64,74,opt,name=post_weight,json=postWeight,proto3,oneof" json:"post_weight,omitempty"`
	PackageId             *int32                                     `protobuf:"varint,75,opt,name=package_id,json=packageId,proto3,oneof" json:"package_id,omitempty"`
	PackageCost           *float64                                   `protobuf:"fixed64,76,opt,name=package_cost,json=packageCost,proto3,oneof" json:"package_cost,omitempty"`
	HasInvoice            *int32                                     `protobuf:"varint,77,opt,name=has_invoice,json=hasInvoice,proto3,oneof" json:"has_invoice,omitempty"`
	PrinterId             *int32                                     `protobuf:"varint,78,opt,name=printer_id,json=printerId,proto3,oneof" json:"printer_id,omitempty"`
	PickErrorCount        *int32                                     `protobuf:"varint,79,opt,name=pick_error_count,json=pickErrorCount,proto3,oneof" json:"pick_error_count,omitempty"`
	PickerId              *int32                                     `protobuf:"varint,80,opt,name=picker_id,json=pickerId,proto3,oneof" json:"picker_id,omitempty"`
	SorterId              *int32                                     `protobuf:"varint,81,opt,name=sorter_id,json=sorterId,proto3,oneof" json:"sorter_id,omitempty"`
	ExaminerId            *int32                                     `protobuf:"varint,82,opt,name=examiner_id,json=examinerId,proto3,oneof" json:"examiner_id,omitempty"`
	ConsignerId           *int32                                     `protobuf:"varint,83,opt,name=consigner_id,json=consignerId,proto3,oneof" json:"consigner_id,omitempty"`
	PackagerId            *int32                                     `protobuf:"varint,84,opt,name=packager_id,json=packagerId,proto3,oneof" json:"packager_id,omitempty"`
	PackScore             *int32                                     `protobuf:"varint,85,opt,name=pack_score,json=packScore,proto3,oneof" json:"pack_score,omitempty"`
	PickScore             *int32                                     `protobuf:"varint,86,opt,name=pick_score,json=pickScore,proto3,oneof" json:"pick_score,omitempty"`
	CheckouterId          *int32                                     `protobuf:"varint,87,opt,name=checkouter_id,json=checkouterId,proto3,oneof" json:"checkouter_id,omitempty"`
	WatcherId             *int32                                     `protobuf:"varint,88,opt,name=watcher_id,json=watcherId,proto3,oneof" json:"watcher_id,omitempty"`
	PicklistNo            *string                                    `protobuf:"bytes,89,opt,name=picklist_no,json=picklistNo,proto3,oneof" json:"picklist_no,omitempty"`
	PicklistSeq           *int32                                     `protobuf:"varint,90,opt,name=picklist_seq,json=picklistSeq,proto3,oneof" json:"picklist_seq,omitempty"`
	InvoicePrintStatus    *int32                                     `protobuf:"varint,91,opt,name=invoice_print_status,json=invoicePrintStatus,proto3,oneof" json:"invoice_print_status,omitempty"`
	FlagId                *int32                                     `protobuf:"varint,92,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	LogisticsTemplateId   *int32                                     `protobuf:"varint,93,opt,name=logistics_template_id,json=logisticsTemplateId,proto3,oneof" json:"logistics_template_id,omitempty"`
	SendbillTemplateId    *int32                                     `protobuf:"varint,94,opt,name=sendbill_template_id,json=sendbillTemplateId,proto3,oneof" json:"sendbill_template_id,omitempty"`
	PosAllocateMode       *int32                                     `protobuf:"varint,95,opt,name=pos_allocate_mode,json=posAllocateMode,proto3,oneof" json:"pos_allocate_mode,omitempty"`
	NoteCount             *int32                                     `protobuf:"varint,96,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	ReasonId              *int32                                     `protobuf:"varint,97,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	LockId                *int32                                     `protobuf:"varint,98,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	Reserve               *string                                    `protobuf:"bytes,99,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	BlockReason           *int32                                     `protobuf:"varint,100,opt,name=block_reason,json=blockReason,proto3,oneof" json:"block_reason,omitempty"`
	BatchNo               *string                                    `protobuf:"bytes,101,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	StockCheckTime        *string                                    `protobuf:"bytes,102,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	PickerName            *string                                    `protobuf:"bytes,103,opt,name=picker_name,json=pickerName,proto3,oneof" json:"picker_name,omitempty"`
	SorterName            *string                                    `protobuf:"bytes,104,opt,name=sorter_name,json=sorterName,proto3,oneof" json:"sorter_name,omitempty"`
	ExaminerName          *string                                    `protobuf:"bytes,105,opt,name=examiner_name,json=examinerName,proto3,oneof" json:"examiner_name,omitempty"`
	ConsignerName         *string                                    `protobuf:"bytes,106,opt,name=consigner_name,json=consignerName,proto3,oneof" json:"consigner_name,omitempty"`
	PackagerName          *string                                    `protobuf:"bytes,107,opt,name=packager_name,json=packagerName,proto3,oneof" json:"packager_name,omitempty"`
	CheckouterName        *string                                    `protobuf:"bytes,108,opt,name=checkouter_name,json=checkouterName,proto3,oneof" json:"checkouter_name,omitempty"`
	WatcherName           *string                                    `protobuf:"bytes,109,opt,name=watcher_name,json=watcherName,proto3,oneof" json:"watcher_name,omitempty"`
}

func (x *WdtStockoutPurchaseReturnResponse) Reset() {
	*x = WdtStockoutPurchaseReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnResponse) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnResponse.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{407}
}

func (x *WdtStockoutPurchaseReturnResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPushKingdeeStatusName() string {
	if x != nil && x.PushKingdeeStatusName != nil {
		return *x.PushKingdeeStatusName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetStatusName() string {
	if x != nil && x.StatusName != nil {
		return *x.StatusName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetKdBillNo() string {
	if x != nil && x.KdBillNo != nil {
		return *x.KdBillNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetKdPurchaseReturn() string {
	if x != nil && x.KdPurchaseReturn != nil {
		return *x.KdPurchaseReturn
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetWdtPurchaseReturn() string {
	if x != nil && x.WdtPurchaseReturn != nil {
		return *x.WdtPurchaseReturn
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetKdStockoutNo() string {
	if x != nil && x.KdStockoutNo != nil {
		return *x.KdStockoutNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetDetailsList() []*WdtStockoutPurchaseReturnDetailResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtStockoutPurchaseReturnResponse) GetStockoutId() int32 {
	if x != nil && x.StockoutId != nil {
		return *x.StockoutId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetGoodsTotalAmount() float64 {
	if x != nil && x.GoodsTotalAmount != nil {
		return *x.GoodsTotalAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetGoodsTotalCost() float64 {
	if x != nil && x.GoodsTotalCost != nil {
		return *x.GoodsTotalCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPackageFee() float64 {
	if x != nil && x.PackageFee != nil {
		return *x.PackageFee
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverCountry() int32 {
	if x != nil && x.ReceiverCountry != nil {
		return *x.ReceiverCountry
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverProvince() int32 {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverCity() int32 {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverDistrict() int32 {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverZip() string {
	if x != nil && x.ReceiverZip != nil {
		return *x.ReceiverZip
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetStockoutReason() string {
	if x != nil && x.StockoutReason != nil {
		return *x.StockoutReason
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverArea() string {
	if x != nil && x.ReceiverArea != nil {
		return *x.ReceiverArea
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetReturnNo() string {
	if x != nil && x.ReturnNo != nil {
		return *x.ReturnNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPrApiOuterNo() string {
	if x != nil && x.PrApiOuterNo != nil {
		return *x.PrApiOuterNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetLastLoadPurchaseNo() string {
	if x != nil && x.LastLoadPurchaseNo != nil {
		return *x.LastLoadPurchaseNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPicklistPrintStatus() int32 {
	if x != nil && x.PicklistPrintStatus != nil {
		return *x.PicklistPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetLogisticsPrintStatus() int32 {
	if x != nil && x.LogisticsPrintStatus != nil {
		return *x.LogisticsPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetSendbillPrintStatus() int32 {
	if x != nil && x.SendbillPrintStatus != nil {
		return *x.SendbillPrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetCustomerId() int32 {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetFreezeReason() int32 {
	if x != nil && x.FreezeReason != nil {
		return *x.FreezeReason
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetIsAllocated() int32 {
	if x != nil && x.IsAllocated != nil {
		return *x.IsAllocated
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetConsignStatus() int32 {
	if x != nil && x.ConsignStatus != nil {
		return *x.ConsignStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetEbillStatus() int32 {
	if x != nil && x.EbillStatus != nil {
		return *x.EbillStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetMd5Str() string {
	if x != nil && x.Md5Str != nil {
		return *x.Md5Str
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetRawGoodsCount() float64 {
	if x != nil && x.RawGoodsCount != nil {
		return *x.RawGoodsCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetCustomType() int32 {
	if x != nil && x.CustomType != nil {
		return *x.CustomType
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReceiverRing() string {
	if x != nil && x.ReceiverRing != nil {
		return *x.ReceiverRing
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetToDeliverTime() string {
	if x != nil && x.ToDeliverTime != nil {
		return *x.ToDeliverTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPreChargeTime() string {
	if x != nil && x.PreChargeTime != nil {
		return *x.PreChargeTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetUnknownGoodsAmount() float64 {
	if x != nil && x.UnknownGoodsAmount != nil {
		return *x.UnknownGoodsAmount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetCalcPostCost() float64 {
	if x != nil && x.CalcPostCost != nil {
		return *x.CalcPostCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPostCost() float64 {
	if x != nil && x.PostCost != nil {
		return *x.PostCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetCalcWeight() float64 {
	if x != nil && x.CalcWeight != nil {
		return *x.CalcWeight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPostWeight() float64 {
	if x != nil && x.PostWeight != nil {
		return *x.PostWeight
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPackageId() int32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPackageCost() float64 {
	if x != nil && x.PackageCost != nil {
		return *x.PackageCost
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetHasInvoice() int32 {
	if x != nil && x.HasInvoice != nil {
		return *x.HasInvoice
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPrinterId() int32 {
	if x != nil && x.PrinterId != nil {
		return *x.PrinterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPickErrorCount() int32 {
	if x != nil && x.PickErrorCount != nil {
		return *x.PickErrorCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPickerId() int32 {
	if x != nil && x.PickerId != nil {
		return *x.PickerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetSorterId() int32 {
	if x != nil && x.SorterId != nil {
		return *x.SorterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetExaminerId() int32 {
	if x != nil && x.ExaminerId != nil {
		return *x.ExaminerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetConsignerId() int32 {
	if x != nil && x.ConsignerId != nil {
		return *x.ConsignerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPackagerId() int32 {
	if x != nil && x.PackagerId != nil {
		return *x.PackagerId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPackScore() int32 {
	if x != nil && x.PackScore != nil {
		return *x.PackScore
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPickScore() int32 {
	if x != nil && x.PickScore != nil {
		return *x.PickScore
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetCheckouterId() int32 {
	if x != nil && x.CheckouterId != nil {
		return *x.CheckouterId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetWatcherId() int32 {
	if x != nil && x.WatcherId != nil {
		return *x.WatcherId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPicklistNo() string {
	if x != nil && x.PicklistNo != nil {
		return *x.PicklistNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPicklistSeq() int32 {
	if x != nil && x.PicklistSeq != nil {
		return *x.PicklistSeq
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetInvoicePrintStatus() int32 {
	if x != nil && x.InvoicePrintStatus != nil {
		return *x.InvoicePrintStatus
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetLogisticsTemplateId() int32 {
	if x != nil && x.LogisticsTemplateId != nil {
		return *x.LogisticsTemplateId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetSendbillTemplateId() int32 {
	if x != nil && x.SendbillTemplateId != nil {
		return *x.SendbillTemplateId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetPosAllocateMode() int32 {
	if x != nil && x.PosAllocateMode != nil {
		return *x.PosAllocateMode
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetReserve() string {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetBlockReason() int32 {
	if x != nil && x.BlockReason != nil {
		return *x.BlockReason
	}
	return 0
}

func (x *WdtStockoutPurchaseReturnResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPickerName() string {
	if x != nil && x.PickerName != nil {
		return *x.PickerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetSorterName() string {
	if x != nil && x.SorterName != nil {
		return *x.SorterName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetExaminerName() string {
	if x != nil && x.ExaminerName != nil {
		return *x.ExaminerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetConsignerName() string {
	if x != nil && x.ConsignerName != nil {
		return *x.ConsignerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetPackagerName() string {
	if x != nil && x.PackagerName != nil {
		return *x.PackagerName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetCheckouterName() string {
	if x != nil && x.CheckouterName != nil {
		return *x.CheckouterName
	}
	return ""
}

func (x *WdtStockoutPurchaseReturnResponse) GetWatcherName() string {
	if x != nil && x.WatcherName != nil {
		return *x.WatcherName
	}
	return ""
}

type WdtStockoutPurchaseReturnRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockoutId int32 `protobuf:"varint,1,opt,name=stockout_id,json=stockoutId,proto3" json:"stockout_id,omitempty"`
}

func (x *WdtStockoutPurchaseReturnRetrieveRequest) Reset() {
	*x = WdtStockoutPurchaseReturnRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutPurchaseReturnRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutPurchaseReturnRetrieveRequest) ProtoMessage() {}

func (x *WdtStockoutPurchaseReturnRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutPurchaseReturnRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtStockoutPurchaseReturnRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{408}
}

func (x *WdtStockoutPurchaseReturnRetrieveRequest) GetStockoutId() int32 {
	if x != nil {
		return x.StockoutId
	}
	return 0
}

type WdtStockoutTransferOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId            *int32                                      `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	PositionList     []*WdtStockoutTransferOrderPositionResponse `protobuf:"bytes,2,rep,name=position_list,json=positionList,proto3" json:"position_list,omitempty"`
	StockoutId       *int32                                      `protobuf:"varint,3,opt,name=stockout_id,json=stockoutId,proto3,oneof" json:"stockout_id,omitempty"`
	SrcOrderDetailId *int32                                      `protobuf:"varint,4,opt,name=src_order_detail_id,json=srcOrderDetailId,proto3,oneof" json:"src_order_detail_id,omitempty"`
	GoodsType        *int32                                      `protobuf:"varint,5,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	SpecNo           *string                                     `protobuf:"bytes,6,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount       *float64                                    `protobuf:"fixed64,7,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	SellPrice        *float64                                    `protobuf:"fixed64,8,opt,name=sell_price,json=sellPrice,proto3,oneof" json:"sell_price,omitempty"`
	BrandNo          *string                                     `protobuf:"bytes,9,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName        *string                                     `protobuf:"bytes,10,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName        *string                                     `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo          *string                                     `protobuf:"bytes,12,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecName         *string                                     `protobuf:"bytes,13,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode         *string                                     `protobuf:"bytes,14,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	CostPrice        *float64                                    `protobuf:"fixed64,15,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	TotalAmount      *float64                                    `protobuf:"fixed64,16,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
	Weight           *float64                                    `protobuf:"fixed64,17,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Remark           *string                                     `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	GoodsUnit        *string                                     `protobuf:"bytes,19,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	BatchNo          *string                                     `protobuf:"bytes,20,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark      *string                                     `protobuf:"bytes,21,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	ExpireDate       *string                                     `protobuf:"bytes,22,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
}

func (x *WdtStockoutTransferOrderDetailResponse) Reset() {
	*x = WdtStockoutTransferOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutTransferOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutTransferOrderDetailResponse) ProtoMessage() {}

func (x *WdtStockoutTransferOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutTransferOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*WdtStockoutTransferOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{409}
}

func (x *WdtStockoutTransferOrderDetailResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetPositionList() []*WdtStockoutTransferOrderPositionResponse {
	if x != nil {
		return x.PositionList
	}
	return nil
}

func (x *WdtStockoutTransferOrderDetailResponse) GetStockoutId() int32 {
	if x != nil && x.StockoutId != nil {
		return *x.StockoutId
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetSrcOrderDetailId() int32 {
	if x != nil && x.SrcOrderDetailId != nil {
		return *x.SrcOrderDetailId
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetSellPrice() float64 {
	if x != nil && x.SellPrice != nil {
		return *x.SellPrice
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtStockoutTransferOrderDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtStockoutTransferOrderDetailResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

type WdtStockoutTransferOrderPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId                 *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	PositionId            *int32   `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	StockoutOrderDetailId *int32   `protobuf:"varint,3,opt,name=stockout_order_detail_id,json=stockoutOrderDetailId,proto3,oneof" json:"stockout_order_detail_id,omitempty"`
	StockSpecDetailId     *int32   `protobuf:"varint,4,opt,name=stock_spec_detail_id,json=stockSpecDetailId,proto3,oneof" json:"stock_spec_detail_id,omitempty"`
	StockinDetailId       *int32   `protobuf:"varint,5,opt,name=stockin_detail_id,json=stockinDetailId,proto3,oneof" json:"stockin_detail_id,omitempty"`
	VStockSpecDetailId    *int32   `protobuf:"varint,6,opt,name=v_stock_spec_detail_id,json=vStockSpecDetailId,proto3,oneof" json:"v_stock_spec_detail_id,omitempty"`
	PositionNo            *string  `protobuf:"bytes,7,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	PositionGoodsCount    *float64 `protobuf:"fixed64,8,opt,name=position_goods_count,json=positionGoodsCount,proto3,oneof" json:"position_goods_count,omitempty"`
	BatchId               *string  `protobuf:"bytes,9,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	BatchNo               *string  `protobuf:"bytes,10,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	CostPrice             *float64 `protobuf:"fixed64,11,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	Modified              *string  `protobuf:"bytes,12,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ExpireDate            *string  `protobuf:"bytes,13,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	Created               *string  `protobuf:"bytes,14,opt,name=created,proto3,oneof" json:"created,omitempty"`
}

func (x *WdtStockoutTransferOrderPositionResponse) Reset() {
	*x = WdtStockoutTransferOrderPositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutTransferOrderPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutTransferOrderPositionResponse) ProtoMessage() {}

func (x *WdtStockoutTransferOrderPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutTransferOrderPositionResponse.ProtoReflect.Descriptor instead.
func (*WdtStockoutTransferOrderPositionResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{410}
}

func (x *WdtStockoutTransferOrderPositionResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetStockoutOrderDetailId() int32 {
	if x != nil && x.StockoutOrderDetailId != nil {
		return *x.StockoutOrderDetailId
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetStockSpecDetailId() int32 {
	if x != nil && x.StockSpecDetailId != nil {
		return *x.StockSpecDetailId
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetStockinDetailId() int32 {
	if x != nil && x.StockinDetailId != nil {
		return *x.StockinDetailId
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetVStockSpecDetailId() int32 {
	if x != nil && x.VStockSpecDetailId != nil {
		return *x.VStockSpecDetailId
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderPositionResponse) GetPositionGoodsCount() float64 {
	if x != nil && x.PositionGoodsCount != nil {
		return *x.PositionGoodsCount
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetBatchId() string {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return ""
}

func (x *WdtStockoutTransferOrderPositionResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderPositionResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtStockoutTransferOrderPositionResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockoutTransferOrderPositionResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtStockoutTransferOrderPositionResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

type WdtStockoutTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                                   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	PushKingdeeStatusName *string                                   `protobuf:"bytes,2,opt,name=push_kingdee_status_name,json=pushKingdeeStatusName,proto3,oneof" json:"push_kingdee_status_name,omitempty"`
	StatusName            *string                                   `protobuf:"bytes,4,opt,name=status_name,json=statusName,proto3,oneof" json:"status_name,omitempty"`
	DetailsList           []*WdtStockoutTransferOrderDetailResponse `protobuf:"bytes,5,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	StockoutId            *int32                                    `protobuf:"varint,6,opt,name=stockout_id,json=stockoutId,proto3,oneof" json:"stockout_id,omitempty"`
	Status                *int32                                    `protobuf:"varint,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	OrderType             *int32                                    `protobuf:"varint,8,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	PushKingdeeStatus     *int32                                    `protobuf:"varint,9,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KdTransferApply       *string                                   `protobuf:"bytes,10,opt,name=kd_transfer_apply,json=kdTransferApply,proto3,oneof" json:"kd_transfer_apply,omitempty"`
	WdtTransferOrder      *string                                   `protobuf:"bytes,11,opt,name=wdt_transfer_order,json=wdtTransferOrder,proto3,oneof" json:"wdt_transfer_order,omitempty"`
	StockoutNo            *string                                   `protobuf:"bytes,12,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	WarehouseNoOut        *string                                   `protobuf:"bytes,13,opt,name=warehouse_no_out,json=warehouseNoOut,proto3,oneof" json:"warehouse_no_out,omitempty"`
	WarehouseNoIn         *string                                   `protobuf:"bytes,14,opt,name=warehouse_no_in,json=warehouseNoIn,proto3,oneof" json:"warehouse_no_in,omitempty"`
	KdStockoutNo          *string                                   `protobuf:"bytes,15,opt,name=kd_stockout_no,json=kdStockoutNo,proto3,oneof" json:"kd_stockout_no,omitempty"`
	OrderNo               *string                                   `protobuf:"bytes,16,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	SrcOrderNo            *string                                   `protobuf:"bytes,17,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	WarehouseNo           *string                                   `protobuf:"bytes,18,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	ConsignTime           *string                                   `protobuf:"bytes,19,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	OrderTypeName         *string                                   `protobuf:"bytes,20,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Subtype               *string                                   `protobuf:"bytes,21,opt,name=subtype,proto3,oneof" json:"subtype,omitempty"`
	StockoutReason        *string                                   `protobuf:"bytes,22,opt,name=stockout_reason,json=stockoutReason,proto3,oneof" json:"stockout_reason,omitempty"`
	GoodsCount            *float64                                  `protobuf:"fixed64,23,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTotalAmount      *float64                                  `protobuf:"fixed64,24,opt,name=goods_total_amount,json=goodsTotalAmount,proto3,oneof" json:"goods_total_amount,omitempty"`
	GoodsTotalCost        *float64                                  `protobuf:"fixed64,25,opt,name=goods_total_cost,json=goodsTotalCost,proto3,oneof" json:"goods_total_cost,omitempty"`
	PostFee               *float64                                  `protobuf:"fixed64,26,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	LogisticsNo           *string                                   `protobuf:"bytes,27,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PackageFee            *float64                                  `protobuf:"fixed64,28,opt,name=package_fee,json=packageFee,proto3,oneof" json:"package_fee,omitempty"`
	ReceiverName          *string                                   `protobuf:"bytes,29,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverCountry       *int32                                    `protobuf:"varint,30,opt,name=receiver_country,json=receiverCountry,proto3,oneof" json:"receiver_country,omitempty"`
	ReceiverProvince      *string                                   `protobuf:"bytes,31,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity          *string                                   `protobuf:"bytes,32,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict      *string                                   `protobuf:"bytes,33,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress       *string                                   `protobuf:"bytes,34,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile        *string                                   `protobuf:"bytes,35,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverTelno         *string                                   `protobuf:"bytes,36,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReceiverZip           *string                                   `protobuf:"bytes,37,opt,name=receiver_zip,json=receiverZip,proto3,oneof" json:"receiver_zip,omitempty"`
	Weight                *float64                                  `protobuf:"fixed64,38,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Remark                *string                                   `protobuf:"bytes,39,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	OuterNo               *string                                   `protobuf:"bytes,40,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	OperatorName          *string                                   `protobuf:"bytes,41,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	LogisticsType         *string                                   `protobuf:"bytes,42,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsCode         *string                                   `protobuf:"bytes,43,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsName         *string                                   `protobuf:"bytes,44,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	Modified              *string                                   `protobuf:"bytes,45,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	StockCheckTime        *string                                   `protobuf:"bytes,46,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
}

func (x *WdtStockoutTransferOrderResponse) Reset() {
	*x = WdtStockoutTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockoutTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockoutTransferOrderResponse) ProtoMessage() {}

func (x *WdtStockoutTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockoutTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*WdtStockoutTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{411}
}

func (x *WdtStockoutTransferOrderResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetPushKingdeeStatusName() string {
	if x != nil && x.PushKingdeeStatusName != nil {
		return *x.PushKingdeeStatusName
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetStatusName() string {
	if x != nil && x.StatusName != nil {
		return *x.StatusName
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetDetailsList() []*WdtStockoutTransferOrderDetailResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtStockoutTransferOrderResponse) GetStockoutId() int32 {
	if x != nil && x.StockoutId != nil {
		return *x.StockoutId
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetKdTransferApply() string {
	if x != nil && x.KdTransferApply != nil {
		return *x.KdTransferApply
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetWdtTransferOrder() string {
	if x != nil && x.WdtTransferOrder != nil {
		return *x.WdtTransferOrder
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetWarehouseNoOut() string {
	if x != nil && x.WarehouseNoOut != nil {
		return *x.WarehouseNoOut
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetWarehouseNoIn() string {
	if x != nil && x.WarehouseNoIn != nil {
		return *x.WarehouseNoIn
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetKdStockoutNo() string {
	if x != nil && x.KdStockoutNo != nil {
		return *x.KdStockoutNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetStockoutReason() string {
	if x != nil && x.StockoutReason != nil {
		return *x.StockoutReason
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetGoodsTotalAmount() float64 {
	if x != nil && x.GoodsTotalAmount != nil {
		return *x.GoodsTotalAmount
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetGoodsTotalCost() float64 {
	if x != nil && x.GoodsTotalCost != nil {
		return *x.GoodsTotalCost
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetPackageFee() float64 {
	if x != nil && x.PackageFee != nil {
		return *x.PackageFee
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverCountry() int32 {
	if x != nil && x.ReceiverCountry != nil {
		return *x.ReceiverCountry
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetReceiverZip() string {
	if x != nil && x.ReceiverZip != nil {
		return *x.ReceiverZip
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtStockoutTransferOrderResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetLogisticsType() string {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtStockoutTransferOrderResponse) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

type WdtTradeGoodslistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poid             string   `protobuf:"bytes,1,opt,name=poid,proto3" json:"poid,omitempty"`
	Modified         *string  `protobuf:"bytes,2,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created          *string  `protobuf:"bytes,3,opt,name=created,proto3,oneof" json:"created,omitempty"`
	SrcTid           *string  `protobuf:"bytes,4,opt,name=src_tid,json=srcTid,proto3,oneof" json:"src_tid,omitempty"`
	RecId            *int32   `protobuf:"varint,5,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	SrcOid           *string  `protobuf:"bytes,6,opt,name=src_oid,json=srcOid,proto3,oneof" json:"src_oid,omitempty"`
	Flag             *int32   `protobuf:"varint,7,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	RefundStatus     *int32   `protobuf:"varint,8,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	PayId            *string  `protobuf:"bytes,9,opt,name=pay_id,json=payId,proto3,oneof" json:"pay_id,omitempty"`
	PayStatus        *int32   `protobuf:"varint,10,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string  `protobuf:"bytes,11,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm     *int32   `protobuf:"varint,12,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BindOid          *string  `protobuf:"bytes,13,opt,name=bind_oid,json=bindOid,proto3,oneof" json:"bind_oid,omitempty"`
	PlatformId       *int32   `protobuf:"varint,14,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformGoodsId  *string  `protobuf:"bytes,15,opt,name=platform_goods_id,json=platformGoodsId,proto3,oneof" json:"platform_goods_id,omitempty"`
	PlatformSpecId   *string  `protobuf:"bytes,16,opt,name=platform_spec_id,json=platformSpecId,proto3,oneof" json:"platform_spec_id,omitempty"`
	SuiteId          *int32   `protobuf:"varint,17,opt,name=suite_id,json=suiteId,proto3,oneof" json:"suite_id,omitempty"`
	SuiteNo          *string  `protobuf:"bytes,18,opt,name=suite_no,json=suiteNo,proto3,oneof" json:"suite_no,omitempty"`
	SuiteName        *string  `protobuf:"bytes,19,opt,name=suite_name,json=suiteName,proto3,oneof" json:"suite_name,omitempty"`
	SuiteNum         *float64 `protobuf:"fixed64,20,opt,name=suite_num,json=suiteNum,proto3,oneof" json:"suite_num,omitempty"`
	SuiteAmount      *float64 `protobuf:"fixed64,21,opt,name=suite_amount,json=suiteAmount,proto3,oneof" json:"suite_amount,omitempty"`
	SuiteDiscount    *float64 `protobuf:"fixed64,22,opt,name=suite_discount,json=suiteDiscount,proto3,oneof" json:"suite_discount,omitempty"`
	ClassName        *string  `protobuf:"bytes,23,opt,name=class_name,json=className,proto3,oneof" json:"class_name,omitempty"`
	GoodsId          *int32   `protobuf:"varint,24,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsNo          *string  `protobuf:"bytes,25,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName        *string  `protobuf:"bytes,26,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecId           *int32   `protobuf:"varint,27,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	SpecName         *string  `protobuf:"bytes,28,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo           *string  `protobuf:"bytes,29,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode         *string  `protobuf:"bytes,30,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Barcode          *string  `protobuf:"bytes,31,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	ApiGoodsName     *string  `protobuf:"bytes,32,opt,name=api_goods_name,json=apiGoodsName,proto3,oneof" json:"api_goods_name,omitempty"`
	ApiSpecName      *string  `protobuf:"bytes,33,opt,name=api_spec_name,json=apiSpecName,proto3,oneof" json:"api_spec_name,omitempty"`
	Num              *float64 `protobuf:"fixed64,34,opt,name=num,proto3,oneof" json:"num,omitempty"`
	ActualNum        *float64 `protobuf:"fixed64,35,opt,name=actual_num,json=actualNum,proto3,oneof" json:"actual_num,omitempty"`
	Price            *float64 `protobuf:"fixed64,36,opt,name=price,proto3,oneof" json:"price,omitempty"`
	OrderPrice       *float64 `protobuf:"fixed64,37,opt,name=order_price,json=orderPrice,proto3,oneof" json:"order_price,omitempty"`
	SharePrice       *float64 `protobuf:"fixed64,38,opt,name=share_price,json=sharePrice,proto3,oneof" json:"share_price,omitempty"`
	Adjust           *float64 `protobuf:"fixed64,39,opt,name=adjust,proto3,oneof" json:"adjust,omitempty"`
	Discount         *float64 `protobuf:"fixed64,40,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	ShareAmount      *float64 `protobuf:"fixed64,41,opt,name=share_amount,json=shareAmount,proto3,oneof" json:"share_amount,omitempty"`
	SharePost        *float64 `protobuf:"fixed64,42,opt,name=share_post,json=sharePost,proto3,oneof" json:"share_post,omitempty"`
	Paid             *float64 `protobuf:"fixed64,43,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	GiftType         *int32   `protobuf:"varint,44,opt,name=gift_type,json=giftType,proto3,oneof" json:"gift_type,omitempty"`
	GuaranteeMode    *int32   `protobuf:"varint,45,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	IsPrintSuite     *int32   `protobuf:"varint,46,opt,name=is_print_suite,json=isPrintSuite,proto3,oneof" json:"is_print_suite,omitempty"`
	IsZeroCost       *int32   `protobuf:"varint,47,opt,name=is_zero_cost,json=isZeroCost,proto3,oneof" json:"is_zero_cost,omitempty"`
	StockReserved    *int32   `protobuf:"varint,48,opt,name=stock_reserved,json=stockReserved,proto3,oneof" json:"stock_reserved,omitempty"`
	IsConsigned      *int32   `protobuf:"varint,49,opt,name=is_consigned,json=isConsigned,proto3,oneof" json:"is_consigned,omitempty"`
	IsReceived       *int32   `protobuf:"varint,50,opt,name=is_received,json=isReceived,proto3,oneof" json:"is_received,omitempty"`
	Weight           *float64 `protobuf:"fixed64,51,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Commission       *float64 `protobuf:"fixed64,52,opt,name=commission,proto3,oneof" json:"commission,omitempty"`
	GoodsType        *int32   `protobuf:"varint,53,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	LargeType        *int32   `protobuf:"varint,54,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	InvoiceType      *int32   `protobuf:"varint,55,opt,name=invoice_type,json=invoiceType,proto3,oneof" json:"invoice_type,omitempty"`
	InvoiceContent   *string  `protobuf:"bytes,56,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	FromMask         *int32   `protobuf:"varint,57,opt,name=from_mask,json=fromMask,proto3,oneof" json:"from_mask,omitempty"`
	Cid              *int32   `protobuf:"varint,58,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	TaxRate          *float64 `protobuf:"fixed64,59,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	BaseUnitId       *int32   `protobuf:"varint,60,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitName         *string  `protobuf:"bytes,61,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	RefundStatusName string   `protobuf:"bytes,62,opt,name=refund_status_name,json=refundStatusName,proto3" json:"refund_status_name,omitempty"`
	PayStatusName    string   `protobuf:"bytes,63,opt,name=pay_status_name,json=payStatusName,proto3" json:"pay_status_name,omitempty"`
	BrandNo          *string  `protobuf:"bytes,64,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName        *string  `protobuf:"bytes,65,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
}

func (x *WdtTradeGoodslistResponse) Reset() {
	*x = WdtTradeGoodslistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeGoodslistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeGoodslistResponse) ProtoMessage() {}

func (x *WdtTradeGoodslistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeGoodslistResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeGoodslistResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{412}
}

func (x *WdtTradeGoodslistResponse) GetPoid() string {
	if x != nil {
		return x.Poid
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetSrcTid() string {
	if x != nil && x.SrcTid != nil {
		return *x.SrcTid
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetSrcOid() string {
	if x != nil && x.SrcOid != nil {
		return *x.SrcOid
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetPayId() string {
	if x != nil && x.PayId != nil {
		return *x.PayId
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetBindOid() string {
	if x != nil && x.BindOid != nil {
		return *x.BindOid
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetPlatformGoodsId() string {
	if x != nil && x.PlatformGoodsId != nil {
		return *x.PlatformGoodsId
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetPlatformSpecId() string {
	if x != nil && x.PlatformSpecId != nil {
		return *x.PlatformSpecId
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetSuiteId() int32 {
	if x != nil && x.SuiteId != nil {
		return *x.SuiteId
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetSuiteNo() string {
	if x != nil && x.SuiteNo != nil {
		return *x.SuiteNo
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetSuiteName() string {
	if x != nil && x.SuiteName != nil {
		return *x.SuiteName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetSuiteNum() float64 {
	if x != nil && x.SuiteNum != nil {
		return *x.SuiteNum
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetSuiteAmount() float64 {
	if x != nil && x.SuiteAmount != nil {
		return *x.SuiteAmount
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetSuiteDiscount() float64 {
	if x != nil && x.SuiteDiscount != nil {
		return *x.SuiteDiscount
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetApiGoodsName() string {
	if x != nil && x.ApiGoodsName != nil {
		return *x.ApiGoodsName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetApiSpecName() string {
	if x != nil && x.ApiSpecName != nil {
		return *x.ApiSpecName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetActualNum() float64 {
	if x != nil && x.ActualNum != nil {
		return *x.ActualNum
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetOrderPrice() float64 {
	if x != nil && x.OrderPrice != nil {
		return *x.OrderPrice
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetSharePrice() float64 {
	if x != nil && x.SharePrice != nil {
		return *x.SharePrice
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetAdjust() float64 {
	if x != nil && x.Adjust != nil {
		return *x.Adjust
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetShareAmount() float64 {
	if x != nil && x.ShareAmount != nil {
		return *x.ShareAmount
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetSharePost() float64 {
	if x != nil && x.SharePost != nil {
		return *x.SharePost
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetGiftType() int32 {
	if x != nil && x.GiftType != nil {
		return *x.GiftType
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetIsPrintSuite() int32 {
	if x != nil && x.IsPrintSuite != nil {
		return *x.IsPrintSuite
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetIsZeroCost() int32 {
	if x != nil && x.IsZeroCost != nil {
		return *x.IsZeroCost
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetStockReserved() int32 {
	if x != nil && x.StockReserved != nil {
		return *x.StockReserved
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetIsConsigned() int32 {
	if x != nil && x.IsConsigned != nil {
		return *x.IsConsigned
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetIsReceived() int32 {
	if x != nil && x.IsReceived != nil {
		return *x.IsReceived
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetInvoiceType() int32 {
	if x != nil && x.InvoiceType != nil {
		return *x.InvoiceType
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetInvoiceContent() string {
	if x != nil && x.InvoiceContent != nil {
		return *x.InvoiceContent
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetFromMask() int32 {
	if x != nil && x.FromMask != nil {
		return *x.FromMask
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetCid() int32 {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtTradeGoodslistResponse) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetRefundStatusName() string {
	if x != nil {
		return x.RefundStatusName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetPayStatusName() string {
	if x != nil {
		return x.PayStatusName
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtTradeGoodslistResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

type WdtTradeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtTradeListRequest) Reset() {
	*x = WdtTradeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeListRequest) ProtoMessage() {}

func (x *WdtTradeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeListRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{413}
}

func (x *WdtTradeListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtTradeListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtTradeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results            []*WdtTradeResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count              int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	GoodsCount         int32               `protobuf:"varint,3,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsCategoryCount int32               `protobuf:"varint,4,opt,name=goods_category_count,json=goodsCategoryCount,proto3" json:"goods_category_count,omitempty"`
	TotalAmount        string              `protobuf:"bytes,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	AggWait            int32               `protobuf:"varint,6,opt,name=agg_wait,json=aggWait,proto3" json:"agg_wait,omitempty"`
	ConsignWaitPush    int32               `protobuf:"varint,7,opt,name=consign_wait_push,json=consignWaitPush,proto3" json:"consign_wait_push,omitempty"`
	ConsignSuccessPush int32               `protobuf:"varint,8,opt,name=consign_success_push,json=consignSuccessPush,proto3" json:"consign_success_push,omitempty"`
	ConsignFailedPush  int32               `protobuf:"varint,9,opt,name=consign_failed_push,json=consignFailedPush,proto3" json:"consign_failed_push,omitempty"`
}

func (x *WdtTradeListResponse) Reset() {
	*x = WdtTradeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeListResponse) ProtoMessage() {}

func (x *WdtTradeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeListResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{414}
}

func (x *WdtTradeListResponse) GetResults() []*WdtTradeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtTradeListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WdtTradeListResponse) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *WdtTradeListResponse) GetGoodsCategoryCount() int32 {
	if x != nil {
		return x.GoodsCategoryCount
	}
	return 0
}

func (x *WdtTradeListResponse) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *WdtTradeListResponse) GetAggWait() int32 {
	if x != nil {
		return x.AggWait
	}
	return 0
}

func (x *WdtTradeListResponse) GetConsignWaitPush() int32 {
	if x != nil {
		return x.ConsignWaitPush
	}
	return 0
}

func (x *WdtTradeListResponse) GetConsignSuccessPush() int32 {
	if x != nil {
		return x.ConsignSuccessPush
	}
	return 0
}

func (x *WdtTradeListResponse) GetConsignFailedPush() int32 {
	if x != nil {
		return x.ConsignFailedPush
	}
	return 0
}

type WdtTradeRefundDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundId int32 `protobuf:"varint,1,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty"`
}

func (x *WdtTradeRefundDestroyRequest) Reset() {
	*x = WdtTradeRefundDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundDestroyRequest) ProtoMessage() {}

func (x *WdtTradeRefundDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundDestroyRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{415}
}

func (x *WdtTradeRefundDestroyRequest) GetRefundId() int32 {
	if x != nil {
		return x.RefundId
	}
	return 0
}

type WdtTradeRefundDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId          *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	RefundId       *int32   `protobuf:"varint,2,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	TargetType     *int32   `protobuf:"varint,3,opt,name=target_type,json=targetType,proto3,oneof" json:"target_type,omitempty"`
	TargetId       *int32   `protobuf:"varint,4,opt,name=target_id,json=targetId,proto3,oneof" json:"target_id,omitempty"`
	GoodsName      *string  `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName       *string  `protobuf:"bytes,6,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	MerchantNo     *string  `protobuf:"bytes,7,opt,name=merchant_no,json=merchantNo,proto3,oneof" json:"merchant_no,omitempty"`
	RetailPrice    *float64 `protobuf:"fixed64,8,opt,name=retail_price,json=retailPrice,proto3,oneof" json:"retail_price,omitempty"`
	Num            *float64 `protobuf:"fixed64,9,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Remark         *string  `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	SpecCode       *string  `protobuf:"bytes,11,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Oid            *string  `protobuf:"bytes,13,opt,name=oid,proto3,oneof" json:"oid,omitempty"`
	Created        *string  `protobuf:"bytes,14,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Modified       *string  `protobuf:"bytes,15,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Barcode        *string  `protobuf:"bytes,16,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	TargetTypeName string   `protobuf:"bytes,17,opt,name=target_type_name,json=targetTypeName,proto3" json:"target_type_name,omitempty"`
}

func (x *WdtTradeRefundDiscountResponse) Reset() {
	*x = WdtTradeRefundDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundDiscountResponse) ProtoMessage() {}

func (x *WdtTradeRefundDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundDiscountResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundDiscountResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{416}
}

func (x *WdtTradeRefundDiscountResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTradeRefundDiscountResponse) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *WdtTradeRefundDiscountResponse) GetTargetType() int32 {
	if x != nil && x.TargetType != nil {
		return *x.TargetType
	}
	return 0
}

func (x *WdtTradeRefundDiscountResponse) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *WdtTradeRefundDiscountResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetMerchantNo() string {
	if x != nil && x.MerchantNo != nil {
		return *x.MerchantNo
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetRetailPrice() float64 {
	if x != nil && x.RetailPrice != nil {
		return *x.RetailPrice
	}
	return 0
}

func (x *WdtTradeRefundDiscountResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtTradeRefundDiscountResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *WdtTradeRefundDiscountResponse) GetTargetTypeName() string {
	if x != nil {
		return x.TargetTypeName
	}
	return ""
}

type WdtTradeRefundGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid               *string  `protobuf:"bytes,1,opt,name=oid,proto3,oneof" json:"oid,omitempty"`
	SpecId            *int32   `protobuf:"varint,6,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	GoodsNo           *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo            *string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	Price             *float64 `protobuf:"fixed64,10,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Remark            *string  `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified          *string  `protobuf:"bytes,13,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created           *string  `protobuf:"bytes,14,opt,name=created,proto3,oneof" json:"created,omitempty"`
	GoodsName         *string  `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName          *string  `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Tid               *string  `protobuf:"bytes,19,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	SpecCode          *string  `protobuf:"bytes,24,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	SuiteNo           *string  `protobuf:"bytes,25,opt,name=suite_no,json=suiteNo,proto3,oneof" json:"suite_no,omitempty"`
	Barcode           *string  `protobuf:"bytes,27,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	Discount          *float64 `protobuf:"fixed64,31,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	CostPrice         *float64 `protobuf:"fixed64,32,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	BrandName         *string  `protobuf:"bytes,47,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	PositionNo        *string  `protobuf:"bytes,63,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	PositionId        *int32   `protobuf:"varint,64,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	OrderId           *int32   `protobuf:"varint,65,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	RefundId          *int32   `protobuf:"varint,66,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	ProcessStatus     *int32   `protobuf:"varint,68,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	SalesTid          *string  `protobuf:"bytes,69,opt,name=sales_tid,json=salesTid,proto3,oneof" json:"sales_tid,omitempty"`
	OrderNum          *float64 `protobuf:"fixed64,70,opt,name=order_num,json=orderNum,proto3,oneof" json:"order_num,omitempty"`
	PlatformId        *int32   `protobuf:"varint,71,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	OriginalPrice     *float64 `protobuf:"fixed64,72,opt,name=original_price,json=originalPrice,proto3,oneof" json:"original_price,omitempty"`
	Paid              *float64 `protobuf:"fixed64,73,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	MarketPrice       *float64 `protobuf:"fixed64,74,opt,name=market_price,json=marketPrice,proto3,oneof" json:"market_price,omitempty"`
	RefundNum         *float64 `protobuf:"fixed64,75,opt,name=refund_num,json=refundNum,proto3,oneof" json:"refund_num,omitempty"`
	RefundOrderAmount *float64 `protobuf:"fixed64,76,opt,name=refund_order_amount,json=refundOrderAmount,proto3,oneof" json:"refund_order_amount,omitempty"`
	TotalAmount       *float64 `protobuf:"fixed64,77,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
	SuiteName         *string  `protobuf:"bytes,78,opt,name=suite_name,json=suiteName,proto3,oneof" json:"suite_name,omitempty"`
	SuiteNum          *float64 `protobuf:"fixed64,79,opt,name=suite_num,json=suiteNum,proto3,oneof" json:"suite_num,omitempty"`
	StockinNum        *float64 `protobuf:"fixed64,80,opt,name=stockin_num,json=stockinNum,proto3,oneof" json:"stockin_num,omitempty"`
	IsSnEnable        *int32   `protobuf:"varint,81,opt,name=is_sn_enable,json=isSnEnable,proto3,oneof" json:"is_sn_enable,omitempty"`
	SalesTradeId      *int32   `protobuf:"varint,82,opt,name=sales_trade_id,json=salesTradeId,proto3,oneof" json:"sales_trade_id,omitempty"`
	SalesOrderId      *int32   `protobuf:"varint,83,opt,name=sales_order_id,json=salesOrderId,proto3,oneof" json:"sales_order_id,omitempty"`
	GoodsId           *int32   `protobuf:"varint,84,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	SuiteId           *int32   `protobuf:"varint,85,opt,name=suite_id,json=suiteId,proto3,oneof" json:"suite_id,omitempty"`
	StockinAmount     *float64 `protobuf:"fixed64,86,opt,name=stockin_amount,json=stockinAmount,proto3,oneof" json:"stockin_amount,omitempty"`
	EditMask          *int32   `protobuf:"varint,87,opt,name=edit_mask,json=editMask,proto3,oneof" json:"edit_mask,omitempty"`
	Tag               *int32   `protobuf:"varint,88,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	SrcNo             *string  `protobuf:"bytes,89,opt,name=src_no,json=srcNo,proto3,oneof" json:"src_no,omitempty"`
}

func (x *WdtTradeRefundGoodsResponse) Reset() {
	*x = WdtTradeRefundGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundGoodsResponse) ProtoMessage() {}

func (x *WdtTradeRefundGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundGoodsResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundGoodsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{417}
}

func (x *WdtTradeRefundGoodsResponse) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetSuiteNo() string {
	if x != nil && x.SuiteNo != nil {
		return *x.SuiteNo
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetSalesTid() string {
	if x != nil && x.SalesTid != nil {
		return *x.SalesTid
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetOrderNum() float64 {
	if x != nil && x.OrderNum != nil {
		return *x.OrderNum
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetOriginalPrice() float64 {
	if x != nil && x.OriginalPrice != nil {
		return *x.OriginalPrice
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetMarketPrice() float64 {
	if x != nil && x.MarketPrice != nil {
		return *x.MarketPrice
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetRefundNum() float64 {
	if x != nil && x.RefundNum != nil {
		return *x.RefundNum
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetRefundOrderAmount() float64 {
	if x != nil && x.RefundOrderAmount != nil {
		return *x.RefundOrderAmount
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetSuiteName() string {
	if x != nil && x.SuiteName != nil {
		return *x.SuiteName
	}
	return ""
}

func (x *WdtTradeRefundGoodsResponse) GetSuiteNum() float64 {
	if x != nil && x.SuiteNum != nil {
		return *x.SuiteNum
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetStockinNum() float64 {
	if x != nil && x.StockinNum != nil {
		return *x.StockinNum
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetIsSnEnable() int32 {
	if x != nil && x.IsSnEnable != nil {
		return *x.IsSnEnable
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetSalesTradeId() int32 {
	if x != nil && x.SalesTradeId != nil {
		return *x.SalesTradeId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetSalesOrderId() int32 {
	if x != nil && x.SalesOrderId != nil {
		return *x.SalesOrderId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetSuiteId() int32 {
	if x != nil && x.SuiteId != nil {
		return *x.SuiteId
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetStockinAmount() float64 {
	if x != nil && x.StockinAmount != nil {
		return *x.StockinAmount
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetEditMask() int32 {
	if x != nil && x.EditMask != nil {
		return *x.EditMask
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetTag() int32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *WdtTradeRefundGoodsResponse) GetSrcNo() string {
	if x != nil && x.SrcNo != nil {
		return *x.SrcNo
	}
	return ""
}

type WdtTradeRefundListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtTradeRefundListRequest) Reset() {
	*x = WdtTradeRefundListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundListRequest) ProtoMessage() {}

func (x *WdtTradeRefundListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundListRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{418}
}

func (x *WdtTradeRefundListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtTradeRefundListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtTradeRefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtTradeRefundResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtTradeRefundListResponse) Reset() {
	*x = WdtTradeRefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundListResponse) ProtoMessage() {}

func (x *WdtTradeRefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundListResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{419}
}

func (x *WdtTradeRefundListResponse) GetResults() []*WdtTradeRefundResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtTradeRefundListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtTradeRefundPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo             *string  `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PlatformId           *int32   `protobuf:"varint,3,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopNo               *string  `protobuf:"bytes,4,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	Tid                  *string  `protobuf:"bytes,5,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProcessStatus        *int32   `protobuf:"varint,10,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	ActualRefundAmount   *float64 `protobuf:"fixed64,16,opt,name=actual_refund_amount,json=actualRefundAmount,proto3,oneof" json:"actual_refund_amount,omitempty"`
	Remark               *string  `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	LogisticsName        *string  `protobuf:"bytes,20,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo          *string  `protobuf:"bytes,21,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	Modified             *string  `protobuf:"bytes,23,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	RelatedConsignAggNo  *string  `protobuf:"bytes,25,opt,name=related_consign_agg_no,json=relatedConsignAggNo,proto3,oneof" json:"related_consign_agg_no,omitempty"`
	RelatedStatus        *int32   `protobuf:"varint,26,opt,name=related_status,json=relatedStatus,proto3,oneof" json:"related_status,omitempty"`
	AggConsignStatus     *int32   `protobuf:"varint,27,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	WarehouseId          *int32   `protobuf:"varint,38,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	WarehouseNo          *string  `protobuf:"bytes,39,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	ShopName             *string  `protobuf:"bytes,41,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	GoodsAmount          *float64 `protobuf:"fixed64,48,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	CustomerNo           *string  `protobuf:"bytes,61,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName         *string  `protobuf:"bytes,62,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	ReasonId             *int32   `protobuf:"varint,66,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FlagName             *string  `protobuf:"bytes,69,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	WmsOuterNo           *string  `protobuf:"bytes,74,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32   `protobuf:"varint,75,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult            *string  `protobuf:"bytes,76,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	RefundId             *int32   `protobuf:"varint,77,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	ApiOuterNo           *string  `protobuf:"bytes,78,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	SrcNo                *string  `protobuf:"bytes,79,opt,name=src_no,json=srcNo,proto3,oneof" json:"src_no,omitempty"`
	Type                 *int32   `protobuf:"varint,80,opt,name=type,proto3,oneof" json:"type,omitempty"`
	GuaranteeMode        *int32   `protobuf:"varint,81,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	CsStatus             *int32   `protobuf:"varint,82,opt,name=cs_status,json=csStatus,proto3,oneof" json:"cs_status,omitempty"`
	SwapTradeId          *int32   `protobuf:"varint,83,opt,name=swap_trade_id,json=swapTradeId,proto3,oneof" json:"swap_trade_id,omitempty"`
	PayAccount           *string  `protobuf:"bytes,84,opt,name=pay_account,json=payAccount,proto3,oneof" json:"pay_account,omitempty"`
	PayNo                *string  `protobuf:"bytes,85,opt,name=pay_no,json=payNo,proto3,oneof" json:"pay_no,omitempty"`
	RefundAmount         *float64 `protobuf:"fixed64,86,opt,name=refund_amount,json=refundAmount,proto3,oneof" json:"refund_amount,omitempty"`
	DirectRefundAmount   *float64 `protobuf:"fixed64,87,opt,name=direct_refund_amount,json=directRefundAmount,proto3,oneof" json:"direct_refund_amount,omitempty"`
	GuaranteRefundAmount *float64 `protobuf:"fixed64,88,opt,name=guarante_refund_amount,json=guaranteRefundAmount,proto3,oneof" json:"guarante_refund_amount,omitempty"`
	ExchangeAmount       *float64 `protobuf:"fixed64,89,opt,name=exchange_amount,json=exchangeAmount,proto3,oneof" json:"exchange_amount,omitempty"`
	PostAmount           *float64 `protobuf:"fixed64,90,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64 `protobuf:"fixed64,91,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	Paid                 *float64 `protobuf:"fixed64,92,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SalesTradeId         *int32   `protobuf:"varint,93,opt,name=sales_trade_id,json=salesTradeId,proto3,oneof" json:"sales_trade_id,omitempty"`
	SalesTid             *string  `protobuf:"bytes,94,opt,name=sales_tid,json=salesTid,proto3,oneof" json:"sales_tid,omitempty"`
	BuyerNick            *string  `protobuf:"bytes,95,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	ReceiverName         *string  `protobuf:"bytes,96,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverAddress      *string  `protobuf:"bytes,97,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverTelno        *string  `protobuf:"bytes,98,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReturnName           *string  `protobuf:"bytes,99,opt,name=return_name,json=returnName,proto3,oneof" json:"return_name,omitempty"`
	ReturnMobile         *string  `protobuf:"bytes,100,opt,name=return_mobile,json=returnMobile,proto3,oneof" json:"return_mobile,omitempty"`
	ReturnTelno          *string  `protobuf:"bytes,101,opt,name=return_telno,json=returnTelno,proto3,oneof" json:"return_telno,omitempty"`
	ReturnAddress        *string  `protobuf:"bytes,102,opt,name=return_address,json=returnAddress,proto3,oneof" json:"return_address,omitempty"`
	ReturnLogisticsName  *string  `protobuf:"bytes,103,opt,name=return_logistics_name,json=returnLogisticsName,proto3,oneof" json:"return_logistics_name,omitempty"`
	ReturnLogisticsNo    *string  `protobuf:"bytes,104,opt,name=return_logistics_no,json=returnLogisticsNo,proto3,oneof" json:"return_logistics_no,omitempty"`
	SwapReceiver         *string  `protobuf:"bytes,105,opt,name=swap_receiver,json=swapReceiver,proto3,oneof" json:"swap_receiver,omitempty"`
	SwapMobile           *string  `protobuf:"bytes,106,opt,name=swap_mobile,json=swapMobile,proto3,oneof" json:"swap_mobile,omitempty"`
	SwapTelno            *string  `protobuf:"bytes,107,opt,name=swap_telno,json=swapTelno,proto3,oneof" json:"swap_telno,omitempty"`
	SwapProvince         *int32   `protobuf:"varint,108,opt,name=swap_province,json=swapProvince,proto3,oneof" json:"swap_province,omitempty"`
	SwapCity             *int32   `protobuf:"varint,109,opt,name=swap_city,json=swapCity,proto3,oneof" json:"swap_city,omitempty"`
	SwapDistrict         *int32   `protobuf:"varint,110,opt,name=swap_district,json=swapDistrict,proto3,oneof" json:"swap_district,omitempty"`
	SwapArea             *string  `protobuf:"bytes,111,opt,name=swap_area,json=swapArea,proto3,oneof" json:"swap_area,omitempty"`
	SwapWarehouseNo      *string  `protobuf:"bytes,112,opt,name=swap_warehouse_no,json=swapWarehouseNo,proto3,oneof" json:"swap_warehouse_no,omitempty"`
	SwapAddress          *string  `protobuf:"bytes,113,opt,name=swap_address,json=swapAddress,proto3,oneof" json:"swap_address,omitempty"`
	RefundTime           *string  `protobuf:"bytes,114,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	RefundReason         *string  `protobuf:"bytes,115,opt,name=refund_reason,json=refundReason,proto3,oneof" json:"refund_reason,omitempty"`
	SwapTradeNo          *string  `protobuf:"bytes,116,opt,name=swap_trade_no,json=swapTradeNo,proto3,oneof" json:"swap_trade_no,omitempty"`
	FinishTime           *string  `protobuf:"bytes,117,opt,name=finish_time,json=finishTime,proto3,oneof" json:"finish_time,omitempty"`
	SwapZip              *string  `protobuf:"bytes,118,opt,name=swap_zip,json=swapZip,proto3,oneof" json:"swap_zip,omitempty"`
	SwapLogisticsType    *int32   `protobuf:"varint,119,opt,name=swap_logistics_type,json=swapLogisticsType,proto3,oneof" json:"swap_logistics_type,omitempty"`
	SwapLogisticsName    *string  `protobuf:"bytes,120,opt,name=swap_logistics_name,json=swapLogisticsName,proto3,oneof" json:"swap_logistics_name,omitempty"`
	CreatorName          *string  `protobuf:"bytes,121,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	ErrorMsg             *string  `protobuf:"bytes,122,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
	Created              *string  `protobuf:"bytes,123,opt,name=created,proto3,oneof" json:"created,omitempty"`
	OuterNo              *string  `protobuf:"bytes,124,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	ShopId               *int32   `protobuf:"varint,125,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	AdvanceStatus        *int32   `protobuf:"varint,126,opt,name=advance_status,json=advanceStatus,proto3,oneof" json:"advance_status,omitempty"`
	IsGoodsReceived      *string  `protobuf:"bytes,127,opt,name=is_goods_received,json=isGoodsReceived,proto3,oneof" json:"is_goods_received,omitempty"`
	CustomerId           *int32   `protobuf:"varint,128,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	SwapWarehouseId      *int32   `protobuf:"varint,129,opt,name=swap_warehouse_id,json=swapWarehouseId,proto3,oneof" json:"swap_warehouse_id,omitempty"`
	SwapLogisticsId      *int32   `protobuf:"varint,130,opt,name=swap_logistics_id,json=swapLogisticsId,proto3,oneof" json:"swap_logistics_id,omitempty"`
	WarehouseType        *int32   `protobuf:"varint,131,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	FromType             *int32   `protobuf:"varint,132,opt,name=from_type,json=fromType,proto3,oneof" json:"from_type,omitempty"`
	ReturnGoodsCount     *float64 `protobuf:"fixed64,133,opt,name=return_goods_count,json=returnGoodsCount,proto3,oneof" json:"return_goods_count,omitempty"`
	OpConstraint         *int32   `protobuf:"varint,134,opt,name=op_constraint,json=opConstraint,proto3,oneof" json:"op_constraint,omitempty"`
	RefundVersion        *string  `protobuf:"bytes,135,opt,name=refund_version,json=refundVersion,proto3,oneof" json:"refund_version,omitempty"`
	ConsignMode          *int32   `protobuf:"varint,136,opt,name=consign_mode,json=consignMode,proto3,oneof" json:"consign_mode,omitempty"`
	PushNo               *string  `protobuf:"bytes,137,opt,name=push_no,json=pushNo,proto3,oneof" json:"push_no,omitempty"`
	LogisticsStyle       *int32   `protobuf:"varint,138,opt,name=logistics_style,json=logisticsStyle,proto3,oneof" json:"logistics_style,omitempty"`
	RevertReason         *int32   `protobuf:"varint,139,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	BadReason            *int32   `protobuf:"varint,140,opt,name=bad_reason,json=badReason,proto3,oneof" json:"bad_reason,omitempty"`
	ReturnMask           *int32   `protobuf:"varint,141,opt,name=return_mask,json=returnMask,proto3,oneof" json:"return_mask,omitempty"`
	IsTradeCharged       *bool    `protobuf:"varint,142,opt,name=is_trade_charged,json=isTradeCharged,proto3,oneof" json:"is_trade_charged,omitempty"`
	StockinPreNo         *string  `protobuf:"bytes,143,opt,name=stockin_pre_no,json=stockinPreNo,proto3,oneof" json:"stockin_pre_no,omitempty"`
	RevertReasonInfo     *string  `protobuf:"bytes,144,opt,name=revert_reason_info,json=revertReasonInfo,proto3,oneof" json:"revert_reason_info,omitempty"`
	FenxiaoNickName      *string  `protobuf:"bytes,145,opt,name=fenxiao_nick_name,json=fenxiaoNickName,proto3,oneof" json:"fenxiao_nick_name,omitempty"`
	FenxiaoRefundNo      *string  `protobuf:"bytes,146,opt,name=fenxiao_refund_no,json=fenxiaoRefundNo,proto3,oneof" json:"fenxiao_refund_no,omitempty"`
	FenxiaoTid           *string  `protobuf:"bytes,147,opt,name=fenxiao_tid,json=fenxiaoTid,proto3,oneof" json:"fenxiao_tid,omitempty"`
	AggNo                *string  `protobuf:"bytes,148,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
}

func (x *WdtTradeRefundPartialUpdateRequest) Reset() {
	*x = WdtTradeRefundPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundPartialUpdateRequest) ProtoMessage() {}

func (x *WdtTradeRefundPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{420}
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *WdtTradeRefundPartialUpdateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetActualRefundAmount() float64 {
	if x != nil && x.ActualRefundAmount != nil {
		return *x.ActualRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRelatedConsignAggNo() string {
	if x != nil && x.RelatedConsignAggNo != nil {
		return *x.RelatedConsignAggNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRelatedStatus() int32 {
	if x != nil && x.RelatedStatus != nil {
		return *x.RelatedStatus
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSrcNo() string {
	if x != nil && x.SrcNo != nil {
		return *x.SrcNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetCsStatus() int32 {
	if x != nil && x.CsStatus != nil {
		return *x.CsStatus
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapTradeId() int32 {
	if x != nil && x.SwapTradeId != nil {
		return *x.SwapTradeId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetPayAccount() string {
	if x != nil && x.PayAccount != nil {
		return *x.PayAccount
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetPayNo() string {
	if x != nil && x.PayNo != nil {
		return *x.PayNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRefundAmount() float64 {
	if x != nil && x.RefundAmount != nil {
		return *x.RefundAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetDirectRefundAmount() float64 {
	if x != nil && x.DirectRefundAmount != nil {
		return *x.DirectRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetGuaranteRefundAmount() float64 {
	if x != nil && x.GuaranteRefundAmount != nil {
		return *x.GuaranteRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetExchangeAmount() float64 {
	if x != nil && x.ExchangeAmount != nil {
		return *x.ExchangeAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSalesTradeId() int32 {
	if x != nil && x.SalesTradeId != nil {
		return *x.SalesTradeId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSalesTid() string {
	if x != nil && x.SalesTid != nil {
		return *x.SalesTid
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnName() string {
	if x != nil && x.ReturnName != nil {
		return *x.ReturnName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnMobile() string {
	if x != nil && x.ReturnMobile != nil {
		return *x.ReturnMobile
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnTelno() string {
	if x != nil && x.ReturnTelno != nil {
		return *x.ReturnTelno
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnAddress() string {
	if x != nil && x.ReturnAddress != nil {
		return *x.ReturnAddress
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnLogisticsName() string {
	if x != nil && x.ReturnLogisticsName != nil {
		return *x.ReturnLogisticsName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnLogisticsNo() string {
	if x != nil && x.ReturnLogisticsNo != nil {
		return *x.ReturnLogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapReceiver() string {
	if x != nil && x.SwapReceiver != nil {
		return *x.SwapReceiver
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapMobile() string {
	if x != nil && x.SwapMobile != nil {
		return *x.SwapMobile
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapTelno() string {
	if x != nil && x.SwapTelno != nil {
		return *x.SwapTelno
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapProvince() int32 {
	if x != nil && x.SwapProvince != nil {
		return *x.SwapProvince
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapCity() int32 {
	if x != nil && x.SwapCity != nil {
		return *x.SwapCity
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapDistrict() int32 {
	if x != nil && x.SwapDistrict != nil {
		return *x.SwapDistrict
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapArea() string {
	if x != nil && x.SwapArea != nil {
		return *x.SwapArea
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapWarehouseNo() string {
	if x != nil && x.SwapWarehouseNo != nil {
		return *x.SwapWarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapAddress() string {
	if x != nil && x.SwapAddress != nil {
		return *x.SwapAddress
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRefundReason() string {
	if x != nil && x.RefundReason != nil {
		return *x.RefundReason
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapTradeNo() string {
	if x != nil && x.SwapTradeNo != nil {
		return *x.SwapTradeNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetFinishTime() string {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapZip() string {
	if x != nil && x.SwapZip != nil {
		return *x.SwapZip
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapLogisticsType() int32 {
	if x != nil && x.SwapLogisticsType != nil {
		return *x.SwapLogisticsType
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapLogisticsName() string {
	if x != nil && x.SwapLogisticsName != nil {
		return *x.SwapLogisticsName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetAdvanceStatus() int32 {
	if x != nil && x.AdvanceStatus != nil {
		return *x.AdvanceStatus
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetIsGoodsReceived() string {
	if x != nil && x.IsGoodsReceived != nil {
		return *x.IsGoodsReceived
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetCustomerId() int32 {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapWarehouseId() int32 {
	if x != nil && x.SwapWarehouseId != nil {
		return *x.SwapWarehouseId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetSwapLogisticsId() int32 {
	if x != nil && x.SwapLogisticsId != nil {
		return *x.SwapLogisticsId
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetFromType() int32 {
	if x != nil && x.FromType != nil {
		return *x.FromType
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnGoodsCount() float64 {
	if x != nil && x.ReturnGoodsCount != nil {
		return *x.ReturnGoodsCount
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetOpConstraint() int32 {
	if x != nil && x.OpConstraint != nil {
		return *x.OpConstraint
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRefundVersion() string {
	if x != nil && x.RefundVersion != nil {
		return *x.RefundVersion
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetConsignMode() int32 {
	if x != nil && x.ConsignMode != nil {
		return *x.ConsignMode
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetPushNo() string {
	if x != nil && x.PushNo != nil {
		return *x.PushNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetLogisticsStyle() int32 {
	if x != nil && x.LogisticsStyle != nil {
		return *x.LogisticsStyle
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetBadReason() int32 {
	if x != nil && x.BadReason != nil {
		return *x.BadReason
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetReturnMask() int32 {
	if x != nil && x.ReturnMask != nil {
		return *x.ReturnMask
	}
	return 0
}

func (x *WdtTradeRefundPartialUpdateRequest) GetIsTradeCharged() bool {
	if x != nil && x.IsTradeCharged != nil {
		return *x.IsTradeCharged
	}
	return false
}

func (x *WdtTradeRefundPartialUpdateRequest) GetStockinPreNo() string {
	if x != nil && x.StockinPreNo != nil {
		return *x.StockinPreNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetRevertReasonInfo() string {
	if x != nil && x.RevertReasonInfo != nil {
		return *x.RevertReasonInfo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetFenxiaoNickName() string {
	if x != nil && x.FenxiaoNickName != nil {
		return *x.FenxiaoNickName
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetFenxiaoRefundNo() string {
	if x != nil && x.FenxiaoRefundNo != nil {
		return *x.FenxiaoRefundNo
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetFenxiaoTid() string {
	if x != nil && x.FenxiaoTid != nil {
		return *x.FenxiaoTid
	}
	return ""
}

func (x *WdtTradeRefundPartialUpdateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

type WdtTradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo             *string  `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	PlatformId           *int32   `protobuf:"varint,2,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopNo               *string  `protobuf:"bytes,3,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	Tid                  *string  `protobuf:"bytes,4,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	Status               *int32   `protobuf:"varint,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProcessStatus        *int32   `protobuf:"varint,9,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	ActualRefundAmount   *float64 `protobuf:"fixed64,15,opt,name=actual_refund_amount,json=actualRefundAmount,proto3,oneof" json:"actual_refund_amount,omitempty"`
	Remark               *string  `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	LogisticsName        *string  `protobuf:"bytes,19,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo          *string  `protobuf:"bytes,20,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	Modified             *string  `protobuf:"bytes,22,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	RelatedConsignAggNo  *string  `protobuf:"bytes,24,opt,name=related_consign_agg_no,json=relatedConsignAggNo,proto3,oneof" json:"related_consign_agg_no,omitempty"`
	RelatedStatus        *int32   `protobuf:"varint,25,opt,name=related_status,json=relatedStatus,proto3,oneof" json:"related_status,omitempty"`
	AggConsignStatus     *int32   `protobuf:"varint,26,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	WarehouseId          *int32   `protobuf:"varint,37,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	WarehouseNo          *string  `protobuf:"bytes,38,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	ShopName             *string  `protobuf:"bytes,40,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	GoodsAmount          *float64 `protobuf:"fixed64,47,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	CustomerNo           *string  `protobuf:"bytes,60,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName         *string  `protobuf:"bytes,61,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	ReasonId             *int32   `protobuf:"varint,65,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FlagName             *string  `protobuf:"bytes,68,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	WmsOuterNo           *string  `protobuf:"bytes,73,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32   `protobuf:"varint,74,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult            *string  `protobuf:"bytes,75,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	RefundId             *int32   `protobuf:"varint,76,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	ApiOuterNo           *string  `protobuf:"bytes,77,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	SrcNo                *string  `protobuf:"bytes,78,opt,name=src_no,json=srcNo,proto3,oneof" json:"src_no,omitempty"`
	Type                 *int32   `protobuf:"varint,79,opt,name=type,proto3,oneof" json:"type,omitempty"`
	GuaranteeMode        *int32   `protobuf:"varint,80,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	CsStatus             *int32   `protobuf:"varint,81,opt,name=cs_status,json=csStatus,proto3,oneof" json:"cs_status,omitempty"`
	SwapTradeId          *int32   `protobuf:"varint,82,opt,name=swap_trade_id,json=swapTradeId,proto3,oneof" json:"swap_trade_id,omitempty"`
	PayAccount           *string  `protobuf:"bytes,83,opt,name=pay_account,json=payAccount,proto3,oneof" json:"pay_account,omitempty"`
	PayNo                *string  `protobuf:"bytes,84,opt,name=pay_no,json=payNo,proto3,oneof" json:"pay_no,omitempty"`
	RefundAmount         *float64 `protobuf:"fixed64,85,opt,name=refund_amount,json=refundAmount,proto3,oneof" json:"refund_amount,omitempty"`
	DirectRefundAmount   *float64 `protobuf:"fixed64,86,opt,name=direct_refund_amount,json=directRefundAmount,proto3,oneof" json:"direct_refund_amount,omitempty"`
	GuaranteRefundAmount *float64 `protobuf:"fixed64,87,opt,name=guarante_refund_amount,json=guaranteRefundAmount,proto3,oneof" json:"guarante_refund_amount,omitempty"`
	ExchangeAmount       *float64 `protobuf:"fixed64,88,opt,name=exchange_amount,json=exchangeAmount,proto3,oneof" json:"exchange_amount,omitempty"`
	PostAmount           *float64 `protobuf:"fixed64,89,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64 `protobuf:"fixed64,90,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	Paid                 *float64 `protobuf:"fixed64,91,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SalesTradeId         *int32   `protobuf:"varint,92,opt,name=sales_trade_id,json=salesTradeId,proto3,oneof" json:"sales_trade_id,omitempty"`
	SalesTid             *string  `protobuf:"bytes,93,opt,name=sales_tid,json=salesTid,proto3,oneof" json:"sales_tid,omitempty"`
	BuyerNick            *string  `protobuf:"bytes,94,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	ReceiverName         *string  `protobuf:"bytes,95,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverAddress      *string  `protobuf:"bytes,96,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverTelno        *string  `protobuf:"bytes,97,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReturnName           *string  `protobuf:"bytes,98,opt,name=return_name,json=returnName,proto3,oneof" json:"return_name,omitempty"`
	ReturnMobile         *string  `protobuf:"bytes,99,opt,name=return_mobile,json=returnMobile,proto3,oneof" json:"return_mobile,omitempty"`
	ReturnTelno          *string  `protobuf:"bytes,100,opt,name=return_telno,json=returnTelno,proto3,oneof" json:"return_telno,omitempty"`
	ReturnAddress        *string  `protobuf:"bytes,101,opt,name=return_address,json=returnAddress,proto3,oneof" json:"return_address,omitempty"`
	ReturnLogisticsName  *string  `protobuf:"bytes,102,opt,name=return_logistics_name,json=returnLogisticsName,proto3,oneof" json:"return_logistics_name,omitempty"`
	ReturnLogisticsNo    *string  `protobuf:"bytes,103,opt,name=return_logistics_no,json=returnLogisticsNo,proto3,oneof" json:"return_logistics_no,omitempty"`
	SwapReceiver         *string  `protobuf:"bytes,104,opt,name=swap_receiver,json=swapReceiver,proto3,oneof" json:"swap_receiver,omitempty"`
	SwapMobile           *string  `protobuf:"bytes,105,opt,name=swap_mobile,json=swapMobile,proto3,oneof" json:"swap_mobile,omitempty"`
	SwapTelno            *string  `protobuf:"bytes,106,opt,name=swap_telno,json=swapTelno,proto3,oneof" json:"swap_telno,omitempty"`
	SwapProvince         *int32   `protobuf:"varint,107,opt,name=swap_province,json=swapProvince,proto3,oneof" json:"swap_province,omitempty"`
	SwapCity             *int32   `protobuf:"varint,108,opt,name=swap_city,json=swapCity,proto3,oneof" json:"swap_city,omitempty"`
	SwapDistrict         *int32   `protobuf:"varint,109,opt,name=swap_district,json=swapDistrict,proto3,oneof" json:"swap_district,omitempty"`
	SwapArea             *string  `protobuf:"bytes,110,opt,name=swap_area,json=swapArea,proto3,oneof" json:"swap_area,omitempty"`
	SwapWarehouseNo      *string  `protobuf:"bytes,111,opt,name=swap_warehouse_no,json=swapWarehouseNo,proto3,oneof" json:"swap_warehouse_no,omitempty"`
	SwapAddress          *string  `protobuf:"bytes,112,opt,name=swap_address,json=swapAddress,proto3,oneof" json:"swap_address,omitempty"`
	RefundTime           *string  `protobuf:"bytes,113,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	RefundReason         *string  `protobuf:"bytes,114,opt,name=refund_reason,json=refundReason,proto3,oneof" json:"refund_reason,omitempty"`
	SwapTradeNo          *string  `protobuf:"bytes,115,opt,name=swap_trade_no,json=swapTradeNo,proto3,oneof" json:"swap_trade_no,omitempty"`
	FinishTime           *string  `protobuf:"bytes,116,opt,name=finish_time,json=finishTime,proto3,oneof" json:"finish_time,omitempty"`
	SwapZip              *string  `protobuf:"bytes,117,opt,name=swap_zip,json=swapZip,proto3,oneof" json:"swap_zip,omitempty"`
	SwapLogisticsType    *int32   `protobuf:"varint,118,opt,name=swap_logistics_type,json=swapLogisticsType,proto3,oneof" json:"swap_logistics_type,omitempty"`
	SwapLogisticsName    *string  `protobuf:"bytes,119,opt,name=swap_logistics_name,json=swapLogisticsName,proto3,oneof" json:"swap_logistics_name,omitempty"`
	CreatorName          *string  `protobuf:"bytes,120,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	ErrorMsg             *string  `protobuf:"bytes,121,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
	Created              *string  `protobuf:"bytes,122,opt,name=created,proto3,oneof" json:"created,omitempty"`
	OuterNo              *string  `protobuf:"bytes,123,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	ShopId               *int32   `protobuf:"varint,124,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	AdvanceStatus        *int32   `protobuf:"varint,125,opt,name=advance_status,json=advanceStatus,proto3,oneof" json:"advance_status,omitempty"`
	IsGoodsReceived      *string  `protobuf:"bytes,126,opt,name=is_goods_received,json=isGoodsReceived,proto3,oneof" json:"is_goods_received,omitempty"`
	CustomerId           *int32   `protobuf:"varint,127,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	SwapWarehouseId      *int32   `protobuf:"varint,128,opt,name=swap_warehouse_id,json=swapWarehouseId,proto3,oneof" json:"swap_warehouse_id,omitempty"`
	SwapLogisticsId      *int32   `protobuf:"varint,129,opt,name=swap_logistics_id,json=swapLogisticsId,proto3,oneof" json:"swap_logistics_id,omitempty"`
	WarehouseType        *int32   `protobuf:"varint,130,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	FromType             *int32   `protobuf:"varint,131,opt,name=from_type,json=fromType,proto3,oneof" json:"from_type,omitempty"`
	ReturnGoodsCount     *float64 `protobuf:"fixed64,132,opt,name=return_goods_count,json=returnGoodsCount,proto3,oneof" json:"return_goods_count,omitempty"`
	OpConstraint         *int32   `protobuf:"varint,133,opt,name=op_constraint,json=opConstraint,proto3,oneof" json:"op_constraint,omitempty"`
	RefundVersion        *string  `protobuf:"bytes,134,opt,name=refund_version,json=refundVersion,proto3,oneof" json:"refund_version,omitempty"`
	ConsignMode          *int32   `protobuf:"varint,135,opt,name=consign_mode,json=consignMode,proto3,oneof" json:"consign_mode,omitempty"`
	PushNo               *string  `protobuf:"bytes,136,opt,name=push_no,json=pushNo,proto3,oneof" json:"push_no,omitempty"`
	LogisticsStyle       *int32   `protobuf:"varint,137,opt,name=logistics_style,json=logisticsStyle,proto3,oneof" json:"logistics_style,omitempty"`
	RevertReason         *int32   `protobuf:"varint,138,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	BadReason            *int32   `protobuf:"varint,139,opt,name=bad_reason,json=badReason,proto3,oneof" json:"bad_reason,omitempty"`
	ReturnMask           *int32   `protobuf:"varint,140,opt,name=return_mask,json=returnMask,proto3,oneof" json:"return_mask,omitempty"`
	IsTradeCharged       *bool    `protobuf:"varint,141,opt,name=is_trade_charged,json=isTradeCharged,proto3,oneof" json:"is_trade_charged,omitempty"`
	StockinPreNo         *string  `protobuf:"bytes,142,opt,name=stockin_pre_no,json=stockinPreNo,proto3,oneof" json:"stockin_pre_no,omitempty"`
	RevertReasonInfo     *string  `protobuf:"bytes,143,opt,name=revert_reason_info,json=revertReasonInfo,proto3,oneof" json:"revert_reason_info,omitempty"`
	FenxiaoNickName      *string  `protobuf:"bytes,144,opt,name=fenxiao_nick_name,json=fenxiaoNickName,proto3,oneof" json:"fenxiao_nick_name,omitempty"`
	FenxiaoRefundNo      *string  `protobuf:"bytes,145,opt,name=fenxiao_refund_no,json=fenxiaoRefundNo,proto3,oneof" json:"fenxiao_refund_no,omitempty"`
	FenxiaoTid           *string  `protobuf:"bytes,146,opt,name=fenxiao_tid,json=fenxiaoTid,proto3,oneof" json:"fenxiao_tid,omitempty"`
	AggNo                *string  `protobuf:"bytes,147,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
}

func (x *WdtTradeRefundRequest) Reset() {
	*x = WdtTradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundRequest) ProtoMessage() {}

func (x *WdtTradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{421}
}

func (x *WdtTradeRefundRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetActualRefundAmount() float64 {
	if x != nil && x.ActualRefundAmount != nil {
		return *x.ActualRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetRelatedConsignAggNo() string {
	if x != nil && x.RelatedConsignAggNo != nil {
		return *x.RelatedConsignAggNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetRelatedStatus() int32 {
	if x != nil && x.RelatedStatus != nil {
		return *x.RelatedStatus
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSrcNo() string {
	if x != nil && x.SrcNo != nil {
		return *x.SrcNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetCsStatus() int32 {
	if x != nil && x.CsStatus != nil {
		return *x.CsStatus
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSwapTradeId() int32 {
	if x != nil && x.SwapTradeId != nil {
		return *x.SwapTradeId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetPayAccount() string {
	if x != nil && x.PayAccount != nil {
		return *x.PayAccount
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetPayNo() string {
	if x != nil && x.PayNo != nil {
		return *x.PayNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetRefundAmount() float64 {
	if x != nil && x.RefundAmount != nil {
		return *x.RefundAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetDirectRefundAmount() float64 {
	if x != nil && x.DirectRefundAmount != nil {
		return *x.DirectRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetGuaranteRefundAmount() float64 {
	if x != nil && x.GuaranteRefundAmount != nil {
		return *x.GuaranteRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetExchangeAmount() float64 {
	if x != nil && x.ExchangeAmount != nil {
		return *x.ExchangeAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSalesTradeId() int32 {
	if x != nil && x.SalesTradeId != nil {
		return *x.SalesTradeId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSalesTid() string {
	if x != nil && x.SalesTid != nil {
		return *x.SalesTid
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReturnName() string {
	if x != nil && x.ReturnName != nil {
		return *x.ReturnName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReturnMobile() string {
	if x != nil && x.ReturnMobile != nil {
		return *x.ReturnMobile
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReturnTelno() string {
	if x != nil && x.ReturnTelno != nil {
		return *x.ReturnTelno
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReturnAddress() string {
	if x != nil && x.ReturnAddress != nil {
		return *x.ReturnAddress
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReturnLogisticsName() string {
	if x != nil && x.ReturnLogisticsName != nil {
		return *x.ReturnLogisticsName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetReturnLogisticsNo() string {
	if x != nil && x.ReturnLogisticsNo != nil {
		return *x.ReturnLogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapReceiver() string {
	if x != nil && x.SwapReceiver != nil {
		return *x.SwapReceiver
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapMobile() string {
	if x != nil && x.SwapMobile != nil {
		return *x.SwapMobile
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapTelno() string {
	if x != nil && x.SwapTelno != nil {
		return *x.SwapTelno
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapProvince() int32 {
	if x != nil && x.SwapProvince != nil {
		return *x.SwapProvince
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSwapCity() int32 {
	if x != nil && x.SwapCity != nil {
		return *x.SwapCity
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSwapDistrict() int32 {
	if x != nil && x.SwapDistrict != nil {
		return *x.SwapDistrict
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSwapArea() string {
	if x != nil && x.SwapArea != nil {
		return *x.SwapArea
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapWarehouseNo() string {
	if x != nil && x.SwapWarehouseNo != nil {
		return *x.SwapWarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapAddress() string {
	if x != nil && x.SwapAddress != nil {
		return *x.SwapAddress
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetRefundReason() string {
	if x != nil && x.RefundReason != nil {
		return *x.RefundReason
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapTradeNo() string {
	if x != nil && x.SwapTradeNo != nil {
		return *x.SwapTradeNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetFinishTime() string {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapZip() string {
	if x != nil && x.SwapZip != nil {
		return *x.SwapZip
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetSwapLogisticsType() int32 {
	if x != nil && x.SwapLogisticsType != nil {
		return *x.SwapLogisticsType
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSwapLogisticsName() string {
	if x != nil && x.SwapLogisticsName != nil {
		return *x.SwapLogisticsName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetAdvanceStatus() int32 {
	if x != nil && x.AdvanceStatus != nil {
		return *x.AdvanceStatus
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetIsGoodsReceived() string {
	if x != nil && x.IsGoodsReceived != nil {
		return *x.IsGoodsReceived
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetCustomerId() int32 {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSwapWarehouseId() int32 {
	if x != nil && x.SwapWarehouseId != nil {
		return *x.SwapWarehouseId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetSwapLogisticsId() int32 {
	if x != nil && x.SwapLogisticsId != nil {
		return *x.SwapLogisticsId
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetFromType() int32 {
	if x != nil && x.FromType != nil {
		return *x.FromType
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetReturnGoodsCount() float64 {
	if x != nil && x.ReturnGoodsCount != nil {
		return *x.ReturnGoodsCount
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetOpConstraint() int32 {
	if x != nil && x.OpConstraint != nil {
		return *x.OpConstraint
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetRefundVersion() string {
	if x != nil && x.RefundVersion != nil {
		return *x.RefundVersion
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetConsignMode() int32 {
	if x != nil && x.ConsignMode != nil {
		return *x.ConsignMode
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetPushNo() string {
	if x != nil && x.PushNo != nil {
		return *x.PushNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetLogisticsStyle() int32 {
	if x != nil && x.LogisticsStyle != nil {
		return *x.LogisticsStyle
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetBadReason() int32 {
	if x != nil && x.BadReason != nil {
		return *x.BadReason
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetReturnMask() int32 {
	if x != nil && x.ReturnMask != nil {
		return *x.ReturnMask
	}
	return 0
}

func (x *WdtTradeRefundRequest) GetIsTradeCharged() bool {
	if x != nil && x.IsTradeCharged != nil {
		return *x.IsTradeCharged
	}
	return false
}

func (x *WdtTradeRefundRequest) GetStockinPreNo() string {
	if x != nil && x.StockinPreNo != nil {
		return *x.StockinPreNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetRevertReasonInfo() string {
	if x != nil && x.RevertReasonInfo != nil {
		return *x.RevertReasonInfo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetFenxiaoNickName() string {
	if x != nil && x.FenxiaoNickName != nil {
		return *x.FenxiaoNickName
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetFenxiaoRefundNo() string {
	if x != nil && x.FenxiaoRefundNo != nil {
		return *x.FenxiaoRefundNo
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetFenxiaoTid() string {
	if x != nil && x.FenxiaoTid != nil {
		return *x.FenxiaoTid
	}
	return ""
}

func (x *WdtTradeRefundRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

type WdtTradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo             *string                           `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	PlatformId           *int32                            `protobuf:"varint,4,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopNo               *string                           `protobuf:"bytes,5,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	Tid                  *string                           `protobuf:"bytes,6,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	Status               *int32                            `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProcessStatus        *int32                            `protobuf:"varint,11,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	ActualRefundAmount   *float64                          `protobuf:"fixed64,17,opt,name=actual_refund_amount,json=actualRefundAmount,proto3,oneof" json:"actual_refund_amount,omitempty"`
	Remark               *string                           `protobuf:"bytes,19,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	LogisticsName        *string                           `protobuf:"bytes,21,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo          *string                           `protobuf:"bytes,22,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	Modified             *string                           `protobuf:"bytes,24,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	AggConsignStatusName *string                           `protobuf:"bytes,26,opt,name=agg_consign_status_name,json=aggConsignStatusName,proto3,oneof" json:"agg_consign_status_name,omitempty"`
	RelatedStatusName    *string                           `protobuf:"bytes,27,opt,name=related_status_name,json=relatedStatusName,proto3,oneof" json:"related_status_name,omitempty"`
	ProcessStatusName    *string                           `protobuf:"bytes,28,opt,name=process_status_name,json=processStatusName,proto3,oneof" json:"process_status_name,omitempty"`
	StatusName           *string                           `protobuf:"bytes,29,opt,name=status_name,json=statusName,proto3,oneof" json:"status_name,omitempty"`
	RelatedConsignAggNo  *string                           `protobuf:"bytes,32,opt,name=related_consign_agg_no,json=relatedConsignAggNo,proto3,oneof" json:"related_consign_agg_no,omitempty"`
	RelatedStatus        *int32                            `protobuf:"varint,33,opt,name=related_status,json=relatedStatus,proto3,oneof" json:"related_status,omitempty"`
	AggConsignStatus     *int32                            `protobuf:"varint,34,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	WarehouseId          *int32                            `protobuf:"varint,45,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	WarehouseNo          *string                           `protobuf:"bytes,46,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	ShopName             *string                           `protobuf:"bytes,48,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	GoodsAmount          *float64                          `protobuf:"fixed64,55,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	CustomerNo           *string                           `protobuf:"bytes,68,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName         *string                           `protobuf:"bytes,69,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	ReasonId             *int32                            `protobuf:"varint,73,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FlagName             *string                           `protobuf:"bytes,76,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	WmsOuterNo           *string                           `protobuf:"bytes,81,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32                            `protobuf:"varint,82,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult            *string                           `protobuf:"bytes,83,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	RefundId             *int32                            `protobuf:"varint,84,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	PlatformIdName       *string                           `protobuf:"bytes,85,opt,name=platform_id_name,json=platformIdName,proto3,oneof" json:"platform_id_name,omitempty"`
	TypeName             *string                           `protobuf:"bytes,86,opt,name=type_name,json=typeName,proto3,oneof" json:"type_name,omitempty"`
	CsStatusName         *string                           `protobuf:"bytes,87,opt,name=cs_status_name,json=csStatusName,proto3,oneof" json:"cs_status_name,omitempty"`
	RefundOrderList      []*WdtTradeRefundGoodsResponse    `protobuf:"bytes,88,rep,name=refund_order_list,json=refundOrderList,proto3" json:"refund_order_list,omitempty"`
	RefundOutGoodsList   []*WdtTradeRefundDiscountResponse `protobuf:"bytes,89,rep,name=refund_out_goods_list,json=refundOutGoodsList,proto3" json:"refund_out_goods_list,omitempty"`
	ApiOuterNo           *string                           `protobuf:"bytes,90,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	SrcNo                *string                           `protobuf:"bytes,91,opt,name=src_no,json=srcNo,proto3,oneof" json:"src_no,omitempty"`
	Type                 *int32                            `protobuf:"varint,92,opt,name=type,proto3,oneof" json:"type,omitempty"`
	GuaranteeMode        *int32                            `protobuf:"varint,93,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	CsStatus             *int32                            `protobuf:"varint,94,opt,name=cs_status,json=csStatus,proto3,oneof" json:"cs_status,omitempty"`
	SwapTradeId          *int32                            `protobuf:"varint,95,opt,name=swap_trade_id,json=swapTradeId,proto3,oneof" json:"swap_trade_id,omitempty"`
	PayAccount           *string                           `protobuf:"bytes,96,opt,name=pay_account,json=payAccount,proto3,oneof" json:"pay_account,omitempty"`
	PayNo                *string                           `protobuf:"bytes,97,opt,name=pay_no,json=payNo,proto3,oneof" json:"pay_no,omitempty"`
	RefundAmount         *float64                          `protobuf:"fixed64,98,opt,name=refund_amount,json=refundAmount,proto3,oneof" json:"refund_amount,omitempty"`
	DirectRefundAmount   *float64                          `protobuf:"fixed64,99,opt,name=direct_refund_amount,json=directRefundAmount,proto3,oneof" json:"direct_refund_amount,omitempty"`
	GuaranteRefundAmount *float64                          `protobuf:"fixed64,100,opt,name=guarante_refund_amount,json=guaranteRefundAmount,proto3,oneof" json:"guarante_refund_amount,omitempty"`
	ExchangeAmount       *float64                          `protobuf:"fixed64,101,opt,name=exchange_amount,json=exchangeAmount,proto3,oneof" json:"exchange_amount,omitempty"`
	PostAmount           *float64                          `protobuf:"fixed64,102,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64                          `protobuf:"fixed64,103,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	Paid                 *float64                          `protobuf:"fixed64,104,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SalesTradeId         *int32                            `protobuf:"varint,105,opt,name=sales_trade_id,json=salesTradeId,proto3,oneof" json:"sales_trade_id,omitempty"`
	SalesTid             *string                           `protobuf:"bytes,106,opt,name=sales_tid,json=salesTid,proto3,oneof" json:"sales_tid,omitempty"`
	BuyerNick            *string                           `protobuf:"bytes,107,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	ReceiverName         *string                           `protobuf:"bytes,108,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverAddress      *string                           `protobuf:"bytes,109,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverTelno        *string                           `protobuf:"bytes,110,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReturnName           *string                           `protobuf:"bytes,111,opt,name=return_name,json=returnName,proto3,oneof" json:"return_name,omitempty"`
	ReturnMobile         *string                           `protobuf:"bytes,112,opt,name=return_mobile,json=returnMobile,proto3,oneof" json:"return_mobile,omitempty"`
	ReturnTelno          *string                           `protobuf:"bytes,113,opt,name=return_telno,json=returnTelno,proto3,oneof" json:"return_telno,omitempty"`
	ReturnAddress        *string                           `protobuf:"bytes,114,opt,name=return_address,json=returnAddress,proto3,oneof" json:"return_address,omitempty"`
	ReturnLogisticsName  *string                           `protobuf:"bytes,115,opt,name=return_logistics_name,json=returnLogisticsName,proto3,oneof" json:"return_logistics_name,omitempty"`
	ReturnLogisticsNo    *string                           `protobuf:"bytes,116,opt,name=return_logistics_no,json=returnLogisticsNo,proto3,oneof" json:"return_logistics_no,omitempty"`
	SwapReceiver         *string                           `protobuf:"bytes,117,opt,name=swap_receiver,json=swapReceiver,proto3,oneof" json:"swap_receiver,omitempty"`
	SwapMobile           *string                           `protobuf:"bytes,118,opt,name=swap_mobile,json=swapMobile,proto3,oneof" json:"swap_mobile,omitempty"`
	SwapTelno            *string                           `protobuf:"bytes,119,opt,name=swap_telno,json=swapTelno,proto3,oneof" json:"swap_telno,omitempty"`
	SwapProvince         *int32                            `protobuf:"varint,120,opt,name=swap_province,json=swapProvince,proto3,oneof" json:"swap_province,omitempty"`
	SwapCity             *int32                            `protobuf:"varint,121,opt,name=swap_city,json=swapCity,proto3,oneof" json:"swap_city,omitempty"`
	SwapDistrict         *int32                            `protobuf:"varint,122,opt,name=swap_district,json=swapDistrict,proto3,oneof" json:"swap_district,omitempty"`
	SwapArea             *string                           `protobuf:"bytes,123,opt,name=swap_area,json=swapArea,proto3,oneof" json:"swap_area,omitempty"`
	SwapWarehouseNo      *string                           `protobuf:"bytes,124,opt,name=swap_warehouse_no,json=swapWarehouseNo,proto3,oneof" json:"swap_warehouse_no,omitempty"`
	SwapAddress          *string                           `protobuf:"bytes,125,opt,name=swap_address,json=swapAddress,proto3,oneof" json:"swap_address,omitempty"`
	RefundTime           *string                           `protobuf:"bytes,126,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	RefundReason         *string                           `protobuf:"bytes,127,opt,name=refund_reason,json=refundReason,proto3,oneof" json:"refund_reason,omitempty"`
	SwapTradeNo          *string                           `protobuf:"bytes,128,opt,name=swap_trade_no,json=swapTradeNo,proto3,oneof" json:"swap_trade_no,omitempty"`
	FinishTime           *string                           `protobuf:"bytes,129,opt,name=finish_time,json=finishTime,proto3,oneof" json:"finish_time,omitempty"`
	SwapZip              *string                           `protobuf:"bytes,130,opt,name=swap_zip,json=swapZip,proto3,oneof" json:"swap_zip,omitempty"`
	SwapLogisticsType    *int32                            `protobuf:"varint,131,opt,name=swap_logistics_type,json=swapLogisticsType,proto3,oneof" json:"swap_logistics_type,omitempty"`
	SwapLogisticsName    *string                           `protobuf:"bytes,132,opt,name=swap_logistics_name,json=swapLogisticsName,proto3,oneof" json:"swap_logistics_name,omitempty"`
	CreatorName          *string                           `protobuf:"bytes,133,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	ErrorMsg             *string                           `protobuf:"bytes,134,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
	Created              *string                           `protobuf:"bytes,135,opt,name=created,proto3,oneof" json:"created,omitempty"`
	OuterNo              *string                           `protobuf:"bytes,136,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	ShopId               *int32                            `protobuf:"varint,137,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	AdvanceStatus        *int32                            `protobuf:"varint,138,opt,name=advance_status,json=advanceStatus,proto3,oneof" json:"advance_status,omitempty"`
	IsGoodsReceived      *string                           `protobuf:"bytes,139,opt,name=is_goods_received,json=isGoodsReceived,proto3,oneof" json:"is_goods_received,omitempty"`
	CustomerId           *int32                            `protobuf:"varint,140,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	SwapWarehouseId      *int32                            `protobuf:"varint,141,opt,name=swap_warehouse_id,json=swapWarehouseId,proto3,oneof" json:"swap_warehouse_id,omitempty"`
	SwapLogisticsId      *int32                            `protobuf:"varint,142,opt,name=swap_logistics_id,json=swapLogisticsId,proto3,oneof" json:"swap_logistics_id,omitempty"`
	WarehouseType        *int32                            `protobuf:"varint,143,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	FromType             *int32                            `protobuf:"varint,144,opt,name=from_type,json=fromType,proto3,oneof" json:"from_type,omitempty"`
	ReturnGoodsCount     *float64                          `protobuf:"fixed64,145,opt,name=return_goods_count,json=returnGoodsCount,proto3,oneof" json:"return_goods_count,omitempty"`
	OpConstraint         *int32                            `protobuf:"varint,146,opt,name=op_constraint,json=opConstraint,proto3,oneof" json:"op_constraint,omitempty"`
	RefundVersion        *string                           `protobuf:"bytes,147,opt,name=refund_version,json=refundVersion,proto3,oneof" json:"refund_version,omitempty"`
	ConsignMode          *int32                            `protobuf:"varint,148,opt,name=consign_mode,json=consignMode,proto3,oneof" json:"consign_mode,omitempty"`
	PushNo               *string                           `protobuf:"bytes,149,opt,name=push_no,json=pushNo,proto3,oneof" json:"push_no,omitempty"`
	LogisticsStyle       *int32                            `protobuf:"varint,150,opt,name=logistics_style,json=logisticsStyle,proto3,oneof" json:"logistics_style,omitempty"`
	RevertReason         *int32                            `protobuf:"varint,151,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	BadReason            *int32                            `protobuf:"varint,152,opt,name=bad_reason,json=badReason,proto3,oneof" json:"bad_reason,omitempty"`
	ReturnMask           *int32                            `protobuf:"varint,153,opt,name=return_mask,json=returnMask,proto3,oneof" json:"return_mask,omitempty"`
	IsTradeCharged       *bool                             `protobuf:"varint,154,opt,name=is_trade_charged,json=isTradeCharged,proto3,oneof" json:"is_trade_charged,omitempty"`
	StockinPreNo         *string                           `protobuf:"bytes,155,opt,name=stockin_pre_no,json=stockinPreNo,proto3,oneof" json:"stockin_pre_no,omitempty"`
	RevertReasonInfo     *string                           `protobuf:"bytes,156,opt,name=revert_reason_info,json=revertReasonInfo,proto3,oneof" json:"revert_reason_info,omitempty"`
	FenxiaoNickName      *string                           `protobuf:"bytes,157,opt,name=fenxiao_nick_name,json=fenxiaoNickName,proto3,oneof" json:"fenxiao_nick_name,omitempty"`
	FenxiaoRefundNo      *string                           `protobuf:"bytes,158,opt,name=fenxiao_refund_no,json=fenxiaoRefundNo,proto3,oneof" json:"fenxiao_refund_no,omitempty"`
	FenxiaoTid           *string                           `protobuf:"bytes,159,opt,name=fenxiao_tid,json=fenxiaoTid,proto3,oneof" json:"fenxiao_tid,omitempty"`
	AggNo                *string                           `protobuf:"bytes,160,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	GuaranteeModeName    *string                           `protobuf:"bytes,161,opt,name=guarantee_mode_name,json=guaranteeModeName,proto3,oneof" json:"guarantee_mode_name,omitempty"`
}

func (x *WdtTradeRefundResponse) Reset() {
	*x = WdtTradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundResponse) ProtoMessage() {}

func (x *WdtTradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{422}
}

func (x *WdtTradeRefundResponse) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetActualRefundAmount() float64 {
	if x != nil && x.ActualRefundAmount != nil {
		return *x.ActualRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetAggConsignStatusName() string {
	if x != nil && x.AggConsignStatusName != nil {
		return *x.AggConsignStatusName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRelatedStatusName() string {
	if x != nil && x.RelatedStatusName != nil {
		return *x.RelatedStatusName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetProcessStatusName() string {
	if x != nil && x.ProcessStatusName != nil {
		return *x.ProcessStatusName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetStatusName() string {
	if x != nil && x.StatusName != nil {
		return *x.StatusName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRelatedConsignAggNo() string {
	if x != nil && x.RelatedConsignAggNo != nil {
		return *x.RelatedConsignAggNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRelatedStatus() int32 {
	if x != nil && x.RelatedStatus != nil {
		return *x.RelatedStatus
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetPlatformIdName() string {
	if x != nil && x.PlatformIdName != nil {
		return *x.PlatformIdName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetCsStatusName() string {
	if x != nil && x.CsStatusName != nil {
		return *x.CsStatusName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRefundOrderList() []*WdtTradeRefundGoodsResponse {
	if x != nil {
		return x.RefundOrderList
	}
	return nil
}

func (x *WdtTradeRefundResponse) GetRefundOutGoodsList() []*WdtTradeRefundDiscountResponse {
	if x != nil {
		return x.RefundOutGoodsList
	}
	return nil
}

func (x *WdtTradeRefundResponse) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSrcNo() string {
	if x != nil && x.SrcNo != nil {
		return *x.SrcNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetCsStatus() int32 {
	if x != nil && x.CsStatus != nil {
		return *x.CsStatus
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSwapTradeId() int32 {
	if x != nil && x.SwapTradeId != nil {
		return *x.SwapTradeId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetPayAccount() string {
	if x != nil && x.PayAccount != nil {
		return *x.PayAccount
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetPayNo() string {
	if x != nil && x.PayNo != nil {
		return *x.PayNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRefundAmount() float64 {
	if x != nil && x.RefundAmount != nil {
		return *x.RefundAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetDirectRefundAmount() float64 {
	if x != nil && x.DirectRefundAmount != nil {
		return *x.DirectRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetGuaranteRefundAmount() float64 {
	if x != nil && x.GuaranteRefundAmount != nil {
		return *x.GuaranteRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetExchangeAmount() float64 {
	if x != nil && x.ExchangeAmount != nil {
		return *x.ExchangeAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSalesTradeId() int32 {
	if x != nil && x.SalesTradeId != nil {
		return *x.SalesTradeId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSalesTid() string {
	if x != nil && x.SalesTid != nil {
		return *x.SalesTid
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReturnName() string {
	if x != nil && x.ReturnName != nil {
		return *x.ReturnName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReturnMobile() string {
	if x != nil && x.ReturnMobile != nil {
		return *x.ReturnMobile
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReturnTelno() string {
	if x != nil && x.ReturnTelno != nil {
		return *x.ReturnTelno
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReturnAddress() string {
	if x != nil && x.ReturnAddress != nil {
		return *x.ReturnAddress
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReturnLogisticsName() string {
	if x != nil && x.ReturnLogisticsName != nil {
		return *x.ReturnLogisticsName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetReturnLogisticsNo() string {
	if x != nil && x.ReturnLogisticsNo != nil {
		return *x.ReturnLogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapReceiver() string {
	if x != nil && x.SwapReceiver != nil {
		return *x.SwapReceiver
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapMobile() string {
	if x != nil && x.SwapMobile != nil {
		return *x.SwapMobile
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapTelno() string {
	if x != nil && x.SwapTelno != nil {
		return *x.SwapTelno
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapProvince() int32 {
	if x != nil && x.SwapProvince != nil {
		return *x.SwapProvince
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSwapCity() int32 {
	if x != nil && x.SwapCity != nil {
		return *x.SwapCity
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSwapDistrict() int32 {
	if x != nil && x.SwapDistrict != nil {
		return *x.SwapDistrict
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSwapArea() string {
	if x != nil && x.SwapArea != nil {
		return *x.SwapArea
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapWarehouseNo() string {
	if x != nil && x.SwapWarehouseNo != nil {
		return *x.SwapWarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapAddress() string {
	if x != nil && x.SwapAddress != nil {
		return *x.SwapAddress
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRefundReason() string {
	if x != nil && x.RefundReason != nil {
		return *x.RefundReason
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapTradeNo() string {
	if x != nil && x.SwapTradeNo != nil {
		return *x.SwapTradeNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetFinishTime() string {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapZip() string {
	if x != nil && x.SwapZip != nil {
		return *x.SwapZip
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetSwapLogisticsType() int32 {
	if x != nil && x.SwapLogisticsType != nil {
		return *x.SwapLogisticsType
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSwapLogisticsName() string {
	if x != nil && x.SwapLogisticsName != nil {
		return *x.SwapLogisticsName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetAdvanceStatus() int32 {
	if x != nil && x.AdvanceStatus != nil {
		return *x.AdvanceStatus
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetIsGoodsReceived() string {
	if x != nil && x.IsGoodsReceived != nil {
		return *x.IsGoodsReceived
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetCustomerId() int32 {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSwapWarehouseId() int32 {
	if x != nil && x.SwapWarehouseId != nil {
		return *x.SwapWarehouseId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetSwapLogisticsId() int32 {
	if x != nil && x.SwapLogisticsId != nil {
		return *x.SwapLogisticsId
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetFromType() int32 {
	if x != nil && x.FromType != nil {
		return *x.FromType
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetReturnGoodsCount() float64 {
	if x != nil && x.ReturnGoodsCount != nil {
		return *x.ReturnGoodsCount
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetOpConstraint() int32 {
	if x != nil && x.OpConstraint != nil {
		return *x.OpConstraint
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetRefundVersion() string {
	if x != nil && x.RefundVersion != nil {
		return *x.RefundVersion
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetConsignMode() int32 {
	if x != nil && x.ConsignMode != nil {
		return *x.ConsignMode
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetPushNo() string {
	if x != nil && x.PushNo != nil {
		return *x.PushNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetLogisticsStyle() int32 {
	if x != nil && x.LogisticsStyle != nil {
		return *x.LogisticsStyle
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetBadReason() int32 {
	if x != nil && x.BadReason != nil {
		return *x.BadReason
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetReturnMask() int32 {
	if x != nil && x.ReturnMask != nil {
		return *x.ReturnMask
	}
	return 0
}

func (x *WdtTradeRefundResponse) GetIsTradeCharged() bool {
	if x != nil && x.IsTradeCharged != nil {
		return *x.IsTradeCharged
	}
	return false
}

func (x *WdtTradeRefundResponse) GetStockinPreNo() string {
	if x != nil && x.StockinPreNo != nil {
		return *x.StockinPreNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetRevertReasonInfo() string {
	if x != nil && x.RevertReasonInfo != nil {
		return *x.RevertReasonInfo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetFenxiaoNickName() string {
	if x != nil && x.FenxiaoNickName != nil {
		return *x.FenxiaoNickName
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetFenxiaoRefundNo() string {
	if x != nil && x.FenxiaoRefundNo != nil {
		return *x.FenxiaoRefundNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetFenxiaoTid() string {
	if x != nil && x.FenxiaoTid != nil {
		return *x.FenxiaoTid
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *WdtTradeRefundResponse) GetGuaranteeModeName() string {
	if x != nil && x.GuaranteeModeName != nil {
		return *x.GuaranteeModeName
	}
	return ""
}

type WdtTradeRefundRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundId int32 `protobuf:"varint,1,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty"`
}

func (x *WdtTradeRefundRetrieveRequest) Reset() {
	*x = WdtTradeRefundRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundRetrieveRequest) ProtoMessage() {}

func (x *WdtTradeRefundRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{423}
}

func (x *WdtTradeRefundRetrieveRequest) GetRefundId() int32 {
	if x != nil {
		return x.RefundId
	}
	return 0
}

type WdtTradeRefundStockinDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinNo string `protobuf:"bytes,1,opt,name=stockin_no,json=stockinNo,proto3" json:"stockin_no,omitempty"`
}

func (x *WdtTradeRefundStockinDestroyRequest) Reset() {
	*x = WdtTradeRefundStockinDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinDestroyRequest) ProtoMessage() {}

func (x *WdtTradeRefundStockinDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinDestroyRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{424}
}

func (x *WdtTradeRefundStockinDestroyRequest) GetStockinNo() string {
	if x != nil {
		return x.StockinNo
	}
	return ""
}

type WdtTradeRefundStockinDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId          *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	GoodsNo        *string  `protobuf:"bytes,2,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecId         *int32   `protobuf:"varint,3,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	SpecNo         *string  `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName       *string  `protobuf:"bytes,5,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode       *string  `protobuf:"bytes,6,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	SuiteNo        *string  `protobuf:"bytes,7,opt,name=suite_no,json=suiteNo,proto3,oneof" json:"suite_no,omitempty"`
	GoodsUnit      *string  `protobuf:"bytes,8,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	Barcode        *string  `protobuf:"bytes,9,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	GoodsCount     *float64 `protobuf:"fixed64,10,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	Num            *float64 `protobuf:"fixed64,11,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Num2           *float64 `protobuf:"fixed64,12,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	ExpectNum      *float64 `protobuf:"fixed64,13,opt,name=expect_num,json=expectNum,proto3,oneof" json:"expect_num,omitempty"`
	Price          *float64 `protobuf:"fixed64,14,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Discount       *float64 `protobuf:"fixed64,15,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	CostPrice      *float64 `protobuf:"fixed64,16,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	SrcPrice       *float64 `protobuf:"fixed64,17,opt,name=src_price,json=srcPrice,proto3,oneof" json:"src_price,omitempty"`
	TaxPrice       *float64 `protobuf:"fixed64,18,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	TaxAmount      *float64 `protobuf:"fixed64,19,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	TotalCost      *float64 `protobuf:"fixed64,20,opt,name=total_cost,json=totalCost,proto3,oneof" json:"total_cost,omitempty"`
	AdjustNum      *float64 `protobuf:"fixed64,21,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice    *float64 `protobuf:"fixed64,22,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightNum       *float64 `protobuf:"fixed64,23,opt,name=right_num,json=rightNum,proto3,oneof" json:"right_num,omitempty"`
	RightPrice     *float64 `protobuf:"fixed64,24,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	RightCost      *float64 `protobuf:"fixed64,25,opt,name=right_cost,json=rightCost,proto3,oneof" json:"right_cost,omitempty"`
	ProductionDate *string  `protobuf:"bytes,26,opt,name=production_date,json=productionDate,proto3,oneof" json:"production_date,omitempty"`
	ValidityDays   *int32   `protobuf:"varint,27,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	ExpireDate     *string  `protobuf:"bytes,28,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	Tax            *float64 `protobuf:"fixed64,29,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	Remark         *string  `protobuf:"bytes,30,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	BrandNo        *string  `protobuf:"bytes,31,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName      *string  `protobuf:"bytes,32,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName      *string  `protobuf:"bytes,33,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	BatchId        *int32   `protobuf:"varint,34,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	BatchNo        *string  `protobuf:"bytes,35,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	Prop1          *string  `protobuf:"bytes,36,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2          *string  `protobuf:"bytes,37,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Prop3          *string  `protobuf:"bytes,38,opt,name=prop3,proto3,oneof" json:"prop3,omitempty"`
	Prop4          *string  `protobuf:"bytes,39,opt,name=prop4,proto3,oneof" json:"prop4,omitempty"`
	Prop5          *string  `protobuf:"bytes,40,opt,name=prop5,proto3,oneof" json:"prop5,omitempty"`
	Prop6          *string  `protobuf:"bytes,41,opt,name=prop6,proto3,oneof" json:"prop6,omitempty"`
	GoodProp1      *string  `protobuf:"bytes,42,opt,name=good_prop1,json=goodProp1,proto3,oneof" json:"good_prop1,omitempty"`
	GoodProp2      *string  `protobuf:"bytes,43,opt,name=good_prop2,json=goodProp2,proto3,oneof" json:"good_prop2,omitempty"`
	GoodProp3      *string  `protobuf:"bytes,44,opt,name=good_prop3,json=goodProp3,proto3,oneof" json:"good_prop3,omitempty"`
	GoodProp4      *string  `protobuf:"bytes,45,opt,name=good_prop4,json=goodProp4,proto3,oneof" json:"good_prop4,omitempty"`
	GoodProp5      *string  `protobuf:"bytes,46,opt,name=good_prop5,json=goodProp5,proto3,oneof" json:"good_prop5,omitempty"`
	GoodProp6      *string  `protobuf:"bytes,47,opt,name=good_prop6,json=goodProp6,proto3,oneof" json:"good_prop6,omitempty"`
	BatchRemark    *string  `protobuf:"bytes,48,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	PositionNo     *string  `protobuf:"bytes,49,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	PositionId     *int32   `protobuf:"varint,50,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	UnitId         *int32   `protobuf:"varint,51,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId     *int32   `protobuf:"varint,52,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitRatio      *float64 `protobuf:"fixed64,53,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	CostPrice2     *float64 `protobuf:"fixed64,54,opt,name=cost_price2,json=costPrice2,proto3,oneof" json:"cost_price2,omitempty"`
	SharePostCost  *float64 `protobuf:"fixed64,55,opt,name=share_post_cost,json=sharePostCost,proto3,oneof" json:"share_post_cost,omitempty"`
	SharePostTotal *float64 `protobuf:"fixed64,56,opt,name=share_post_total,json=sharePostTotal,proto3,oneof" json:"share_post_total,omitempty"`
	Modified       *string  `protobuf:"bytes,57,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created        *string  `protobuf:"bytes,58,opt,name=created,proto3,oneof" json:"created,omitempty"`
}

func (x *WdtTradeRefundStockinDetailsRequest) Reset() {
	*x = WdtTradeRefundStockinDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinDetailsRequest) ProtoMessage() {}

func (x *WdtTradeRefundStockinDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinDetailsRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinDetailsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{425}
}

func (x *WdtTradeRefundStockinDetailsRequest) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSuiteNo() string {
	if x != nil && x.SuiteNo != nil {
		return *x.SuiteNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetExpectNum() float64 {
	if x != nil && x.ExpectNum != nil {
		return *x.ExpectNum
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSrcPrice() float64 {
	if x != nil && x.SrcPrice != nil {
		return *x.SrcPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetTotalCost() float64 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetRightNum() float64 {
	if x != nil && x.RightNum != nil {
		return *x.RightNum
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetRightCost() float64 {
	if x != nil && x.RightCost != nil {
		return *x.RightCost
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetProductionDate() string {
	if x != nil && x.ProductionDate != nil {
		return *x.ProductionDate
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetValidityDays() int32 {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetProp3() string {
	if x != nil && x.Prop3 != nil {
		return *x.Prop3
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetProp4() string {
	if x != nil && x.Prop4 != nil {
		return *x.Prop4
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetProp5() string {
	if x != nil && x.Prop5 != nil {
		return *x.Prop5
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetProp6() string {
	if x != nil && x.Prop6 != nil {
		return *x.Prop6
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodProp1() string {
	if x != nil && x.GoodProp1 != nil {
		return *x.GoodProp1
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodProp2() string {
	if x != nil && x.GoodProp2 != nil {
		return *x.GoodProp2
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodProp3() string {
	if x != nil && x.GoodProp3 != nil {
		return *x.GoodProp3
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodProp4() string {
	if x != nil && x.GoodProp4 != nil {
		return *x.GoodProp4
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodProp5() string {
	if x != nil && x.GoodProp5 != nil {
		return *x.GoodProp5
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetGoodProp6() string {
	if x != nil && x.GoodProp6 != nil {
		return *x.GoodProp6
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetCostPrice2() float64 {
	if x != nil && x.CostPrice2 != nil {
		return *x.CostPrice2
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSharePostCost() float64 {
	if x != nil && x.SharePostCost != nil {
		return *x.SharePostCost
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetSharePostTotal() float64 {
	if x != nil && x.SharePostTotal != nil {
		return *x.SharePostTotal
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

type WdtTradeRefundStockinDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId          *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	SpecNo         *string  `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SuiteNo        *string  `protobuf:"bytes,5,opt,name=suite_no,json=suiteNo,proto3,oneof" json:"suite_no,omitempty"`
	GoodsCount     *float64 `protobuf:"fixed64,6,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	Discount       *float64 `protobuf:"fixed64,7,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	CostPrice      *float64 `protobuf:"fixed64,8,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	ProductionDate *string  `protobuf:"bytes,9,opt,name=production_date,json=productionDate,proto3,oneof" json:"production_date,omitempty"`
	ValidityDays   *int32   `protobuf:"varint,10,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	ExpireDate     *string  `protobuf:"bytes,11,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	SrcPrice       *float64 `protobuf:"fixed64,12,opt,name=src_price,json=srcPrice,proto3,oneof" json:"src_price,omitempty"`
	TaxPrice       *float64 `protobuf:"fixed64,13,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	TaxAmount      *float64 `protobuf:"fixed64,14,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	Tax            *float64 `protobuf:"fixed64,15,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TotalCost      *float64 `protobuf:"fixed64,16,opt,name=total_cost,json=totalCost,proto3,oneof" json:"total_cost,omitempty"`
	Remark         *string  `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	AdjustNum      *float64 `protobuf:"fixed64,18,opt,name=adjust_num,json=adjustNum,proto3,oneof" json:"adjust_num,omitempty"`
	AdjustPrice    *float64 `protobuf:"fixed64,19,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightNum       *float64 `protobuf:"fixed64,20,opt,name=right_num,json=rightNum,proto3,oneof" json:"right_num,omitempty"`
	RightPrice     *float64 `protobuf:"fixed64,21,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	Num            *float64 `protobuf:"fixed64,22,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Num2           *float64 `protobuf:"fixed64,23,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	RightCost      *float64 `protobuf:"fixed64,24,opt,name=right_cost,json=rightCost,proto3,oneof" json:"right_cost,omitempty"`
	BrandNo        *string  `protobuf:"bytes,25,opt,name=brand_no,json=brandNo,proto3,oneof" json:"brand_no,omitempty"`
	BrandName      *string  `protobuf:"bytes,26,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	GoodsName      *string  `protobuf:"bytes,27,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	Prop1          *string  `protobuf:"bytes,28,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2          *string  `protobuf:"bytes,29,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Prop3          *string  `protobuf:"bytes,30,opt,name=prop3,proto3,oneof" json:"prop3,omitempty"`
	Prop4          *string  `protobuf:"bytes,31,opt,name=prop4,proto3,oneof" json:"prop4,omitempty"`
	Prop5          *string  `protobuf:"bytes,32,opt,name=prop5,proto3,oneof" json:"prop5,omitempty"`
	Prop6          *string  `protobuf:"bytes,33,opt,name=prop6,proto3,oneof" json:"prop6,omitempty"`
	GoodProp1      *string  `protobuf:"bytes,34,opt,name=good_prop1,json=goodProp1,proto3,oneof" json:"good_prop1,omitempty"`
	GoodProp2      *string  `protobuf:"bytes,35,opt,name=good_prop2,json=goodProp2,proto3,oneof" json:"good_prop2,omitempty"`
	GoodProp3      *string  `protobuf:"bytes,36,opt,name=good_prop3,json=goodProp3,proto3,oneof" json:"good_prop3,omitempty"`
	GoodProp4      *string  `protobuf:"bytes,37,opt,name=good_prop4,json=goodProp4,proto3,oneof" json:"good_prop4,omitempty"`
	GoodProp5      *string  `protobuf:"bytes,38,opt,name=good_prop5,json=goodProp5,proto3,oneof" json:"good_prop5,omitempty"`
	GoodProp6      *string  `protobuf:"bytes,39,opt,name=good_prop6,json=goodProp6,proto3,oneof" json:"good_prop6,omitempty"`
	GoodsNo        *string  `protobuf:"bytes,40,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecName       *string  `protobuf:"bytes,41,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode       *string  `protobuf:"bytes,42,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	GoodsUnit      *string  `protobuf:"bytes,43,opt,name=goods_unit,json=goodsUnit,proto3,oneof" json:"goods_unit,omitempty"`
	BatchNo        *string  `protobuf:"bytes,44,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark    *string  `protobuf:"bytes,45,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	PositionNo     *string  `protobuf:"bytes,46,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	SpecId         *int32   `protobuf:"varint,51,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	BatchId        *int32   `protobuf:"varint,52,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	PositionId     *int32   `protobuf:"varint,53,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	UnitId         *int32   `protobuf:"varint,54,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId     *int32   `protobuf:"varint,55,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitRatio      *float64 `protobuf:"fixed64,56,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	ExpectNum      *float64 `protobuf:"fixed64,57,opt,name=expect_num,json=expectNum,proto3,oneof" json:"expect_num,omitempty"`
	CostPrice2     *float64 `protobuf:"fixed64,58,opt,name=cost_price2,json=costPrice2,proto3,oneof" json:"cost_price2,omitempty"`
	SharePostCost  *float64 `protobuf:"fixed64,59,opt,name=share_post_cost,json=sharePostCost,proto3,oneof" json:"share_post_cost,omitempty"`
	SharePostTotal *float64 `protobuf:"fixed64,60,opt,name=share_post_total,json=sharePostTotal,proto3,oneof" json:"share_post_total,omitempty"`
	Modified       *string  `protobuf:"bytes,61,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created        *string  `protobuf:"bytes,62,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Price          *float64 `protobuf:"fixed64,63,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Barcode        *string  `protobuf:"bytes,64,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
}

func (x *WdtTradeRefundStockinDetailsResponse) Reset() {
	*x = WdtTradeRefundStockinDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinDetailsResponse) ProtoMessage() {}

func (x *WdtTradeRefundStockinDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinDetailsResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinDetailsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{426}
}

func (x *WdtTradeRefundStockinDetailsResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSuiteNo() string {
	if x != nil && x.SuiteNo != nil {
		return *x.SuiteNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetProductionDate() string {
	if x != nil && x.ProductionDate != nil {
		return *x.ProductionDate
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetValidityDays() int32 {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSrcPrice() float64 {
	if x != nil && x.SrcPrice != nil {
		return *x.SrcPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetTotalCost() float64 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetAdjustNum() float64 {
	if x != nil && x.AdjustNum != nil {
		return *x.AdjustNum
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetRightNum() float64 {
	if x != nil && x.RightNum != nil {
		return *x.RightNum
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetRightCost() float64 {
	if x != nil && x.RightCost != nil {
		return *x.RightCost
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetBrandNo() string {
	if x != nil && x.BrandNo != nil {
		return *x.BrandNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetProp3() string {
	if x != nil && x.Prop3 != nil {
		return *x.Prop3
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetProp4() string {
	if x != nil && x.Prop4 != nil {
		return *x.Prop4
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetProp5() string {
	if x != nil && x.Prop5 != nil {
		return *x.Prop5
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetProp6() string {
	if x != nil && x.Prop6 != nil {
		return *x.Prop6
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodProp1() string {
	if x != nil && x.GoodProp1 != nil {
		return *x.GoodProp1
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodProp2() string {
	if x != nil && x.GoodProp2 != nil {
		return *x.GoodProp2
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodProp3() string {
	if x != nil && x.GoodProp3 != nil {
		return *x.GoodProp3
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodProp4() string {
	if x != nil && x.GoodProp4 != nil {
		return *x.GoodProp4
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodProp5() string {
	if x != nil && x.GoodProp5 != nil {
		return *x.GoodProp5
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodProp6() string {
	if x != nil && x.GoodProp6 != nil {
		return *x.GoodProp6
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetGoodsUnit() string {
	if x != nil && x.GoodsUnit != nil {
		return *x.GoodsUnit
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetExpectNum() float64 {
	if x != nil && x.ExpectNum != nil {
		return *x.ExpectNum
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetCostPrice2() float64 {
	if x != nil && x.CostPrice2 != nil {
		return *x.CostPrice2
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSharePostCost() float64 {
	if x != nil && x.SharePostCost != nil {
		return *x.SharePostCost
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetSharePostTotal() float64 {
	if x != nil && x.SharePostTotal != nil {
		return *x.SharePostTotal
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeRefundStockinDetailsResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WdtTradeRefundStockinDetailsResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

type WdtTradeRefundStockinListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtTradeRefundStockinListRequest) Reset() {
	*x = WdtTradeRefundStockinListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinListRequest) ProtoMessage() {}

func (x *WdtTradeRefundStockinListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinListRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{427}
}

func (x *WdtTradeRefundStockinListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtTradeRefundStockinListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtTradeRefundStockinListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results            []*WdtTradeRefundStockinResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count              int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	GoodsCount         int32                            `protobuf:"varint,3,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsCategoryCount int32                            `protobuf:"varint,4,opt,name=goods_category_count,json=goodsCategoryCount,proto3" json:"goods_category_count,omitempty"`
	TotalAmount        string                           `protobuf:"bytes,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	AggWait            int32                            `protobuf:"varint,6,opt,name=agg_wait,json=aggWait,proto3" json:"agg_wait,omitempty"`
	ConsignWaitPush    int32                            `protobuf:"varint,7,opt,name=consign_wait_push,json=consignWaitPush,proto3" json:"consign_wait_push,omitempty"`
	ConsignSuccessPush int32                            `protobuf:"varint,8,opt,name=consign_success_push,json=consignSuccessPush,proto3" json:"consign_success_push,omitempty"`
	ConsignFailedPush  int32                            `protobuf:"varint,9,opt,name=consign_failed_push,json=consignFailedPush,proto3" json:"consign_failed_push,omitempty"`
}

func (x *WdtTradeRefundStockinListResponse) Reset() {
	*x = WdtTradeRefundStockinListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinListResponse) ProtoMessage() {}

func (x *WdtTradeRefundStockinListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinListResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{428}
}

func (x *WdtTradeRefundStockinListResponse) GetResults() []*WdtTradeRefundStockinResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtTradeRefundStockinListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WdtTradeRefundStockinListResponse) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *WdtTradeRefundStockinListResponse) GetGoodsCategoryCount() int32 {
	if x != nil {
		return x.GoodsCategoryCount
	}
	return 0
}

func (x *WdtTradeRefundStockinListResponse) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *WdtTradeRefundStockinListResponse) GetAggWait() int32 {
	if x != nil {
		return x.AggWait
	}
	return 0
}

func (x *WdtTradeRefundStockinListResponse) GetConsignWaitPush() int32 {
	if x != nil {
		return x.ConsignWaitPush
	}
	return 0
}

func (x *WdtTradeRefundStockinListResponse) GetConsignSuccessPush() int32 {
	if x != nil {
		return x.ConsignSuccessPush
	}
	return 0
}

func (x *WdtTradeRefundStockinListResponse) GetConsignFailedPush() int32 {
	if x != nil {
		return x.ConsignFailedPush
	}
	return 0
}

type WdtTradeRefundStockinPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId            *int32                                 `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	XPartialUpdateFields []string                               `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	OrderNo              *string                                `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	WarehouseNo          *string                                `protobuf:"bytes,4,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string                                `protobuf:"bytes,5,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ShopNo               *string                                `protobuf:"bytes,6,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopRemark           *string                                `protobuf:"bytes,7,opt,name=shop_remark,json=shopRemark,proto3,oneof" json:"shop_remark,omitempty"`
	SrcOrderNo           *string                                `protobuf:"bytes,8,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	ProcessStatus        *int32                                 `protobuf:"varint,9,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	Status               *int32                                 `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	StockinTime          *string                                `protobuf:"bytes,11,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime          *string                                `protobuf:"bytes,12,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	AssociatedTime       *string                                `protobuf:"bytes,13,opt,name=associated_time,json=associatedTime,proto3,oneof" json:"associated_time,omitempty"`
	Remark               *string                                `protobuf:"bytes,14,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	TradeNo              *string                                `protobuf:"bytes,15,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	TradeType            *string                                `protobuf:"bytes,17,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	OrderType            *int32                                 `protobuf:"varint,18,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName        *string                                `protobuf:"bytes,19,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsCount           *float64                               `protobuf:"fixed64,20,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsAmount          *float64                               `protobuf:"fixed64,21,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	ActualRefundAmount   *float64                               `protobuf:"fixed64,22,opt,name=actual_refund_amount,json=actualRefundAmount,proto3,oneof" json:"actual_refund_amount,omitempty"`
	TotalPrice           *float64                               `protobuf:"fixed64,23,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount             *float64                               `protobuf:"fixed64,24,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount            *float64                               `protobuf:"fixed64,25,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	PostFee              *float64                               `protobuf:"fixed64,26,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee             *float64                               `protobuf:"fixed64,27,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	AdjustPrice          *float64                               `protobuf:"fixed64,28,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightPrice           *float64                               `protobuf:"fixed64,29,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	LogisticsType        *int32                                 `protobuf:"varint,30,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo          *string                                `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName        *string                                `protobuf:"bytes,32,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string                                `protobuf:"bytes,33,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	RefundNo             *string                                `protobuf:"bytes,34,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	CheckTime            *string                                `protobuf:"bytes,35,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CustomerNo           *string                                `protobuf:"bytes,36,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName         *string                                `protobuf:"bytes,37,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	NickName             *string                                `protobuf:"bytes,38,opt,name=nick_name,json=nickName,proto3,oneof" json:"nick_name,omitempty"`
	ShopName             *string                                `protobuf:"bytes,39,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	FenxiaoNick          *string                                `protobuf:"bytes,40,opt,name=fenxiao_nick,json=fenxiaoNick,proto3,oneof" json:"fenxiao_nick,omitempty"`
	FenxiaoNickNo        *string                                `protobuf:"bytes,41,opt,name=fenxiao_nick_no,json=fenxiaoNickNo,proto3,oneof" json:"fenxiao_nick_no,omitempty"`
	Reason               *string                                `protobuf:"bytes,42,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	StockinReason        *string                                `protobuf:"bytes,43,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	FlagName             *string                                `protobuf:"bytes,44,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	PlatformId           *int32                                 `protobuf:"varint,45,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	Tid                  *string                                `protobuf:"bytes,46,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	StockinOperatorName  *string                                `protobuf:"bytes,47,opt,name=stockin_operator_name,json=stockinOperatorName,proto3,oneof" json:"stockin_operator_name,omitempty"`
	CheckOperatorName    *string                                `protobuf:"bytes,48,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	RefundRemark         *string                                `protobuf:"bytes,49,opt,name=refund_remark,json=refundRemark,proto3,oneof" json:"refund_remark,omitempty"`
	RefundOperatorName   *string                                `protobuf:"bytes,50,opt,name=refund_operator_name,json=refundOperatorName,proto3,oneof" json:"refund_operator_name,omitempty"`
	StockinNo            *string                                `protobuf:"bytes,51,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	WmsOuterNo           *string                                `protobuf:"bytes,52,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32                                 `protobuf:"varint,53,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult            *string                                `protobuf:"bytes,54,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	WarehouseId          *int32                                 `protobuf:"varint,55,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType         *int32                                 `protobuf:"varint,56,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId           *int32                                 `protobuf:"varint,57,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId             *int32                                 `protobuf:"varint,58,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus             *int32                                 `protobuf:"varint,59,opt,name=fa_status,json=faStatus,proto3,oneof" json:"fa_status,omitempty"`
	LogisticsId          *int32                                 `protobuf:"varint,60,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType        *int32                                 `protobuf:"varint,61,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId           *string                                `protobuf:"bytes,62,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	CheckOperatorId      *string                                `protobuf:"bytes,63,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	GoodsTypeCount       *int32                                 `protobuf:"varint,64,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	AdjustNum            float64                                `protobuf:"fixed64,65,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	NoteCount            *int32                                 `protobuf:"varint,66,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId               *int32                                 `protobuf:"varint,67,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified             *string                                `protobuf:"bytes,68,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	DetailsList          []*WdtTradeRefundStockinDetailsRequest `protobuf:"bytes,69,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	AggConsignStatus     *int32                                 `protobuf:"varint,70,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo                *string                                `protobuf:"bytes,71,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	BusinessType         *int32                                 `protobuf:"varint,72,opt,name=business_type,json=businessType,proto3,oneof" json:"business_type,omitempty"`
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) Reset() {
	*x = WdtTradeRefundStockinPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinPartialUpdateRequest) ProtoMessage() {}

func (x *WdtTradeRefundStockinPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{429}
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetShopRemark() string {
	if x != nil && x.ShopRemark != nil {
		return *x.ShopRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetAssociatedTime() string {
	if x != nil && x.AssociatedTime != nil {
		return *x.AssociatedTime
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetActualRefundAmount() float64 {
	if x != nil && x.ActualRefundAmount != nil {
		return *x.ActualRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetFenxiaoNick() string {
	if x != nil && x.FenxiaoNick != nil {
		return *x.FenxiaoNick
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetFenxiaoNickNo() string {
	if x != nil && x.FenxiaoNickNo != nil {
		return *x.FenxiaoNickNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetStockinOperatorName() string {
	if x != nil && x.StockinOperatorName != nil {
		return *x.StockinOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetRefundRemark() string {
	if x != nil && x.RefundRemark != nil {
		return *x.RefundRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetRefundOperatorName() string {
	if x != nil && x.RefundOperatorName != nil {
		return *x.RefundOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetFaStatus() int32 {
	if x != nil && x.FaStatus != nil {
		return *x.FaStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetOperatorId() string {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetCheckOperatorId() string {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetAdjustNum() float64 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetDetailsList() []*WdtTradeRefundStockinDetailsRequest {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *WdtTradeRefundStockinPartialUpdateRequest) GetBusinessType() int32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

type WdtTradeRefundStockinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId           *int32                                 `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	OrderNo             *string                                `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	WarehouseNo         *string                                `protobuf:"bytes,3,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName       *string                                `protobuf:"bytes,4,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ShopNo              *string                                `protobuf:"bytes,5,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopRemark          *string                                `protobuf:"bytes,6,opt,name=shop_remark,json=shopRemark,proto3,oneof" json:"shop_remark,omitempty"`
	SrcOrderNo          *string                                `protobuf:"bytes,7,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	ProcessStatus       *int32                                 `protobuf:"varint,8,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	Status              *int32                                 `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	StockinTime         *string                                `protobuf:"bytes,10,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime         *string                                `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	AssociatedTime      *string                                `protobuf:"bytes,12,opt,name=associated_time,json=associatedTime,proto3,oneof" json:"associated_time,omitempty"`
	Remark              *string                                `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	TradeNo             *string                                `protobuf:"bytes,14,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	TradeType           *string                                `protobuf:"bytes,16,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	OrderType           *int32                                 `protobuf:"varint,17,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName       *string                                `protobuf:"bytes,18,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsCount          *float64                               `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsAmount         *float64                               `protobuf:"fixed64,20,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	ActualRefundAmount  *float64                               `protobuf:"fixed64,21,opt,name=actual_refund_amount,json=actualRefundAmount,proto3,oneof" json:"actual_refund_amount,omitempty"`
	TotalPrice          *float64                               `protobuf:"fixed64,22,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount            *float64                               `protobuf:"fixed64,23,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount           *float64                               `protobuf:"fixed64,24,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	PostFee             *float64                               `protobuf:"fixed64,25,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee            *float64                               `protobuf:"fixed64,26,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	AdjustPrice         *float64                               `protobuf:"fixed64,27,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightPrice          *float64                               `protobuf:"fixed64,28,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	LogisticsType       *int32                                 `protobuf:"varint,29,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo         *string                                `protobuf:"bytes,30,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName       *string                                `protobuf:"bytes,31,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode       *string                                `protobuf:"bytes,32,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	RefundNo            *string                                `protobuf:"bytes,33,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	CheckTime           *string                                `protobuf:"bytes,34,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CustomerNo          *string                                `protobuf:"bytes,35,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName        *string                                `protobuf:"bytes,36,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	NickName            *string                                `protobuf:"bytes,37,opt,name=nick_name,json=nickName,proto3,oneof" json:"nick_name,omitempty"`
	ShopName            *string                                `protobuf:"bytes,38,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	FenxiaoNick         *string                                `protobuf:"bytes,39,opt,name=fenxiao_nick,json=fenxiaoNick,proto3,oneof" json:"fenxiao_nick,omitempty"`
	FenxiaoNickNo       *string                                `protobuf:"bytes,40,opt,name=fenxiao_nick_no,json=fenxiaoNickNo,proto3,oneof" json:"fenxiao_nick_no,omitempty"`
	Reason              *string                                `protobuf:"bytes,41,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	StockinReason       *string                                `protobuf:"bytes,42,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	FlagName            *string                                `protobuf:"bytes,43,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	PlatformId          *int32                                 `protobuf:"varint,44,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	Tid                 *string                                `protobuf:"bytes,45,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	StockinOperatorName *string                                `protobuf:"bytes,46,opt,name=stockin_operator_name,json=stockinOperatorName,proto3,oneof" json:"stockin_operator_name,omitempty"`
	CheckOperatorName   *string                                `protobuf:"bytes,47,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	RefundRemark        *string                                `protobuf:"bytes,48,opt,name=refund_remark,json=refundRemark,proto3,oneof" json:"refund_remark,omitempty"`
	RefundOperatorName  *string                                `protobuf:"bytes,49,opt,name=refund_operator_name,json=refundOperatorName,proto3,oneof" json:"refund_operator_name,omitempty"`
	StockinNo           *string                                `protobuf:"bytes,50,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	WmsOuterNo          *string                                `protobuf:"bytes,51,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus           *int32                                 `protobuf:"varint,52,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult           *string                                `protobuf:"bytes,53,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	WarehouseId         *int32                                 `protobuf:"varint,54,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType        *int32                                 `protobuf:"varint,55,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId          *int32                                 `protobuf:"varint,56,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId            *int32                                 `protobuf:"varint,57,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus            *int32                                 `protobuf:"varint,58,opt,name=fa_status,json=faStatus,proto3,oneof" json:"fa_status,omitempty"`
	LogisticsId         *int32                                 `protobuf:"varint,59,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType       *int32                                 `protobuf:"varint,60,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId          *string                                `protobuf:"bytes,61,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	CheckOperatorId     *string                                `protobuf:"bytes,62,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	GoodsTypeCount      *int32                                 `protobuf:"varint,63,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	AdjustNum           float64                                `protobuf:"fixed64,64,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	NoteCount           *int32                                 `protobuf:"varint,65,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId              *int32                                 `protobuf:"varint,66,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified            *string                                `protobuf:"bytes,67,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	DetailsList         []*WdtTradeRefundStockinDetailsRequest `protobuf:"bytes,68,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	AggConsignStatus    *int32                                 `protobuf:"varint,69,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo               *string                                `protobuf:"bytes,70,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	BusinessType        *int32                                 `protobuf:"varint,71,opt,name=business_type,json=businessType,proto3,oneof" json:"business_type,omitempty"`
}

func (x *WdtTradeRefundStockinRequest) Reset() {
	*x = WdtTradeRefundStockinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinRequest) ProtoMessage() {}

func (x *WdtTradeRefundStockinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{430}
}

func (x *WdtTradeRefundStockinRequest) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetShopRemark() string {
	if x != nil && x.ShopRemark != nil {
		return *x.ShopRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetAssociatedTime() string {
	if x != nil && x.AssociatedTime != nil {
		return *x.AssociatedTime
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetActualRefundAmount() float64 {
	if x != nil && x.ActualRefundAmount != nil {
		return *x.ActualRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetFenxiaoNick() string {
	if x != nil && x.FenxiaoNick != nil {
		return *x.FenxiaoNick
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetFenxiaoNickNo() string {
	if x != nil && x.FenxiaoNickNo != nil {
		return *x.FenxiaoNickNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetStockinOperatorName() string {
	if x != nil && x.StockinOperatorName != nil {
		return *x.StockinOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetRefundRemark() string {
	if x != nil && x.RefundRemark != nil {
		return *x.RefundRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetRefundOperatorName() string {
	if x != nil && x.RefundOperatorName != nil {
		return *x.RefundOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetFaStatus() int32 {
	if x != nil && x.FaStatus != nil {
		return *x.FaStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetOperatorId() string {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetCheckOperatorId() string {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetAdjustNum() float64 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetDetailsList() []*WdtTradeRefundStockinDetailsRequest {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtTradeRefundStockinRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinRequest) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *WdtTradeRefundStockinRequest) GetBusinessType() int32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

type WdtTradeRefundStockinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId            *int32                                  `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	DetailsList          []*WdtTradeRefundStockinDetailsResponse `protobuf:"bytes,2,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	OrderNo              *string                                 `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	WarehouseNo          *string                                 `protobuf:"bytes,4,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string                                 `protobuf:"bytes,5,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ShopNo               *string                                 `protobuf:"bytes,6,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopRemark           *string                                 `protobuf:"bytes,7,opt,name=shop_remark,json=shopRemark,proto3,oneof" json:"shop_remark,omitempty"`
	SrcOrderNo           *string                                 `protobuf:"bytes,8,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	ProcessStatus        *int32                                  `protobuf:"varint,9,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	Status               *int32                                  `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	StockinTime          *string                                 `protobuf:"bytes,11,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime          *string                                 `protobuf:"bytes,12,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	AssociatedTime       *string                                 `protobuf:"bytes,13,opt,name=associated_time,json=associatedTime,proto3,oneof" json:"associated_time,omitempty"`
	Remark               *string                                 `protobuf:"bytes,14,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	TradeNo              *string                                 `protobuf:"bytes,15,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	TradeType            *string                                 `protobuf:"bytes,17,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	OrderType            *int32                                  `protobuf:"varint,18,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	OrderTypeName        *string                                 `protobuf:"bytes,19,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	GoodsCount           *float64                                `protobuf:"fixed64,20,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsAmount          *float64                                `protobuf:"fixed64,21,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	ActualRefundAmount   *float64                                `protobuf:"fixed64,22,opt,name=actual_refund_amount,json=actualRefundAmount,proto3,oneof" json:"actual_refund_amount,omitempty"`
	TotalPrice           *float64                                `protobuf:"fixed64,23,opt,name=total_price,json=totalPrice,proto3,oneof" json:"total_price,omitempty"`
	Discount             *float64                                `protobuf:"fixed64,24,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	TaxAmount            *float64                                `protobuf:"fixed64,25,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	PostFee              *float64                                `protobuf:"fixed64,26,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee             *float64                                `protobuf:"fixed64,27,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	AdjustPrice          *float64                                `protobuf:"fixed64,28,opt,name=adjust_price,json=adjustPrice,proto3,oneof" json:"adjust_price,omitempty"`
	RightPrice           *float64                                `protobuf:"fixed64,29,opt,name=right_price,json=rightPrice,proto3,oneof" json:"right_price,omitempty"`
	LogisticsType        *int32                                  `protobuf:"varint,30,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo          *string                                 `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName        *string                                 `protobuf:"bytes,32,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string                                 `protobuf:"bytes,33,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	RefundNo             *string                                 `protobuf:"bytes,34,opt,name=refund_no,json=refundNo,proto3,oneof" json:"refund_no,omitempty"`
	CheckTime            *string                                 `protobuf:"bytes,35,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CustomerNo           *string                                 `protobuf:"bytes,36,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	CustomerName         *string                                 `protobuf:"bytes,37,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	NickName             *string                                 `protobuf:"bytes,38,opt,name=nick_name,json=nickName,proto3,oneof" json:"nick_name,omitempty"`
	ShopName             *string                                 `protobuf:"bytes,39,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	FenxiaoNick          *string                                 `protobuf:"bytes,40,opt,name=fenxiao_nick,json=fenxiaoNick,proto3,oneof" json:"fenxiao_nick,omitempty"`
	FenxiaoNickNo        *string                                 `protobuf:"bytes,41,opt,name=fenxiao_nick_no,json=fenxiaoNickNo,proto3,oneof" json:"fenxiao_nick_no,omitempty"`
	Reason               *string                                 `protobuf:"bytes,42,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	StockinReason        *string                                 `protobuf:"bytes,43,opt,name=stockin_reason,json=stockinReason,proto3,oneof" json:"stockin_reason,omitempty"`
	FlagName             *string                                 `protobuf:"bytes,44,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	PlatformId           *int32                                  `protobuf:"varint,45,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	Tid                  *string                                 `protobuf:"bytes,46,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	StockinOperatorName  *string                                 `protobuf:"bytes,47,opt,name=stockin_operator_name,json=stockinOperatorName,proto3,oneof" json:"stockin_operator_name,omitempty"`
	CheckOperatorName    *string                                 `protobuf:"bytes,48,opt,name=check_operator_name,json=checkOperatorName,proto3,oneof" json:"check_operator_name,omitempty"`
	RefundRemark         *string                                 `protobuf:"bytes,49,opt,name=refund_remark,json=refundRemark,proto3,oneof" json:"refund_remark,omitempty"`
	RefundOperatorName   *string                                 `protobuf:"bytes,50,opt,name=refund_operator_name,json=refundOperatorName,proto3,oneof" json:"refund_operator_name,omitempty"`
	StockinNo            *string                                 `protobuf:"bytes,51,opt,name=stockin_no,json=stockinNo,proto3,oneof" json:"stockin_no,omitempty"`
	WmsOuterNo           *string                                 `protobuf:"bytes,52,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus            *int32                                  `protobuf:"varint,53,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	WmsResult            *string                                 `protobuf:"bytes,54,opt,name=wms_result,json=wmsResult,proto3,oneof" json:"wms_result,omitempty"`
	WarehouseId          *int32                                  `protobuf:"varint,55,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType         *int32                                  `protobuf:"varint,56,opt,name=src_order_type,json=srcOrderType,proto3,oneof" json:"src_order_type,omitempty"`
	SrcOrderId           *int32                                  `protobuf:"varint,57,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId             *int32                                  `protobuf:"varint,58,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus             *int32                                  `protobuf:"varint,59,opt,name=fa_status,json=faStatus,proto3,oneof" json:"fa_status,omitempty"`
	LogisticsId          *int32                                  `protobuf:"varint,60,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType        *int32                                  `protobuf:"varint,61,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId           *string                                 `protobuf:"bytes,62,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	CheckOperatorId      *string                                 `protobuf:"bytes,63,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	GoodsTypeCount       *int32                                  `protobuf:"varint,64,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	AdjustNum            float64                                 `protobuf:"fixed64,65,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	NoteCount            *int32                                  `protobuf:"varint,66,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId               *int32                                  `protobuf:"varint,67,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified             *string                                 `protobuf:"bytes,68,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ProcessStatusName    string                                  `protobuf:"bytes,70,opt,name=process_status_name,json=processStatusName,proto3" json:"process_status_name,omitempty"`
	StatusName           string                                  `protobuf:"bytes,71,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	TradeTypeName        string                                  `protobuf:"bytes,72,opt,name=trade_type_name,json=tradeTypeName,proto3" json:"trade_type_name,omitempty"`
	AggConsignStatus     *int32                                  `protobuf:"varint,73,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggNo                *string                                 `protobuf:"bytes,74,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	BusinessType         *int32                                  `protobuf:"varint,75,opt,name=business_type,json=businessType,proto3,oneof" json:"business_type,omitempty"`
	BusinessTypeName     *string                                 `protobuf:"bytes,76,opt,name=business_type_name,json=businessTypeName,proto3,oneof" json:"business_type_name,omitempty"`
	AggConsignStatusName *string                                 `protobuf:"bytes,77,opt,name=agg_consign_status_name,json=aggConsignStatusName,proto3,oneof" json:"agg_consign_status_name,omitempty"`
	PlatformIdName       *string                                 `protobuf:"bytes,78,opt,name=platform_id_name,json=platformIdName,proto3,oneof" json:"platform_id_name,omitempty"`
}

func (x *WdtTradeRefundStockinResponse) Reset() {
	*x = WdtTradeRefundStockinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinResponse) ProtoMessage() {}

func (x *WdtTradeRefundStockinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{431}
}

func (x *WdtTradeRefundStockinResponse) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetDetailsList() []*WdtTradeRefundStockinDetailsResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtTradeRefundStockinResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetShopRemark() string {
	if x != nil && x.ShopRemark != nil {
		return *x.ShopRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetAssociatedTime() string {
	if x != nil && x.AssociatedTime != nil {
		return *x.AssociatedTime
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetActualRefundAmount() float64 {
	if x != nil && x.ActualRefundAmount != nil {
		return *x.ActualRefundAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetAdjustPrice() float64 {
	if x != nil && x.AdjustPrice != nil {
		return *x.AdjustPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetRightPrice() float64 {
	if x != nil && x.RightPrice != nil {
		return *x.RightPrice
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetRefundNo() string {
	if x != nil && x.RefundNo != nil {
		return *x.RefundNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetFenxiaoNick() string {
	if x != nil && x.FenxiaoNick != nil {
		return *x.FenxiaoNick
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetFenxiaoNickNo() string {
	if x != nil && x.FenxiaoNickNo != nil {
		return *x.FenxiaoNickNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetStockinReason() string {
	if x != nil && x.StockinReason != nil {
		return *x.StockinReason
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetStockinOperatorName() string {
	if x != nil && x.StockinOperatorName != nil {
		return *x.StockinOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetCheckOperatorName() string {
	if x != nil && x.CheckOperatorName != nil {
		return *x.CheckOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetRefundRemark() string {
	if x != nil && x.RefundRemark != nil {
		return *x.RefundRemark
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetRefundOperatorName() string {
	if x != nil && x.RefundOperatorName != nil {
		return *x.RefundOperatorName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetStockinNo() string {
	if x != nil && x.StockinNo != nil {
		return *x.StockinNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetWmsResult() string {
	if x != nil && x.WmsResult != nil {
		return *x.WmsResult
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetSrcOrderType() int32 {
	if x != nil && x.SrcOrderType != nil {
		return *x.SrcOrderType
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetFaStatus() int32 {
	if x != nil && x.FaStatus != nil {
		return *x.FaStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetOperatorId() string {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetCheckOperatorId() string {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetAdjustNum() float64 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetProcessStatusName() string {
	if x != nil {
		return x.ProcessStatusName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetTradeTypeName() string {
	if x != nil {
		return x.TradeTypeName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetBusinessType() int32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

func (x *WdtTradeRefundStockinResponse) GetBusinessTypeName() string {
	if x != nil && x.BusinessTypeName != nil {
		return *x.BusinessTypeName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetAggConsignStatusName() string {
	if x != nil && x.AggConsignStatusName != nil {
		return *x.AggConsignStatusName
	}
	return ""
}

func (x *WdtTradeRefundStockinResponse) GetPlatformIdName() string {
	if x != nil && x.PlatformIdName != nil {
		return *x.PlatformIdName
	}
	return ""
}

type WdtTradeRefundStockinRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinNo string `protobuf:"bytes,1,opt,name=stockin_no,json=stockinNo,proto3" json:"stockin_no,omitempty"`
}

func (x *WdtTradeRefundStockinRetrieveRequest) Reset() {
	*x = WdtTradeRefundStockinRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRefundStockinRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRefundStockinRetrieveRequest) ProtoMessage() {}

func (x *WdtTradeRefundStockinRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRefundStockinRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRefundStockinRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{432}
}

func (x *WdtTradeRefundStockinRetrieveRequest) GetStockinNo() string {
	if x != nil {
		return x.StockinNo
	}
	return ""
}

type WdtTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                   *string                      `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggConsignStatusName  *string                      `protobuf:"bytes,2,opt,name=agg_consign_status_name,json=aggConsignStatusName,proto3,oneof" json:"agg_consign_status_name,omitempty"`
	AggPayStatusName      *string                      `protobuf:"bytes,3,opt,name=agg_pay_status_name,json=aggPayStatusName,proto3,oneof" json:"agg_pay_status_name,omitempty"`
	GoodsList             []*WdtTradeGoodslistResponse `protobuf:"bytes,4,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	Reserve               *string                      `protobuf:"bytes,5,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	Oaid                  *string                      `protobuf:"bytes,6,opt,name=oaid,proto3,oneof" json:"oaid,omitempty"`
	Valid                 *int32                       `protobuf:"varint,7,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
	ColorFlag             *int32                       `protobuf:"varint,8,opt,name=color_flag,json=colorFlag,proto3,oneof" json:"color_flag,omitempty"`
	ConsignTime           *string                      `protobuf:"bytes,9,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	TradeTime             *string                      `protobuf:"bytes,10,opt,name=trade_time,json=tradeTime,proto3,oneof" json:"trade_time,omitempty"`
	PayTime               *string                      `protobuf:"bytes,11,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	Modified              *string                      `protobuf:"bytes,12,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created               *string                      `protobuf:"bytes,13,opt,name=created,proto3,oneof" json:"created,omitempty"`
	VersionId             *int32                       `protobuf:"varint,14,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	TradeId               *int32                       `protobuf:"varint,15,opt,name=trade_id,json=tradeId,proto3,oneof" json:"trade_id,omitempty"`
	TradeNo               *string                      `protobuf:"bytes,16,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	TradeFrom             *int32                       `protobuf:"varint,17,opt,name=trade_from,json=tradeFrom,proto3,oneof" json:"trade_from,omitempty"`
	SrcTids               *string                      `protobuf:"bytes,18,opt,name=src_tids,json=srcTids,proto3,oneof" json:"src_tids,omitempty"`
	IsSealed              *int32                       `protobuf:"varint,19,opt,name=is_sealed,json=isSealed,proto3,oneof" json:"is_sealed,omitempty"`
	SplitFromTradeId      *string                      `protobuf:"bytes,20,opt,name=split_from_trade_id,json=splitFromTradeId,proto3,oneof" json:"split_from_trade_id,omitempty"`
	SplitPackageNum       *int32                       `protobuf:"varint,21,opt,name=split_package_num,json=splitPackageNum,proto3,oneof" json:"split_package_num,omitempty"`
	Tags                  *string                      `protobuf:"bytes,22,opt,name=tags,proto3,oneof" json:"tags,omitempty"`
	TradeStatus           *int32                       `protobuf:"varint,23,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	ConsignStatus         *int32                       `protobuf:"varint,24,opt,name=consign_status,json=consignStatus,proto3,oneof" json:"consign_status,omitempty"`
	TradeType             *int32                       `protobuf:"varint,25,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	RefundStatus          *int32                       `protobuf:"varint,26,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsTypeCount        *int32                       `protobuf:"varint,27,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsCount            *float64                     `protobuf:"fixed64,28,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	SingleSpecNo          *string                      `protobuf:"bytes,29,opt,name=single_spec_no,json=singleSpecNo,proto3,oneof" json:"single_spec_no,omitempty"`
	RawGoodsCount         *float64                     `protobuf:"fixed64,30,opt,name=raw_goods_count,json=rawGoodsCount,proto3,oneof" json:"raw_goods_count,omitempty"`
	RawGoodsTypeCount     *int32                       `protobuf:"varint,31,opt,name=raw_goods_type_count,json=rawGoodsTypeCount,proto3,oneof" json:"raw_goods_type_count,omitempty"`
	GoodsAmount           *float64                     `protobuf:"fixed64,32,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostAmount            *float64                     `protobuf:"fixed64,33,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount           *float64                     `protobuf:"fixed64,34,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	Discount              *float64                     `protobuf:"fixed64,35,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	Receivable            *float64                     `protobuf:"fixed64,36,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	DapAmount             *float64                     `protobuf:"fixed64,37,opt,name=dap_amount,json=dapAmount,proto3,oneof" json:"dap_amount,omitempty"`
	CodAmount             *float64                     `protobuf:"fixed64,38,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	ExtCodFee             *float64                     `protobuf:"fixed64,39,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	GoodsCost             *float64                     `protobuf:"fixed64,40,opt,name=goods_cost,json=goodsCost,proto3,oneof" json:"goods_cost,omitempty"`
	PostCost              *float64                     `protobuf:"fixed64,41,opt,name=post_cost,json=postCost,proto3,oneof" json:"post_cost,omitempty"`
	Paid                  *float64                     `protobuf:"fixed64,42,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	Profit                *float64                     `protobuf:"fixed64,43,opt,name=profit,proto3,oneof" json:"profit,omitempty"`
	Tax                   *float64                     `protobuf:"fixed64,44,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TaxRate               *float64                     `protobuf:"fixed64,45,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	Commission            *float64                     `protobuf:"fixed64,46,opt,name=commission,proto3,oneof" json:"commission,omitempty"`
	Currency              *string                      `protobuf:"bytes,47,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	InvoiceType           *int32                       `protobuf:"varint,48,opt,name=invoice_type,json=invoiceType,proto3,oneof" json:"invoice_type,omitempty"`
	InvoiceTitle          *string                      `protobuf:"bytes,49,opt,name=invoice_title,json=invoiceTitle,proto3,oneof" json:"invoice_title,omitempty"`
	InvoiceContent        *string                      `protobuf:"bytes,50,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	InvoiceId             *int32                       `protobuf:"varint,51,opt,name=invoice_id,json=invoiceId,proto3,oneof" json:"invoice_id,omitempty"`
	CustomerId            *string                      `protobuf:"bytes,52,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	CustomerType          *int32                       `protobuf:"varint,53,opt,name=customer_type,json=customerType,proto3,oneof" json:"customer_type,omitempty"`
	CustomerName          *string                      `protobuf:"bytes,54,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	CustomerNo            *string                      `protobuf:"bytes,55,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	PayAccount            *string                      `protobuf:"bytes,56,opt,name=pay_account,json=payAccount,proto3,oneof" json:"pay_account,omitempty"`
	BuyerNick             *string                      `protobuf:"bytes,57,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	ReceiverName          *string                      `protobuf:"bytes,58,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince      *int32                       `protobuf:"varint,59,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity          *int32                       `protobuf:"varint,60,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict      *int32                       `protobuf:"varint,61,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress       *string                      `protobuf:"bytes,62,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile        *string                      `protobuf:"bytes,63,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverTelno         *string                      `protobuf:"bytes,64,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReceiverZip           *string                      `protobuf:"bytes,65,opt,name=receiver_zip,json=receiverZip,proto3,oneof" json:"receiver_zip,omitempty"`
	ReceiverArea          *string                      `protobuf:"bytes,66,opt,name=receiver_area,json=receiverArea,proto3,oneof" json:"receiver_area,omitempty"`
	ReceiverRing          *string                      `protobuf:"bytes,67,opt,name=receiver_ring,json=receiverRing,proto3,oneof" json:"receiver_ring,omitempty"`
	ReceiverDtb           *string                      `protobuf:"bytes,68,opt,name=receiver_dtb,json=receiverDtb,proto3,oneof" json:"receiver_dtb,omitempty"`
	ReceiverCountry       *int32                       `protobuf:"varint,69,opt,name=receiver_country,json=receiverCountry,proto3,oneof" json:"receiver_country,omitempty"`
	BuyerMessage          *string                      `protobuf:"bytes,70,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	CsRemark              *string                      `protobuf:"bytes,71,opt,name=cs_remark,json=csRemark,proto3,oneof" json:"cs_remark,omitempty"`
	RemarkFlag            *int32                       `protobuf:"varint,72,opt,name=remark_flag,json=remarkFlag,proto3,oneof" json:"remark_flag,omitempty"`
	PrintRemark           *string                      `protobuf:"bytes,73,opt,name=print_remark,json=printRemark,proto3,oneof" json:"print_remark,omitempty"`
	ToDeliverTime         *string                      `protobuf:"bytes,74,opt,name=to_deliver_time,json=toDeliverTime,proto3,oneof" json:"to_deliver_time,omitempty"`
	BadReason             *int32                       `protobuf:"varint,75,opt,name=bad_reason,json=badReason,proto3,oneof" json:"bad_reason,omitempty"`
	LogisticsId           *int32                       `protobuf:"varint,76,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	LogisticsName         *string                      `protobuf:"bytes,77,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode         *string                      `protobuf:"bytes,78,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsType         *int32                       `protobuf:"varint,79,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo           *string                      `protobuf:"bytes,80,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PreChargeTime         *string                      `protobuf:"bytes,81,opt,name=pre_charge_time,json=preChargeTime,proto3,oneof" json:"pre_charge_time,omitempty"`
	IsPrevNotify          *int32                       `protobuf:"varint,82,opt,name=is_prev_notify,json=isPrevNotify,proto3,oneof" json:"is_prev_notify,omitempty"`
	Volume                *float64                     `protobuf:"fixed64,83,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	Weight                *float64                     `protobuf:"fixed64,84,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	LogisticsTemplateId   *string                      `protobuf:"bytes,85,opt,name=logistics_template_id,json=logisticsTemplateId,proto3,oneof" json:"logistics_template_id,omitempty"`
	SendbillTemplateId    *string                      `protobuf:"bytes,86,opt,name=sendbill_template_id,json=sendbillTemplateId,proto3,oneof" json:"sendbill_template_id,omitempty"`
	PackageId             *string                      `protobuf:"bytes,87,opt,name=package_id,json=packageId,proto3,oneof" json:"package_id,omitempty"`
	LargeType             *int32                       `protobuf:"varint,88,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	StockoutNo            *string                      `protobuf:"bytes,89,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	SalesmanId            *int32                       `protobuf:"varint,90,opt,name=salesman_id,json=salesmanId,proto3,oneof" json:"salesman_id,omitempty"`
	CheckerId             *int32                       `protobuf:"varint,91,opt,name=checker_id,json=checkerId,proto3,oneof" json:"checker_id,omitempty"`
	Fullname              *string                      `protobuf:"bytes,92,opt,name=fullname,proto3,oneof" json:"fullname,omitempty"`
	CheckerName           *string                      `protobuf:"bytes,93,opt,name=checker_name,json=checkerName,proto3,oneof" json:"checker_name,omitempty"`
	FcheckerId            *int32                       `protobuf:"varint,94,opt,name=fchecker_id,json=fcheckerId,proto3,oneof" json:"fchecker_id,omitempty"`
	FcheckerName          *string                      `protobuf:"bytes,95,opt,name=fchecker_name,json=fcheckerName,proto3,oneof" json:"fchecker_name,omitempty"`
	CheckouterId          *int32                       `protobuf:"varint,96,opt,name=checkouter_id,json=checkouterId,proto3,oneof" json:"checkouter_id,omitempty"`
	CheckouterName        *string                      `protobuf:"bytes,97,opt,name=checkouter_name,json=checkouterName,proto3,oneof" json:"checkouter_name,omitempty"`
	PlatformId            *int32                       `protobuf:"varint,98,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopPlatformId        *int32                       `protobuf:"varint,99,opt,name=shop_platform_id,json=shopPlatformId,proto3,oneof" json:"shop_platform_id,omitempty"`
	DeliveryTerm          *int32                       `protobuf:"varint,100,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	FreezeReason          *int32                       `protobuf:"varint,101,opt,name=freeze_reason,json=freezeReason,proto3,oneof" json:"freeze_reason,omitempty"`
	FenxiaoType           *int32                       `protobuf:"varint,102,opt,name=fenxiao_type,json=fenxiaoType,proto3,oneof" json:"fenxiao_type,omitempty"`
	FenxiaoNick           *string                      `protobuf:"bytes,103,opt,name=fenxiao_nick,json=fenxiaoNick,proto3,oneof" json:"fenxiao_nick,omitempty"`
	CheckStep             *int32                       `protobuf:"varint,104,opt,name=check_step,json=checkStep,proto3,oneof" json:"check_step,omitempty"`
	UnmergeMask           *int32                       `protobuf:"varint,105,opt,name=unmerge_mask,json=unmergeMask,proto3,oneof" json:"unmerge_mask,omitempty"`
	DelayToTime           *string                      `protobuf:"bytes,106,opt,name=delay_to_time,json=delayToTime,proto3,oneof" json:"delay_to_time,omitempty"`
	NoteCount             *int32                       `protobuf:"varint,107,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	BuyerMessageCount     *int32                       `protobuf:"varint,108,opt,name=buyer_message_count,json=buyerMessageCount,proto3,oneof" json:"buyer_message_count,omitempty"`
	CsRemarkCount         *int32                       `protobuf:"varint,109,opt,name=cs_remark_count,json=csRemarkCount,proto3,oneof" json:"cs_remark_count,omitempty"`
	CsRemarkChangeCount   *int32                       `protobuf:"varint,110,opt,name=cs_remark_change_count,json=csRemarkChangeCount,proto3,oneof" json:"cs_remark_change_count,omitempty"`
	DiscountChange        *float64                     `protobuf:"fixed64,111,opt,name=discount_change,json=discountChange,proto3,oneof" json:"discount_change,omitempty"`
	TradePrepay           *float64                     `protobuf:"fixed64,112,opt,name=trade_prepay,json=tradePrepay,proto3,oneof" json:"trade_prepay,omitempty"`
	PiAmount              *float64                     `protobuf:"fixed64,113,opt,name=pi_amount,json=piAmount,proto3,oneof" json:"pi_amount,omitempty"`
	OtherCost             *float64                     `protobuf:"fixed64,114,opt,name=other_cost,json=otherCost,proto3,oneof" json:"other_cost,omitempty"`
	SalesScore            *string                      `protobuf:"bytes,115,opt,name=sales_score,json=salesScore,proto3,oneof" json:"sales_score,omitempty"`
	GiftMask              *int32                       `protobuf:"varint,116,opt,name=gift_mask,json=giftMask,proto3,oneof" json:"gift_mask,omitempty"`
	RevertReason          *int32                       `protobuf:"varint,117,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	CancelReason          *int32                       `protobuf:"varint,118,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	IsUnpaymentSms        *int32                       `protobuf:"varint,119,opt,name=is_unpayment_sms,json=isUnpaymentSms,proto3,oneof" json:"is_unpayment_sms,omitempty"`
	TradeMask             *string                      `protobuf:"bytes,120,opt,name=trade_mask,json=tradeMask,proto3,oneof" json:"trade_mask,omitempty"`
	FlagId                *int32                       `protobuf:"varint,121,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	FlagName              *string                      `protobuf:"bytes,122,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	IdCardType            *int32                       `protobuf:"varint,123,opt,name=id_card_type,json=idCardType,proto3,oneof" json:"id_card_type,omitempty"`
	IdCard                *string                      `protobuf:"bytes,124,opt,name=id_card,json=idCard,proto3,oneof" json:"id_card,omitempty"`
	FreezeReasonInfo      *string                      `protobuf:"bytes,125,opt,name=freeze_reason_info,json=freezeReasonInfo,proto3,oneof" json:"freeze_reason_info,omitempty"`
	FenxiaoTid            *string                      `protobuf:"bytes,126,opt,name=fenxiao_tid,json=fenxiaoTid,proto3,oneof" json:"fenxiao_tid,omitempty"`
	ShopId                *int32                       `protobuf:"varint,127,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	ShopNo                *string                      `protobuf:"bytes,128,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName              *string                      `protobuf:"bytes,129,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ShopRemark            *string                      `protobuf:"bytes,130,opt,name=shop_remark,json=shopRemark,proto3,oneof" json:"shop_remark,omitempty"`
	WarehouseId           *int32                       `protobuf:"varint,131,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	WarehouseType         *int32                       `protobuf:"varint,132,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	WarehouseNo           *string                      `protobuf:"bytes,133,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	AggDiscount           *int32                       `protobuf:"varint,134,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
	AdjustDiscount        *int32                       `protobuf:"varint,135,opt,name=adjust_discount,json=adjustDiscount,proto3,oneof" json:"adjust_discount,omitempty"`
	CollectionTime        *string                      `protobuf:"bytes,136,opt,name=collection_time,json=collectionTime,proto3,oneof" json:"collection_time,omitempty"`
	CollectionAccount     *string                      `protobuf:"bytes,137,opt,name=collection_account,json=collectionAccount,proto3,oneof" json:"collection_account,omitempty"`
	CollectionNo          *string                      `protobuf:"bytes,138,opt,name=collection_no,json=collectionNo,proto3,oneof" json:"collection_no,omitempty"`
	CollectionType        *int32                       `protobuf:"varint,139,opt,name=collection_type,json=collectionType,proto3,oneof" json:"collection_type,omitempty"`
	CollectionAmount      *float64                     `protobuf:"fixed64,140,opt,name=collection_amount,json=collectionAmount,proto3,oneof" json:"collection_amount,omitempty"`
	AggConsignStatus      *int32                       `protobuf:"varint,141,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	ConsignAggNo          *string                      `protobuf:"bytes,142,opt,name=consign_agg_no,json=consignAggNo,proto3,oneof" json:"consign_agg_no,omitempty"`
	AggPayStatus          *int32                       `protobuf:"varint,143,opt,name=agg_pay_status,json=aggPayStatus,proto3,oneof" json:"agg_pay_status,omitempty"`
	PayAggNo              *string                      `protobuf:"bytes,144,opt,name=pay_agg_no,json=payAggNo,proto3,oneof" json:"pay_agg_no,omitempty"`
	TradeStatusName       string                       `protobuf:"bytes,145,opt,name=trade_status_name,json=tradeStatusName,proto3" json:"trade_status_name,omitempty"`
	RefundStatusName      string                       `protobuf:"bytes,146,opt,name=refund_status_name,json=refundStatusName,proto3" json:"refund_status_name,omitempty"`
	ChannelNo             *int32                       `protobuf:"varint,149,opt,name=channel_no,json=channelNo,proto3,oneof" json:"channel_no,omitempty"`
	ChannelName           *string                      `protobuf:"bytes,150,opt,name=channel_name,json=channelName,proto3,oneof" json:"channel_name,omitempty"`
	AlipayMatchStatusName *string                      `protobuf:"bytes,151,opt,name=alipay_match_status_name,json=alipayMatchStatusName,proto3,oneof" json:"alipay_match_status_name,omitempty"`
	BusinessTypeName      *string                      `protobuf:"bytes,152,opt,name=business_type_name,json=businessTypeName,proto3,oneof" json:"business_type_name,omitempty"`
	AlipayMatchStatus     *int32                       `protobuf:"varint,153,opt,name=alipay_match_status,json=alipayMatchStatus,proto3,oneof" json:"alipay_match_status,omitempty"`
	BusinessType          *int32                       `protobuf:"varint,154,opt,name=business_type,json=businessType,proto3,oneof" json:"business_type,omitempty"`
}

func (x *WdtTradeResponse) Reset() {
	*x = WdtTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeResponse) ProtoMessage() {}

func (x *WdtTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeResponse.ProtoReflect.Descriptor instead.
func (*WdtTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{433}
}

func (x *WdtTradeResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *WdtTradeResponse) GetAggConsignStatusName() string {
	if x != nil && x.AggConsignStatusName != nil {
		return *x.AggConsignStatusName
	}
	return ""
}

func (x *WdtTradeResponse) GetAggPayStatusName() string {
	if x != nil && x.AggPayStatusName != nil {
		return *x.AggPayStatusName
	}
	return ""
}

func (x *WdtTradeResponse) GetGoodsList() []*WdtTradeGoodslistResponse {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *WdtTradeResponse) GetReserve() string {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return ""
}

func (x *WdtTradeResponse) GetOaid() string {
	if x != nil && x.Oaid != nil {
		return *x.Oaid
	}
	return ""
}

func (x *WdtTradeResponse) GetValid() int32 {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return 0
}

func (x *WdtTradeResponse) GetColorFlag() int32 {
	if x != nil && x.ColorFlag != nil {
		return *x.ColorFlag
	}
	return 0
}

func (x *WdtTradeResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *WdtTradeResponse) GetTradeTime() string {
	if x != nil && x.TradeTime != nil {
		return *x.TradeTime
	}
	return ""
}

func (x *WdtTradeResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *WdtTradeResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTradeResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTradeResponse) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *WdtTradeResponse) GetTradeId() int32 {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return 0
}

func (x *WdtTradeResponse) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *WdtTradeResponse) GetTradeFrom() int32 {
	if x != nil && x.TradeFrom != nil {
		return *x.TradeFrom
	}
	return 0
}

func (x *WdtTradeResponse) GetSrcTids() string {
	if x != nil && x.SrcTids != nil {
		return *x.SrcTids
	}
	return ""
}

func (x *WdtTradeResponse) GetIsSealed() int32 {
	if x != nil && x.IsSealed != nil {
		return *x.IsSealed
	}
	return 0
}

func (x *WdtTradeResponse) GetSplitFromTradeId() string {
	if x != nil && x.SplitFromTradeId != nil {
		return *x.SplitFromTradeId
	}
	return ""
}

func (x *WdtTradeResponse) GetSplitPackageNum() int32 {
	if x != nil && x.SplitPackageNum != nil {
		return *x.SplitPackageNum
	}
	return 0
}

func (x *WdtTradeResponse) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *WdtTradeResponse) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *WdtTradeResponse) GetConsignStatus() int32 {
	if x != nil && x.ConsignStatus != nil {
		return *x.ConsignStatus
	}
	return 0
}

func (x *WdtTradeResponse) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *WdtTradeResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *WdtTradeResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtTradeResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTradeResponse) GetSingleSpecNo() string {
	if x != nil && x.SingleSpecNo != nil {
		return *x.SingleSpecNo
	}
	return ""
}

func (x *WdtTradeResponse) GetRawGoodsCount() float64 {
	if x != nil && x.RawGoodsCount != nil {
		return *x.RawGoodsCount
	}
	return 0
}

func (x *WdtTradeResponse) GetRawGoodsTypeCount() int32 {
	if x != nil && x.RawGoodsTypeCount != nil {
		return *x.RawGoodsTypeCount
	}
	return 0
}

func (x *WdtTradeResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *WdtTradeResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *WdtTradeResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *WdtTradeResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *WdtTradeResponse) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *WdtTradeResponse) GetDapAmount() float64 {
	if x != nil && x.DapAmount != nil {
		return *x.DapAmount
	}
	return 0
}

func (x *WdtTradeResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *WdtTradeResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *WdtTradeResponse) GetGoodsCost() float64 {
	if x != nil && x.GoodsCost != nil {
		return *x.GoodsCost
	}
	return 0
}

func (x *WdtTradeResponse) GetPostCost() float64 {
	if x != nil && x.PostCost != nil {
		return *x.PostCost
	}
	return 0
}

func (x *WdtTradeResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *WdtTradeResponse) GetProfit() float64 {
	if x != nil && x.Profit != nil {
		return *x.Profit
	}
	return 0
}

func (x *WdtTradeResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *WdtTradeResponse) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *WdtTradeResponse) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *WdtTradeResponse) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *WdtTradeResponse) GetInvoiceType() int32 {
	if x != nil && x.InvoiceType != nil {
		return *x.InvoiceType
	}
	return 0
}

func (x *WdtTradeResponse) GetInvoiceTitle() string {
	if x != nil && x.InvoiceTitle != nil {
		return *x.InvoiceTitle
	}
	return ""
}

func (x *WdtTradeResponse) GetInvoiceContent() string {
	if x != nil && x.InvoiceContent != nil {
		return *x.InvoiceContent
	}
	return ""
}

func (x *WdtTradeResponse) GetInvoiceId() int32 {
	if x != nil && x.InvoiceId != nil {
		return *x.InvoiceId
	}
	return 0
}

func (x *WdtTradeResponse) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *WdtTradeResponse) GetCustomerType() int32 {
	if x != nil && x.CustomerType != nil {
		return *x.CustomerType
	}
	return 0
}

func (x *WdtTradeResponse) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *WdtTradeResponse) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *WdtTradeResponse) GetPayAccount() string {
	if x != nil && x.PayAccount != nil {
		return *x.PayAccount
	}
	return ""
}

func (x *WdtTradeResponse) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverProvince() int32 {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return 0
}

func (x *WdtTradeResponse) GetReceiverCity() int32 {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return 0
}

func (x *WdtTradeResponse) GetReceiverDistrict() int32 {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return 0
}

func (x *WdtTradeResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverZip() string {
	if x != nil && x.ReceiverZip != nil {
		return *x.ReceiverZip
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverArea() string {
	if x != nil && x.ReceiverArea != nil {
		return *x.ReceiverArea
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverRing() string {
	if x != nil && x.ReceiverRing != nil {
		return *x.ReceiverRing
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverDtb() string {
	if x != nil && x.ReceiverDtb != nil {
		return *x.ReceiverDtb
	}
	return ""
}

func (x *WdtTradeResponse) GetReceiverCountry() int32 {
	if x != nil && x.ReceiverCountry != nil {
		return *x.ReceiverCountry
	}
	return 0
}

func (x *WdtTradeResponse) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *WdtTradeResponse) GetCsRemark() string {
	if x != nil && x.CsRemark != nil {
		return *x.CsRemark
	}
	return ""
}

func (x *WdtTradeResponse) GetRemarkFlag() int32 {
	if x != nil && x.RemarkFlag != nil {
		return *x.RemarkFlag
	}
	return 0
}

func (x *WdtTradeResponse) GetPrintRemark() string {
	if x != nil && x.PrintRemark != nil {
		return *x.PrintRemark
	}
	return ""
}

func (x *WdtTradeResponse) GetToDeliverTime() string {
	if x != nil && x.ToDeliverTime != nil {
		return *x.ToDeliverTime
	}
	return ""
}

func (x *WdtTradeResponse) GetBadReason() int32 {
	if x != nil && x.BadReason != nil {
		return *x.BadReason
	}
	return 0
}

func (x *WdtTradeResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtTradeResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTradeResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtTradeResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtTradeResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTradeResponse) GetPreChargeTime() string {
	if x != nil && x.PreChargeTime != nil {
		return *x.PreChargeTime
	}
	return ""
}

func (x *WdtTradeResponse) GetIsPrevNotify() int32 {
	if x != nil && x.IsPrevNotify != nil {
		return *x.IsPrevNotify
	}
	return 0
}

func (x *WdtTradeResponse) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *WdtTradeResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WdtTradeResponse) GetLogisticsTemplateId() string {
	if x != nil && x.LogisticsTemplateId != nil {
		return *x.LogisticsTemplateId
	}
	return ""
}

func (x *WdtTradeResponse) GetSendbillTemplateId() string {
	if x != nil && x.SendbillTemplateId != nil {
		return *x.SendbillTemplateId
	}
	return ""
}

func (x *WdtTradeResponse) GetPackageId() string {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return ""
}

func (x *WdtTradeResponse) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *WdtTradeResponse) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *WdtTradeResponse) GetSalesmanId() int32 {
	if x != nil && x.SalesmanId != nil {
		return *x.SalesmanId
	}
	return 0
}

func (x *WdtTradeResponse) GetCheckerId() int32 {
	if x != nil && x.CheckerId != nil {
		return *x.CheckerId
	}
	return 0
}

func (x *WdtTradeResponse) GetFullname() string {
	if x != nil && x.Fullname != nil {
		return *x.Fullname
	}
	return ""
}

func (x *WdtTradeResponse) GetCheckerName() string {
	if x != nil && x.CheckerName != nil {
		return *x.CheckerName
	}
	return ""
}

func (x *WdtTradeResponse) GetFcheckerId() int32 {
	if x != nil && x.FcheckerId != nil {
		return *x.FcheckerId
	}
	return 0
}

func (x *WdtTradeResponse) GetFcheckerName() string {
	if x != nil && x.FcheckerName != nil {
		return *x.FcheckerName
	}
	return ""
}

func (x *WdtTradeResponse) GetCheckouterId() int32 {
	if x != nil && x.CheckouterId != nil {
		return *x.CheckouterId
	}
	return 0
}

func (x *WdtTradeResponse) GetCheckouterName() string {
	if x != nil && x.CheckouterName != nil {
		return *x.CheckouterName
	}
	return ""
}

func (x *WdtTradeResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *WdtTradeResponse) GetShopPlatformId() int32 {
	if x != nil && x.ShopPlatformId != nil {
		return *x.ShopPlatformId
	}
	return 0
}

func (x *WdtTradeResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *WdtTradeResponse) GetFreezeReason() int32 {
	if x != nil && x.FreezeReason != nil {
		return *x.FreezeReason
	}
	return 0
}

func (x *WdtTradeResponse) GetFenxiaoType() int32 {
	if x != nil && x.FenxiaoType != nil {
		return *x.FenxiaoType
	}
	return 0
}

func (x *WdtTradeResponse) GetFenxiaoNick() string {
	if x != nil && x.FenxiaoNick != nil {
		return *x.FenxiaoNick
	}
	return ""
}

func (x *WdtTradeResponse) GetCheckStep() int32 {
	if x != nil && x.CheckStep != nil {
		return *x.CheckStep
	}
	return 0
}

func (x *WdtTradeResponse) GetUnmergeMask() int32 {
	if x != nil && x.UnmergeMask != nil {
		return *x.UnmergeMask
	}
	return 0
}

func (x *WdtTradeResponse) GetDelayToTime() string {
	if x != nil && x.DelayToTime != nil {
		return *x.DelayToTime
	}
	return ""
}

func (x *WdtTradeResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtTradeResponse) GetBuyerMessageCount() int32 {
	if x != nil && x.BuyerMessageCount != nil {
		return *x.BuyerMessageCount
	}
	return 0
}

func (x *WdtTradeResponse) GetCsRemarkCount() int32 {
	if x != nil && x.CsRemarkCount != nil {
		return *x.CsRemarkCount
	}
	return 0
}

func (x *WdtTradeResponse) GetCsRemarkChangeCount() int32 {
	if x != nil && x.CsRemarkChangeCount != nil {
		return *x.CsRemarkChangeCount
	}
	return 0
}

func (x *WdtTradeResponse) GetDiscountChange() float64 {
	if x != nil && x.DiscountChange != nil {
		return *x.DiscountChange
	}
	return 0
}

func (x *WdtTradeResponse) GetTradePrepay() float64 {
	if x != nil && x.TradePrepay != nil {
		return *x.TradePrepay
	}
	return 0
}

func (x *WdtTradeResponse) GetPiAmount() float64 {
	if x != nil && x.PiAmount != nil {
		return *x.PiAmount
	}
	return 0
}

func (x *WdtTradeResponse) GetOtherCost() float64 {
	if x != nil && x.OtherCost != nil {
		return *x.OtherCost
	}
	return 0
}

func (x *WdtTradeResponse) GetSalesScore() string {
	if x != nil && x.SalesScore != nil {
		return *x.SalesScore
	}
	return ""
}

func (x *WdtTradeResponse) GetGiftMask() int32 {
	if x != nil && x.GiftMask != nil {
		return *x.GiftMask
	}
	return 0
}

func (x *WdtTradeResponse) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *WdtTradeResponse) GetCancelReason() int32 {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return 0
}

func (x *WdtTradeResponse) GetIsUnpaymentSms() int32 {
	if x != nil && x.IsUnpaymentSms != nil {
		return *x.IsUnpaymentSms
	}
	return 0
}

func (x *WdtTradeResponse) GetTradeMask() string {
	if x != nil && x.TradeMask != nil {
		return *x.TradeMask
	}
	return ""
}

func (x *WdtTradeResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTradeResponse) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *WdtTradeResponse) GetIdCardType() int32 {
	if x != nil && x.IdCardType != nil {
		return *x.IdCardType
	}
	return 0
}

func (x *WdtTradeResponse) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

func (x *WdtTradeResponse) GetFreezeReasonInfo() string {
	if x != nil && x.FreezeReasonInfo != nil {
		return *x.FreezeReasonInfo
	}
	return ""
}

func (x *WdtTradeResponse) GetFenxiaoTid() string {
	if x != nil && x.FenxiaoTid != nil {
		return *x.FenxiaoTid
	}
	return ""
}

func (x *WdtTradeResponse) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *WdtTradeResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *WdtTradeResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *WdtTradeResponse) GetShopRemark() string {
	if x != nil && x.ShopRemark != nil {
		return *x.ShopRemark
	}
	return ""
}

func (x *WdtTradeResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *WdtTradeResponse) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *WdtTradeResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *WdtTradeResponse) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

func (x *WdtTradeResponse) GetAdjustDiscount() int32 {
	if x != nil && x.AdjustDiscount != nil {
		return *x.AdjustDiscount
	}
	return 0
}

func (x *WdtTradeResponse) GetCollectionTime() string {
	if x != nil && x.CollectionTime != nil {
		return *x.CollectionTime
	}
	return ""
}

func (x *WdtTradeResponse) GetCollectionAccount() string {
	if x != nil && x.CollectionAccount != nil {
		return *x.CollectionAccount
	}
	return ""
}

func (x *WdtTradeResponse) GetCollectionNo() string {
	if x != nil && x.CollectionNo != nil {
		return *x.CollectionNo
	}
	return ""
}

func (x *WdtTradeResponse) GetCollectionType() int32 {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return 0
}

func (x *WdtTradeResponse) GetCollectionAmount() float64 {
	if x != nil && x.CollectionAmount != nil {
		return *x.CollectionAmount
	}
	return 0
}

func (x *WdtTradeResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTradeResponse) GetConsignAggNo() string {
	if x != nil && x.ConsignAggNo != nil {
		return *x.ConsignAggNo
	}
	return ""
}

func (x *WdtTradeResponse) GetAggPayStatus() int32 {
	if x != nil && x.AggPayStatus != nil {
		return *x.AggPayStatus
	}
	return 0
}

func (x *WdtTradeResponse) GetPayAggNo() string {
	if x != nil && x.PayAggNo != nil {
		return *x.PayAggNo
	}
	return ""
}

func (x *WdtTradeResponse) GetTradeStatusName() string {
	if x != nil {
		return x.TradeStatusName
	}
	return ""
}

func (x *WdtTradeResponse) GetRefundStatusName() string {
	if x != nil {
		return x.RefundStatusName
	}
	return ""
}

func (x *WdtTradeResponse) GetChannelNo() int32 {
	if x != nil && x.ChannelNo != nil {
		return *x.ChannelNo
	}
	return 0
}

func (x *WdtTradeResponse) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *WdtTradeResponse) GetAlipayMatchStatusName() string {
	if x != nil && x.AlipayMatchStatusName != nil {
		return *x.AlipayMatchStatusName
	}
	return ""
}

func (x *WdtTradeResponse) GetBusinessTypeName() string {
	if x != nil && x.BusinessTypeName != nil {
		return *x.BusinessTypeName
	}
	return ""
}

func (x *WdtTradeResponse) GetAlipayMatchStatus() int32 {
	if x != nil && x.AlipayMatchStatus != nil {
		return *x.AlipayMatchStatus
	}
	return 0
}

func (x *WdtTradeResponse) GetBusinessType() int32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

type WdtTradeRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo string `protobuf:"bytes,1,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
}

func (x *WdtTradeRetrieveRequest) Reset() {
	*x = WdtTradeRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTradeRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTradeRetrieveRequest) ProtoMessage() {}

func (x *WdtTradeRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTradeRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtTradeRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{434}
}

func (x *WdtTradeRetrieveRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

type WdtTransferOrderDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId int32 `protobuf:"varint,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (x *WdtTransferOrderDestroyRequest) Reset() {
	*x = WdtTransferOrderDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderDestroyRequest) ProtoMessage() {}

func (x *WdtTransferOrderDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderDestroyRequest.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{435}
}

func (x *WdtTransferOrderDestroyRequest) GetTransferId() int32 {
	if x != nil {
		return x.TransferId
	}
	return 0
}

type WdtTransferOrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId        *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	TransferId   *int32   `protobuf:"varint,2,opt,name=transfer_id,json=transferId,proto3,oneof" json:"transfer_id,omitempty"`
	GoodsNo      *string  `protobuf:"bytes,3,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo       *string  `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode     *string  `protobuf:"bytes,5,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	SpecName     *string  `protobuf:"bytes,6,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Unit         *int32   `protobuf:"varint,7,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	Num2         *float64 `protobuf:"fixed64,8,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	SpecId       *string  `protobuf:"bytes,9,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	CostDiff     *float64 `protobuf:"fixed64,10,opt,name=cost_diff,json=costDiff,proto3,oneof" json:"cost_diff,omitempty"`
	FlagId       *int32   `protobuf:"varint,11,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified     *string  `protobuf:"bytes,12,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created      *string  `protobuf:"bytes,13,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Barcode      *string  `protobuf:"bytes,14,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	OutCostTotal *float64 `protobuf:"fixed64,15,opt,name=out_cost_total,json=outCostTotal,proto3,oneof" json:"out_cost_total,omitempty"`
	BatchId      *int32   `protobuf:"varint,16,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	BatchNo      *string  `protobuf:"bytes,17,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark  *string  `protobuf:"bytes,18,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	FromPosition *string  `protobuf:"bytes,19,opt,name=from_position,json=fromPosition,proto3,oneof" json:"from_position,omitempty"`
	ToPosition   *string  `protobuf:"bytes,20,opt,name=to_position,json=toPosition,proto3,oneof" json:"to_position,omitempty"`
	ExpireDate   *string  `protobuf:"bytes,21,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	StockNum     *float64 `protobuf:"fixed64,22,opt,name=stock_num,json=stockNum,proto3,oneof" json:"stock_num,omitempty"`
	Num          *float64 `protobuf:"fixed64,23,opt,name=num,proto3,oneof" json:"num,omitempty"`
	OutNum       *float64 `protobuf:"fixed64,24,opt,name=out_num,json=outNum,proto3,oneof" json:"out_num,omitempty"`
	InNum        *float64 `protobuf:"fixed64,25,opt,name=in_num,json=inNum,proto3,oneof" json:"in_num,omitempty"`
	UnitName     *string  `protobuf:"bytes,26,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	AuxUnitName  *string  `protobuf:"bytes,27,opt,name=aux_unit_name,json=auxUnitName,proto3,oneof" json:"aux_unit_name,omitempty"`
	AuxNum       *float64 `protobuf:"fixed64,28,opt,name=aux_num,json=auxNum,proto3,oneof" json:"aux_num,omitempty"`
	Remark       *string  `protobuf:"bytes,29,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	BrandName    *string  `protobuf:"bytes,30,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
}

func (x *WdtTransferOrderDetailRequest) Reset() {
	*x = WdtTransferOrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderDetailRequest) ProtoMessage() {}

func (x *WdtTransferOrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderDetailRequest.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{436}
}

func (x *WdtTransferOrderDetailRequest) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetTransferId() int32 {
	if x != nil && x.TransferId != nil {
		return *x.TransferId
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetSpecId() string {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetCostDiff() float64 {
	if x != nil && x.CostDiff != nil {
		return *x.CostDiff
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetOutCostTotal() float64 {
	if x != nil && x.OutCostTotal != nil {
		return *x.OutCostTotal
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetFromPosition() string {
	if x != nil && x.FromPosition != nil {
		return *x.FromPosition
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetToPosition() string {
	if x != nil && x.ToPosition != nil {
		return *x.ToPosition
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetStockNum() float64 {
	if x != nil && x.StockNum != nil {
		return *x.StockNum
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetOutNum() float64 {
	if x != nil && x.OutNum != nil {
		return *x.OutNum
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetInNum() float64 {
	if x != nil && x.InNum != nil {
		return *x.InNum
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetAuxUnitName() string {
	if x != nil && x.AuxUnitName != nil {
		return *x.AuxUnitName
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetAuxNum() float64 {
	if x != nil && x.AuxNum != nil {
		return *x.AuxNum
	}
	return 0
}

func (x *WdtTransferOrderDetailRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTransferOrderDetailRequest) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

type WdtTransferOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId        *int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	TransferId   *int32   `protobuf:"varint,2,opt,name=transfer_id,json=transferId,proto3,oneof" json:"transfer_id,omitempty"`
	GoodsNo      *string  `protobuf:"bytes,3,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo       *string  `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode     *string  `protobuf:"bytes,5,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	SpecName     *string  `protobuf:"bytes,6,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Unit         *int32   `protobuf:"varint,7,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	Num2         *float64 `protobuf:"fixed64,8,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	SpecId       *string  `protobuf:"bytes,9,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	CostDiff     *float64 `protobuf:"fixed64,10,opt,name=cost_diff,json=costDiff,proto3,oneof" json:"cost_diff,omitempty"`
	FlagId       *int32   `protobuf:"varint,11,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified     *string  `protobuf:"bytes,12,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created      *string  `protobuf:"bytes,13,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Barcode      *string  `protobuf:"bytes,14,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	OutCostTotal *float64 `protobuf:"fixed64,15,opt,name=out_cost_total,json=outCostTotal,proto3,oneof" json:"out_cost_total,omitempty"`
	BatchId      *int32   `protobuf:"varint,16,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	BatchNo      *string  `protobuf:"bytes,17,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark  *string  `protobuf:"bytes,18,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	FromPosition *string  `protobuf:"bytes,19,opt,name=from_position,json=fromPosition,proto3,oneof" json:"from_position,omitempty"`
	ToPosition   *string  `protobuf:"bytes,20,opt,name=to_position,json=toPosition,proto3,oneof" json:"to_position,omitempty"`
	ExpireDate   *string  `protobuf:"bytes,21,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	StockNum     *float64 `protobuf:"fixed64,22,opt,name=stock_num,json=stockNum,proto3,oneof" json:"stock_num,omitempty"`
	Num          *float64 `protobuf:"fixed64,23,opt,name=num,proto3,oneof" json:"num,omitempty"`
	OutNum       *float64 `protobuf:"fixed64,24,opt,name=out_num,json=outNum,proto3,oneof" json:"out_num,omitempty"`
	InNum        *float64 `protobuf:"fixed64,25,opt,name=in_num,json=inNum,proto3,oneof" json:"in_num,omitempty"`
	UnitName     *string  `protobuf:"bytes,26,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	AuxUnitName  *string  `protobuf:"bytes,27,opt,name=aux_unit_name,json=auxUnitName,proto3,oneof" json:"aux_unit_name,omitempty"`
	AuxNum       *float64 `protobuf:"fixed64,28,opt,name=aux_num,json=auxNum,proto3,oneof" json:"aux_num,omitempty"`
	Remark       *string  `protobuf:"bytes,29,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	BrandName    *string  `protobuf:"bytes,30,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
}

func (x *WdtTransferOrderDetailResponse) Reset() {
	*x = WdtTransferOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderDetailResponse) ProtoMessage() {}

func (x *WdtTransferOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{437}
}

func (x *WdtTransferOrderDetailResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetTransferId() int32 {
	if x != nil && x.TransferId != nil {
		return *x.TransferId
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetSpecId() string {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetCostDiff() float64 {
	if x != nil && x.CostDiff != nil {
		return *x.CostDiff
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetOutCostTotal() float64 {
	if x != nil && x.OutCostTotal != nil {
		return *x.OutCostTotal
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetFromPosition() string {
	if x != nil && x.FromPosition != nil {
		return *x.FromPosition
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetToPosition() string {
	if x != nil && x.ToPosition != nil {
		return *x.ToPosition
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetStockNum() float64 {
	if x != nil && x.StockNum != nil {
		return *x.StockNum
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetOutNum() float64 {
	if x != nil && x.OutNum != nil {
		return *x.OutNum
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetInNum() float64 {
	if x != nil && x.InNum != nil {
		return *x.InNum
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetAuxUnitName() string {
	if x != nil && x.AuxUnitName != nil {
		return *x.AuxUnitName
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetAuxNum() float64 {
	if x != nil && x.AuxNum != nil {
		return *x.AuxNum
	}
	return 0
}

func (x *WdtTransferOrderDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTransferOrderDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

type WdtTransferOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *WdtTransferOrderListRequest) Reset() {
	*x = WdtTransferOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderListRequest) ProtoMessage() {}

func (x *WdtTransferOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderListRequest.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{438}
}

func (x *WdtTransferOrderListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *WdtTransferOrderListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type WdtTransferOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtTransferOrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtTransferOrderListResponse) Reset() {
	*x = WdtTransferOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderListResponse) ProtoMessage() {}

func (x *WdtTransferOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderListResponse.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{439}
}

func (x *WdtTransferOrderListResponse) GetResults() []*WdtTransferOrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtTransferOrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtTransferOrderPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId           *int32                           `protobuf:"varint,1,opt,name=transfer_id,json=transferId,proto3,oneof" json:"transfer_id,omitempty"`
	DetailsList          []*WdtTransferOrderDetailRequest `protobuf:"bytes,2,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	XPartialUpdateFields []string                         `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	TransferNo           *string                          `protobuf:"bytes,4,opt,name=transfer_no,json=transferNo,proto3,oneof" json:"transfer_no,omitempty"`
	Type                 *int32                           `protobuf:"varint,5,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Mode                 *int32                           `protobuf:"varint,6,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	FromWarehouseNo      *string                          `protobuf:"bytes,7,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	ToWarehouseNo        *string                          `protobuf:"bytes,8,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	RecId                *int32                           `protobuf:"varint,9,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	LockId               *int32                           `protobuf:"varint,10,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	ApiOuterNo           *string                          `protobuf:"bytes,11,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	FromWmsOrderNo       *string                          `protobuf:"bytes,12,opt,name=from_wms_order_no,json=fromWmsOrderNo,proto3,oneof" json:"from_wms_order_no,omitempty"`
	OuterNo1             *string                          `protobuf:"bytes,13,opt,name=outer_no1,json=outerNo1,proto3,oneof" json:"outer_no1,omitempty"`
	OuterNo2             *string                          `protobuf:"bytes,14,opt,name=outer_no2,json=outerNo2,proto3,oneof" json:"outer_no2,omitempty"`
	ToWmsOrderNo         *string                          `protobuf:"bytes,15,opt,name=to_wms_order_no,json=toWmsOrderNo,proto3,oneof" json:"to_wms_order_no,omitempty"`
	ErrorInfo            *string                          `protobuf:"bytes,16,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WmsStatus            *int32                           `protobuf:"varint,17,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	FromWarehouseId      *int32                           `protobuf:"varint,18,opt,name=from_warehouse_id,json=fromWarehouseId,proto3,oneof" json:"from_warehouse_id,omitempty"`
	ToWarehouseId        *int32                           `protobuf:"varint,19,opt,name=to_warehouse_id,json=toWarehouseId,proto3,oneof" json:"to_warehouse_id,omitempty"`
	Address              *string                          `protobuf:"bytes,20,opt,name=address,proto3,oneof" json:"address,omitempty"`
	LogisticsId          *int32                           `protobuf:"varint,21,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	OutGoodsAmount       *float64                         `protobuf:"fixed64,22,opt,name=out_goods_amount,json=outGoodsAmount,proto3,oneof" json:"out_goods_amount,omitempty"`
	InGoodsAmount        *float64                         `protobuf:"fixed64,23,opt,name=in_goods_amount,json=inGoodsAmount,proto3,oneof" json:"in_goods_amount,omitempty"`
	NoteCount            *int32                           `protobuf:"varint,24,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId               *int32                           `protobuf:"varint,25,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Status               *int32                           `protobuf:"varint,26,opt,name=status,proto3,oneof" json:"status,omitempty"`
	OuterNo              *string                          `protobuf:"bytes,27,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	CreatorId            *int32                           `protobuf:"varint,28,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName          *string                          `protobuf:"bytes,29,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Contact              *string                          `protobuf:"bytes,30,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno                *string                          `protobuf:"bytes,31,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	LogisticsType        *int32                           `protobuf:"varint,32,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo          *string                          `protobuf:"bytes,33,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName        *string                          `protobuf:"bytes,34,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string                          `protobuf:"bytes,35,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	GoodsCount           *float64                         `protobuf:"fixed64,36,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount       *float64                         `protobuf:"fixed64,37,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsInCount         *float64                         `protobuf:"fixed64,38,opt,name=goods_in_count,json=goodsInCount,proto3,oneof" json:"goods_in_count,omitempty"`
	GoodsOutCount        *float64                         `protobuf:"fixed64,39,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Modified             *string                          `protobuf:"bytes,40,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created              *string                          `protobuf:"bytes,41,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Remark               *string                          `protobuf:"bytes,42,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	ToWarehouseAddress   *string                          `protobuf:"bytes,43,opt,name=to_warehouse_address,json=toWarehouseAddress,proto3,oneof" json:"to_warehouse_address,omitempty"`
	AggConsignStatus     *int32                           `protobuf:"varint,44,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
}

func (x *WdtTransferOrderPartialUpdateRequest) Reset() {
	*x = WdtTransferOrderPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderPartialUpdateRequest) ProtoMessage() {}

func (x *WdtTransferOrderPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{440}
}

func (x *WdtTransferOrderPartialUpdateRequest) GetTransferId() int32 {
	if x != nil && x.TransferId != nil {
		return *x.TransferId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetDetailsList() []*WdtTransferOrderDetailRequest {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtTransferOrderPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *WdtTransferOrderPartialUpdateRequest) GetTransferNo() string {
	if x != nil && x.TransferNo != nil {
		return *x.TransferNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetFromWmsOrderNo() string {
	if x != nil && x.FromWmsOrderNo != nil {
		return *x.FromWmsOrderNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetOuterNo1() string {
	if x != nil && x.OuterNo1 != nil {
		return *x.OuterNo1
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetOuterNo2() string {
	if x != nil && x.OuterNo2 != nil {
		return *x.OuterNo2
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetToWmsOrderNo() string {
	if x != nil && x.ToWmsOrderNo != nil {
		return *x.ToWmsOrderNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetFromWarehouseId() int32 {
	if x != nil && x.FromWarehouseId != nil {
		return *x.FromWarehouseId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetToWarehouseId() int32 {
	if x != nil && x.ToWarehouseId != nil {
		return *x.ToWarehouseId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetOutGoodsAmount() float64 {
	if x != nil && x.OutGoodsAmount != nil {
		return *x.OutGoodsAmount
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetInGoodsAmount() float64 {
	if x != nil && x.InGoodsAmount != nil {
		return *x.InGoodsAmount
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetGoodsTypeCount() float64 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetGoodsInCount() float64 {
	if x != nil && x.GoodsInCount != nil {
		return *x.GoodsInCount
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *WdtTransferOrderPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetToWarehouseAddress() string {
	if x != nil && x.ToWarehouseAddress != nil {
		return *x.ToWarehouseAddress
	}
	return ""
}

func (x *WdtTransferOrderPartialUpdateRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

type WdtTransferOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId         *int32                           `protobuf:"varint,1,opt,name=transfer_id,json=transferId,proto3,oneof" json:"transfer_id,omitempty"`
	DetailsList        []*WdtTransferOrderDetailRequest `protobuf:"bytes,2,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	TransferNo         *string                          `protobuf:"bytes,3,opt,name=transfer_no,json=transferNo,proto3,oneof" json:"transfer_no,omitempty"`
	Type               *int32                           `protobuf:"varint,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Mode               *int32                           `protobuf:"varint,5,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	FromWarehouseNo    *string                          `protobuf:"bytes,6,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	ToWarehouseNo      *string                          `protobuf:"bytes,7,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	RecId              *int32                           `protobuf:"varint,8,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	LockId             *int32                           `protobuf:"varint,9,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	ApiOuterNo         *string                          `protobuf:"bytes,10,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	FromWmsOrderNo     *string                          `protobuf:"bytes,11,opt,name=from_wms_order_no,json=fromWmsOrderNo,proto3,oneof" json:"from_wms_order_no,omitempty"`
	OuterNo1           *string                          `protobuf:"bytes,12,opt,name=outer_no1,json=outerNo1,proto3,oneof" json:"outer_no1,omitempty"`
	OuterNo2           *string                          `protobuf:"bytes,13,opt,name=outer_no2,json=outerNo2,proto3,oneof" json:"outer_no2,omitempty"`
	ToWmsOrderNo       *string                          `protobuf:"bytes,14,opt,name=to_wms_order_no,json=toWmsOrderNo,proto3,oneof" json:"to_wms_order_no,omitempty"`
	ErrorInfo          *string                          `protobuf:"bytes,15,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WmsStatus          *int32                           `protobuf:"varint,16,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	FromWarehouseId    *int32                           `protobuf:"varint,17,opt,name=from_warehouse_id,json=fromWarehouseId,proto3,oneof" json:"from_warehouse_id,omitempty"`
	ToWarehouseId      *int32                           `protobuf:"varint,18,opt,name=to_warehouse_id,json=toWarehouseId,proto3,oneof" json:"to_warehouse_id,omitempty"`
	Address            *string                          `protobuf:"bytes,19,opt,name=address,proto3,oneof" json:"address,omitempty"`
	LogisticsId        *int32                           `protobuf:"varint,20,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	OutGoodsAmount     *float64                         `protobuf:"fixed64,21,opt,name=out_goods_amount,json=outGoodsAmount,proto3,oneof" json:"out_goods_amount,omitempty"`
	InGoodsAmount      *float64                         `protobuf:"fixed64,22,opt,name=in_goods_amount,json=inGoodsAmount,proto3,oneof" json:"in_goods_amount,omitempty"`
	NoteCount          *int32                           `protobuf:"varint,23,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId             *int32                           `protobuf:"varint,24,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Status             *int32                           `protobuf:"varint,25,opt,name=status,proto3,oneof" json:"status,omitempty"`
	OuterNo            *string                          `protobuf:"bytes,26,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	CreatorId          *int32                           `protobuf:"varint,27,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName        *string                          `protobuf:"bytes,28,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Contact            *string                          `protobuf:"bytes,29,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno              *string                          `protobuf:"bytes,30,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	LogisticsType      *int32                           `protobuf:"varint,31,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo        *string                          `protobuf:"bytes,32,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName      *string                          `protobuf:"bytes,33,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode      *string                          `protobuf:"bytes,34,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	GoodsCount         *float64                         `protobuf:"fixed64,35,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount     *float64                         `protobuf:"fixed64,36,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsInCount       *float64                         `protobuf:"fixed64,37,opt,name=goods_in_count,json=goodsInCount,proto3,oneof" json:"goods_in_count,omitempty"`
	GoodsOutCount      *float64                         `protobuf:"fixed64,38,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Modified           *string                          `protobuf:"bytes,39,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created            *string                          `protobuf:"bytes,40,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Remark             *string                          `protobuf:"bytes,41,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	ToWarehouseAddress *string                          `protobuf:"bytes,42,opt,name=to_warehouse_address,json=toWarehouseAddress,proto3,oneof" json:"to_warehouse_address,omitempty"`
	AggConsignStatus   *int32                           `protobuf:"varint,43,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
}

func (x *WdtTransferOrderRequest) Reset() {
	*x = WdtTransferOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderRequest) ProtoMessage() {}

func (x *WdtTransferOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderRequest.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{441}
}

func (x *WdtTransferOrderRequest) GetTransferId() int32 {
	if x != nil && x.TransferId != nil {
		return *x.TransferId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetDetailsList() []*WdtTransferOrderDetailRequest {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtTransferOrderRequest) GetTransferNo() string {
	if x != nil && x.TransferNo != nil {
		return *x.TransferNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetFromWmsOrderNo() string {
	if x != nil && x.FromWmsOrderNo != nil {
		return *x.FromWmsOrderNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetOuterNo1() string {
	if x != nil && x.OuterNo1 != nil {
		return *x.OuterNo1
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetOuterNo2() string {
	if x != nil && x.OuterNo2 != nil {
		return *x.OuterNo2
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetToWmsOrderNo() string {
	if x != nil && x.ToWmsOrderNo != nil {
		return *x.ToWmsOrderNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetFromWarehouseId() int32 {
	if x != nil && x.FromWarehouseId != nil {
		return *x.FromWarehouseId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetToWarehouseId() int32 {
	if x != nil && x.ToWarehouseId != nil {
		return *x.ToWarehouseId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetOutGoodsAmount() float64 {
	if x != nil && x.OutGoodsAmount != nil {
		return *x.OutGoodsAmount
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetInGoodsAmount() float64 {
	if x != nil && x.InGoodsAmount != nil {
		return *x.InGoodsAmount
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetGoodsTypeCount() float64 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetGoodsInCount() float64 {
	if x != nil && x.GoodsInCount != nil {
		return *x.GoodsInCount
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *WdtTransferOrderRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetToWarehouseAddress() string {
	if x != nil && x.ToWarehouseAddress != nil {
		return *x.ToWarehouseAddress
	}
	return ""
}

func (x *WdtTransferOrderRequest) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

type WdtTransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId           *int32                              `protobuf:"varint,1,opt,name=transfer_id,json=transferId,proto3,oneof" json:"transfer_id,omitempty"`
	TypeName             *string                             `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3,oneof" json:"type_name,omitempty"`
	ModeName             *string                             `protobuf:"bytes,3,opt,name=mode_name,json=modeName,proto3,oneof" json:"mode_name,omitempty"`
	WmsStatusName        *string                             `protobuf:"bytes,4,opt,name=wms_status_name,json=wmsStatusName,proto3,oneof" json:"wms_status_name,omitempty"`
	StatusName           *string                             `protobuf:"bytes,5,opt,name=status_name,json=statusName,proto3,oneof" json:"status_name,omitempty"`
	DetailsList          []*WdtTransferOrderDetailResponse   `protobuf:"bytes,6,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	StockInEntities      []*WdtStockinTransferOrderResponse  `protobuf:"bytes,7,rep,name=stock_in_entities,json=stockInEntities,proto3" json:"stock_in_entities,omitempty"`
	StockOutEntities     []*WdtStockoutTransferOrderResponse `protobuf:"bytes,8,rep,name=stock_out_entities,json=stockOutEntities,proto3" json:"stock_out_entities,omitempty"`
	TransferNo           *string                             `protobuf:"bytes,9,opt,name=transfer_no,json=transferNo,proto3,oneof" json:"transfer_no,omitempty"`
	Type                 *int32                              `protobuf:"varint,10,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Mode                 *int32                              `protobuf:"varint,11,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	FromWarehouseNo      *string                             `protobuf:"bytes,12,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	ToWarehouseNo        *string                             `protobuf:"bytes,13,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	RecId                *int32                              `protobuf:"varint,14,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	LockId               *int32                              `protobuf:"varint,15,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	ApiOuterNo           *string                             `protobuf:"bytes,16,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	FromWmsOrderNo       *string                             `protobuf:"bytes,17,opt,name=from_wms_order_no,json=fromWmsOrderNo,proto3,oneof" json:"from_wms_order_no,omitempty"`
	OuterNo1             *string                             `protobuf:"bytes,18,opt,name=outer_no1,json=outerNo1,proto3,oneof" json:"outer_no1,omitempty"`
	OuterNo2             *string                             `protobuf:"bytes,19,opt,name=outer_no2,json=outerNo2,proto3,oneof" json:"outer_no2,omitempty"`
	ToWmsOrderNo         *string                             `protobuf:"bytes,20,opt,name=to_wms_order_no,json=toWmsOrderNo,proto3,oneof" json:"to_wms_order_no,omitempty"`
	ErrorInfo            *string                             `protobuf:"bytes,21,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WmsStatus            *int32                              `protobuf:"varint,22,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	FromWarehouseId      *int32                              `protobuf:"varint,23,opt,name=from_warehouse_id,json=fromWarehouseId,proto3,oneof" json:"from_warehouse_id,omitempty"`
	ToWarehouseId        *int32                              `protobuf:"varint,24,opt,name=to_warehouse_id,json=toWarehouseId,proto3,oneof" json:"to_warehouse_id,omitempty"`
	Address              *string                             `protobuf:"bytes,25,opt,name=address,proto3,oneof" json:"address,omitempty"`
	LogisticsId          *int32                              `protobuf:"varint,26,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	OutGoodsAmount       *float64                            `protobuf:"fixed64,27,opt,name=out_goods_amount,json=outGoodsAmount,proto3,oneof" json:"out_goods_amount,omitempty"`
	InGoodsAmount        *float64                            `protobuf:"fixed64,28,opt,name=in_goods_amount,json=inGoodsAmount,proto3,oneof" json:"in_goods_amount,omitempty"`
	NoteCount            *int32                              `protobuf:"varint,29,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId               *int32                              `protobuf:"varint,30,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Status               *int32                              `protobuf:"varint,31,opt,name=status,proto3,oneof" json:"status,omitempty"`
	OuterNo              *string                             `protobuf:"bytes,32,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	CreatorId            *int32                              `protobuf:"varint,33,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName          *string                             `protobuf:"bytes,34,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Contact              *string                             `protobuf:"bytes,35,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno                *string                             `protobuf:"bytes,36,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	LogisticsType        *int32                              `protobuf:"varint,37,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo          *string                             `protobuf:"bytes,38,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName        *string                             `protobuf:"bytes,39,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string                             `protobuf:"bytes,40,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	GoodsCount           *float64                            `protobuf:"fixed64,41,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount       *float64                            `protobuf:"fixed64,42,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsInCount         *float64                            `protobuf:"fixed64,43,opt,name=goods_in_count,json=goodsInCount,proto3,oneof" json:"goods_in_count,omitempty"`
	GoodsOutCount        *float64                            `protobuf:"fixed64,44,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Modified             *string                             `protobuf:"bytes,45,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created              *string                             `protobuf:"bytes,46,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Remark               *string                             `protobuf:"bytes,47,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	ToWarehouseAddress   *string                             `protobuf:"bytes,48,opt,name=to_warehouse_address,json=toWarehouseAddress,proto3,oneof" json:"to_warehouse_address,omitempty"`
	AggConsignStatus     *int32                              `protobuf:"varint,49,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	AggConsignStatusName *string                             `protobuf:"bytes,50,opt,name=agg_consign_status_name,json=aggConsignStatusName,proto3,oneof" json:"agg_consign_status_name,omitempty"`
}

func (x *WdtTransferOrderResponse) Reset() {
	*x = WdtTransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderResponse) ProtoMessage() {}

func (x *WdtTransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderResponse.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{442}
}

func (x *WdtTransferOrderResponse) GetTransferId() int32 {
	if x != nil && x.TransferId != nil {
		return *x.TransferId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetModeName() string {
	if x != nil && x.ModeName != nil {
		return *x.ModeName
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetWmsStatusName() string {
	if x != nil && x.WmsStatusName != nil {
		return *x.WmsStatusName
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetStatusName() string {
	if x != nil && x.StatusName != nil {
		return *x.StatusName
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetDetailsList() []*WdtTransferOrderDetailResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *WdtTransferOrderResponse) GetStockInEntities() []*WdtStockinTransferOrderResponse {
	if x != nil {
		return x.StockInEntities
	}
	return nil
}

func (x *WdtTransferOrderResponse) GetStockOutEntities() []*WdtStockoutTransferOrderResponse {
	if x != nil {
		return x.StockOutEntities
	}
	return nil
}

func (x *WdtTransferOrderResponse) GetTransferNo() string {
	if x != nil && x.TransferNo != nil {
		return *x.TransferNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetFromWmsOrderNo() string {
	if x != nil && x.FromWmsOrderNo != nil {
		return *x.FromWmsOrderNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetOuterNo1() string {
	if x != nil && x.OuterNo1 != nil {
		return *x.OuterNo1
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetOuterNo2() string {
	if x != nil && x.OuterNo2 != nil {
		return *x.OuterNo2
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetToWmsOrderNo() string {
	if x != nil && x.ToWmsOrderNo != nil {
		return *x.ToWmsOrderNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetFromWarehouseId() int32 {
	if x != nil && x.FromWarehouseId != nil {
		return *x.FromWarehouseId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetToWarehouseId() int32 {
	if x != nil && x.ToWarehouseId != nil {
		return *x.ToWarehouseId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetOutGoodsAmount() float64 {
	if x != nil && x.OutGoodsAmount != nil {
		return *x.OutGoodsAmount
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetInGoodsAmount() float64 {
	if x != nil && x.InGoodsAmount != nil {
		return *x.InGoodsAmount
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetGoodsTypeCount() float64 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetGoodsInCount() float64 {
	if x != nil && x.GoodsInCount != nil {
		return *x.GoodsInCount
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetToWarehouseAddress() string {
	if x != nil && x.ToWarehouseAddress != nil {
		return *x.ToWarehouseAddress
	}
	return ""
}

func (x *WdtTransferOrderResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *WdtTransferOrderResponse) GetAggConsignStatusName() string {
	if x != nil && x.AggConsignStatusName != nil {
		return *x.AggConsignStatusName
	}
	return ""
}

type WdtTransferOrderRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId int32 `protobuf:"varint,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (x *WdtTransferOrderRetrieveRequest) Reset() {
	*x = WdtTransferOrderRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtTransferOrderRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtTransferOrderRetrieveRequest) ProtoMessage() {}

func (x *WdtTransferOrderRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtTransferOrderRetrieveRequest.ProtoReflect.Descriptor instead.
func (*WdtTransferOrderRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{443}
}

func (x *WdtTransferOrderRetrieveRequest) GetTransferId() int32 {
	if x != nil {
		return x.TransferId
	}
	return 0
}

var File_kingdee_ito_proto protoreflect.FileDescriptor

var file_kingdee_ito_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x18, 0x41,
	0x67, 0x67, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x42, 0x79, 0x53, 0x72, 0x63, 0x54, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x55, 0x0a, 0x19, 0x41, 0x67, 0x67, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x42, 0x79,
	0x53, 0x72, 0x63, 0x54, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x06, 0x0a, 0x1b, 0x41, 0x67, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63,
	0x75, 0x74, 0x6f, 0x66, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x41, 0x67, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x41, 0x67,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1d, 0x0a,
	0x1b, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x1c,
	0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x65, 0x78, 0x74, 0x4e, 0x6f, 0x22, 0xbc, 0x08, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x74,
	0x6f, 0x66, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x1d, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd0, 0x06, 0x0a, 0x1b, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x74,
	0x6f, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x67, 0x67, 0x50,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x41, 0x67, 0x67, 0x50, 0x75, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x57, 0x61, 0x69, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x22, 0x68, 0x0a, 0x16,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x1a, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x22, 0x57, 0x0a, 0x1b, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x17,
	0x0a, 0x15, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x16, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x55, 0x0a, 0x17, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x23, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x68, 0x0a, 0x24, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73,
	0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x57, 0x0a, 0x24, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x41, 0x67, 0x67, 0x4e, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x25, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22,
	0x3e, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x54,
	0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x61, 0x0a, 0x1d, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x54,
	0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0x3b, 0x0a, 0x19, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x5e, 0x0a, 0x1a, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22,
	0xad, 0x01, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe2, 0x06, 0x0a, 0x1d, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x46, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x43, 0x4d, 0x4b, 0x42, 0x41, 0x52, 0x43,
	0x4f, 0x44, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x46, 0x43, 0x4d,
	0x4b, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46,
	0x55, 0x4e, 0x49, 0x54, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x46, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x51,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x04, 0x46, 0x51, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x46, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49,
	0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x0a, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x0a, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x4d, 0x4b, 0x42, 0x41, 0x52, 0x43, 0x4f,
	0x44, 0x45, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x44, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x46, 0x51, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x72, 0x67, 0x49, 0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x05, 0x0a,
	0x1d, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x46, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c,
	0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x41, 0x50, 0x50, 0x4f,
	0x52, 0x47, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x46, 0x41,
	0x50, 0x50, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x54, 0x59, 0x50, 0x45, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0a, 0x46, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x54, 0x59, 0x50, 0x45, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x46, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x41, 0x50, 0x50, 0x4f, 0x52,
	0x47, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0xcc, 0x10, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x19,
	0x77, 0x64, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x15, 0x77, 0x64, 0x74, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x05, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x6b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x6e, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x61,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68,
	0x4b, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x77, 0x64, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0c, 0x52, 0x11, 0x77, 0x64, 0x74, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x08, 0x61, 0x67, 0x67, 0x41, 0x70, 0x69,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x15, 0x52, 0x10, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x61,
	0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x11, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x10, 0x70, 0x75,
	0x73, 0x68, 0x4b, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61,
	0x67, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x67, 0x67,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x64,
	0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbb,
	0x07, 0x0a, 0x27, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x51,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x04, 0x46, 0x51, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x75, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x46,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x75, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10,
	0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0c, 0x46, 0x4b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x46, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x46, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0b, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x46, 0x4b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46,
	0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x09, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x46, 0x51, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x75, 0x74, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46,
	0x53, 0x72, 0x63, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x06, 0x0a,
	0x27, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x42, 0x69,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x46,
	0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x46, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x46,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x46,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x13, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x57, 0x41, 0x59,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x46, 0x56, 0x45, 0x53, 0x54, 0x4f,
	0x4e, 0x57, 0x41, 0x59, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x0e, 0x46, 0x53, 0x54, 0x4b, 0x54,
	0x52, 0x53, 0x49, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x46, 0x53, 0x54, 0x4b, 0x54, 0x52, 0x53, 0x49, 0x4e,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x42, 0x69, 0x7a, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x44,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f,
	0x75, 0x74, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x56, 0x45,
	0x53, 0x54, 0x4f, 0x4e, 0x57, 0x41, 0x59, 0x22, 0xdb, 0x0a, 0x0a, 0x22, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x61,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x67, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x11, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x12, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0f, 0x61, 0x67, 0x67,
	0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14,
	0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x11, 0x61, 0x67,
	0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10,
	0x70, 0x75, 0x73, 0x68, 0x4b, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x07, 0x0a, 0x28, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x51, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x04, 0x52, 0x04, 0x46, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07,
	0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0e,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x0f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x49, 0x6e, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x46, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x46, 0x44, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x46, 0x44, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0b, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x46, 0x4b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x09, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x46, 0x51, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x44, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdf, 0x06, 0x0a, 0x28,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x42, 0x69,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x46,
	0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x46, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x0f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x46,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x12, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x12, 0x46,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x57,
	0x41, 0x59, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x46, 0x56, 0x45, 0x53,
	0x54, 0x4f, 0x4e, 0x57, 0x41, 0x59, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x0f, 0x46, 0x53, 0x54,
	0x4b, 0x54, 0x52, 0x53, 0x4f, 0x55, 0x54, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x46, 0x53, 0x54, 0x4b, 0x54,
	0x52, 0x53, 0x4f, 0x55, 0x54, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46,
	0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x44,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x46, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x57, 0x41, 0x59, 0x22, 0xe1, 0x0a,
	0x0a, 0x23, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0c,
	0x70, 0x75, 0x73, 0x68, 0x4b, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x12, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x61, 0x67, 0x67,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0f, 0x61,
	0x67, 0x67, 0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68, 0x4b,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x8e, 0x06, 0x0a, 0x17, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0c, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0a, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0c, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x04,
	0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x22, 0xa2, 0x04, 0x0a, 0x1d, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c,
	0x6c, 0x41, 0x67, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69,
	0x50, 0x61, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x62, 0x69, 0x7a,
	0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x64, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x69, 0x7a, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x34, 0x0a, 0x21, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb5, 0x01,
	0x0a, 0x1e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xcd, 0x05, 0x0a, 0x27, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69,
	0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x73, 0x72,
	0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x73, 0x72, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x07, 0x74, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x22, 0x8b, 0x05, 0x0a, 0x1a, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69,
	0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61,
	0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x73, 0x72, 0x63, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x73, 0x72, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x07, 0x74, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d,
	0x65, 0x6d, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x22, 0xff, 0x07, 0x0a, 0x1b, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c,
	0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x18, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x15, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x11, 0x70, 0x75,
	0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a,
	0x14, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x11, 0x73,
	0x72, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x74, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x44,
	0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x22, 0x35, 0x0a, 0x22, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c,
	0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x08,
	0x0a, 0x1a, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x10, 0x61, 0x67, 0x67, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x44, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x0c, 0x61, 0x67, 0x67, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x62, 0x69, 0x7a, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x4f, 0x72, 0x69, 0x67, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07,
	0x62, 0x69, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x0d, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x62,
	0x69, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x06, 0x62, 0x69, 0x7a, 0x4e, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x69, 0x7a, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x7a,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x16, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xd1, 0x04, 0x0a, 0x12, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x11, 0x61, 0x67, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x72, 0x63, 0x54, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c,
	0x6c, 0x41, 0x67, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x19, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x1b, 0x42, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x66, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x66, 0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x65, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x60, 0x0a, 0x25, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x26, 0x42, 0x75, 0x6c,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x29, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x2a, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x23, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x68, 0x0a, 0x24, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x27,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x28, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x65, 0x6c,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x1c, 0x0a,
	0x1a, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x18,
	0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x55,
	0x0a, 0x19, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4f,
	0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01,
	0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd7, 0x0d, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62,
	0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x62, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x06, 0x62, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x62, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x06, 0x62, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x16, 0x77,
	0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x12, 0x77,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x15, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x77,
	0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x13,
	0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x16, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x12, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0f, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x10, 0x52, 0x06, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x11, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x11, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0e,
	0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0d, 0x6b,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x19, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x15, 0x52, 0x15, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x1b, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x17, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52,
	0x0f, 0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18,
	0x52, 0x0e, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x13, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x19, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1a, 0x52, 0x15, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x62, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x75, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6b, 0x64, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6b,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77,
	0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x33, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xd6, 0x09, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x62, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52,
	0x0e, 0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0d,
	0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x19, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x15, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x1b, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x17, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f,
	0x52, 0x0f, 0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x0e, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x13, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x19, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x12, 0x52, 0x15, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x6f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x75, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6b,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6b, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x5d, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb1, 0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x23, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x58,
	0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22,
	0x4b, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x21, 0x0a, 0x1f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x7e, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x22,
	0xcf, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x57,
	0x61, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x75, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x73,
	0x68, 0x22, 0x65, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x61, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0xc8, 0x02, 0x0a, 0x1c, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x64,
	0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x22, 0x2f, 0x0a, 0x1d, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x84, 0x03, 0x0a, 0x23, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f,
	0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f,
	0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0xc2, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0xc3, 0x02, 0x0a, 0x17,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f,
	0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x22, 0x30, 0x0a, 0x1e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x22, 0x51, 0x0a, 0x21, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x22, 0x5e, 0x0a, 0x22, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x1e, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x22, 0x5b, 0x0a, 0x1f, 0x43,
	0x78, 0x6c, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x20, 0x43, 0x78, 0x6c, 0x4b,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x21, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x34, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22, 0x58, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x70, 0x0a, 0x26, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x27, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41,
	0x67, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x2d, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x6a, 0x0a, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67,
	0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6c,
	0x0a, 0x22, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x23,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a,
	0x27, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x64, 0x0a, 0x28, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77,
	0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22, 0x59, 0x0a,
	0x1d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x17, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f,
	0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22,
	0x32, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x14, 0x46, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x46, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x1b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x56, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x43, 0x0a, 0x1b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4c,
	0x6f, 0x67, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x7a, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69,
	0x6d, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x49, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x1d,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a,
	0x0a, 0x1e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x14, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x15,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x72,
	0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x60, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x1c, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x1d, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57,
	0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x1c,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x1d,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x69, 0x0a, 0x1d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x1c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x17, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x22, 0x64, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x16, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2f, 0x0a, 0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x22,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x22, 0xfd, 0x05, 0x0a, 0x29, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x44, 0x65, 0x6c, 0x69, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x69, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x6e, 0x51,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x6e,
	0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x52, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x44, 0x41, 0x54,
	0x45, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x14, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x49, 0x45, 0x52, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x44, 0x41, 0x54, 0x45, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x52, 0x4c, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x04, 0x54, 0x52, 0x4c, 0x54, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x50,
	0x52, 0x45, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x44, 0x41, 0x54, 0x45, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x50, 0x52, 0x45, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41,
	0x4c, 0x44, 0x41, 0x54, 0x45, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x51, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x44, 0x65, 0x6c, 0x69, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x45,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x09, 0x45, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x74, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x51,
	0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x51, 0x74, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x44, 0x41,
	0x54, 0x45, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x52, 0x4c, 0x54, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x50, 0x52, 0x45, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x44, 0x41, 0x54, 0x45, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x51, 0x74,
	0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c,
	0x69, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x45, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x2b, 0x0a, 0x24, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x50, 0x4f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x12,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x44, 0x65, 0x6c, 0x69, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x12, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x46,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x46, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0a, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x51, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x07, 0x52, 0x04, 0x46, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x51, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x46, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0d, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x46, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x46, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x06,
	0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x54, 0x61,
	0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x09,
	0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x12, 0x46, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0f, 0x46, 0x54,
	0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x13, 0x52, 0x0d, 0x46, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x0e, 0x46, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0d, 0x46, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x46, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x16, 0x52, 0x09, 0x46, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70,
	0x74, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0e, 0x46, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x11, 0x46, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x09, 0x46, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x6f,
	0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x46, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x53, 0x75,
	0x70, 0x4d, 0x61, 0x74, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x09,
	0x46, 0x53, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x46, 0x53, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x0b, 0x46, 0x53, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0c, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1e, 0x52, 0x09, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0d, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x4c,
	0x6f, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x04, 0x46, 0x4c, 0x6f, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x4c, 0x6f, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0c, 0x46, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x46, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x22, 0x52, 0x0a, 0x46, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x23, 0x52, 0x10, 0x46,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x48, 0x24, 0x52, 0x0c, 0x46, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x51, 0x74, 0x79, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x25, 0x52, 0x0f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4d, 0x61, 0x78, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x26, 0x52, 0x0f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x46, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x27, 0x52, 0x13, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x44, 0x61, 0x79, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x12,
	0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x61,
	0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x29, 0x52, 0x12, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x61,
	0x72, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x46, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x11, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x11, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x11, 0x46, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x12,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x53, 0x75, 0x6d, 0x51, 0x74, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52,
	0x0e, 0x46, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x51, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0e, 0x46, 0x53,
	0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4e, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0b, 0x46, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46,
	0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x31, 0x52, 0x0b, 0x46, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x32, 0x52, 0x06, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x0b, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e,
	0x44, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52,
	0x0d, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x13, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x42, 0x49, 0x4c, 0x4c,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x53, 0x45, 0x51, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35,
	0x52, 0x13, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x53, 0x45, 0x51, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x44, 0x45, 0x4d,
	0x41, 0x4e, 0x44, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x36, 0x52, 0x12, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x42,
	0x49, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x37, 0x52, 0x0c, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x0a, 0x46, 0x53,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46,
	0x53, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x07,
	0x46, 0x53, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53,
	0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x3a, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x42, 0x61, 0x73, 0x65, 0x53, 0x61, 0x6c, 0x4a, 0x6f, 0x69,
	0x6e, 0x51, 0x74, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3b, 0x52, 0x0f, 0x46, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x46, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x46, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x51, 0x74, 0x79,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0d, 0x46, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x10, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46,
	0x43, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3f, 0x52, 0x10, 0x46, 0x43, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x46, 0x44, 0x69, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x10, 0x46, 0x44, 0x69, 0x73, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x46, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x48, 0x41, 0x52,
	0x06, 0x46, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x46, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x14, 0x46, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x09, 0x46, 0x4d, 0x61, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x4d, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x48, 0x44, 0x52, 0x09, 0x46, 0x4d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x49, 0x73,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x48, 0x45, 0x52, 0x08, 0x46,
	0x49, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x42,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x51, 0x74, 0x79,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x48, 0x46, 0x52, 0x12, 0x46, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x47, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x53, 0x75, 0x62, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x09, 0x46, 0x53, 0x75,
	0x62, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x49, 0x52, 0x0e, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a,
	0x52, 0x0e, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4b, 0x52, 0x18, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42,
	0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4c, 0x52, 0x0d, 0x46,
	0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x45,
	0x51, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4d, 0x52, 0x0e, 0x46, 0x53, 0x55, 0x42, 0x52,
	0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x45, 0x51, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x4e, 0x52, 0x0e, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x46, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x4f, 0x52, 0x0f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x46, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x09, 0x48, 0x50, 0x52, 0x11, 0x46, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x13, 0x46, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x51, 0x52, 0x12, 0x46, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x52, 0x52, 0x11, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x46, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x53, 0x52, 0x12, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x54, 0x52, 0x0b, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x51, 0x74, 0x79, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01, 0x48, 0x55, 0x52, 0x0b, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x46,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x01, 0x48, 0x56, 0x52, 0x11, 0x46, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x46, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x51, 0x74, 0x79, 0x18, 0x59, 0x20, 0x01, 0x28, 0x01, 0x48, 0x57, 0x52, 0x11, 0x46, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x4d, 0x72, 0x62, 0x51, 0x74, 0x79, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x58, 0x52, 0x07, 0x46, 0x4d, 0x72, 0x62, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x59, 0x52, 0x11, 0x46,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x46, 0x51,
	0x74, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x54,
	0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x46, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x46, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x53, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x53, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x46, 0x4c, 0x6f, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x6f, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x46, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x51, 0x74,
	0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d,
	0x69, 0x6e, 0x51, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x44, 0x61, 0x79, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x46, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x51, 0x74,
	0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x46, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x42, 0x49, 0x4c, 0x4c,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x53, 0x45, 0x51, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x44, 0x45,
	0x4d, 0x41, 0x4e, 0x44, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x46, 0x53, 0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x46, 0x42, 0x61, 0x73, 0x65, 0x53, 0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x51, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46,
	0x43, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x46, 0x44, 0x69, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x4d, 0x61,
	0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x4d, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x49, 0x73, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x53, 0x75, 0x6d, 0x51, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x61,
	0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x53, 0x75,
	0x62, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x53,
	0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x45, 0x51, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49,
	0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x46, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64,
	0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x51, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x51, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x51, 0x74, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x4d, 0x72, 0x62, 0x51, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x1f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x20,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb5, 0x12, 0x0a, 0x21,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x14, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x0d, 0x46, 0x50, 0x4f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x50,
	0x4f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d,
	0x46, 0x50, 0x4f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a,
	0x03, 0x46, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x46, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x46, 0x42, 0x69,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0f, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0b, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x46, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f, 0x46, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x11, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11, 0x46, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x0b, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x12,
	0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x10, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x46, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09,
	0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0c, 0x46,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x46, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x10, 0x46, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x10, 0x46, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x46, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0d, 0x46, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x46,
	0x49, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x17,
	0x46, 0x49, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x15, 0x52, 0x0d, 0x46, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x43, 0x54, 0x59, 0x50,
	0x45, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x08, 0x46, 0x41, 0x43, 0x43, 0x54,
	0x59, 0x50, 0x45, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17,
	0x52, 0x0e, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x4d, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0c, 0x46, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x46, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x42, 0x69, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x19, 0x52, 0x0a, 0x46, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x42, 0x69, 0x6c, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64,
	0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0f, 0x46,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x13, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x12, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x46, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x13, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x16, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1d, 0x52, 0x15, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x46,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x10, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0f, 0x46, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x46, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x21, 0x52, 0x0d, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x46, 0x49, 0x44, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x46, 0x49, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x41, 0x43, 0x43, 0x54, 0x59, 0x50, 0x45, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x4d, 0x61, 0x69,
	0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x42, 0x69, 0x6c,
	0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49,
	0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x46, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x70, 0x74,
	0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x46, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x5f, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xd0, 0x03, 0x0a, 0x28, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c,
	0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x73,
	0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x1b, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x46, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08,
	0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x1c, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x59,
	0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x36,
	0x0a, 0x23, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xd7, 0x04, 0x0a, 0x23, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x16, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x14, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x15, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x64,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x22, 0x95, 0x04, 0x0a, 0x16, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x14, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x15, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x77,
	0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x77, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x22, 0x82, 0x05, 0x0a, 0x17, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x14,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x15, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x10, 0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x64, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x0c, 0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77,
	0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x22, 0x30, 0x0a,
	0x1e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x23, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x91, 0x07, 0x0a, 0x22, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x10, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0e, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x52, 0x41, 0x50, 0x50, 0x51, 0x54, 0x59, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4d, 0x52, 0x41, 0x50, 0x50, 0x51, 0x54, 0x59, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x45, 0x4e, 0x49, 0x53, 0x48, 0x51, 0x54, 0x59, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x45, 0x4e, 0x49, 0x53, 0x48,
	0x51, 0x54, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x45, 0x41, 0x50, 0x41, 0x4d, 0x54, 0x51, 0x54,
	0x59, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4b, 0x45, 0x41, 0x50, 0x41, 0x4d, 0x54,
	0x51, 0x54, 0x59, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x52, 0x4a, 0x4f, 0x49, 0x4e, 0x51, 0x54, 0x59,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x52, 0x4a, 0x4f, 0x49, 0x4e, 0x51, 0x54,
	0x59, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x52, 0x51, 0x54, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x4d, 0x52, 0x51, 0x54, 0x59, 0x12, 0x17, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x46, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x52, 0x49, 0x43, 0x45, 0x46,
	0x12, 0x25, 0x0a, 0x0e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x41, 0x54, 0x45, 0x46, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x41, 0x58, 0x4e, 0x45,
	0x54, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x54, 0x41, 0x58, 0x4e, 0x45, 0x54, 0x50, 0x52, 0x49, 0x43, 0x45, 0x46, 0x12, 0x19, 0x0a, 0x08,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x46, 0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x4e, 0x4f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x4e, 0x4f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x44,
	0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0c, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x4d, 0x52, 0x4a, 0x4f, 0x49, 0x4e, 0x51, 0x54,
	0x59, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x4d, 0x52, 0x4a,
	0x4f, 0x49, 0x4e, 0x51, 0x54, 0x59, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x51, 0x54, 0x59, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42,
	0x41, 0x53, 0x45, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x51, 0x54, 0x59, 0x12, 0x21, 0x0a, 0x09,
	0x53, 0x52, 0x43, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x09, 0x53, 0x52, 0x43, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x53, 0x52, 0x43, 0x42, 0x49, 0x4c, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x53, 0x52, 0x43, 0x42, 0x49, 0x4c,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x41,
	0x58, 0x52, 0x41, 0x54, 0x45, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x54, 0x41, 0x58,
	0x52, 0x41, 0x54, 0x45, 0x12, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x5f,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x4e, 0x4f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x44,
	0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x52, 0x43, 0x42,
	0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x52, 0x43, 0x42, 0x49, 0x4c,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x20,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf2, 0x0c, 0x0a, 0x29, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x57, 0x64, 0x74, 0x50,
	0x75, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x46, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x46, 0x46, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x14, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x13,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41,
	0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52,
	0x47, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x53, 0x55,
	0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45,
	0x52, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45,
	0x52, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x0b, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x41, 0x54, 0x45, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0b, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x41, 0x54, 0x45, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x12, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x10, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x11, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x5f, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x10, 0x46,
	0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0e, 0x46,
	0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x46, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52,
	0x03, 0x46, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x57, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x15, 0x57, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x46, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41,
	0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44,
	0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49,
	0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x41, 0x54, 0x45, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x5f, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x46, 0x49, 0x64,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x0c, 0x0a,
	0x1c, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68,
	0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x46, 0x53,
	0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x57,
	0x64, 0x74, 0x50, 0x75, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x46,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x46,
	0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x14, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47,
	0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x13, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x50, 0x55, 0x52,
	0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53,
	0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x53, 0x55, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e, 0x53, 0x55, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x46, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x41, 0x54, 0x45, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x0b, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x41, 0x54, 0x45, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x12, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x10,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x10, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16,
	0x52, 0x0e, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x46, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x17, 0x52, 0x03, 0x46, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x57, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x15, 0x57,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c,
	0x4e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x55, 0x52,
	0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52,
	0x47, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x41,
	0x54, 0x45, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x5a, 0x42, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x46, 0x49, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xe8, 0x0d, 0x0a, 0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d,
	0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53,
	0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x57, 0x64, 0x74, 0x50, 0x75,
	0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x66,
	0x0a, 0x0e, 0x50, 0x55, 0x52, 0x5f, 0x4d, 0x52, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x50, 0x55, 0x52, 0x4d, 0x52, 0x41, 0x50,
	0x50, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x46, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x46, 0x46, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x14, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x13, 0x50,
	0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53,
	0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x11, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47,
	0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x53,
	0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52,
	0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x0b, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x44, 0x41, 0x54, 0x45, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x41, 0x54, 0x45, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x12, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x10, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x5f, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x10, 0x46, 0x5a,
	0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0e, 0x46, 0x5a,
	0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x46, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x03,
	0x46, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77,
	0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17,
	0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52,
	0x15, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50,
	0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45,
	0x4f, 0x52, 0x47, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x49, 0x44, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x41, 0x54, 0x45, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x5a,
	0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x46, 0x49, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77,
	0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x24, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x25, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x46, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x07, 0x46, 0x43, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x51, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x09, 0x46, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x54,
	0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52,
	0x09, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x74, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8a, 0x02,
	0x0a, 0x23, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x46, 0x50, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02,
	0x52, 0x08, 0x46, 0x50, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x46, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0d, 0x46, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x46, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x46, 0x50, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x46, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x46, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x92, 0x0e, 0x0a, 0x1e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x10, 0x46, 0x73, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x53,
	0x75, 0x70, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62,
	0x48, 0x65, 0x61, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x46, 0x73, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x53, 0x75,
	0x70, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0c, 0x46, 0x73, 0x75, 0x62, 0x48, 0x65,
	0x61, 0x64, 0x46, 0x69, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x48,
	0x65, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x46, 0x73, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x63, 0x12, 0x68, 0x0a,
	0x0d, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x62, 0x0a, 0x0b, 0x46, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b,
	0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x46,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x46, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52, 0x0b,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a,
	0x0a, 0x0b, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52, 0x0b, 0x46, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x0b, 0x46, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x05, 0x52, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x46, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x06, 0x52, 0x09,
	0x46, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a,
	0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x07, 0x52, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x46, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0a, 0x52, 0x07, 0x46, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x46, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x5f, 0x48, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x46, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x48,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x49, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0c, 0x52, 0x12, 0x46, 0x49, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x49, 0x73, 0x54,
	0x61, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x06, 0x46, 0x49, 0x73, 0x54,
	0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d,
	0x46, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x46, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0e, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x0f, 0x46, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x50, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x0c, 0x46, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0a, 0x46, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x42, 0x61, 0x73, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x08, 0x46, 0x52, 0x75, 0x6e, 0x42, 0x61, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x46, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x49, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x5f, 0x48, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x49, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x49,
	0x73, 0x54, 0x61, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x46, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x6f, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x42, 0x61, 0x73, 0x65, 0x22,
	0xfc, 0x15, 0x0a, 0x19, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10,
	0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x11, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x12, 0x52, 0x07, 0x61, 0x67, 0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x13, 0x52, 0x08, 0x61, 0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x07, 0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x15, 0x52, 0x06, 0x61, 0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1d, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x1f, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61,
	0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52,
	0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x11, 0x61, 0x67, 0x67,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x26, 0x52, 0x13, 0x61, 0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x28, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x11, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd1,
	0x04, 0x0a, 0x24, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x68,
	0x0a, 0x12, 0x46, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x02, 0x52, 0x12, 0x46, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0d, 0x46, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52, 0x0d, 0x46, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x04, 0x52, 0x0d, 0x46, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x46, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x13, 0x46, 0x41, 0x63, 0x43, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x46, 0x41, 0x63,
	0x43, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x49, 0x73, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0e, 0x46, 0x49, 0x73, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x6f, 0x6b,
	0x53, 0x74, 0x64, 0x43, 0x75, 0x72, 0x72, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x46, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x49, 0x73, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x28, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52,
	0x08, 0x46, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b,
	0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52, 0x0b, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x46, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x04, 0x52, 0x09, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x20, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x8c, 0x06, 0x0a, 0x25, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x53, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x42, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x53, 0x42,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x53, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x03, 0x53, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x4f, 0x6c,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0e, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x4f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x74, 0x79, 0x4f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0f,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x4f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46,
	0x4c, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x46, 0x4c, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x4c, 0x6e, 0x6b, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x46, 0x4c,
	0x6e, 0x6b, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46,
	0x4c, 0x6e, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0e, 0x52, 0x0a, 0x46, 0x4c, 0x6e, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x42, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x53, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x4f, 0x6c, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79,
	0x4f, 0x6c, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x4c, 0x6e, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x4c, 0x6e, 0x6b, 0x53,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x4c, 0x6e, 0x6b, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9c, 0x2b, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x46, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x46, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x46, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x46, 0x41,
	0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07,
	0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x41,
	0x63, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x0e, 0x46, 0x41, 0x63, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x50, 0x72, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x10, 0x46, 0x50, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x55, 0x50,
	0x44, 0x45, 0x4c, 0x51, 0x54, 0x59, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0a,
	0x46, 0x53, 0x55, 0x50, 0x44, 0x45, 0x4c, 0x51, 0x54, 0x59, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46,
	0x4c, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x04, 0x46, 0x4c, 0x6f,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x46,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x46, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x46, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x0d, 0x46, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x46, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x47,
	0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52,
	0x09, 0x46, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10, 0x46, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x46, 0x43, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x13, 0x46,
	0x43, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x06, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0d, 0x46, 0x45, 0x78,
	0x74, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0e, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78,
	0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x0a, 0x46, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x11, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x11, 0x46, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x0f, 0x46,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0e, 0x46, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x14, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x14,
	0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d,
	0x52, 0x0d, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74,
	0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x0b, 0x46, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52,
	0x0a, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x51,
	0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x10, 0x46, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x0e, 0x46, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x69, 0x74, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0d, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x43, 0x61, 0x72, 0x64,
	0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52,
	0x0c, 0x46, 0x43, 0x61, 0x72, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x43, 0x61, 0x72, 0x64, 0x51, 0x74, 0x79, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x24, 0x52, 0x08, 0x46, 0x43, 0x61, 0x72, 0x64, 0x51, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74,
	0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x25, 0x52, 0x0c, 0x46, 0x43, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x43,
	0x61, 0x72, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x26, 0x52, 0x10, 0x46, 0x43, 0x61, 0x72, 0x64, 0x4a, 0x6f, 0x69,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x27, 0x52, 0x0d, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x51, 0x74, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x09, 0x46, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x10, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x46, 0x49,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2a, 0x52, 0x15, 0x46, 0x49, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x51, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x0c, 0x46,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c,
	0x52, 0x06, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x6f, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2d, 0x52, 0x0c, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x6f,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0b, 0x46, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46,
	0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2f, 0x52, 0x0b, 0x46, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0c, 0x46, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4d, 0x61, 0x78, 0x51, 0x74, 0x79, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4d,
	0x61, 0x78, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x32, 0x52, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x48, 0x33, 0x52, 0x0d,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x0f, 0x46, 0x54, 0x61,
	0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x48, 0x35, 0x52, 0x0d, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x48, 0x36, 0x52, 0x06, 0x46, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x54, 0x61, 0x78, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x48, 0x37, 0x52, 0x09, 0x46, 0x54,
	0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53,
	0x72, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38,
	0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x39, 0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x46, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x3a, 0x52, 0x11, 0x46, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x72, 0x61, 0x70, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x50, 0x72, 0x6f, 0x63,
	0x53, 0x63, 0x72, 0x61, 0x70, 0x51, 0x74, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3b,
	0x52, 0x0d, 0x46, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x72, 0x61, 0x70, 0x51, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x46, 0x4d, 0x74, 0x72, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3c, 0x52,
	0x11, 0x46, 0x4d, 0x74, 0x72, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4d, 0x74, 0x72, 0x6c, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x51, 0x74, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0d,
	0x46, 0x4d, 0x74, 0x72, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3e, 0x52, 0x12,
	0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3f, 0x52,
	0x0e, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x48, 0x40,
	0x52, 0x12, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x41, 0x52, 0x0e, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x42, 0x52, 0x16, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52,
	0x12, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x44, 0x52,
	0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45, 0x52, 0x0f, 0x46, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x0c, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x48, 0x47, 0x52, 0x09,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x48, 0x52, 0x0d, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x41, 0x63, 0x74, 0x6c,
	0x61, 0x6e, 0x64, 0x51, 0x74, 0x79, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x0b,
	0x46, 0x41, 0x63, 0x74, 0x6c, 0x61, 0x6e, 0x64, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x51, 0x74,
	0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a, 0x52, 0x0f, 0x46, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x10, 0x46, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x4c, 0x52, 0x0c, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x4d, 0x52, 0x0e, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x4e, 0x52, 0x18, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x43, 0x52, 0x41, 0x54,
	0x45, 0x18, 0x50, 0x20, 0x01, 0x28, 0x01, 0x48, 0x4f, 0x52, 0x08, 0x46, 0x41, 0x43, 0x43, 0x52,
	0x41, 0x54, 0x45, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x46, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x01, 0x48, 0x50, 0x52, 0x16, 0x46, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x46, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x01, 0x48, 0x51, 0x52, 0x1a, 0x46, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x52, 0x52, 0x12, 0x46, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x46, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x48, 0x53, 0x52, 0x13, 0x46, 0x53,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42,
	0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x54, 0x52, 0x0d, 0x46,
	0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x45,
	0x51, 0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x48, 0x55, 0x52, 0x0e, 0x46, 0x53, 0x55, 0x42, 0x52,
	0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x45, 0x51, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x18, 0x57,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x0e, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x12, 0x46, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x18,
	0x58, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x46, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x46, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x41, 0x63, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46,
	0x50, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x55, 0x50, 0x44, 0x45, 0x4c, 0x51, 0x54, 0x59, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x46, 0x4c, 0x6f, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x46, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x46, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x46, 0x43, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x4d, 0x74,
	0x6f, 0x4e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75,
	0x78, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74,
	0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x51, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x69, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x61,
	0x72, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x43,
	0x61, 0x72, 0x64, 0x51, 0x74, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x43, 0x61, 0x72,
	0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74,
	0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x46, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x6f, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x41, 0x75,
	0x78, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4d, 0x61, 0x78, 0x51, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x72, 0x61, 0x70, 0x42, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x51, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x4d, 0x74, 0x72, 0x6c,
	0x53, 0x63, 0x72, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x46, 0x4d, 0x74, 0x72, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x51, 0x74, 0x79, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x51,
	0x74, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x46, 0x43, 0x73, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x46, 0x41, 0x63, 0x74, 0x6c, 0x61, 0x6e, 0x64, 0x51, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x51, 0x74, 0x79, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69,
	0x44, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x46, 0x41, 0x6c,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x41, 0x43, 0x43, 0x52, 0x41,
	0x54, 0x45, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x46, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x46, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x46, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x4e, 0x4f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x45, 0x51,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x55, 0x42, 0x52, 0x45, 0x51, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x49, 0x44, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x10, 0x0a, 0x1f, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x46, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x46, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0d, 0x46, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x15, 0x0a, 0x03, 0x46, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x46, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x46, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a,
	0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x46,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0e, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x46,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x46, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0c, 0x46, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x10, 0x46, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x50, 0x75, 0x72, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x46, 0x50,
	0x75, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x50,
	0x75, 0x72, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0a, 0x46, 0x50, 0x75, 0x72, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x46, 0x50, 0x75, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x46, 0x50, 0x75, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0c,
	0x46, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x09, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0e,
	0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x09, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x09, 0x46, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x17, 0x52, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0c, 0x46, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x0c, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x49, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x0d, 0x46, 0x49,
	0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x46, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x1c, 0x52, 0x09, 0x46, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6f, 0x78, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x08, 0x46, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6f, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e,
	0x52, 0x12, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x49, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x51, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1f, 0x52,
	0x0c, 0x46, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x43, 0x54, 0x59, 0x50, 0x45, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x20, 0x52, 0x08, 0x46, 0x41, 0x43, 0x43, 0x54, 0x59, 0x50, 0x45, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x4d, 0x61, 0x69,
	0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0c, 0x46, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x14, 0x46, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x46, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70,
	0x74, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x46, 0x50, 0x75, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x50,
	0x75, 0x72, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x50, 0x75,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x4e,
	0x6f, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x49, 0x73,
	0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46,
	0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x53, 0x63,
	0x61, 0x6e, 0x42, 0x6f, 0x78, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x46, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x74, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x46, 0x41, 0x43, 0x43, 0x54, 0x59, 0x50, 0x45, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x22, 0xbf, 0x05, 0x0a, 0x26,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72,
	0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x57, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x57, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfd, 0x04,
	0x0a, 0x19, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72,
	0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x57, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x57, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x06,
	0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x57, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x01, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x57, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x4e, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x10, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x57, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0f, 0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x57,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x57, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x34, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x8b, 0x0a, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x46, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46,
	0x53, 0x41, 0x4c, 0x55, 0x4e, 0x49, 0x54, 0x51, 0x54, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x03, 0x52, 0x0b, 0x46, 0x53, 0x41, 0x4c, 0x55, 0x4e, 0x49, 0x54, 0x51, 0x54, 0x59, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53, 0x41, 0x4c, 0x42, 0x41, 0x53, 0x45, 0x51,
	0x54, 0x59, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0b, 0x46, 0x53, 0x41, 0x4c,
	0x42, 0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x06, 0x52, 0x0d, 0x46, 0x50, 0x52, 0x49, 0x43, 0x45, 0x42, 0x41, 0x53, 0x45, 0x51,
	0x54, 0x59, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a,
	0x4f, 0x49, 0x4e, 0x51, 0x54, 0x59, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d,
	0x46, 0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a, 0x4f, 0x49, 0x4e, 0x51, 0x54, 0x59, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d,
	0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x46, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0b, 0x52, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x4f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c,
	0x52, 0x0e, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x07, 0x46, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x6e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f,
	0x52, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x18, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x41, 0x4c, 0x55, 0x4e, 0x49, 0x54, 0x51, 0x54, 0x59,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x53, 0x41, 0x4c, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x46, 0x50, 0x52, 0x49, 0x43, 0x45, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a, 0x4f, 0x49, 0x4e, 0x51, 0x54,
	0x59, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x49,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x6e, 0x6f, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe3, 0x07, 0x0a, 0x1f, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x48,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x07,
	0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x46,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x42, 0x69,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x53, 0x61, 0x6c,
	0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x53,
	0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x50, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x50, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x44,
	0x65, 0x70, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x53, 0x61,
	0x6c, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4d, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0a, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05,
	0x46, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0d, 0x46, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x41, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x46, 0x41, 0x52, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x58, 0x53, 0x42, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x46,
	0x58, 0x53, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x46, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x06, 0x46, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53,
	0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x5a, 0x42,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x4e, 0x6f,
	0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x6f, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x41, 0x52, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x58, 0x53, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x22, 0x90, 0x12,
	0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x57, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x67, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x11, 0x73, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x67,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x12, 0x52, 0x07, 0x61, 0x67, 0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x13, 0x52, 0x08, 0x61, 0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x14, 0x52, 0x07, 0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x15, 0x52, 0x06, 0x61, 0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1c, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x1d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e,
	0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x1f, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x13, 0x61, 0x67, 0x67, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52,
	0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65,
	0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22, 0x89, 0x03, 0x0a,
	0x27, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x23, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x88, 0x04, 0x0a, 0x23, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c,
	0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x09, 0x46, 0x54, 0x61,
	0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46,
	0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x54, 0x61, 0x78,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x20, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x04, 0x0a, 0x22, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x5a, 0x0a, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x46, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53,
	0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x52, 0x65, 0x74, 0x63, 0x75,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x46, 0x52,
	0x65, 0x74, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x72, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x48,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x04, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x58, 0x53, 0x42, 0x69,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b,
	0x46, 0x58, 0x53, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x46, 0x52, 0x65, 0x74, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x58, 0x53, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf8,
	0x0e, 0x0a, 0x29, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2f, 0x0a,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10,
	0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0b, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0c, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x46,
	0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x61,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61,
	0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a,
	0x52, 0x07, 0x61, 0x67, 0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1b, 0x52, 0x08, 0x61, 0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1c, 0x52, 0x07, 0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1d, 0x52, 0x06, 0x61, 0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x22, 0xb6, 0x0e, 0x0a, 0x1c, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x67,
	0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53,
	0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14,
	0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x11, 0x61, 0x67,
	0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11,
	0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x18, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x19, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x07, 0x61, 0x67, 0x67, 0x59, 0x65,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x08, 0x61, 0x67, 0x67, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x07, 0x61, 0x67, 0x67,
	0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x06, 0x61, 0x67, 0x67, 0x44,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53,
	0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64,
	0x61, 0x79, 0x22, 0xf8, 0x0f, 0x0a, 0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x5a, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x01, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f,
	0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x61, 0x67,
	0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10, 0x61,
	0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x46, 0x53,
	0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67,
	0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61,
	0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0a, 0x61, 0x67,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67,
	0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52,
	0x15, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x07, 0x61,
	0x67, 0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x67,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x08,
	0x61, 0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61,
	0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x06,
	0x61, 0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x72, 0x63,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x22, 0x36, 0x0a,
	0x24, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8c, 0x03, 0x0a, 0x2a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x46, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x1b, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x01, 0x52, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x18, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x22, 0x2f, 0x0a, 0x19, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x15, 0x0a, 0x24,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x46,
	0x43, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x46, 0x43, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x03, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x04,
	0x52, 0x0a, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x52, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x05, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x51, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x04, 0x46, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x11,
	0x46, 0x5f, 0x4d, 0x44, 0x4e, 0x4b, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x71, 0x74,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x46, 0x4d, 0x44, 0x4e, 0x4b, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x51, 0x74, 0x72, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x07, 0x52, 0x0b, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x08, 0x52, 0x08, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x09, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x04, 0x46, 0x4c, 0x6f,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0a, 0x52, 0x04,
	0x46, 0x4c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0f, 0x46, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0b, 0x52, 0x0f, 0x46, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x46,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x0c, 0x52, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x06, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0d, 0x52, 0x06, 0x46, 0x42, 0x6f, 0x6d, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x46, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0e, 0x52, 0x09, 0x46,
	0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x46,
	0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x0f, 0x52, 0x09, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0d, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x10, 0x52, 0x0d, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x11, 0x52, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x46, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x12, 0x52, 0x10, 0x46, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0e, 0x46, 0x53, 0x72, 0x63, 0x42,
	0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x0a, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0a, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x46, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x17, 0x52, 0x0c, 0x46, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x0f, 0x46, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x06, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x1e, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1f, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x11, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52,
	0x0d, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x23, 0x52, 0x0d, 0x46, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52, 0x0e, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55,
	0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x46, 0x43, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x46, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x46, 0x51, 0x74,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x49, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x46, 0x4c, 0x6f, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x42, 0x6f,
	0x6d, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45, 0x78, 0x74, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53,
	0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x46, 0x53, 0x72, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x46, 0x4d, 0x74, 0x6f, 0x4e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x45, 0x78,
	0x74, 0x41, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x21,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x0c,
	0x0a, 0x22, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x15, 0x0a, 0x03, 0x46, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x03, 0x46, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52,
	0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x58, 0x0a, 0x0a, 0x46, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x0a, 0x46, 0x50, 0x69, 0x63,
	0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x46, 0x43, 0x75,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x05, 0x52, 0x07, 0x46, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x07, 0x46, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x06, 0x52, 0x07, 0x46, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x54, 0x0a, 0x09, 0x46, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x46, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x07, 0x52, 0x09, 0x46, 0x50, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x08, 0x52, 0x0a, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x62, 0x0a, 0x0f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x09, 0x52, 0x0f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x0a, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0b, 0x52,
	0x0b, 0x46, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x53,
	0x63, 0x61, 0x6e, 0x42, 0x6f, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08,
	0x46, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6f, 0x78, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46,
	0x51, 0x54, 0x43, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x0a, 0x46, 0x51, 0x54, 0x43, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x08, 0x46, 0x42, 0x69, 0x7a, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x12, 0x52, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x51, 0x54, 0x42, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0b, 0x46,
	0x51, 0x54, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x46, 0x49,
	0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x46, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x50, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6f,
	0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x51, 0x54, 0x43, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x46, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x46, 0x51, 0x54, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x13,
	0x0a, 0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x56, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x67,
	0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x61, 0x67,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x07,
	0x61, 0x67, 0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67,
	0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52,
	0x08, 0x61, 0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13,
	0x52, 0x07, 0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52,
	0x06, 0x61, 0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1a, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1b, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x1d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61,
	0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x20, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15,
	0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x13, 0x61,
	0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52,
	0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a,
	0x19, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x22, 0x30, 0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x18, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x0d, 0x0a, 0x20, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d,
	0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x61,
	0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f,
	0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61, 0x67, 0x67,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x10, 0x61, 0x67,
	0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x12, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61,
	0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15,
	0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x13, 0x61,
	0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0xf6, 0x0c, 0x0a, 0x13, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x61,
	0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x11,
	0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52,
	0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x13, 0x61, 0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61,
	0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x19, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xe3, 0x0d, 0x0a, 0x14, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x61, 0x67,
	0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x10, 0x61, 0x67, 0x67,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x14, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x15, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x17, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61,
	0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x13, 0x61, 0x67,
	0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0x2d, 0x0a, 0x1b, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1,
	0x01, 0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x20, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xab, 0x06, 0x0a, 0x1c, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x57, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x57, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x57, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x57,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0f, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x57, 0x64,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0d, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x4f, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x4e,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x64, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x57,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f,
	0x75, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0x7a, 0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x12,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3a,
	0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8a, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x22, 0x54, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xff, 0x06, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f,
	0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x07, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xbb, 0x07, 0x0a, 0x20, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52,
	0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x05, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b,
	0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x22, 0xf9, 0x06, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x93, 0x08,
	0x0a, 0x14, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x11, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x12, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb4, 0x07, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52,
	0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0f, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x1f, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x20,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0x44, 0x0a, 0x22, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x23, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0x4a, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x64, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x22, 0x5f, 0x0a,
	0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56,
	0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x22, 0x63, 0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b,
	0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x23, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x69,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x22, 0x60, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x20,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x21, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0x5a, 0x0a, 0x1f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5c,
	0x0a, 0x20, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a,
	0x1d, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x22, 0x5a, 0x0a, 0x1e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9f, 0x01, 0x0a, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x2f, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa3, 0x01, 0x0a, 0x32, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x33, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x01, 0x0a, 0x27, 0x52, 0x75, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67,
	0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x64, 0x0a, 0x28, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50,
	0x75, 0x73, 0x68, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x2c, 0x52, 0x75, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x77, 0x61, 0x70, 0x53, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x2d, 0x52, 0x75, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x77, 0x61, 0x70, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a, 0x28, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x65, 0x0a, 0x29, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x03, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x22, 0x53, 0x0a,
	0x17, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xe9, 0x02, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x22, 0x51,
	0x0a, 0x15, 0x52, 0x75, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xbf, 0x16, 0x0a, 0x2d, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x46,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52, 0x07,
	0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x53,
	0x72, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x0b, 0x46, 0x53, 0x72, 0x63, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x44, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x05, 0x52, 0x0c, 0x46, 0x44, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x11, 0x46, 0x53, 0x72, 0x63, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x06, 0x52, 0x11, 0x46, 0x53, 0x72, 0x63, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x12,
	0x46, 0x44, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x07, 0x52,
	0x12, 0x46, 0x44, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0d, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x09, 0x52, 0x0b, 0x46,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a,
	0x09, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0a, 0x52, 0x09, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0b, 0x52, 0x08,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46,
	0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0c, 0x52, 0x0c, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x0d, 0x52, 0x0b, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0f, 0x46, 0x44, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x0e, 0x52, 0x0f, 0x46, 0x44, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x53, 0x61,
	0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x0f, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x10, 0x52, 0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x51, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x11, 0x52, 0x04, 0x46, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x46, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12,
	0x52, 0x08, 0x46, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x13, 0x52, 0x08, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x09, 0x46, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x16, 0x52, 0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1d, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x10, 0x73, 0x75, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x53, 0x72, 0x63, 0x54, 0x69, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x08, 0x46, 0x52,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x4b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x22, 0x52, 0x0d, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0c, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x10, 0x46, 0x4b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0f, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x46, 0x44, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x46, 0x53, 0x72, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x44, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x46, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x46, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46,
	0x44, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x46, 0x51, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x42, 0x61,
	0x73, 0x65, 0x51, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x51,
	0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x74, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46,
	0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x4b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46,
	0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75,
	0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x2b, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdc, 0x09, 0x0a, 0x2c, 0x53, 0x65,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x46, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x03,
	0x46, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x03, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x04, 0x52, 0x10, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0e, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x05, 0x52, 0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0f, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x06, 0x52, 0x0f, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5a,
	0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x07, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x08, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0a, 0x46, 0x42, 0x69, 0x6c,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x46, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x08, 0x46, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x46, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x13, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74,
	0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x13,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x46, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46,
	0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x22, 0x98, 0x16, 0x0a, 0x27, 0x53, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67,
	0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x61, 0x67, 0x67, 0x50,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x5f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0d,
	0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09, 0x61, 0x67,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x07,
	0x61, 0x67, 0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67,
	0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52,
	0x08, 0x61, 0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15,
	0x52, 0x07, 0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52,
	0x06, 0x61, 0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1b, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1d, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x61, 0x67,
	0x67, 0x53, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1f, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x0d,
	0x61, 0x67, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21,
	0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x22, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x25, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15,
	0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x13, 0x61,
	0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a,
	0x52, 0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2c, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65,
	0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x67, 0x67, 0x57, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x57,
	0x61, 0x69, 0x74, 0x50, 0x75, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x75, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50,
	0x75, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x70, 0x4b, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x22, 0x5c, 0x0a, 0x20, 0x53, 0x74, 0x6f,
	0x70, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x40, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0xc8, 0x0d, 0x0a, 0x24, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52, 0x0b,
	0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x54,
	0x0a, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x08, 0x46,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x46, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x05, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c,
	0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x42, 0x61,
	0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x0b, 0x46,
	0x53, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x41, 0x52, 0x4e,
	0x4f, 0x54, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0a, 0x52, 0x0d, 0x46, 0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x07,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x10, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10, 0x73, 0x75, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x11, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x11, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x53,
	0x72, 0x63, 0x54, 0x69, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x16, 0x52, 0x08, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x4f, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x0b,
	0x46, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f, 0x72,
	0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1a, 0x52, 0x0e, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x49,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x07, 0x46,
	0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x74, 0x51, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74,
	0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a, 0x6f,
	0x69, 0x6e, 0x51, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46,
	0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46,
	0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x22, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xd5, 0x0e, 0x0a, 0x23, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x46, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x46, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x03, 0x46,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x03, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x58, 0x0a, 0x0a, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x0a, 0x46, 0x5a,
	0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46,
	0x58, 0x53, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x05, 0x52, 0x0b, 0x46, 0x58, 0x53, 0x42, 0x69, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x06, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x07,
	0x52, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5a, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x08, 0x52, 0x0b, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x46,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x09, 0x52, 0x09, 0x46, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0a, 0x52,
	0x0b, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x56, 0x0a, 0x09, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0b, 0x52, 0x09, 0x46, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0c,
	0x52, 0x08, 0x46, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a,
	0x0b, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0d, 0x52, 0x0b, 0x46, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x46, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0e, 0x52, 0x10, 0x46, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x06, 0x46, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x0f, 0x52, 0x06, 0x46, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x5b, 0x0a, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x63,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x10, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x10, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x46, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x5a, 0x42, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x58, 0x53, 0x42, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x65,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x22, 0x86, 0x16, 0x0a, 0x1e, 0x53, 0x77,
	0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x11, 0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09, 0x61, 0x67, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x07, 0x61,
	0x67, 0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x67,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x08,
	0x61, 0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61,
	0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x06,
	0x61, 0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x18, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x09,
	0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1b, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1c, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1d, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x53, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1f, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52,
	0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x24, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x25, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61,
	0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x13, 0x61, 0x67,
	0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x0f,
	0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52,
	0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x96, 0x0c, 0x0a, 0x27, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x02, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x04, 0x52, 0x0b, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x05, 0x52, 0x08, 0x46, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x06,
	0x52, 0x08, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a,
	0x0e, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x07, 0x52, 0x0e, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x08, 0x52, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x09, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x10, 0x73, 0x75, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x53, 0x72, 0x63, 0x54, 0x69, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x49, 0x73, 0x46,
	0x72, 0x65, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x07, 0x46, 0x49, 0x73,
	0x46, 0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52,
	0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0d, 0x46, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x52,
	0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x54, 0x61, 0x78, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x46, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x25,
	0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x0b, 0x0a, 0x26, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x46, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x03, 0x46, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x03, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0d, 0x46, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x0d, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x46, 0x53, 0x61, 0x6c,
	0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x05, 0x52, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x06, 0x52, 0x10, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x07, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x08, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x09, 0x52, 0x0a, 0x46,
	0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x06,
	0x46, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x0a, 0x52, 0x06, 0x46, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x5e,
	0x0a, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x63,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x0b, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x48, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x46, 0x48, 0x65, 0x61, 0x64, 0x4e,
	0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x52, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x46, 0x52, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x46, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46,
	0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x50,
	0x72, 0x6f, 0x70, 0x32, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x48, 0x65, 0x61, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x46, 0x52, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x22, 0x8c, 0x16, 0x0a, 0x21, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11,
	0x61, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x07, 0x61, 0x67,
	0x67, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x08, 0x61,
	0x67, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x07,
	0x61, 0x67, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x67,
	0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x06, 0x61,
	0x67, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x17, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x18, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61,
	0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1c, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d,
	0x52, 0x0c, 0x61, 0x67, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67,
	0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1f, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x11,
	0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x24, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x25, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x26, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x67,
	0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x13, 0x61, 0x67, 0x67,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x0d,
	0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x0f, 0x61,
	0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x0f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x63, 0x0a, 0x1b, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x64,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x60, 0x0a, 0x1a, 0x53, 0x79, 0x6e, 0x63,
	0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x1b, 0x53, 0x79,
	0x6e, 0x63, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x18, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x04, 0x0a, 0x20, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6d, 0x73, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xcf, 0x03,
	0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22,
	0x86, 0x04, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73,
	0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfd, 0x03, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x2a, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9, 0x04,
	0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x72,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b,
	0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xf7, 0x03, 0x0a, 0x11, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x22, 0xab, 0x05, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x22, 0x2b, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb2,
	0x04, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x22, 0xe6, 0x01, 0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41,
	0x67, 0x67, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70,
	0x72, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x58, 0x0a, 0x1c,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x1f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x41, 0x67, 0x67, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x22, 0x5c, 0x0a, 0x20, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x1d, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x22, 0x5a, 0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x1c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41,
	0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x6f, 0x22, 0x59, 0x0a, 0x1d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41,
	0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x6c, 0x0a, 0x1a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x22, 0x57, 0x0a,
	0x1b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x1c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x1d, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x23, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f,
	0x22, 0x68, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x56, 0x0a, 0x20, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67,
	0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x5c, 0x0a, 0x20, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x22, 0x5b, 0x0a, 0x1f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01,
	0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x64,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x58, 0x0a, 0x1c, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x55, 0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x1f, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x69, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x1d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x1f,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x1a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x03, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x4d, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x4b, 0x55, 0x4f,
	0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x4b, 0x55, 0x4f,
	0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x84, 0x04,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a,
	0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x55, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x0e,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x73, 0x72, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x31, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01,
	0x0a, 0x35, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a,
	0x2c, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x2f, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x11,
	0x57, 0x64, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x1e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x8a, 0x10, 0x0a, 0x1f, 0x57, 0x64, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x07, 0x52, 0x03, 0x74, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x08,
	0x74, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0a, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52,
	0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x16, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x19, 0x52, 0x09, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x77, 0x61, 0x69,
	0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x1b, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e,
	0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x1f, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x61,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x07,
	0x6c, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52, 0x06, 0x73,
	0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x27, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x61, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x74, 0x61, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x57, 0x64,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc4, 0x16, 0x0a, 0x24, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x11, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x12, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0e, 0x74,
	0x61, 0x78, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x15, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x09, 0x77, 0x6d, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52, 0x06, 0x66, 0x6c,
	0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x48, 0x25, 0x52, 0x11, 0x66,
	0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0b, 0x66, 0x61, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27,
	0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x28, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x06, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2b, 0x52, 0x10,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x2d, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x31, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52,
	0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x66, 0x61, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x16, 0x0a, 0x17, 0x57, 0x64, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x10, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x13, 0x52, 0x0e, 0x74, 0x61, 0x78, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0a, 0x77, 0x6d, 0x73,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e,
	0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1f, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x22, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x23, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52,
	0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x25, 0x52, 0x11, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26,
	0x52, 0x0b, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x06, 0x74, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2a, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x2b, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x2c, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x09, 0x6e, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x11, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x31, 0x52, 0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e,
	0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x61, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x31, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xdb, 0x17,
	0x0a, 0x18, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0f, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x11, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52,
	0x0e, 0x74, 0x61, 0x78, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x15, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x16, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x17, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1b, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1d, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x09, 0x77,
	0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x20, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x06,
	0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x25, 0x52, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x26, 0x52,
	0x11, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0b, 0x66,
	0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x28, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2a, 0x52, 0x06, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52,
	0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2c,
	0x52, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x0c,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x32, 0x52, 0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x66, 0x61, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x1f, 0x57,
	0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x3e, 0x0a, 0x1f, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x22,
	0xa5, 0x0a, 0x0a, 0x1f, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52,
	0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x75, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x13, 0x52, 0x03, 0x74, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x14, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x15, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x17, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x18, 0x52, 0x08, 0x74, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x57, 0x64, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01,
	0x0a, 0x1d, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x03, 0x0a, 0x22, 0x57, 0x64, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x87,
	0x13, 0x0a, 0x25, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x09, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0a, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0b, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e,
	0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x16, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1a, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e,
	0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x0f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x09, 0x6e, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0a, 0x77,
	0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x28, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66,
	0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x12, 0x0a, 0x18, 0x57, 0x64, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4f,
	0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x17, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1f, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22,
	0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x23, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x25, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2a, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x2b, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xd0, 0x14, 0x0a, 0x19, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x5d, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x73, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x13, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x18, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1e, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x05,
	0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x20, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x21, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x23, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x24, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x27, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2c, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x20, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x73, 0x0a, 0x13, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x0f, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x75, 0x0a, 0x14, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x57, 0x64, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x22, 0x8a, 0x12, 0x0a, 0x1d, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6f, 0x72, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x75, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x08, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0f, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x13, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x08, 0x74, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x03, 0x74, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x17, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x6e, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x20, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x21, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x24, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x25, 0x52, 0x13, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x78,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb1, 0x01, 0x0a, 0x1a, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x18, 0x0a, 0x17, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x0c,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0e, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x11, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x07, 0x70, 0x6f, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x08, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x15, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x17, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c,
	0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x20, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74,
	0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0f, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24,
	0x52, 0x09, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x25, 0x52, 0x09, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x28, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x10,
	0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x22, 0x38, 0x0a, 0x25, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x22, 0xc3, 0x13, 0x0a, 0x25, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x10, 0x73,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x08,
	0x73, 0x72, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b,
	0x52, 0x08, 0x74, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d,
	0x52, 0x03, 0x74, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52,
	0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0a,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x14, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x20, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x24, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x27, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2a,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x2b, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2c, 0x52,
	0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2d, 0x52, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2e, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f,
	0x52, 0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d,
	0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x22, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x23, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x19, 0x0a,
	0x2b, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x6b, 0x64, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0a, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x6b, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10,
	0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6b, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0b, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x73, 0x72,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x07, 0x70, 0x6f,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x08, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x19, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0a, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x21, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0b,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x24, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26,
	0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x27, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2b, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x30, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x0f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32, 0x52, 0x0e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x36, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x37, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x64, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdd,
	0x18, 0x0a, 0x1e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x6b, 0x64, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0a, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x6b, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10,
	0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6b, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0b, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x73, 0x72,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x07, 0x70, 0x6f,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x08, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x19, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0a, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x21, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0b,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x24, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26,
	0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x27, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2b, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x30, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x0f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32, 0x52, 0x0e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x36, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x37, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x64, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe3,
	0x1b, 0x0a, 0x1f, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11,
	0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0f, 0x6b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6b, 0x64, 0x42,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x0e,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x11, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x16, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x17, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22,
	0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x25, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x27, 0x52, 0x09, 0x77,
	0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77,
	0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x28, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x2a, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d,
	0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f,
	0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x32, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52,
	0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x15,
	0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x39, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3a, 0x52, 0x0d, 0x77, 0x6d, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6b,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x6d, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x26, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22,
	0xee, 0x13, 0x0a, 0x25, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x08, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x75, 0x6d, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x04, 0x6e, 0x75, 0x6d,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0d, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0f, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10,
	0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x08, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x17, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1a, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x08, 0x73, 0x72, 0x63,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x08, 0x74,
	0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1f,
	0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x03, 0x74,
	0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x24, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2a, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x74, 0x61, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xaf, 0x18, 0x0a, 0x1f, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x15,
	0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0b, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x10, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x11, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x11, 0x70,
	0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x0f, 0x6b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x10, 0x77, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6b, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x0b, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x19, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x22, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x27, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2a, 0x52, 0x09, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x2b, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2c, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2d, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x32, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x34, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x69,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x27, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x22, 0xcb,
	0x0f, 0x0a, 0x26, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0b, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x19, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1a, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x1c, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1f, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x7a,
	0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22,
	0x52, 0x0a, 0x69, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x23, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xcd, 0x0f, 0x0a,
	0x27, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0b, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x19, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1a, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x1c, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1f, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x7a,
	0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22,
	0x52, 0x0a, 0x69, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x23, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xbb, 0x01, 0x0a,
	0x24, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x25, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x32, 0x0a, 0x2d, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6b, 0x64,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6b, 0x64, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x6b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x77, 0x64, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6b, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0c, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x10, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11,
	0x52, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x12, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x15, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x7a, 0x69, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1f, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x21, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x08, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x26, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x70,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0c, 0x70, 0x72, 0x41, 0x70, 0x69, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b,
	0x52, 0x13, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x2d, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52,
	0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x30, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32,
	0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x34, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x36, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x37, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x65, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x38, 0x52, 0x0b, 0x65, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d,
	0x64, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x06,
	0x6d, 0x64, 0x35, 0x53, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x61, 0x77,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x3c, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x3f, 0x52, 0x0d, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x48, 0x41, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x01, 0x48, 0x42, 0x52, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x48, 0x43, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x63, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x48, 0x44, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x45, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x01, 0x48, 0x46, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x48, 0x47, 0x52, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x48, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4b, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x4c, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x4d, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4e, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4f, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x50, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x48, 0x51, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x69, 0x63,
	0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x48, 0x52, 0x52,
	0x09, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x53, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x48, 0x54, 0x52, 0x09, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x55, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05, 0x48, 0x57, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x58, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x59, 0x52,
	0x13, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x5c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5a, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x70, 0x6f, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5b, 0x52, 0x0f, 0x70, 0x6f, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x5c, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x5f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x48, 0x60, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x48, 0x61, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x62, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x63,
	0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x64, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65, 0x52, 0x0c,
	0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x66, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x67, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x68,
	0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x69, 0x52, 0x0b, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0c, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x6c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x64,
	0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x65, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x04, 0x0a, 0x28, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x8b, 0x04, 0x0a, 0x29, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc0, 0x31, 0x0a, 0x20, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11,
	0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6b, 0x64, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6b, 0x64, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x6b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x64,
	0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x77, 0x64, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0c, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x10, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x10,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52,
	0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x15, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x1a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1b, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a,
	0x69, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1f, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52,
	0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x08, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x70, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x29, 0x52, 0x0c, 0x70, 0x72, 0x41, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x13,
	0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2d, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x2e, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x30, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x36,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x48, 0x37, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x65, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x38, 0x52, 0x0b, 0x65, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x64, 0x35,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x06, 0x6d, 0x64,
	0x35, 0x53, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x3c, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x3e, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3f, 0x52,
	0x0d, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x41, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x42, 0x52, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x01, 0x48, 0x43, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x63, 0x50, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x48, 0x44, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61,
	0x6c, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x45, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x01, 0x48, 0x46, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x48, 0x47, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x48, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4b, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4c,
	0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x4d, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x4e, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4f, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x50, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x48, 0x51, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x48, 0x52, 0x52, 0x09, 0x70,
	0x69, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x53, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x48, 0x54, 0x52, 0x09, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x48, 0x55,
	0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x05, 0x48, 0x57, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x58, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x59, 0x52, 0x13, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c,
	0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x5a, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x70, 0x6f, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5b, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x5c, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x5d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x5f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x60, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x5f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x05, 0x48, 0x60, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x48, 0x61, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x62, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x63, 0x52, 0x0a,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x64, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65, 0x52, 0x0c, 0x65, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x66, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x67, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48, 0x68, 0x52, 0x0e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x69, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0c, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x64, 0x74, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e,
	0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x71, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c,
	0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd3, 0x32, 0x0a, 0x21, 0x57, 0x64, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x15, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a,
	0x6b, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x08, 0x6b, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x6b, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x6b,
	0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x11, 0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x73, 0x72,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x12, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52,
	0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14,
	0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x17, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1f, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x7a, 0x69, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23,
	0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x08, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x70, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0c, 0x70, 0x72, 0x41, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52,
	0x13, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x2f, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x0a,
	0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x32, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x48, 0x36,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x37, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x38, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x65, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0b, 0x65, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3b, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3c, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x64,
	0x35, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x06, 0x6d,
	0x64, 0x35, 0x53, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x3e, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3f, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x40, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48, 0x41,
	0x52, 0x0d, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x01, 0x48, 0x44, 0x52, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x01, 0x48, 0x45, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x63, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x01, 0x48, 0x46, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x61, 0x6c, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x47, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x48, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x4a, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4b, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4c, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4d, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x4e, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x4f, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x05, 0x48, 0x50, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x48, 0x51, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x52, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x48, 0x53, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x48, 0x54, 0x52, 0x09,
	0x70, 0x69, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x55, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x09, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x57, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x58, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x59, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x5a, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5b, 0x52, 0x13,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69,
	0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x5c, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x70, 0x6f, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5d, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x60, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x5e, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x61, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5f, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x05, 0x48, 0x60, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x61, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x48, 0x62, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x63, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x64, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65, 0x52,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x66, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48, 0x67, 0x52, 0x0c, 0x65,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x68, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x69, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6a, 0x52,
	0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6b, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f,
	0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x64, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6b, 0x64, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x73, 0x74,
	0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61,
	0x6c, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x69, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x69, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a,
	0x28, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x22, 0xae, 0x09, 0x0a, 0x26, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x6a, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05,
	0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x13, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xee, 0x06, 0x0a, 0x28,
	0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x15,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x16, 0x76, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x05, 0x52, 0x12, 0x76, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x12,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x76, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xba, 0x15, 0x0a,
	0x20, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x15, 0x70, 0x75, 0x73,
	0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0c, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f, 0x6b, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10,
	0x77, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6b, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x0c, 0x6b, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x07, 0x70,
	0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x18, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x22, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x23, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x26, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69,
	0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f,
	0x75, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6b, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x19, 0x0a, 0x19, 0x57, 0x64,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x73, 0x72, 0x63, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x72, 0x65, 0x63,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4f, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x4f, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52,
	0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x13, 0x52, 0x0b, 0x73, 0x75, 0x69, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0d,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x07, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1e, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0b, 0x61, 0x70, 0x69,
	0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52,
	0x06, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x27, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x0d, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x2d, 0x52, 0x0a, 0x69, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x2f, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x48, 0x31, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x48, 0x32, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x33, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x37, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x38, 0x52, 0x03, 0x63, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x39, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x6f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x63, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a,
	0x13, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x03, 0x0a, 0x14, 0x57, 0x64,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x57, 0x61,
	0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x22, 0x3b, 0x0a, 0x1c, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xf3, 0x05,
	0x0a, 0x1e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xce, 0x10, 0x0a, 0x1b, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0f, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x12, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x19, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x09, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20,
	0x52, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x21, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x23, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52,
	0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x25, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x26, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x57, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x28, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x05, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6e, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x57, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x2c, 0x0a, 0x22,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x74, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x12, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x10, 0x61, 0x67, 0x67, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x09,
	0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x19, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x05, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1d, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x08, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1f, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x6e,
	0x6f, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x05, 0x70, 0x61, 0x79, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x12, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x14, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x26, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0b, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0c,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e,
	0x6f, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2f, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x31, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x65, 0x6c, 0x6e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x0a,
	0x73, 0x77, 0x61, 0x70, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x37, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x38, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39,
	0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x08, 0x73, 0x77,
	0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x3d, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x3f, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0b, 0x73, 0x77, 0x61,
	0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x41, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5a, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43,
	0x52, 0x11, 0x73, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x45, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x47, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x7d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a, 0x52, 0x0d, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x0f, 0x69, 0x73, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x80,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4c, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x4d, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x4e, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x83, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x4f, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x50, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x51, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18,
	0x86, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x52, 0x52, 0x0c, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x87, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x53, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x54, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x55, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x8b,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x57, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x58, 0x52,
	0x09, 0x62, 0x61, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x8d, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x59, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x61, 0x73,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x5a, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5b, 0x52,
	0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5c, 0x52,
	0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x5d, 0x52, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61,
	0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x5e, 0x52, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5f,
	0x52, 0x0a, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x60, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x6c, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x7a, 0x69, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x69, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x22, 0xf1, 0x2b, 0x0a, 0x15, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x06, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x13, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x67, 0x67,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52,
	0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x14, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52,
	0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x18, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x72,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x05, 0x73, 0x72,
	0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e,
	0x52, 0x08, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x05,
	0x70, 0x61, 0x79, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x22, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x23, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x67, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x14, 0x67, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27,
	0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x29, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x69,
	0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x09, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x32, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x11, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x0c, 0x73, 0x77, 0x61,
	0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x36, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x54, 0x65,
	0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x38, 0x52,
	0x0c, 0x73, 0x77, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x43, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0c, 0x73, 0x77, 0x61,
	0x70, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x3b, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x73, 0x77, 0x61,
	0x70, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3f, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40,
	0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x09, 0x48, 0x41, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x7a,
	0x69, 0x70, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70,
	0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x47, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x4a, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b,
	0x52, 0x0f, 0x69, 0x73, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4c, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4d, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4e, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4f, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x50, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x51, 0x52, 0x10, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x52, 0x52, 0x0c, 0x6f, 0x70,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x53, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x54, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x55, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x57, 0x52, 0x0c, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x58, 0x52, 0x09, 0x62, 0x61, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x59, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x8d, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x5a, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x5b, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x5c, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x5d, 0x52, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x65,
	0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5e, 0x52, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61,
	0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x5f, 0x52, 0x0a, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x54, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x93, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x60, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61,
	0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x22, 0xfd, 0x31, 0x0a, 0x16, 0x57, 0x64, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x14, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x13,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x67,
	0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11,
	0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x18, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x77, 0x6d, 0x73,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b,
	0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1c, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52,
	0x0c, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x64, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x58, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x59, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52,
	0x05, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52, 0x0d, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x25, 0x52, 0x08, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x26, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27,
	0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x28, 0x52, 0x05, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x29, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x2a, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2b, 0x52, 0x14,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x2c, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2d, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x2e, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x2f, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x74, 0x69, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x08, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52,
	0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x34, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x35, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x37, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x65,
	0x6c, 0x6e, 0x6f, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x39, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3a, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52,
	0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0c,
	0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x76,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x65,
	0x6c, 0x6e, 0x6f, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x09, 0x73, 0x77, 0x61,
	0x70, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x3f, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x48, 0x40, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x43, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x41, 0x52, 0x0c,
	0x73, 0x77, 0x61, 0x70, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x7b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x42, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x43, 0x52, 0x0f,
	0x73, 0x77, 0x61, 0x70, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x45, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x47, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x49,
	0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a, 0x52, 0x11, 0x73, 0x77,
	0x61, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x4b, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x4c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4d, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4f, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x50, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x51, 0x52,
	0x0d, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x52, 0x52,
	0x0f, 0x69, 0x73, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x53, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x8d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x54, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x55, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x57, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x58, 0x52, 0x10, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x59, 0x52, 0x0c, 0x6f, 0x70,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5a, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x5b, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x95,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5c, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5d, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x0c, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x5f, 0x52, 0x09, 0x62, 0x61, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x60, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x61, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x62, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x63, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9d, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x64, 0x52, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x65,
	0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x9e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65, 0x52, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61,
	0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x9f, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x66, 0x52, 0x0a, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x54, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x67, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x68,
	0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x65, 0x6c,
	0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x70,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f,
	0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x1d, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x23, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x22, 0xf9, 0x15, 0x0a, 0x23, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x04,
	0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10,
	0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x11, 0x52, 0x08, 0x74, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x09, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x15, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x18, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x74, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x03, 0x74, 0x61,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x31, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x34, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x34, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x28, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x29, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x33, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x33, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x34, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x34, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2d, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x35, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x36,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x30, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x34, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x01, 0x48, 0x35, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x36, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x48, 0x37, 0x52,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x39, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61,
	0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x35, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xfa, 0x15, 0x0a, 0x24, 0x57, 0x64, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x08, 0x74, 0x61, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x09, 0x74, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61,
	0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x03, 0x74, 0x61, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x0b,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x11, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x04, 0x6e,
	0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x07,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17,
	0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x19, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x33,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x36, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x36, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x21, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x33, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x35, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x35, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x36, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x26, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x27, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x0b, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2b, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x2d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x31, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x32, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x32, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x33, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x34, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x35, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x38, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x39, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d,
	0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x34, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x35, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x33, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x35, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x36, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x20, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x03,
	0x0a, 0x21, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x57, 0x61, 0x69, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x75, 0x73, 0x68, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x22, 0x9d,
	0x1f, 0x0a, 0x29, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x11, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0b, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52,
	0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x17, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x18, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0a,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1c, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x20, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x23, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0b, 0x66, 0x65, 0x6e,
	0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66,
	0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0d, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2c, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x0a, 0x77, 0x6d, 0x73,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32,
	0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x33, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x35, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x36, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x37, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x38, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x3a, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3e,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x3f, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a,
	0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x45, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x48, 0x41,
	0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f,
	0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdb,
	0x1e, 0x0a, 0x1c, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x11, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x09, 0x74,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52,
	0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18,
	0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x21, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x23, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x24, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69,
	0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x65, 0x6e,
	0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x26, 0x52, 0x0d, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x29, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52,
	0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x30, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32, 0x52, 0x09,
	0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x33, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x35, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x48, 0x36, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x37, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x38, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x3a, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3e, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3f, 0x52,
	0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0c, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x44, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x41, 0x52, 0x10,
	0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x74, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x21, 0x0a,
	0x1d, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x07, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x16, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x17, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x1a, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1f, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x20, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x22, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61,
	0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0b,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0d, 0x66, 0x65, 0x6e, 0x78, 0x69,
	0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x28, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2c, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x11, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x12, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x0a,
	0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x32, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x36,
	0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x37, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x38, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x3e, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x3f, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x40, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x05, 0x48, 0x41, 0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x05,
	0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x43, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44,
	0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45, 0x52, 0x14, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x24, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x4e, 0x6f, 0x22, 0xa6, 0x44, 0x0a, 0x10, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x17, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x14, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x67, 0x67,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x61, 0x67, 0x67, 0x50, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x69, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x11, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x13, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x16, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x0d, 0x72, 0x61,
	0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x11,
	0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x1f, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x22, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x64, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x26, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x28, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x78,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2a, 0x52, 0x03, 0x74, 0x61, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x2b, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x2c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x30, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x32, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x34, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x36, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3b, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x3e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3f, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x41, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x74, 0x62, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x74, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x44, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45, 0x52, 0x08, 0x63, 0x73, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x48, 0x46, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x47, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52,
	0x0d, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x09, 0x62, 0x61, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x4c, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4d, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4e, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x4f, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x48, 0x50,
	0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x51, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x01, 0x48, 0x52,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x53, 0x52, 0x13, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x54, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x55, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x6e, 0x6f, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x48, 0x57, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x58,
	0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x59, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x5c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5a, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5b, 0x52, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x5e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x5c, 0x52, 0x0a, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5d, 0x52, 0x0c, 0x66, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x60, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x5f, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x48, 0x60, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x61, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x62, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x48, 0x63, 0x52, 0x0c, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x64, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65, 0x52, 0x0b, 0x66,
	0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x66, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x48, 0x67, 0x52, 0x0b, 0x75, 0x6e, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x68, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x69, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x6a, 0x52, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x6b, 0x52, 0x0d, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6c, 0x52, 0x13, 0x63, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x6d, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x18, 0x70, 0x20, 0x01, 0x28, 0x01, 0x48, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x69, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x01, 0x48, 0x6f, 0x52, 0x08, 0x70,
	0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x01, 0x48, 0x70,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x71, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x48, 0x72, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x48, 0x73, 0x52,
	0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x48, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x75, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x75, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x6e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x76, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x48, 0x77,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x78,
	0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7a, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7b,
	0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f,
	0x5f, 0x74, 0x69, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7c, 0x52, 0x0a, 0x66, 0x65,
	0x6e, 0x78, 0x69, 0x61, 0x6f, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x7d, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7e, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7f, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x80, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x81, 0x01, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x82, 0x01, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x83, 0x01, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x84, 0x01, 0x52,
	0x0b, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x85, 0x01, 0x52, 0x0e, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x86, 0x01, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x87, 0x01, 0x52,
	0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x88, 0x01,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x89, 0x01, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x8a, 0x01,
	0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x8b, 0x01, 0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x8c, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x41,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x8d, 0x01, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x8e, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x79, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x91,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x6f, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x8f, 0x01, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x90, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x18, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x91, 0x01, 0x52, 0x15, 0x61, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x92, 0x01, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x61, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x93, 0x01, 0x52, 0x11, 0x61, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x94, 0x01, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6f, 0x61, 0x69, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69,
	0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x61, 0x77,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x74, 0x61, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x62, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69,
	0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66,
	0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x69,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66,
	0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x22, 0x41, 0x0a, 0x1e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x0b, 0x0a, 0x1d, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x07, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x74,
	0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x14, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x16, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x05, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x0b, 0x61, 0x75, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x1b, 0x52, 0x06, 0x61, 0x75, 0x78, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1d, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d,
	0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e,
	0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x78, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x75,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x89, 0x0b, 0x0a, 0x1e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52,
	0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x73,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x66, 0x6c, 0x61,
	0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52,
	0x0c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0f, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x12, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x74, 0x6f, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x15, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x4e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x05, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x61, 0x75,
	0x78, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x61, 0x75, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52,
	0x06, 0x61, 0x75, 0x78, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x75, 0x78, 0x5f, 0x6e, 0x75,
	0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x1b,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x85, 0x01, 0x0a, 0x1c, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x13, 0x0a, 0x24, 0x57, 0x64, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61,
	0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x31, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x6d, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x0c, 0x74, 0x6f, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x09, 0x77, 0x6d,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74,
	0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0e, 0x6f, 0x75, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0d, 0x69, 0x6e, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x15, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x16, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x21, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0c, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x12, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x10, 0x61, 0x67, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e,
	0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x12, 0x0a, 0x17,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a,
	0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x07, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x31,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x31, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0c, 0x74, 0x6f, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x09, 0x77,
	0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0e, 0x6f, 0x75,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0d, 0x69, 0x6e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x15, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x16, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x19, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x21, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52,
	0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0c, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4f,
	0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x12, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x10, 0x61, 0x67,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c,
	0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf6, 0x16, 0x0a,
	0x18, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d,
	0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x6b, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0b, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x31, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x0c, 0x74, 0x6f, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x09,
	0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x16, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x0d, 0x69, 0x6e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x19, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1a, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26,
	0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0c, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x12, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x10, 0x61,
	0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x14, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x1f, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x32, 0xf2, 0x11, 0x0a, 0x1d, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x11,
	0x41, 0x67, 0x67, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x42, 0x79, 0x53, 0x72, 0x63, 0x54, 0x69,
	0x64, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x67, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x42, 0x79, 0x53, 0x72, 0x63, 0x54, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79,
	0x42, 0x79, 0x53, 0x72, 0x63, 0x54, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x3e, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x41, 0x67, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41,
	0x67, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12,
	0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x4c, 0x6f, 0x67, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x72, 0x63, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x72, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x72, 0x63, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x83, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c,
	0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x32, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x42, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x12, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8d, 0x01, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67,
	0x67, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69,
	0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb9,
	0x27, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98,
	0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x41, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x19, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x17,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80,
	0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x87, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x85, 0x1e, 0x0a, 0x1e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x9f, 0x01,
	0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3e, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9c, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab,
	0x01, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb7, 0x01, 0x0a,
	0x22, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x46, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1,
	0x01, 0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x75, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x90, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x1a, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64,
	0x74, 0x12, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x78, 0x6c, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x78, 0x6c, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74,
	0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x78, 0x6c, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x78, 0x6c, 0x4b,
	0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d,
	0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01,
	0x0a, 0x19, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x12, 0x3d, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x78, 0x6c, 0x4b, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57,
	0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x07,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x1f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x3b, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x4b, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x12,
	0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x4b, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4b, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a,
	0x01, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x4b, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0xbc, 0x39, 0x0a, 0x16, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x93, 0x01,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1b, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x3d, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x20,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x7e, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3d, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x64, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x64, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x39, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01,
	0x0a, 0x21, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x46,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb6, 0x01, 0x0a, 0x26, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x12, 0x4a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xb0, 0x01, 0x0a, 0x24, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x48, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x4a, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x1d, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x41, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x3e, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xac, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xa6, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57, 0x64, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x1e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x45, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x39, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9f, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0xaa, 0x47, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x75,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x87, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68,
	0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69,
	0x6d, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4e,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a,
	0x15, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x36, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x90, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14,
	0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7b, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x32, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99,
	0x01, 0x0a, 0x18, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f,
	0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x08, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a,
	0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x97, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99,
	0x01, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x52,
	0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xb4, 0x01, 0x0a, 0x21, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x31, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52,
	0x75, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x64, 0x74, 0x12, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x64, 0x74,
	0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x33,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x09, 0x57, 0x64, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf6,
	0x23, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x0e, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x32, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x32, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a,
	0x0a, 0x1c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x40,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74, 0x12,
	0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x64, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x64, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x22, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x46, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xaa, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x46, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a,
	0x1b, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3f, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54,
	0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa0, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x12, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x1c, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41,
	0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x3b,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x32, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96,
	0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x39,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xfa, 0x17, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x7e,
	0x0a, 0x0f, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5,
	0x01, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x12,
	0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x1d, 0x41, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54,
	0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x12, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x6f,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x12, 0x39, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x12, 0x36, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d,
	0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x77, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83,
	0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50,
	0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12,
	0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a,
	0x18, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x50,
	0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x37,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xd3, 0x1c, 0x0a, 0x15, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0xae,
	0x01, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x12, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xc3, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x65,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x41, 0x67, 0x67, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53,
	0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77,
	0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53,
	0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x20, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x53, 0x77,
	0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x1f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x4e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xc5, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x52, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x65, 0x64,
	0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x49, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x4c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc6, 0x01, 0x0a,
	0x27, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4d, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73,
	0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x4d, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd2, 0x01, 0x0a, 0x2b, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x4f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73,
	0x68, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x20, 0x52,
	0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x12,
	0x44, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73,
	0x68, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc0,
	0x01, 0x0a, 0x25, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54,
	0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x12, 0x49, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x77, 0x61, 0x70, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x6f,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6b, 0x4d, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x26, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x2b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x1d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x2b,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x20, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x2b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a,
	0x18, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41,
	0x67, 0x67, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x65, 0x65, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90,
	0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67,
	0x67, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67,
	0x53, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41,
	0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x41, 0x67, 0x67, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99,
	0x01, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2e,
	0x2f, 0x70, 0x62, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x49, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kingdee_ito_proto_rawDescOnce sync.Once
	file_kingdee_ito_proto_rawDescData = file_kingdee_ito_proto_rawDesc
)

func file_kingdee_ito_proto_rawDescGZIP() []byte {
	file_kingdee_ito_proto_rawDescOnce.Do(func() {
		file_kingdee_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_kingdee_ito_proto_rawDescData)
	})
	return file_kingdee_ito_proto_rawDescData
}

var file_kingdee_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 444)
var file_kingdee_ito_proto_goTypes = []interface{}{
	(*AggAliPayBySrcTidRequest)(nil),                              // 0: kingdee_service.kingdee_ito.AggAliPayBySrcTidRequest
	(*AggAliPayBySrcTidResponse)(nil),                             // 1: kingdee_service.kingdee_ito.AggAliPayBySrcTidResponse
	(*AggParamsTradeCreateRequest)(nil),                           // 2: kingdee_service.kingdee_ito.AggParamsTradeCreateRequest
	(*AggParamsTradeDestroyRequest)(nil),                          // 3: kingdee_service.kingdee_ito.AggParamsTradeDestroyRequest
	(*AggParamsTradeListRequest)(nil),                             // 4: kingdee_service.kingdee_ito.AggParamsTradeListRequest
	(*AggParamsTradeListResponse)(nil),                            // 5: kingdee_service.kingdee_ito.AggParamsTradeListResponse
	(*AggParamsTradeNextNoRequest)(nil),                           // 6: kingdee_service.kingdee_ito.AggParamsTradeNextNoRequest
	(*AggParamsTradeNextNoResponse)(nil),                          // 7: kingdee_service.kingdee_ito.AggParamsTradeNextNoResponse
	(*AggParamsTradeResponse)(nil),                                // 8: kingdee_service.kingdee_ito.AggParamsTradeResponse
	(*AggParamsTradeRetrieveRequest)(nil),                         // 9: kingdee_service.kingdee_ito.AggParamsTradeRetrieveRequest
	(*AggParamsTradeUpdateRequest)(nil),                           // 10: kingdee_service.kingdee_ito.AggParamsTradeUpdateRequest
	(*AggPushStatusCountRequest)(nil),                             // 11: kingdee_service.kingdee_ito.AggPushStatusCountRequest
	(*AggPushStatusCountResponse)(nil),                            // 12: kingdee_service.kingdee_ito.AggPushStatusCountResponse
	(*AggTradeByMonthRequest)(nil),                                // 13: kingdee_service.kingdee_ito.AggTradeByMonthRequest
	(*AggTradeByMonthResponse)(nil),                               // 14: kingdee_service.kingdee_ito.AggTradeByMonthResponse
	(*AggTradeByMonthSyncRequest)(nil),                            // 15: kingdee_service.kingdee_ito.AggTradeByMonthSyncRequest
	(*AggTradeByMonthSyncResponse)(nil),                           // 16: kingdee_service.kingdee_ito.AggTradeByMonthSyncResponse
	(*AggTradeRefundRequest)(nil),                                 // 17: kingdee_service.kingdee_ito.AggTradeRefundRequest
	(*AggTradeRefundResponse)(nil),                                // 18: kingdee_service.kingdee_ito.AggTradeRefundResponse
	(*AggTransByMonthRequest)(nil),                                // 19: kingdee_service.kingdee_ito.AggTransByMonthRequest
	(*AggTransByMonthResponse)(nil),                               // 20: kingdee_service.kingdee_ito.AggTransByMonthResponse
	(*AggTransPushStockInToKingdeeRequest)(nil),                   // 21: kingdee_service.kingdee_ito.AggTransPushStockInToKingdeeRequest
	(*AggTransPushStockInToKingdeeResponse)(nil),                  // 22: kingdee_service.kingdee_ito.AggTransPushStockInToKingdeeResponse
	(*AggTransPushStockOutToKingdeeRequest)(nil),                  // 23: kingdee_service.kingdee_ito.AggTransPushStockOutToKingdeeRequest
	(*AggTransPushStockOutToKingdeeResponse)(nil),                 // 24: kingdee_service.kingdee_ito.AggTransPushStockOutToKingdeeResponse
	(*AggTransPushToKingdeeRequest)(nil),                          // 25: kingdee_service.kingdee_ito.AggTransPushToKingdeeRequest
	(*AggTransPushToKingdeeResponse)(nil),                         // 26: kingdee_service.kingdee_ito.AggTransPushToKingdeeResponse
	(*AggTransStockOutInRequest)(nil),                             // 27: kingdee_service.kingdee_ito.AggTransStockOutInRequest
	(*AggTransStockOutInResponse)(nil),                            // 28: kingdee_service.kingdee_ito.AggTransStockOutInResponse
	(*AggTransferListRequest)(nil),                                // 29: kingdee_service.kingdee_ito.AggTransferListRequest
	(*AggTransferOrderEntryResponse)(nil),                         // 30: kingdee_service.kingdee_ito.AggTransferOrderEntryResponse
	(*AggTransferOrderListResponse)(nil),                          // 31: kingdee_service.kingdee_ito.AggTransferOrderListResponse
	(*AggTransferOrderModelResponse)(nil),                         // 32: kingdee_service.kingdee_ito.AggTransferOrderModelResponse
	(*AggTransferOrderResponse)(nil),                              // 33: kingdee_service.kingdee_ito.AggTransferOrderResponse
	(*AggTransferStockInEntitiesEntryResponse)(nil),               // 34: kingdee_service.kingdee_ito.AggTransferStockInEntitiesEntryResponse
	(*AggTransferStockInEntitiesModelResponse)(nil),               // 35: kingdee_service.kingdee_ito.AggTransferStockInEntitiesModelResponse
	(*AggTransferStockInEntitiesResponse)(nil),                    // 36: kingdee_service.kingdee_ito.AggTransferStockInEntitiesResponse
	(*AggTransferStockOutEntitiesEntryResponse)(nil),              // 37: kingdee_service.kingdee_ito.AggTransferStockOutEntitiesEntryResponse
	(*AggTransferStockOutEntitiesModelResponse)(nil),              // 38: kingdee_service.kingdee_ito.AggTransferStockOutEntitiesModelResponse
	(*AggTransferStockOutEntitiesResponse)(nil),                   // 39: kingdee_service.kingdee_ito.AggTransferStockOutEntitiesResponse
	(*AliPayGoodsListResponse)(nil),                               // 40: kingdee_service.kingdee_ito.AliPayGoodsListResponse
	(*AlipayBillAggEntitiesResponse)(nil),                         // 41: kingdee_service.kingdee_ito.AlipayBillAggEntitiesResponse
	(*AlipayBillAggResultDestroyRequest)(nil),                     // 42: kingdee_service.kingdee_ito.AlipayBillAggResultDestroyRequest
	(*AlipayBillAggResultListRequest)(nil),                        // 43: kingdee_service.kingdee_ito.AlipayBillAggResultListRequest
	(*AlipayBillAggResultListResponse)(nil),                       // 44: kingdee_service.kingdee_ito.AlipayBillAggResultListResponse
	(*AlipayBillAggResultPartialUpdateRequest)(nil),               // 45: kingdee_service.kingdee_ito.AlipayBillAggResultPartialUpdateRequest
	(*AlipayBillAggResultRequest)(nil),                            // 46: kingdee_service.kingdee_ito.AlipayBillAggResultRequest
	(*AlipayBillAggResultResponse)(nil),                           // 47: kingdee_service.kingdee_ito.AlipayBillAggResultResponse
	(*AlipayBillAggResultRetrieveRequest)(nil),                    // 48: kingdee_service.kingdee_ito.AlipayBillAggResultRetrieveRequest
	(*AlipayBillEntitiesListRequest)(nil),                         // 49: kingdee_service.kingdee_ito.AlipayBillEntitiesListRequest
	(*AlipayBillEntitiesListResponse)(nil),                        // 50: kingdee_service.kingdee_ito.AlipayBillEntitiesListResponse
	(*AlipayBillEntitiesResponse)(nil),                            // 51: kingdee_service.kingdee_ito.AlipayBillEntitiesResponse
	(*AlipayBillListRequest)(nil),                                 // 52: kingdee_service.kingdee_ito.AlipayBillListRequest
	(*AlipayBillListResponse)(nil),                                // 53: kingdee_service.kingdee_ito.AlipayBillListResponse
	(*AlipayBillResponse)(nil),                                    // 54: kingdee_service.kingdee_ito.AlipayBillResponse
	(*AlipayBillRetrieveRequest)(nil),                             // 55: kingdee_service.kingdee_ito.AlipayBillRetrieveRequest
	(*BillEntitiesRetrieveRequest)(nil),                           // 56: kingdee_service.kingdee_ito.BillEntitiesRetrieveRequest
	(*BulkCreateKdPurchaseReturnRequest)(nil),                     // 57: kingdee_service.kingdee_ito.BulkCreateKdPurchaseReturnRequest
	(*BulkCreateKdPurchaseReturnResponse)(nil),                    // 58: kingdee_service.kingdee_ito.BulkCreateKdPurchaseReturnResponse
	(*BulkCreateKdTransferOrderRequest)(nil),                      // 59: kingdee_service.kingdee_ito.BulkCreateKdTransferOrderRequest
	(*BulkCreateKdTransferOrderResponse)(nil),                     // 60: kingdee_service.kingdee_ito.BulkCreateKdTransferOrderResponse
	(*BulkCreateKingdeePurchaseOrderRequest)(nil),                 // 61: kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderRequest
	(*BulkCreateKingdeePurchaseOrderResponse)(nil),                // 62: kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderResponse
	(*BulkCreateKingdeePurchaseOrderSyncRequest)(nil),             // 63: kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderSyncRequest
	(*BulkCreateKingdeePurchaseOrderSyncResponse)(nil),            // 64: kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderSyncResponse
	(*BulkCreateKingdeeReceiveBillRequest)(nil),                   // 65: kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillRequest
	(*BulkCreateKingdeeReceiveBillResponse)(nil),                  // 66: kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillResponse
	(*BulkCreateKingdeeReceiveBillSyncRequest)(nil),               // 67: kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillSyncRequest
	(*BulkCreateKingdeeReceiveBillSyncResponse)(nil),              // 68: kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillSyncResponse
	(*CeleryTaskInfoListResponse)(nil),                            // 69: kingdee_service.kingdee_ito.CeleryTaskInfoListResponse
	(*CeleryTaskInfoResponse)(nil),                                // 70: kingdee_service.kingdee_ito.CeleryTaskInfoResponse
	(*CeleryTaskQueryOptsRequest)(nil),                            // 71: kingdee_service.kingdee_ito.CeleryTaskQueryOptsRequest
	(*CeleryTaskRunOptsRequest)(nil),                              // 72: kingdee_service.kingdee_ito.CeleryTaskRunOptsRequest
	(*CeleryTaskRunOptsResponse)(nil),                             // 73: kingdee_service.kingdee_ito.CeleryTaskRunOptsResponse
	(*ChannelShopConfigCreateRequest)(nil),                        // 74: kingdee_service.kingdee_ito.ChannelShopConfigCreateRequest
	(*ChannelShopConfigListRequest)(nil),                          // 75: kingdee_service.kingdee_ito.ChannelShopConfigListRequest
	(*ChannelShopConfigListResponse)(nil),                         // 76: kingdee_service.kingdee_ito.ChannelShopConfigListResponse
	(*ChannelShopConfigResponse)(nil),                             // 77: kingdee_service.kingdee_ito.ChannelShopConfigResponse
	(*ChannelShopConfigRetrieveRequest)(nil),                      // 78: kingdee_service.kingdee_ito.ChannelShopConfigRetrieveRequest
	(*ChannelShopConfigUpdateRequest)(nil),                        // 79: kingdee_service.kingdee_ito.ChannelShopConfigUpdateRequest
	(*ClockedScheduleCreateRequest)(nil),                          // 80: kingdee_service.kingdee_ito.ClockedScheduleCreateRequest
	(*ClockedScheduleDestroyRequest)(nil),                         // 81: kingdee_service.kingdee_ito.ClockedScheduleDestroyRequest
	(*ClockedScheduleListRequest)(nil),                            // 82: kingdee_service.kingdee_ito.ClockedScheduleListRequest
	(*ClockedScheduleListResponse)(nil),                           // 83: kingdee_service.kingdee_ito.ClockedScheduleListResponse
	(*ClockedSchedulePartialUpdateRequest)(nil),                   // 84: kingdee_service.kingdee_ito.ClockedSchedulePartialUpdateRequest
	(*ClockedScheduleRequest)(nil),                                // 85: kingdee_service.kingdee_ito.ClockedScheduleRequest
	(*ClockedScheduleResponse)(nil),                               // 86: kingdee_service.kingdee_ito.ClockedScheduleResponse
	(*ClockedScheduleRetrieveRequest)(nil),                        // 87: kingdee_service.kingdee_ito.ClockedScheduleRetrieveRequest
	(*ClockedScheduleUpdateRequest)(nil),                          // 88: kingdee_service.kingdee_ito.ClockedScheduleUpdateRequest
	(*CodeMsgResponse)(nil),                                       // 89: kingdee_service.kingdee_ito.CodeMsgResponse
	(*CountAggRefundPushStatusRequest)(nil),                       // 90: kingdee_service.kingdee_ito.CountAggRefundPushStatusRequest
	(*CountAggRefundPushStatusResponse)(nil),                      // 91: kingdee_service.kingdee_ito.CountAggRefundPushStatusResponse
	(*CountRefundStockInPushStatusResponse)(nil),                  // 92: kingdee_service.kingdee_ito.CountRefundStockInPushStatusResponse
	(*CreateKdPurchaseReturnRequest)(nil),                         // 93: kingdee_service.kingdee_ito.CreateKdPurchaseReturnRequest
	(*CreateKdPurchaseReturnResponse)(nil),                        // 94: kingdee_service.kingdee_ito.CreateKdPurchaseReturnResponse
	(*CreateKdTransferOrderRequest)(nil),                          // 95: kingdee_service.kingdee_ito.CreateKdTransferOrderRequest
	(*CreateKdTransferOrderResponse)(nil),                         // 96: kingdee_service.kingdee_ito.CreateKdTransferOrderResponse
	(*CreateTransferOrderResponse)(nil),                           // 97: kingdee_service.kingdee_ito.CreateTransferOrderResponse
	(*CrontabScheduleCreateRequest)(nil),                          // 98: kingdee_service.kingdee_ito.CrontabScheduleCreateRequest
	(*CrontabScheduleDestroyRequest)(nil),                         // 99: kingdee_service.kingdee_ito.CrontabScheduleDestroyRequest
	(*CrontabScheduleListRequest)(nil),                            // 100: kingdee_service.kingdee_ito.CrontabScheduleListRequest
	(*CrontabScheduleListResponse)(nil),                           // 101: kingdee_service.kingdee_ito.CrontabScheduleListResponse
	(*CrontabSchedulePartialUpdateRequest)(nil),                   // 102: kingdee_service.kingdee_ito.CrontabSchedulePartialUpdateRequest
	(*CrontabScheduleRequest)(nil),                                // 103: kingdee_service.kingdee_ito.CrontabScheduleRequest
	(*CrontabScheduleResponse)(nil),                               // 104: kingdee_service.kingdee_ito.CrontabScheduleResponse
	(*CrontabScheduleRetrieveRequest)(nil),                        // 105: kingdee_service.kingdee_ito.CrontabScheduleRetrieveRequest
	(*CrontabScheduleUpdateRequest)(nil),                          // 106: kingdee_service.kingdee_ito.CrontabScheduleUpdateRequest
	(*CxlKdPurchaseReturnFromWdtRequest)(nil),                     // 107: kingdee_service.kingdee_ito.CxlKdPurchaseReturnFromWdtRequest
	(*CxlKdPurchaseReturnFromWdtResponse)(nil),                    // 108: kingdee_service.kingdee_ito.CxlKdPurchaseReturnFromWdtResponse
	(*CxlKdReceiveBillFromWdtRequest)(nil),                        // 109: kingdee_service.kingdee_ito.CxlKdReceiveBillFromWdtRequest
	(*CxlKdReceiveBillFromWdtResponse)(nil),                       // 110: kingdee_service.kingdee_ito.CxlKdReceiveBillFromWdtResponse
	(*CxlKdTransferOrderFromWdtRequest)(nil),                      // 111: kingdee_service.kingdee_ito.CxlKdTransferOrderFromWdtRequest
	(*CxlKdTransferOrderFromWdtResponse)(nil),                     // 112: kingdee_service.kingdee_ito.CxlKdTransferOrderFromWdtResponse
	(*DestroyAggBillResultRequest)(nil),                           // 113: kingdee_service.kingdee_ito.DestroyAggBillResultRequest
	(*DestroyAggBillResultResponse)(nil),                          // 114: kingdee_service.kingdee_ito.DestroyAggBillResultResponse
	(*DestroyAggKingdeeStkMisdeliveryRequest)(nil),                // 115: kingdee_service.kingdee_ito.DestroyAggKingdeeStkMisdeliveryRequest
	(*DestroyAggKingdeeStkMisdeliveryResponse)(nil),               // 116: kingdee_service.kingdee_ito.DestroyAggKingdeeStkMisdeliveryResponse
	(*DestroyAggSeedingKingdeeTransferDirectRequest)(nil),         // 117: kingdee_service.kingdee_ito.DestroyAggSeedingKingdeeTransferDirectRequest
	(*DestroyAggSeedingKingdeeTransferDirectResponse)(nil),        // 118: kingdee_service.kingdee_ito.DestroyAggSeedingKingdeeTransferDirectResponse
	(*DestroyAggSwapKingdeeRefundRequest)(nil),                    // 119: kingdee_service.kingdee_ito.DestroyAggSwapKingdeeRefundRequest
	(*DestroyAggSwapKingdeeRefundResponse)(nil),                   // 120: kingdee_service.kingdee_ito.DestroyAggSwapKingdeeRefundResponse
	(*DestroyAggSwapKingdeeSalOutStockRequest)(nil),               // 121: kingdee_service.kingdee_ito.DestroyAggSwapKingdeeSalOutStockRequest
	(*DestroyAggSwapKingdeeSalOutStockResponse)(nil),              // 122: kingdee_service.kingdee_ito.DestroyAggSwapKingdeeSalOutStockResponse
	(*DestroyAggTradeRefundRequest)(nil),                          // 123: kingdee_service.kingdee_ito.DestroyAggTradeRefundRequest
	(*DestroyAggTradeRefundResponse)(nil),                         // 124: kingdee_service.kingdee_ito.DestroyAggTradeRefundResponse
	(*DestroyAggTradeRequest)(nil),                                // 125: kingdee_service.kingdee_ito.DestroyAggTradeRequest
	(*DestroyAggTradeResponse)(nil),                               // 126: kingdee_service.kingdee_ito.DestroyAggTradeResponse
	(*DestroyAggTransRequest)(nil),                                // 127: kingdee_service.kingdee_ito.DestroyAggTransRequest
	(*DestroyChannelShopConfigRequest)(nil),                       // 128: kingdee_service.kingdee_ito.DestroyChannelShopConfigRequest
	(*DestroyChannelShopConfigResponse)(nil),                      // 129: kingdee_service.kingdee_ito.DestroyChannelShopConfigResponse
	(*EmptyRequest)(nil),                                          // 130: kingdee_service.kingdee_ito.EmptyRequest
	(*FStaffNumberResponse)(nil),                                  // 131: kingdee_service.kingdee_ito.FStaffNumberResponse
	(*FetchAlipayBillTaskResponse)(nil),                           // 132: kingdee_service.kingdee_ito.FetchAlipayBillTaskResponse
	(*FetchAlipayLogAsyncRequest)(nil),                            // 133: kingdee_service.kingdee_ito.FetchAlipayLogAsyncRequest
	(*FetchAlipayLogAsyncResponse)(nil),                           // 134: kingdee_service.kingdee_ito.FetchAlipayLogAsyncResponse
	(*FetchQimenTradeRequest)(nil),                                // 135: kingdee_service.kingdee_ito.FetchQimenTradeRequest
	(*FetchQimenTradeResponse)(nil),                               // 136: kingdee_service.kingdee_ito.FetchQimenTradeResponse
	(*FetchRefundListFromWdtRequest)(nil),                         // 137: kingdee_service.kingdee_ito.FetchRefundListFromWdtRequest
	(*FetchRefundListFromWdtResponse)(nil),                        // 138: kingdee_service.kingdee_ito.FetchRefundListFromWdtResponse
	(*FetchSrcTradeRequest)(nil),                                  // 139: kingdee_service.kingdee_ito.FetchSrcTradeRequest
	(*FetchSrcTradeResponse)(nil),                                 // 140: kingdee_service.kingdee_ito.FetchSrcTradeResponse
	(*FetchSrcTradeTaskResponse)(nil),                             // 141: kingdee_service.kingdee_ito.FetchSrcTradeTaskResponse
	(*FetchTaskRequest)(nil),                                      // 142: kingdee_service.kingdee_ito.FetchTaskRequest
	(*FetchTradeListFromWdtRequest)(nil),                          // 143: kingdee_service.kingdee_ito.FetchTradeListFromWdtRequest
	(*FetchTradeListFromWdtResponse)(nil),                         // 144: kingdee_service.kingdee_ito.FetchTradeListFromWdtResponse
	(*FetchTradeRefundRequest)(nil),                               // 145: kingdee_service.kingdee_ito.FetchTradeRefundRequest
	(*FetchTradeRefundResponse)(nil),                              // 146: kingdee_service.kingdee_ito.FetchTradeRefundResponse
	(*InitChannelShopConfigRequest)(nil),                          // 147: kingdee_service.kingdee_ito.InitChannelShopConfigRequest
	(*InitChannelShopConfigResponse)(nil),                         // 148: kingdee_service.kingdee_ito.InitChannelShopConfigResponse
	(*IntervalScheduleCreateRequest)(nil),                         // 149: kingdee_service.kingdee_ito.IntervalScheduleCreateRequest
	(*IntervalScheduleDestroyRequest)(nil),                        // 150: kingdee_service.kingdee_ito.IntervalScheduleDestroyRequest
	(*IntervalScheduleListRequest)(nil),                           // 151: kingdee_service.kingdee_ito.IntervalScheduleListRequest
	(*IntervalScheduleListResponse)(nil),                          // 152: kingdee_service.kingdee_ito.IntervalScheduleListResponse
	(*IntervalSchedulePartialUpdateRequest)(nil),                  // 153: kingdee_service.kingdee_ito.IntervalSchedulePartialUpdateRequest
	(*IntervalScheduleRequest)(nil),                               // 154: kingdee_service.kingdee_ito.IntervalScheduleRequest
	(*IntervalScheduleResponse)(nil),                              // 155: kingdee_service.kingdee_ito.IntervalScheduleResponse
	(*IntervalScheduleRetrieveRequest)(nil),                       // 156: kingdee_service.kingdee_ito.IntervalScheduleRetrieveRequest
	(*IntervalScheduleUpdateRequest)(nil),                         // 157: kingdee_service.kingdee_ito.IntervalScheduleUpdateRequest
	(*KingdeeFNumberResponse)(nil),                                // 158: kingdee_service.kingdee_ito.KingdeeFNumberResponse
	(*KingdeePurchaseDestroyRequest)(nil),                         // 159: kingdee_service.kingdee_ito.KingdeePurchaseDestroyRequest
	(*KingdeePurchaseListRequest)(nil),                            // 160: kingdee_service.kingdee_ito.KingdeePurchaseListRequest
	(*KingdeePurchaseListResponse)(nil),                           // 161: kingdee_service.kingdee_ito.KingdeePurchaseListResponse
	(*KingdeePurchaseOrderDestroyRequest)(nil),                    // 162: kingdee_service.kingdee_ito.KingdeePurchaseOrderDestroyRequest
	(*KingdeePurchaseOrderEntryDeliPlanResponse)(nil),             // 163: kingdee_service.kingdee_ito.KingdeePurchaseOrderEntryDeliPlanResponse
	(*KingdeePurchaseOrderFPOOrderResponse)(nil),                  // 164: kingdee_service.kingdee_ito.KingdeePurchaseOrderFPOOrderResponse
	(*KingdeePurchaseOrderListRequest)(nil),                       // 165: kingdee_service.kingdee_ito.KingdeePurchaseOrderListRequest
	(*KingdeePurchaseOrderListResponse)(nil),                      // 166: kingdee_service.kingdee_ito.KingdeePurchaseOrderListResponse
	(*KingdeePurchaseOrderModelResponse)(nil),                     // 167: kingdee_service.kingdee_ito.KingdeePurchaseOrderModelResponse
	(*KingdeePurchaseOrderPartialUpdateRequest)(nil),              // 168: kingdee_service.kingdee_ito.KingdeePurchaseOrderPartialUpdateRequest
	(*KingdeePurchaseOrderRequest)(nil),                           // 169: kingdee_service.kingdee_ito.KingdeePurchaseOrderRequest
	(*KingdeePurchaseOrderResponse)(nil),                          // 170: kingdee_service.kingdee_ito.KingdeePurchaseOrderResponse
	(*KingdeePurchaseOrderRetrieveRequest)(nil),                   // 171: kingdee_service.kingdee_ito.KingdeePurchaseOrderRetrieveRequest
	(*KingdeePurchasePartialUpdateRequest)(nil),                   // 172: kingdee_service.kingdee_ito.KingdeePurchasePartialUpdateRequest
	(*KingdeePurchaseRequest)(nil),                                // 173: kingdee_service.kingdee_ito.KingdeePurchaseRequest
	(*KingdeePurchaseResponse)(nil),                               // 174: kingdee_service.kingdee_ito.KingdeePurchaseResponse
	(*KingdeePurchaseRetrieveRequest)(nil),                        // 175: kingdee_service.kingdee_ito.KingdeePurchaseRetrieveRequest
	(*KingdeePurchaseReturnDestroyRequest)(nil),                   // 176: kingdee_service.kingdee_ito.KingdeePurchaseReturnDestroyRequest
	(*KingdeePurchaseReturnEntryResponse)(nil),                    // 177: kingdee_service.kingdee_ito.KingdeePurchaseReturnEntryResponse
	(*KingdeePurchaseReturnListRequest)(nil),                      // 178: kingdee_service.kingdee_ito.KingdeePurchaseReturnListRequest
	(*KingdeePurchaseReturnListResponse)(nil),                     // 179: kingdee_service.kingdee_ito.KingdeePurchaseReturnListResponse
	(*KingdeePurchaseReturnPartialUpdateRequest)(nil),             // 180: kingdee_service.kingdee_ito.KingdeePurchaseReturnPartialUpdateRequest
	(*KingdeePurchaseReturnRequest)(nil),                          // 181: kingdee_service.kingdee_ito.KingdeePurchaseReturnRequest
	(*KingdeePurchaseReturnResponse)(nil),                         // 182: kingdee_service.kingdee_ito.KingdeePurchaseReturnResponse
	(*KingdeePurchaseReturnRetrieveRequest)(nil),                  // 183: kingdee_service.kingdee_ito.KingdeePurchaseReturnRetrieveRequest
	(*KingdeeReceivableEntityDetailResponse)(nil),                 // 184: kingdee_service.kingdee_ito.KingdeeReceivableEntityDetailResponse
	(*KingdeeReceivableEntityPlanResponse)(nil),                   // 185: kingdee_service.kingdee_ito.KingdeeReceivableEntityPlanResponse
	(*KingdeeReceivableModelResponse)(nil),                        // 186: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse
	(*KingdeeReceivableResponse)(nil),                             // 187: kingdee_service.kingdee_ito.KingdeeReceivableResponse
	(*KingdeeReceivableSubHeadFincResponse)(nil),                  // 188: kingdee_service.kingdee_ito.KingdeeReceivableSubHeadFincResponse
	(*KingdeeReceivableSubHeadSupplierResponse)(nil),              // 189: kingdee_service.kingdee_ito.KingdeeReceivableSubHeadSupplierResponse
	(*KingdeeReceiveBillDestroyRequest)(nil),                      // 190: kingdee_service.kingdee_ito.KingdeeReceiveBillDestroyRequest
	(*KingdeeReceiveBillFDetailLinkResponse)(nil),                 // 191: kingdee_service.kingdee_ito.KingdeeReceiveBillFDetailLinkResponse
	(*KingdeeReceiveBillFDetailResponse)(nil),                     // 192: kingdee_service.kingdee_ito.KingdeeReceiveBillFDetailResponse
	(*KingdeeReceiveBillListRequest)(nil),                         // 193: kingdee_service.kingdee_ito.KingdeeReceiveBillListRequest
	(*KingdeeReceiveBillListResponse)(nil),                        // 194: kingdee_service.kingdee_ito.KingdeeReceiveBillListResponse
	(*KingdeeReceiveBillModelResponse)(nil),                       // 195: kingdee_service.kingdee_ito.KingdeeReceiveBillModelResponse
	(*KingdeeReceiveBillPartialUpdateRequest)(nil),                // 196: kingdee_service.kingdee_ito.KingdeeReceiveBillPartialUpdateRequest
	(*KingdeeReceiveBillRequest)(nil),                             // 197: kingdee_service.kingdee_ito.KingdeeReceiveBillRequest
	(*KingdeeReceiveBillResponse)(nil),                            // 198: kingdee_service.kingdee_ito.KingdeeReceiveBillResponse
	(*KingdeeReceiveBillRetrieveRequest)(nil),                     // 199: kingdee_service.kingdee_ito.KingdeeReceiveBillRetrieveRequest
	(*KingdeeSalOutStockFEntityResponse)(nil),                     // 200: kingdee_service.kingdee_ito.KingdeeSalOutStockFEntityResponse
	(*KingdeeSalOutStockListRequest)(nil),                         // 201: kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest
	(*KingdeeSalOutStockListResponse)(nil),                        // 202: kingdee_service.kingdee_ito.KingdeeSalOutStockListResponse
	(*KingdeeSalOutStockModelResponse)(nil),                       // 203: kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse
	(*KingdeeSalOutStockResponse)(nil),                            // 204: kingdee_service.kingdee_ito.KingdeeSalOutStockResponse
	(*KingdeeSalOutStockRetrieveRequest)(nil),                     // 205: kingdee_service.kingdee_ito.KingdeeSalOutStockRetrieveRequest
	(*KingdeeSalOutStockSubHeadEntityResponse)(nil),               // 206: kingdee_service.kingdee_ito.KingdeeSalOutStockSubHeadEntityResponse
	(*KingdeeSalReturnStockDestroyRequest)(nil),                   // 207: kingdee_service.kingdee_ito.KingdeeSalReturnStockDestroyRequest
	(*KingdeeSalReturnStockEntityResponse)(nil),                   // 208: kingdee_service.kingdee_ito.KingdeeSalReturnStockEntityResponse
	(*KingdeeSalReturnStockListRequest)(nil),                      // 209: kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest
	(*KingdeeSalReturnStockListResponse)(nil),                     // 210: kingdee_service.kingdee_ito.KingdeeSalReturnStockListResponse
	(*KingdeeSalReturnStockModelResponse)(nil),                    // 211: kingdee_service.kingdee_ito.KingdeeSalReturnStockModelResponse
	(*KingdeeSalReturnStockPartialUpdateRequest)(nil),             // 212: kingdee_service.kingdee_ito.KingdeeSalReturnStockPartialUpdateRequest
	(*KingdeeSalReturnStockRequest)(nil),                          // 213: kingdee_service.kingdee_ito.KingdeeSalReturnStockRequest
	(*KingdeeSalReturnStockResponse)(nil),                         // 214: kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	(*KingdeeSalReturnStockRetrieveRequest)(nil),                  // 215: kingdee_service.kingdee_ito.KingdeeSalReturnStockRetrieveRequest
	(*KingdeeSalReturnStockSubHeadEntityResponse)(nil),            // 216: kingdee_service.kingdee_ito.KingdeeSalReturnStockSubHeadEntityResponse
	(*KingdeeSettleEntityResponse)(nil),                           // 217: kingdee_service.kingdee_ito.KingdeeSettleEntityResponse
	(*KingdeeShopNoInfoRequest)(nil),                              // 218: kingdee_service.kingdee_ito.KingdeeShopNoInfoRequest
	(*KingdeeShopNoInfoResponse)(nil),                             // 219: kingdee_service.kingdee_ito.KingdeeShopNoInfoResponse
	(*KingdeeStkMisDeliveryFEntityResponse)(nil),                  // 220: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse
	(*KingdeeStkMisDeliveryListResponse)(nil),                     // 221: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryListResponse
	(*KingdeeStkMisDeliveryModelResponse)(nil),                    // 222: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse
	(*KingdeeStkMisDeliveryResponse)(nil),                         // 223: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryResponse
	(*KingdeeStockNoInfoRequest)(nil),                             // 224: kingdee_service.kingdee_ito.KingdeeStockNoInfoRequest
	(*KingdeeStockNoInfoResponse)(nil),                            // 225: kingdee_service.kingdee_ito.KingdeeStockNoInfoResponse
	(*KingdeeTradeDestroyRequest)(nil),                            // 226: kingdee_service.kingdee_ito.KingdeeTradeDestroyRequest
	(*KingdeeTradeListRequest)(nil),                               // 227: kingdee_service.kingdee_ito.KingdeeTradeListRequest
	(*KingdeeTradeListResponse)(nil),                              // 228: kingdee_service.kingdee_ito.KingdeeTradeListResponse
	(*KingdeeTradePartialUpdateRequest)(nil),                      // 229: kingdee_service.kingdee_ito.KingdeeTradePartialUpdateRequest
	(*KingdeeTradeRequest)(nil),                                   // 230: kingdee_service.kingdee_ito.KingdeeTradeRequest
	(*KingdeeTradeResponse)(nil),                                  // 231: kingdee_service.kingdee_ito.KingdeeTradeResponse
	(*KingdeeTradeRetrieveRequest)(nil),                           // 232: kingdee_service.kingdee_ito.KingdeeTradeRetrieveRequest
	(*KingdeeTransferListRequest)(nil),                            // 233: kingdee_service.kingdee_ito.KingdeeTransferListRequest
	(*KingdeeTransferOrderListResponse)(nil),                      // 234: kingdee_service.kingdee_ito.KingdeeTransferOrderListResponse
	(*KingdeeTransferOrderResponse)(nil),                          // 235: kingdee_service.kingdee_ito.KingdeeTransferOrderResponse
	(*LabelNumberValueResponse)(nil),                              // 236: kingdee_service.kingdee_ito.LabelNumberValueResponse
	(*LabelValueResponse)(nil),                                    // 237: kingdee_service.kingdee_ito.LabelValueResponse
	(*MatchTradeRefundRequest)(nil),                               // 238: kingdee_service.kingdee_ito.MatchTradeRefundRequest
	(*MatchTradeRefundResponse)(nil),                              // 239: kingdee_service.kingdee_ito.MatchTradeRefundResponse
	(*PeriodAggTradeRequest)(nil),                                 // 240: kingdee_service.kingdee_ito.PeriodAggTradeRequest
	(*PeriodAggTradeResponse)(nil),                                // 241: kingdee_service.kingdee_ito.PeriodAggTradeResponse
	(*PeriodicTaskCreateRequest)(nil),                             // 242: kingdee_service.kingdee_ito.PeriodicTaskCreateRequest
	(*PeriodicTaskDestroyRequest)(nil),                            // 243: kingdee_service.kingdee_ito.PeriodicTaskDestroyRequest
	(*PeriodicTaskListRequest)(nil),                               // 244: kingdee_service.kingdee_ito.PeriodicTaskListRequest
	(*PeriodicTaskListResponse)(nil),                              // 245: kingdee_service.kingdee_ito.PeriodicTaskListResponse
	(*PeriodicTaskPartialUpdateRequest)(nil),                      // 246: kingdee_service.kingdee_ito.PeriodicTaskPartialUpdateRequest
	(*PeriodicTaskRequest)(nil),                                   // 247: kingdee_service.kingdee_ito.PeriodicTaskRequest
	(*PeriodicTaskResponse)(nil),                                  // 248: kingdee_service.kingdee_ito.PeriodicTaskResponse
	(*PeriodicTaskRetrieveRequest)(nil),                           // 249: kingdee_service.kingdee_ito.PeriodicTaskRetrieveRequest
	(*PeriodicTaskUpdateRequest)(nil),                             // 250: kingdee_service.kingdee_ito.PeriodicTaskUpdateRequest
	(*PushToKingDeeSalOutStockRequest)(nil),                       // 251: kingdee_service.kingdee_ito.PushToKingDeeSalOutStockRequest
	(*PushToKingDeeSalOutStockResponse)(nil),                      // 252: kingdee_service.kingdee_ito.PushToKingDeeSalOutStockResponse
	(*PushToKingDeeSalReturnStockRequest)(nil),                    // 253: kingdee_service.kingdee_ito.PushToKingDeeSalReturnStockRequest
	(*PushToKingDeeSalReturnStockResponse)(nil),                   // 254: kingdee_service.kingdee_ito.PushToKingDeeSalReturnStockResponse
	(*QueryKdPurchaseNoSyncStatusRequest)(nil),                    // 255: kingdee_service.kingdee_ito.QueryKdPurchaseNoSyncStatusRequest
	(*QueryKdPurchaseNoSyncStatusResponse)(nil),                   // 256: kingdee_service.kingdee_ito.QueryKdPurchaseNoSyncStatusResponse
	(*QueryKdPurchaseReturnSyncStatusRequest)(nil),                // 257: kingdee_service.kingdee_ito.QueryKdPurchaseReturnSyncStatusRequest
	(*QueryKdPurchaseReturnSyncStatusResponse)(nil),               // 258: kingdee_service.kingdee_ito.QueryKdPurchaseReturnSyncStatusResponse
	(*QueryKdReceiveBillSyncStatusRequest)(nil),                   // 259: kingdee_service.kingdee_ito.QueryKdReceiveBillSyncStatusRequest
	(*QueryKdReceiveBillSyncStatusResponse)(nil),                  // 260: kingdee_service.kingdee_ito.QueryKdReceiveBillSyncStatusResponse
	(*QueryKdTransferOrderSyncStatusRequest)(nil),                 // 261: kingdee_service.kingdee_ito.QueryKdTransferOrderSyncStatusRequest
	(*QueryKdTransferOrderSyncStatusResponse)(nil),                // 262: kingdee_service.kingdee_ito.QueryKdTransferOrderSyncStatusResponse
	(*QueryKingdeePurchaseOrderRequest)(nil),                      // 263: kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderRequest
	(*QueryKingdeePurchaseOrderResponse)(nil),                     // 264: kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderResponse
	(*RevokeKingdeeSalOutstockRequest)(nil),                       // 265: kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockRequest
	(*RevokeKingdeeSalOutstockResponse)(nil),                      // 266: kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockResponse
	(*RunPeriodAggSharedTaskRequest)(nil),                         // 267: kingdee_service.kingdee_ito.RunPeriodAggSharedTaskRequest
	(*RunPeriodAggSharedTaskResponse)(nil),                        // 268: kingdee_service.kingdee_ito.RunPeriodAggSharedTaskResponse
	(*RunPeriodPushRepairToKingdeeMisDeliveryRequest)(nil),        // 269: kingdee_service.kingdee_ito.RunPeriodPushRepairToKingdeeMisDeliveryRequest
	(*RunPeriodPushRepairToKingdeeMisDeliveryResponse)(nil),       // 270: kingdee_service.kingdee_ito.RunPeriodPushRepairToKingdeeMisDeliveryResponse
	(*RunPeriodPushSeedingToKingdeeTransferDirectRequest)(nil),    // 271: kingdee_service.kingdee_ito.RunPeriodPushSeedingToKingdeeTransferDirectRequest
	(*RunPeriodPushSeedingToKingdeeTransferDirectResponse)(nil),   // 272: kingdee_service.kingdee_ito.RunPeriodPushSeedingToKingdeeTransferDirectResponse
	(*RunPeriodPushSwapRefundToKingdeeRequest)(nil),               // 273: kingdee_service.kingdee_ito.RunPeriodPushSwapRefundToKingdeeRequest
	(*RunPeriodPushSwapRefundToKingdeeResponse)(nil),              // 274: kingdee_service.kingdee_ito.RunPeriodPushSwapRefundToKingdeeResponse
	(*RunPeriodPushSwapSalOutStockToKingdeeRequest)(nil),          // 275: kingdee_service.kingdee_ito.RunPeriodPushSwapSalOutStockToKingdeeRequest
	(*RunPeriodPushSwapSalOutStockToKingdeeResponse)(nil),         // 276: kingdee_service.kingdee_ito.RunPeriodPushSwapSalOutStockToKingdeeResponse
	(*RunPeriodPushToKingDeeSalOutStockRequest)(nil),              // 277: kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockRequest
	(*RunPeriodPushToKingDeeSalOutStockResponse)(nil),             // 278: kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockResponse
	(*RunPeriodicTaskRequest)(nil),                                // 279: kingdee_service.kingdee_ito.RunPeriodicTaskRequest
	(*RunPeriodicTaskResponse)(nil),                               // 280: kingdee_service.kingdee_ito.RunPeriodicTaskResponse
	(*RunSharedTaskRequest)(nil),                                  // 281: kingdee_service.kingdee_ito.RunSharedTaskRequest
	(*RunSharedTaskResponse)(nil),                                 // 282: kingdee_service.kingdee_ito.RunSharedTaskResponse
	(*SeedingKingdeeStkTransferDirectEntityResponse)(nil),         // 283: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse
	(*SeedingKingdeeStkTransferDirectListResponse)(nil),           // 284: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectListResponse
	(*SeedingKingdeeStkTransferDirectModelResponse)(nil),          // 285: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse
	(*SeedingKingdeeStkTransferDirectResponse)(nil),               // 286: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectResponse
	(*StaticsRequest)(nil),                                        // 287: kingdee_service.kingdee_ito.StaticsRequest
	(*StaticsResponse)(nil),                                       // 288: kingdee_service.kingdee_ito.StaticsResponse
	(*StopKdReceiveBillFromWdtRequest)(nil),                       // 289: kingdee_service.kingdee_ito.StopKdReceiveBillFromWdtRequest
	(*StopKdReceiveBillFromWdtResponse)(nil),                      // 290: kingdee_service.kingdee_ito.StopKdReceiveBillFromWdtResponse
	(*StopPeriodicTaskRequest)(nil),                               // 291: kingdee_service.kingdee_ito.StopPeriodicTaskRequest
	(*StopPeriodicTaskResponse)(nil),                              // 292: kingdee_service.kingdee_ito.StopPeriodicTaskResponse
	(*SwapKingdeeSalOutStockEntityResponse)(nil),                  // 293: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockEntityResponse
	(*SwapKingdeeSalOutStockListResponse)(nil),                    // 294: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockListResponse
	(*SwapKingdeeSalOutStockModelResponse)(nil),                   // 295: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse
	(*SwapKingdeeSalOutStockResponse)(nil),                        // 296: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockResponse
	(*SwapKingdeeSalReturnStockEntityResponse)(nil),               // 297: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse
	(*SwapKingdeeSalReturnStockListResponse)(nil),                 // 298: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockListResponse
	(*SwapKingdeeSalReturnStockModelResponse)(nil),                // 299: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse
	(*SwapKingdeeSalReturnStockResponse)(nil),                     // 300: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockResponse
	(*SyncKdPurchaseReturnRequest)(nil),                           // 301: kingdee_service.kingdee_ito.SyncKdPurchaseReturnRequest
	(*SyncKdPurchaseReturnResponse)(nil),                          // 302: kingdee_service.kingdee_ito.SyncKdPurchaseReturnResponse
	(*SyncKdTransferOrderRequest)(nil),                            // 303: kingdee_service.kingdee_ito.SyncKdTransferOrderRequest
	(*SyncKdTransferOrderResponse)(nil),                           // 304: kingdee_service.kingdee_ito.SyncKdTransferOrderResponse
	(*TaskProgressDestroyRequest)(nil),                            // 305: kingdee_service.kingdee_ito.TaskProgressDestroyRequest
	(*TaskProgressListRequest)(nil),                               // 306: kingdee_service.kingdee_ito.TaskProgressListRequest
	(*TaskProgressListResponse)(nil),                              // 307: kingdee_service.kingdee_ito.TaskProgressListResponse
	(*TaskProgressPartialUpdateRequest)(nil),                      // 308: kingdee_service.kingdee_ito.TaskProgressPartialUpdateRequest
	(*TaskProgressRequest)(nil),                                   // 309: kingdee_service.kingdee_ito.TaskProgressRequest
	(*TaskProgressResponse)(nil),                                  // 310: kingdee_service.kingdee_ito.TaskProgressResponse
	(*TaskProgressRetrieveRequest)(nil),                           // 311: kingdee_service.kingdee_ito.TaskProgressRetrieveRequest
	(*TaskResultCreateRequest)(nil),                               // 312: kingdee_service.kingdee_ito.TaskResultCreateRequest
	(*TaskResultDestroyRequest)(nil),                              // 313: kingdee_service.kingdee_ito.TaskResultDestroyRequest
	(*TaskResultListRequest)(nil),                                 // 314: kingdee_service.kingdee_ito.TaskResultListRequest
	(*TaskResultListResponse)(nil),                                // 315: kingdee_service.kingdee_ito.TaskResultListResponse
	(*TaskResultPartialUpdateRequest)(nil),                        // 316: kingdee_service.kingdee_ito.TaskResultPartialUpdateRequest
	(*TaskResultRequest)(nil),                                     // 317: kingdee_service.kingdee_ito.TaskResultRequest
	(*TaskResultResponse)(nil),                                    // 318: kingdee_service.kingdee_ito.TaskResultResponse
	(*TaskResultRetrieveRequest)(nil),                             // 319: kingdee_service.kingdee_ito.TaskResultRetrieveRequest
	(*TaskResultUpdateRequest)(nil),                               // 320: kingdee_service.kingdee_ito.TaskResultUpdateRequest
	(*TaskSigAggAlipayBillRequest)(nil),                           // 321: kingdee_service.kingdee_ito.TaskSigAggAlipayBillRequest
	(*TaskSigAggAlipayBillResponse)(nil),                          // 322: kingdee_service.kingdee_ito.TaskSigAggAlipayBillResponse
	(*TaskSigAggRepairStockoutRequest)(nil),                       // 323: kingdee_service.kingdee_ito.TaskSigAggRepairStockoutRequest
	(*TaskSigAggRepairStockoutResponse)(nil),                      // 324: kingdee_service.kingdee_ito.TaskSigAggRepairStockoutResponse
	(*TaskSigAggSeedingTradeRequest)(nil),                         // 325: kingdee_service.kingdee_ito.TaskSigAggSeedingTradeRequest
	(*TaskSigAggSeedingTradeResponse)(nil),                        // 326: kingdee_service.kingdee_ito.TaskSigAggSeedingTradeResponse
	(*TaskSigAggSwapStockinRequest)(nil),                          // 327: kingdee_service.kingdee_ito.TaskSigAggSwapStockinRequest
	(*TaskSigAggSwapStockinResponse)(nil),                         // 328: kingdee_service.kingdee_ito.TaskSigAggSwapStockinResponse
	(*TaskSigAggSwapTradeRequest)(nil),                            // 329: kingdee_service.kingdee_ito.TaskSigAggSwapTradeRequest
	(*TaskSigAggSwapTradeResponse)(nil),                           // 330: kingdee_service.kingdee_ito.TaskSigAggSwapTradeResponse
	(*TaskSigAggTradeRefundRequest)(nil),                          // 331: kingdee_service.kingdee_ito.TaskSigAggTradeRefundRequest
	(*TaskSigAggTradeRefundResponse)(nil),                         // 332: kingdee_service.kingdee_ito.TaskSigAggTradeRefundResponse
	(*TaskSigAggTradeRefundStockInRequest)(nil),                   // 333: kingdee_service.kingdee_ito.TaskSigAggTradeRefundStockInRequest
	(*TaskSigAggTradeRequest)(nil),                                // 334: kingdee_service.kingdee_ito.TaskSigAggTradeRequest
	(*TaskSigAggTradeResponse)(nil),                               // 335: kingdee_service.kingdee_ito.TaskSigAggTradeResponse
	(*TaskSigAggTransStockOutInRequest)(nil),                      // 336: kingdee_service.kingdee_ito.TaskSigAggTransStockOutInRequest
	(*TaskSigAggTransferRequest)(nil),                             // 337: kingdee_service.kingdee_ito.TaskSigAggTransferRequest
	(*TaskSigFetchStockinOrderRequest)(nil),                       // 338: kingdee_service.kingdee_ito.TaskSigFetchStockinOrderRequest
	(*TaskSigFetchStockinOrderResponse)(nil),                      // 339: kingdee_service.kingdee_ito.TaskSigFetchStockinOrderResponse
	(*TaskSigFetchTradeRefundRequest)(nil),                        // 340: kingdee_service.kingdee_ito.TaskSigFetchTradeRefundRequest
	(*TaskSigFetchTradeRefundResponse)(nil),                       // 341: kingdee_service.kingdee_ito.TaskSigFetchTradeRefundResponse
	(*TaskSigFetchWdtTradeRequest)(nil),                           // 342: kingdee_service.kingdee_ito.TaskSigFetchWdtTradeRequest
	(*TaskSigFetchWdtTradeResponse)(nil),                          // 343: kingdee_service.kingdee_ito.TaskSigFetchWdtTradeResponse
	(*TaskSigMatchTradeRefundRequest)(nil),                        // 344: kingdee_service.kingdee_ito.TaskSigMatchTradeRefundRequest
	(*TaskSigMatchTradeRefundResponse)(nil),                       // 345: kingdee_service.kingdee_ito.TaskSigMatchTradeRefundResponse
	(*TaskSigPushTradeRefundRequest)(nil),                         // 346: kingdee_service.kingdee_ito.TaskSigPushTradeRefundRequest
	(*TaskSigPushTradeRefundResponse)(nil),                        // 347: kingdee_service.kingdee_ito.TaskSigPushTradeRefundResponse
	(*TaskSigPushTransStockInRequest)(nil),                        // 348: kingdee_service.kingdee_ito.TaskSigPushTransStockInRequest
	(*TaskSigPushTransStockOutRequest)(nil),                       // 349: kingdee_service.kingdee_ito.TaskSigPushTransStockOutRequest
	(*TaskSigPushTransferRequest)(nil),                            // 350: kingdee_service.kingdee_ito.TaskSigPushTransferRequest
	(*TransferCreateOptsRequest)(nil),                             // 351: kingdee_service.kingdee_ito.TransferCreateOptsRequest
	(*TransferCreateSKUOptsRequest)(nil),                          // 352: kingdee_service.kingdee_ito.TransferCreateSKUOptsRequest
	(*TransferOptionResponse)(nil),                                // 353: kingdee_service.kingdee_ito.TransferOptionResponse
	(*TransferStockinOptionResponse)(nil),                         // 354: kingdee_service.kingdee_ito.TransferStockinOptionResponse
	(*TransferStockoutOptionResponse)(nil),                        // 355: kingdee_service.kingdee_ito.TransferStockoutOptionResponse
	(*VasOrderAggListRepairKingdeeStkMisDeliveryRequest)(nil),     // 356: kingdee_service.kingdee_ito.VasOrderAggListRepairKingdeeStkMisDeliveryRequest
	(*VasOrderAggListSeedingKingdeeStkTransferDirectRequest)(nil), // 357: kingdee_service.kingdee_ito.VasOrderAggListSeedingKingdeeStkTransferDirectRequest
	(*VasOrderAggListSwapKingdeeSalOutStockRequest)(nil),          // 358: kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalOutStockRequest
	(*VasOrderAggListSwapKingdeeSalReturnStockRequest)(nil),       // 359: kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalReturnStockRequest
	(*WdtOptionResponse)(nil),                                     // 360: kingdee_service.kingdee_ito.WdtOptionResponse
	(*WdtPurchaseOrderDestroyRequest)(nil),                        // 361: kingdee_service.kingdee_ito.WdtPurchaseOrderDestroyRequest
	(*WdtPurchaseOrderDetailsResponse)(nil),                       // 362: kingdee_service.kingdee_ito.WdtPurchaseOrderDetailsResponse
	(*WdtPurchaseOrderListRequest)(nil),                           // 363: kingdee_service.kingdee_ito.WdtPurchaseOrderListRequest
	(*WdtPurchaseOrderListResponse)(nil),                          // 364: kingdee_service.kingdee_ito.WdtPurchaseOrderListResponse
	(*WdtPurchaseOrderPartialUpdateRequest)(nil),                  // 365: kingdee_service.kingdee_ito.WdtPurchaseOrderPartialUpdateRequest
	(*WdtPurchaseOrderRequest)(nil),                               // 366: kingdee_service.kingdee_ito.WdtPurchaseOrderRequest
	(*WdtPurchaseOrderResponse)(nil),                              // 367: kingdee_service.kingdee_ito.WdtPurchaseOrderResponse
	(*WdtPurchaseOrderRetrieveRequest)(nil),                       // 368: kingdee_service.kingdee_ito.WdtPurchaseOrderRetrieveRequest
	(*WdtPurchaseReturnDestroyRequest)(nil),                       // 369: kingdee_service.kingdee_ito.WdtPurchaseReturnDestroyRequest
	(*WdtPurchaseReturnDetailResponse)(nil),                       // 370: kingdee_service.kingdee_ito.WdtPurchaseReturnDetailResponse
	(*WdtPurchaseReturnListRequest)(nil),                          // 371: kingdee_service.kingdee_ito.WdtPurchaseReturnListRequest
	(*WdtPurchaseReturnListResponse)(nil),                         // 372: kingdee_service.kingdee_ito.WdtPurchaseReturnListResponse
	(*WdtPurchaseReturnLogisticsResponse)(nil),                    // 373: kingdee_service.kingdee_ito.WdtPurchaseReturnLogisticsResponse
	(*WdtPurchaseReturnPartialUpdateRequest)(nil),                 // 374: kingdee_service.kingdee_ito.WdtPurchaseReturnPartialUpdateRequest
	(*WdtPurchaseReturnRequest)(nil),                              // 375: kingdee_service.kingdee_ito.WdtPurchaseReturnRequest
	(*WdtPurchaseReturnResponse)(nil),                             // 376: kingdee_service.kingdee_ito.WdtPurchaseReturnResponse
	(*WdtPurchaseReturnRetrieveRequest)(nil),                      // 377: kingdee_service.kingdee_ito.WdtPurchaseReturnRetrieveRequest
	(*WdtShopListRequest)(nil),                                    // 378: kingdee_service.kingdee_ito.WdtShopListRequest
	(*WdtShopListResponse)(nil),                                   // 379: kingdee_service.kingdee_ito.WdtShopListResponse
	(*WdtShopResponse)(nil),                                       // 380: kingdee_service.kingdee_ito.WdtShopResponse
	(*WdtStockListRequest)(nil),                                   // 381: kingdee_service.kingdee_ito.WdtStockListRequest
	(*WdtStockListResponse)(nil),                                  // 382: kingdee_service.kingdee_ito.WdtStockListResponse
	(*WdtStockResponse)(nil),                                      // 383: kingdee_service.kingdee_ito.WdtStockResponse
	(*WdtStockinDetailModelResponse)(nil),                         // 384: kingdee_service.kingdee_ito.WdtStockinDetailModelResponse
	(*WdtStockinModelListRequest)(nil),                            // 385: kingdee_service.kingdee_ito.WdtStockinModelListRequest
	(*WdtStockinModelListResponse)(nil),                           // 386: kingdee_service.kingdee_ito.WdtStockinModelListResponse
	(*WdtStockinModelResponse)(nil),                               // 387: kingdee_service.kingdee_ito.WdtStockinModelResponse
	(*WdtStockinOrderPurchaseDestroyRequest)(nil),                 // 388: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseDestroyRequest
	(*WdtStockinOrderPurchaseDetailResponse)(nil),                 // 389: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseDetailResponse
	(*WdtStockinOrderPurchaseListRequest)(nil),                    // 390: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseListRequest
	(*WdtStockinOrderPurchaseListResponse)(nil),                   // 391: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseListResponse
	(*WdtStockinOrderPurchasePartialUpdateRequest)(nil),           // 392: kingdee_service.kingdee_ito.WdtStockinOrderPurchasePartialUpdateRequest
	(*WdtStockinOrderPurchaseRequest)(nil),                        // 393: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseRequest
	(*WdtStockinOrderPurchaseResponse)(nil),                       // 394: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseResponse
	(*WdtStockinOrderPurchaseRetrieveRequest)(nil),                // 395: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseRetrieveRequest
	(*WdtStockinTransferOrderDetailResponse)(nil),                 // 396: kingdee_service.kingdee_ito.WdtStockinTransferOrderDetailResponse
	(*WdtStockinTransferOrderResponse)(nil),                       // 397: kingdee_service.kingdee_ito.WdtStockinTransferOrderResponse
	(*WdtStockoutPurchaseReturnDestroyRequest)(nil),               // 398: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDestroyRequest
	(*WdtStockoutPurchaseReturnDetailRequest)(nil),                // 399: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDetailRequest
	(*WdtStockoutPurchaseReturnDetailResponse)(nil),               // 400: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDetailResponse
	(*WdtStockoutPurchaseReturnListRequest)(nil),                  // 401: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListRequest
	(*WdtStockoutPurchaseReturnListResponse)(nil),                 // 402: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListResponse
	(*WdtStockoutPurchaseReturnPartialUpdateRequest)(nil),         // 403: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPartialUpdateRequest
	(*WdtStockoutPurchaseReturnPositionRequest)(nil),              // 404: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPositionRequest
	(*WdtStockoutPurchaseReturnPositionResponse)(nil),             // 405: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPositionResponse
	(*WdtStockoutPurchaseReturnRequest)(nil),                      // 406: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRequest
	(*WdtStockoutPurchaseReturnResponse)(nil),                     // 407: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	(*WdtStockoutPurchaseReturnRetrieveRequest)(nil),              // 408: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRetrieveRequest
	(*WdtStockoutTransferOrderDetailResponse)(nil),                // 409: kingdee_service.kingdee_ito.WdtStockoutTransferOrderDetailResponse
	(*WdtStockoutTransferOrderPositionResponse)(nil),              // 410: kingdee_service.kingdee_ito.WdtStockoutTransferOrderPositionResponse
	(*WdtStockoutTransferOrderResponse)(nil),                      // 411: kingdee_service.kingdee_ito.WdtStockoutTransferOrderResponse
	(*WdtTradeGoodslistResponse)(nil),                             // 412: kingdee_service.kingdee_ito.WdtTradeGoodslistResponse
	(*WdtTradeListRequest)(nil),                                   // 413: kingdee_service.kingdee_ito.WdtTradeListRequest
	(*WdtTradeListResponse)(nil),                                  // 414: kingdee_service.kingdee_ito.WdtTradeListResponse
	(*WdtTradeRefundDestroyRequest)(nil),                          // 415: kingdee_service.kingdee_ito.WdtTradeRefundDestroyRequest
	(*WdtTradeRefundDiscountResponse)(nil),                        // 416: kingdee_service.kingdee_ito.WdtTradeRefundDiscountResponse
	(*WdtTradeRefundGoodsResponse)(nil),                           // 417: kingdee_service.kingdee_ito.WdtTradeRefundGoodsResponse
	(*WdtTradeRefundListRequest)(nil),                             // 418: kingdee_service.kingdee_ito.WdtTradeRefundListRequest
	(*WdtTradeRefundListResponse)(nil),                            // 419: kingdee_service.kingdee_ito.WdtTradeRefundListResponse
	(*WdtTradeRefundPartialUpdateRequest)(nil),                    // 420: kingdee_service.kingdee_ito.WdtTradeRefundPartialUpdateRequest
	(*WdtTradeRefundRequest)(nil),                                 // 421: kingdee_service.kingdee_ito.WdtTradeRefundRequest
	(*WdtTradeRefundResponse)(nil),                                // 422: kingdee_service.kingdee_ito.WdtTradeRefundResponse
	(*WdtTradeRefundRetrieveRequest)(nil),                         // 423: kingdee_service.kingdee_ito.WdtTradeRefundRetrieveRequest
	(*WdtTradeRefundStockinDestroyRequest)(nil),                   // 424: kingdee_service.kingdee_ito.WdtTradeRefundStockinDestroyRequest
	(*WdtTradeRefundStockinDetailsRequest)(nil),                   // 425: kingdee_service.kingdee_ito.WdtTradeRefundStockinDetailsRequest
	(*WdtTradeRefundStockinDetailsResponse)(nil),                  // 426: kingdee_service.kingdee_ito.WdtTradeRefundStockinDetailsResponse
	(*WdtTradeRefundStockinListRequest)(nil),                      // 427: kingdee_service.kingdee_ito.WdtTradeRefundStockinListRequest
	(*WdtTradeRefundStockinListResponse)(nil),                     // 428: kingdee_service.kingdee_ito.WdtTradeRefundStockinListResponse
	(*WdtTradeRefundStockinPartialUpdateRequest)(nil),             // 429: kingdee_service.kingdee_ito.WdtTradeRefundStockinPartialUpdateRequest
	(*WdtTradeRefundStockinRequest)(nil),                          // 430: kingdee_service.kingdee_ito.WdtTradeRefundStockinRequest
	(*WdtTradeRefundStockinResponse)(nil),                         // 431: kingdee_service.kingdee_ito.WdtTradeRefundStockinResponse
	(*WdtTradeRefundStockinRetrieveRequest)(nil),                  // 432: kingdee_service.kingdee_ito.WdtTradeRefundStockinRetrieveRequest
	(*WdtTradeResponse)(nil),                                      // 433: kingdee_service.kingdee_ito.WdtTradeResponse
	(*WdtTradeRetrieveRequest)(nil),                               // 434: kingdee_service.kingdee_ito.WdtTradeRetrieveRequest
	(*WdtTransferOrderDestroyRequest)(nil),                        // 435: kingdee_service.kingdee_ito.WdtTransferOrderDestroyRequest
	(*WdtTransferOrderDetailRequest)(nil),                         // 436: kingdee_service.kingdee_ito.WdtTransferOrderDetailRequest
	(*WdtTransferOrderDetailResponse)(nil),                        // 437: kingdee_service.kingdee_ito.WdtTransferOrderDetailResponse
	(*WdtTransferOrderListRequest)(nil),                           // 438: kingdee_service.kingdee_ito.WdtTransferOrderListRequest
	(*WdtTransferOrderListResponse)(nil),                          // 439: kingdee_service.kingdee_ito.WdtTransferOrderListResponse
	(*WdtTransferOrderPartialUpdateRequest)(nil),                  // 440: kingdee_service.kingdee_ito.WdtTransferOrderPartialUpdateRequest
	(*WdtTransferOrderRequest)(nil),                               // 441: kingdee_service.kingdee_ito.WdtTransferOrderRequest
	(*WdtTransferOrderResponse)(nil),                              // 442: kingdee_service.kingdee_ito.WdtTransferOrderResponse
	(*WdtTransferOrderRetrieveRequest)(nil),                       // 443: kingdee_service.kingdee_ito.WdtTransferOrderRetrieveRequest
	(*structpb.Struct)(nil),                                       // 444: google.protobuf.Struct
	(*emptypb.Empty)(nil),                                         // 445: google.protobuf.Empty
}
var file_kingdee_ito_proto_depIdxs = []int32{
	444, // 0: kingdee_service.kingdee_ito.AggParamsTradeListRequest._filters:type_name -> google.protobuf.Struct
	444, // 1: kingdee_service.kingdee_ito.AggParamsTradeListRequest._pagination:type_name -> google.protobuf.Struct
	8,   // 2: kingdee_service.kingdee_ito.AggParamsTradeListResponse.results:type_name -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	444, // 3: kingdee_service.kingdee_ito.AggTransferListRequest._filters:type_name -> google.protobuf.Struct
	444, // 4: kingdee_service.kingdee_ito.AggTransferListRequest._pagination:type_name -> google.protobuf.Struct
	33,  // 5: kingdee_service.kingdee_ito.AggTransferOrderListResponse.results:type_name -> kingdee_service.kingdee_ito.AggTransferOrderResponse
	30,  // 6: kingdee_service.kingdee_ito.AggTransferOrderModelResponse.FEntity:type_name -> kingdee_service.kingdee_ito.AggTransferOrderEntryResponse
	32,  // 7: kingdee_service.kingdee_ito.AggTransferOrderResponse.Model:type_name -> kingdee_service.kingdee_ito.AggTransferOrderModelResponse
	36,  // 8: kingdee_service.kingdee_ito.AggTransferOrderResponse.stock_in_entities:type_name -> kingdee_service.kingdee_ito.AggTransferStockInEntitiesResponse
	39,  // 9: kingdee_service.kingdee_ito.AggTransferOrderResponse.stock_out_entities:type_name -> kingdee_service.kingdee_ito.AggTransferStockOutEntitiesResponse
	34,  // 10: kingdee_service.kingdee_ito.AggTransferStockInEntitiesModelResponse.FSTKTRSINENTRY:type_name -> kingdee_service.kingdee_ito.AggTransferStockInEntitiesEntryResponse
	35,  // 11: kingdee_service.kingdee_ito.AggTransferStockInEntitiesResponse.Model:type_name -> kingdee_service.kingdee_ito.AggTransferStockInEntitiesModelResponse
	37,  // 12: kingdee_service.kingdee_ito.AggTransferStockOutEntitiesModelResponse.FSTKTRSOUTENTRY:type_name -> kingdee_service.kingdee_ito.AggTransferStockOutEntitiesEntryResponse
	38,  // 13: kingdee_service.kingdee_ito.AggTransferStockOutEntitiesResponse.Model:type_name -> kingdee_service.kingdee_ito.AggTransferStockOutEntitiesModelResponse
	40,  // 14: kingdee_service.kingdee_ito.AlipayBillAggEntitiesResponse.goods_list:type_name -> kingdee_service.kingdee_ito.AliPayGoodsListResponse
	40,  // 15: kingdee_service.kingdee_ito.AlipayBillAggEntitiesResponse.refund_list:type_name -> kingdee_service.kingdee_ito.AliPayGoodsListResponse
	444, // 16: kingdee_service.kingdee_ito.AlipayBillAggResultListRequest._filters:type_name -> google.protobuf.Struct
	444, // 17: kingdee_service.kingdee_ito.AlipayBillAggResultListRequest._pagination:type_name -> google.protobuf.Struct
	47,  // 18: kingdee_service.kingdee_ito.AlipayBillAggResultListResponse.results:type_name -> kingdee_service.kingdee_ito.AlipayBillAggResultResponse
	40,  // 19: kingdee_service.kingdee_ito.AlipayBillAggResultResponse.goods_list:type_name -> kingdee_service.kingdee_ito.AliPayGoodsListResponse
	40,  // 20: kingdee_service.kingdee_ito.AlipayBillAggResultResponse.refund_list:type_name -> kingdee_service.kingdee_ito.AliPayGoodsListResponse
	444, // 21: kingdee_service.kingdee_ito.AlipayBillEntitiesListRequest._filters:type_name -> google.protobuf.Struct
	444, // 22: kingdee_service.kingdee_ito.AlipayBillEntitiesListRequest._pagination:type_name -> google.protobuf.Struct
	51,  // 23: kingdee_service.kingdee_ito.AlipayBillEntitiesListResponse.results:type_name -> kingdee_service.kingdee_ito.AlipayBillEntitiesResponse
	444, // 24: kingdee_service.kingdee_ito.AlipayBillListRequest._filters:type_name -> google.protobuf.Struct
	444, // 25: kingdee_service.kingdee_ito.AlipayBillListRequest._pagination:type_name -> google.protobuf.Struct
	54,  // 26: kingdee_service.kingdee_ito.AlipayBillListResponse.results:type_name -> kingdee_service.kingdee_ito.AlipayBillResponse
	41,  // 27: kingdee_service.kingdee_ito.AlipayBillResponse.trans_list:type_name -> kingdee_service.kingdee_ito.AlipayBillAggEntitiesResponse
	70,  // 28: kingdee_service.kingdee_ito.CeleryTaskInfoListResponse.results:type_name -> kingdee_service.kingdee_ito.CeleryTaskInfoResponse
	444, // 29: kingdee_service.kingdee_ito.ChannelShopConfigListRequest._filters:type_name -> google.protobuf.Struct
	444, // 30: kingdee_service.kingdee_ito.ChannelShopConfigListRequest._pagination:type_name -> google.protobuf.Struct
	77,  // 31: kingdee_service.kingdee_ito.ChannelShopConfigListResponse.results:type_name -> kingdee_service.kingdee_ito.ChannelShopConfigResponse
	444, // 32: kingdee_service.kingdee_ito.ClockedScheduleListRequest._filters:type_name -> google.protobuf.Struct
	444, // 33: kingdee_service.kingdee_ito.ClockedScheduleListRequest._pagination:type_name -> google.protobuf.Struct
	86,  // 34: kingdee_service.kingdee_ito.ClockedScheduleListResponse.results:type_name -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	444, // 35: kingdee_service.kingdee_ito.CrontabScheduleListRequest._filters:type_name -> google.protobuf.Struct
	444, // 36: kingdee_service.kingdee_ito.CrontabScheduleListRequest._pagination:type_name -> google.protobuf.Struct
	104, // 37: kingdee_service.kingdee_ito.CrontabScheduleListResponse.results:type_name -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	444, // 38: kingdee_service.kingdee_ito.IntervalScheduleListRequest._filters:type_name -> google.protobuf.Struct
	444, // 39: kingdee_service.kingdee_ito.IntervalScheduleListRequest._pagination:type_name -> google.protobuf.Struct
	155, // 40: kingdee_service.kingdee_ito.IntervalScheduleListResponse.results:type_name -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	444, // 41: kingdee_service.kingdee_ito.KingdeePurchaseListRequest._filters:type_name -> google.protobuf.Struct
	444, // 42: kingdee_service.kingdee_ito.KingdeePurchaseListRequest._pagination:type_name -> google.protobuf.Struct
	174, // 43: kingdee_service.kingdee_ito.KingdeePurchaseListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	163, // 44: kingdee_service.kingdee_ito.KingdeePurchaseOrderFPOOrderResponse.FEntryDeliveryPlan:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseOrderEntryDeliPlanResponse
	444, // 45: kingdee_service.kingdee_ito.KingdeePurchaseOrderListRequest._filters:type_name -> google.protobuf.Struct
	444, // 46: kingdee_service.kingdee_ito.KingdeePurchaseOrderListRequest._pagination:type_name -> google.protobuf.Struct
	170, // 47: kingdee_service.kingdee_ito.KingdeePurchaseOrderListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseOrderResponse
	164, // 48: kingdee_service.kingdee_ito.KingdeePurchaseOrderModelResponse.FPOOrderEntry:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseOrderFPOOrderResponse
	167, // 49: kingdee_service.kingdee_ito.KingdeePurchaseOrderResponse.Model:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseOrderModelResponse
	444, // 50: kingdee_service.kingdee_ito.KingdeePurchaseReturnListRequest._filters:type_name -> google.protobuf.Struct
	444, // 51: kingdee_service.kingdee_ito.KingdeePurchaseReturnListRequest._pagination:type_name -> google.protobuf.Struct
	182, // 52: kingdee_service.kingdee_ito.KingdeePurchaseReturnListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseReturnResponse
	177, // 53: kingdee_service.kingdee_ito.KingdeePurchaseReturnResponse.PUR_MRAPPENTRY:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseReturnEntryResponse
	158, // 54: kingdee_service.kingdee_ito.KingdeeReceivableEntityDetailResponse.FCostId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	189, // 55: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FsubHeadSuppiler:type_name -> kingdee_service.kingdee_ito.KingdeeReceivableSubHeadSupplierResponse
	188, // 56: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FsubHeadFinc:type_name -> kingdee_service.kingdee_ito.KingdeeReceivableSubHeadFincResponse
	184, // 57: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FEntityDetail:type_name -> kingdee_service.kingdee_ito.KingdeeReceivableEntityDetailResponse
	185, // 58: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FEntityPlan:type_name -> kingdee_service.kingdee_ito.KingdeeReceivableEntityPlanResponse
	158, // 59: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FBillTypeID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 60: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FCustomerID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 61: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FCurrencyID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 62: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FSettleOrgID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 63: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FPayOrgID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 64: kingdee_service.kingdee_ito.KingdeeReceivableModelResponse.FSaleOrgID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	186, // 65: kingdee_service.kingdee_ito.KingdeeReceivableResponse.model:type_name -> kingdee_service.kingdee_ito.KingdeeReceivableModelResponse
	158, // 66: kingdee_service.kingdee_ito.KingdeeReceivableSubHeadFincResponse.FMainBookStdCurrId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 67: kingdee_service.kingdee_ito.KingdeeReceivableSubHeadFincResponse.FExchangeType:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 68: kingdee_service.kingdee_ito.KingdeeReceivableSubHeadSupplierResponse.FOrderId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 69: kingdee_service.kingdee_ito.KingdeeReceivableSubHeadSupplierResponse.FTransferId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 70: kingdee_service.kingdee_ito.KingdeeReceivableSubHeadSupplierResponse.FChargeId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	191, // 71: kingdee_service.kingdee_ito.KingdeeReceiveBillFDetailResponse.FDetailEntity_Link:type_name -> kingdee_service.kingdee_ito.KingdeeReceiveBillFDetailLinkResponse
	444, // 72: kingdee_service.kingdee_ito.KingdeeReceiveBillListRequest._filters:type_name -> google.protobuf.Struct
	444, // 73: kingdee_service.kingdee_ito.KingdeeReceiveBillListRequest._pagination:type_name -> google.protobuf.Struct
	198, // 74: kingdee_service.kingdee_ito.KingdeeReceiveBillListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeReceiveBillResponse
	192, // 75: kingdee_service.kingdee_ito.KingdeeReceiveBillModelResponse.FDetailEntity:type_name -> kingdee_service.kingdee_ito.KingdeeReceiveBillFDetailResponse
	195, // 76: kingdee_service.kingdee_ito.KingdeeReceiveBillResponse.Model:type_name -> kingdee_service.kingdee_ito.KingdeeReceiveBillModelResponse
	444, // 77: kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest._filters:type_name -> google.protobuf.Struct
	444, // 78: kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest._pagination:type_name -> google.protobuf.Struct
	204, // 79: kingdee_service.kingdee_ito.KingdeeSalOutStockListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeSalOutStockResponse
	206, // 80: kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse.SubHeadEntity:type_name -> kingdee_service.kingdee_ito.KingdeeSalOutStockSubHeadEntityResponse
	200, // 81: kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse.FEntity:type_name -> kingdee_service.kingdee_ito.KingdeeSalOutStockFEntityResponse
	203, // 82: kingdee_service.kingdee_ito.KingdeeSalOutStockResponse.model:type_name -> kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse
	444, // 83: kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest._filters:type_name -> google.protobuf.Struct
	444, // 84: kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest._pagination:type_name -> google.protobuf.Struct
	214, // 85: kingdee_service.kingdee_ito.KingdeeSalReturnStockListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	208, // 86: kingdee_service.kingdee_ito.KingdeeSalReturnStockModelResponse.FEntity:type_name -> kingdee_service.kingdee_ito.KingdeeSalReturnStockEntityResponse
	216, // 87: kingdee_service.kingdee_ito.KingdeeSalReturnStockModelResponse.SubHeadEntity:type_name -> kingdee_service.kingdee_ito.KingdeeSalReturnStockSubHeadEntityResponse
	211, // 88: kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse.Model:type_name -> kingdee_service.kingdee_ito.KingdeeSalReturnStockModelResponse
	158, // 89: kingdee_service.kingdee_ito.KingdeeSettleEntityResponse.FSettleCurrId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 90: kingdee_service.kingdee_ito.KingdeeSettleEntityResponse.FSettleOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 91: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FCustMatId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 92: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FMaterialId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	444, // 93: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FAuxPropId:type_name -> google.protobuf.Struct
	158, // 94: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FUnitID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 95: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FBaseUnitId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 96: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FStockId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	444, // 97: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FStockLocId:type_name -> google.protobuf.Struct
	158, // 98: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FLot:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 99: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FProductGroupID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 100: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FOwnerId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 101: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FBomId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 102: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FCostItem:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 103: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FKeeperId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 104: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FExtAuxUnitId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 105: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FStockStatusId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	444, // 106: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse.FSerialSubEntity:type_name -> google.protobuf.Struct
	223, // 107: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeStkMisDeliveryResponse
	220, // 108: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FEntity:type_name -> kingdee_service.kingdee_ito.KingdeeStkMisDeliveryFEntityResponse
	158, // 109: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FBillTypeID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 110: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FStockOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 111: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FPickOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 112: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FCustId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 113: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FDeptId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	131, // 114: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FPickerId:type_name -> kingdee_service.kingdee_ito.FStaffNumberResponse
	158, // 115: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FStockerId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 116: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FStockerGroupId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 117: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FOwnerIdHead:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 118: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse.FBaseCurrId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	222, // 119: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryResponse.model:type_name -> kingdee_service.kingdee_ito.KingdeeStkMisDeliveryModelResponse
	187, // 120: kingdee_service.kingdee_ito.KingdeeStkMisDeliveryResponse.receivable:type_name -> kingdee_service.kingdee_ito.KingdeeReceivableResponse
	444, // 121: kingdee_service.kingdee_ito.KingdeeTradeListRequest._filters:type_name -> google.protobuf.Struct
	444, // 122: kingdee_service.kingdee_ito.KingdeeTradeListRequest._pagination:type_name -> google.protobuf.Struct
	231, // 123: kingdee_service.kingdee_ito.KingdeeTradeListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	444, // 124: kingdee_service.kingdee_ito.KingdeeTransferListRequest._filters:type_name -> google.protobuf.Struct
	444, // 125: kingdee_service.kingdee_ito.KingdeeTransferListRequest._pagination:type_name -> google.protobuf.Struct
	235, // 126: kingdee_service.kingdee_ito.KingdeeTransferOrderListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeTransferOrderResponse
	154, // 127: kingdee_service.kingdee_ito.PeriodicTaskCreateRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	444, // 128: kingdee_service.kingdee_ito.PeriodicTaskListRequest._filters:type_name -> google.protobuf.Struct
	444, // 129: kingdee_service.kingdee_ito.PeriodicTaskListRequest._pagination:type_name -> google.protobuf.Struct
	248, // 130: kingdee_service.kingdee_ito.PeriodicTaskListResponse.results:type_name -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	154, // 131: kingdee_service.kingdee_ito.PeriodicTaskPartialUpdateRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	154, // 132: kingdee_service.kingdee_ito.PeriodicTaskRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	155, // 133: kingdee_service.kingdee_ito.PeriodicTaskResponse.interval:type_name -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	154, // 134: kingdee_service.kingdee_ito.PeriodicTaskUpdateRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	158, // 135: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FMaterialID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 136: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FUnitID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 137: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FSrcStockId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 138: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FDestStockId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 139: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FSrcStockStatusId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 140: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FDestStockStatusId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 141: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FBaseUnitId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 142: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FKeeperId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 143: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FOwnerId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 144: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FKeeperOutId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 145: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FOwnerOutId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 146: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FDestMaterialId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 147: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FSaleUnitId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 148: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse.FPriceUnitID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	286, // 149: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectListResponse.results:type_name -> kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectResponse
	158, // 150: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse.FBillTypeID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 151: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse.FTransferBizType:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 152: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse.FStockOutOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 153: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse.FOwnerOutIdHead:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 154: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse.FStockOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 155: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse.FOwnerIdHead:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	283, // 156: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse.FBillEntry:type_name -> kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectEntityResponse
	285, // 157: kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectResponse.model:type_name -> kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectModelResponse
	158, // 158: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockEntityResponse.FMaterialID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 159: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockEntityResponse.FOwnerId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 160: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockEntityResponse.FStockId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 161: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockEntityResponse.FUnitID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	296, // 162: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockListResponse.results:type_name -> kingdee_service.kingdee_ito.SwapKingdeeSalOutStockResponse
	158, // 163: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FBillTypeID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 164: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FZBStockID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 165: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FXSBillType:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 166: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FOwnerIdHead:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 167: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FSaleOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 168: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FStockOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 169: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FBranchId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 170: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FCustomerID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 171: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FSettleID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 172: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FPayerID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 173: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FReceiverID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 174: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FTransferBizType:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 175: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FProp2:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	293, // 176: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.FEntity:type_name -> kingdee_service.kingdee_ito.SwapKingdeeSalOutStockEntityResponse
	217, // 177: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse.SubHeadEntity:type_name -> kingdee_service.kingdee_ito.KingdeeSettleEntityResponse
	295, // 178: kingdee_service.kingdee_ito.SwapKingdeeSalOutStockResponse.model:type_name -> kingdee_service.kingdee_ito.SwapKingdeeSalOutStockModelResponse
	158, // 179: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse.FMaterialID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 180: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse.FUnitID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 181: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse.FReturnType:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 182: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse.FOwnerId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 183: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse.FStockId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 184: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse.FStockStatusId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	300, // 185: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockListResponse.results:type_name -> kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockResponse
	158, // 186: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FBillTypeID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 187: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FReturnReason:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 188: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FSaleOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 189: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FTransferBizType:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 190: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FStockOrgId:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 191: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FOwnerIdHead:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 192: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FZBStockID:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	158, // 193: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FProp2:type_name -> kingdee_service.kingdee_ito.KingdeeFNumberResponse
	297, // 194: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.FEntity:type_name -> kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockEntityResponse
	217, // 195: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse.SubHeadEntity:type_name -> kingdee_service.kingdee_ito.KingdeeSettleEntityResponse
	299, // 196: kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockResponse.model:type_name -> kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockModelResponse
	444, // 197: kingdee_service.kingdee_ito.TaskProgressListRequest._filters:type_name -> google.protobuf.Struct
	444, // 198: kingdee_service.kingdee_ito.TaskProgressListRequest._pagination:type_name -> google.protobuf.Struct
	310, // 199: kingdee_service.kingdee_ito.TaskProgressListResponse.results:type_name -> kingdee_service.kingdee_ito.TaskProgressResponse
	444, // 200: kingdee_service.kingdee_ito.TaskResultListRequest._filters:type_name -> google.protobuf.Struct
	444, // 201: kingdee_service.kingdee_ito.TaskResultListRequest._pagination:type_name -> google.protobuf.Struct
	318, // 202: kingdee_service.kingdee_ito.TaskResultListResponse.results:type_name -> kingdee_service.kingdee_ito.TaskResultResponse
	352, // 203: kingdee_service.kingdee_ito.TransferCreateOptsRequest.skus:type_name -> kingdee_service.kingdee_ito.TransferCreateSKUOptsRequest
	236, // 204: kingdee_service.kingdee_ito.TransferOptionResponse.type:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	236, // 205: kingdee_service.kingdee_ito.TransferOptionResponse.mode:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	236, // 206: kingdee_service.kingdee_ito.TransferOptionResponse.status:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	236, // 207: kingdee_service.kingdee_ito.TransferOptionResponse.wms_status:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	355, // 208: kingdee_service.kingdee_ito.TransferOptionResponse.stock_out:type_name -> kingdee_service.kingdee_ito.TransferStockoutOptionResponse
	354, // 209: kingdee_service.kingdee_ito.TransferOptionResponse.stock_in:type_name -> kingdee_service.kingdee_ito.TransferStockinOptionResponse
	236, // 210: kingdee_service.kingdee_ito.TransferStockinOptionResponse.status:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	236, // 211: kingdee_service.kingdee_ito.TransferStockinOptionResponse.push_kingdee_status:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	236, // 212: kingdee_service.kingdee_ito.TransferStockinOptionResponse.src_order_type:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	236, // 213: kingdee_service.kingdee_ito.TransferStockoutOptionResponse.status:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	236, // 214: kingdee_service.kingdee_ito.TransferStockoutOptionResponse.push_kingdee_status:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	444, // 215: kingdee_service.kingdee_ito.VasOrderAggListRepairKingdeeStkMisDeliveryRequest._filters:type_name -> google.protobuf.Struct
	444, // 216: kingdee_service.kingdee_ito.VasOrderAggListRepairKingdeeStkMisDeliveryRequest._pagination:type_name -> google.protobuf.Struct
	444, // 217: kingdee_service.kingdee_ito.VasOrderAggListSeedingKingdeeStkTransferDirectRequest._filters:type_name -> google.protobuf.Struct
	444, // 218: kingdee_service.kingdee_ito.VasOrderAggListSeedingKingdeeStkTransferDirectRequest._pagination:type_name -> google.protobuf.Struct
	444, // 219: kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalOutStockRequest._filters:type_name -> google.protobuf.Struct
	444, // 220: kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalOutStockRequest._pagination:type_name -> google.protobuf.Struct
	444, // 221: kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalReturnStockRequest._filters:type_name -> google.protobuf.Struct
	444, // 222: kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalReturnStockRequest._pagination:type_name -> google.protobuf.Struct
	237, // 223: kingdee_service.kingdee_ito.WdtOptionResponse.brand:type_name -> kingdee_service.kingdee_ito.LabelValueResponse
	236, // 224: kingdee_service.kingdee_ito.WdtOptionResponse.business_type:type_name -> kingdee_service.kingdee_ito.LabelNumberValueResponse
	444, // 225: kingdee_service.kingdee_ito.WdtPurchaseOrderListRequest._filters:type_name -> google.protobuf.Struct
	444, // 226: kingdee_service.kingdee_ito.WdtPurchaseOrderListRequest._pagination:type_name -> google.protobuf.Struct
	367, // 227: kingdee_service.kingdee_ito.WdtPurchaseOrderListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtPurchaseOrderResponse
	362, // 228: kingdee_service.kingdee_ito.WdtPurchaseOrderResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtPurchaseOrderDetailsResponse
	444, // 229: kingdee_service.kingdee_ito.WdtPurchaseReturnListRequest._filters:type_name -> google.protobuf.Struct
	444, // 230: kingdee_service.kingdee_ito.WdtPurchaseReturnListRequest._pagination:type_name -> google.protobuf.Struct
	376, // 231: kingdee_service.kingdee_ito.WdtPurchaseReturnListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtPurchaseReturnResponse
	370, // 232: kingdee_service.kingdee_ito.WdtPurchaseReturnResponse.detail_list:type_name -> kingdee_service.kingdee_ito.WdtPurchaseReturnDetailResponse
	373, // 233: kingdee_service.kingdee_ito.WdtPurchaseReturnResponse.logistics_detail_list:type_name -> kingdee_service.kingdee_ito.WdtPurchaseReturnLogisticsResponse
	444, // 234: kingdee_service.kingdee_ito.WdtShopListRequest._filters:type_name -> google.protobuf.Struct
	444, // 235: kingdee_service.kingdee_ito.WdtShopListRequest._pagination:type_name -> google.protobuf.Struct
	380, // 236: kingdee_service.kingdee_ito.WdtShopListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtShopResponse
	444, // 237: kingdee_service.kingdee_ito.WdtStockListRequest._filters:type_name -> google.protobuf.Struct
	444, // 238: kingdee_service.kingdee_ito.WdtStockListRequest._pagination:type_name -> google.protobuf.Struct
	383, // 239: kingdee_service.kingdee_ito.WdtStockListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtStockResponse
	444, // 240: kingdee_service.kingdee_ito.WdtStockinModelListRequest._filters:type_name -> google.protobuf.Struct
	444, // 241: kingdee_service.kingdee_ito.WdtStockinModelListRequest._pagination:type_name -> google.protobuf.Struct
	387, // 242: kingdee_service.kingdee_ito.WdtStockinModelListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtStockinModelResponse
	384, // 243: kingdee_service.kingdee_ito.WdtStockinModelResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtStockinDetailModelResponse
	444, // 244: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseListRequest._filters:type_name -> google.protobuf.Struct
	444, // 245: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseListRequest._pagination:type_name -> google.protobuf.Struct
	394, // 246: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseResponse
	389, // 247: kingdee_service.kingdee_ito.WdtStockinOrderPurchaseResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseDetailResponse
	396, // 248: kingdee_service.kingdee_ito.WdtStockinTransferOrderResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtStockinTransferOrderDetailResponse
	404, // 249: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDetailRequest.position_list:type_name -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPositionRequest
	405, // 250: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDetailResponse.position_list:type_name -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPositionResponse
	444, // 251: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListRequest._filters:type_name -> google.protobuf.Struct
	444, // 252: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListRequest._pagination:type_name -> google.protobuf.Struct
	407, // 253: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	399, // 254: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPartialUpdateRequest.details_list:type_name -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDetailRequest
	399, // 255: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRequest.details_list:type_name -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDetailRequest
	400, // 256: kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDetailResponse
	410, // 257: kingdee_service.kingdee_ito.WdtStockoutTransferOrderDetailResponse.position_list:type_name -> kingdee_service.kingdee_ito.WdtStockoutTransferOrderPositionResponse
	409, // 258: kingdee_service.kingdee_ito.WdtStockoutTransferOrderResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtStockoutTransferOrderDetailResponse
	444, // 259: kingdee_service.kingdee_ito.WdtTradeListRequest._filters:type_name -> google.protobuf.Struct
	444, // 260: kingdee_service.kingdee_ito.WdtTradeListRequest._pagination:type_name -> google.protobuf.Struct
	433, // 261: kingdee_service.kingdee_ito.WdtTradeListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtTradeResponse
	444, // 262: kingdee_service.kingdee_ito.WdtTradeRefundListRequest._filters:type_name -> google.protobuf.Struct
	444, // 263: kingdee_service.kingdee_ito.WdtTradeRefundListRequest._pagination:type_name -> google.protobuf.Struct
	422, // 264: kingdee_service.kingdee_ito.WdtTradeRefundListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtTradeRefundResponse
	417, // 265: kingdee_service.kingdee_ito.WdtTradeRefundResponse.refund_order_list:type_name -> kingdee_service.kingdee_ito.WdtTradeRefundGoodsResponse
	416, // 266: kingdee_service.kingdee_ito.WdtTradeRefundResponse.refund_out_goods_list:type_name -> kingdee_service.kingdee_ito.WdtTradeRefundDiscountResponse
	444, // 267: kingdee_service.kingdee_ito.WdtTradeRefundStockinListRequest._filters:type_name -> google.protobuf.Struct
	444, // 268: kingdee_service.kingdee_ito.WdtTradeRefundStockinListRequest._pagination:type_name -> google.protobuf.Struct
	431, // 269: kingdee_service.kingdee_ito.WdtTradeRefundStockinListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtTradeRefundStockinResponse
	425, // 270: kingdee_service.kingdee_ito.WdtTradeRefundStockinPartialUpdateRequest.details_list:type_name -> kingdee_service.kingdee_ito.WdtTradeRefundStockinDetailsRequest
	425, // 271: kingdee_service.kingdee_ito.WdtTradeRefundStockinRequest.details_list:type_name -> kingdee_service.kingdee_ito.WdtTradeRefundStockinDetailsRequest
	426, // 272: kingdee_service.kingdee_ito.WdtTradeRefundStockinResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtTradeRefundStockinDetailsResponse
	412, // 273: kingdee_service.kingdee_ito.WdtTradeResponse.goods_list:type_name -> kingdee_service.kingdee_ito.WdtTradeGoodslistResponse
	444, // 274: kingdee_service.kingdee_ito.WdtTransferOrderListRequest._filters:type_name -> google.protobuf.Struct
	444, // 275: kingdee_service.kingdee_ito.WdtTransferOrderListRequest._pagination:type_name -> google.protobuf.Struct
	442, // 276: kingdee_service.kingdee_ito.WdtTransferOrderListResponse.results:type_name -> kingdee_service.kingdee_ito.WdtTransferOrderResponse
	436, // 277: kingdee_service.kingdee_ito.WdtTransferOrderPartialUpdateRequest.details_list:type_name -> kingdee_service.kingdee_ito.WdtTransferOrderDetailRequest
	436, // 278: kingdee_service.kingdee_ito.WdtTransferOrderRequest.details_list:type_name -> kingdee_service.kingdee_ito.WdtTransferOrderDetailRequest
	437, // 279: kingdee_service.kingdee_ito.WdtTransferOrderResponse.details_list:type_name -> kingdee_service.kingdee_ito.WdtTransferOrderDetailResponse
	397, // 280: kingdee_service.kingdee_ito.WdtTransferOrderResponse.stock_in_entities:type_name -> kingdee_service.kingdee_ito.WdtStockinTransferOrderResponse
	411, // 281: kingdee_service.kingdee_ito.WdtTransferOrderResponse.stock_out_entities:type_name -> kingdee_service.kingdee_ito.WdtStockoutTransferOrderResponse
	0,   // 282: kingdee_service.kingdee_ito.AlipayBillAggResultController.AggAliPayBySrcTid:input_type -> kingdee_service.kingdee_ito.AggAliPayBySrcTidRequest
	46,  // 283: kingdee_service.kingdee_ito.AlipayBillAggResultController.Create:input_type -> kingdee_service.kingdee_ito.AlipayBillAggResultRequest
	42,  // 284: kingdee_service.kingdee_ito.AlipayBillAggResultController.Destroy:input_type -> kingdee_service.kingdee_ito.AlipayBillAggResultDestroyRequest
	113, // 285: kingdee_service.kingdee_ito.AlipayBillAggResultController.DestroyAggBillResult:input_type -> kingdee_service.kingdee_ito.DestroyAggBillResultRequest
	133, // 286: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchAlipayBillAsync:input_type -> kingdee_service.kingdee_ito.FetchAlipayLogAsyncRequest
	142, // 287: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchAlipayBillTask:input_type -> kingdee_service.kingdee_ito.FetchTaskRequest
	139, // 288: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchSrcTrade:input_type -> kingdee_service.kingdee_ito.FetchSrcTradeRequest
	142, // 289: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchSrcTradeTask:input_type -> kingdee_service.kingdee_ito.FetchTaskRequest
	43,  // 290: kingdee_service.kingdee_ito.AlipayBillAggResultController.List:input_type -> kingdee_service.kingdee_ito.AlipayBillAggResultListRequest
	52,  // 291: kingdee_service.kingdee_ito.AlipayBillAggResultController.ListAlipayBill:input_type -> kingdee_service.kingdee_ito.AlipayBillListRequest
	49,  // 292: kingdee_service.kingdee_ito.AlipayBillAggResultController.ListBillEntities:input_type -> kingdee_service.kingdee_ito.AlipayBillEntitiesListRequest
	45,  // 293: kingdee_service.kingdee_ito.AlipayBillAggResultController.PartialUpdate:input_type -> kingdee_service.kingdee_ito.AlipayBillAggResultPartialUpdateRequest
	48,  // 294: kingdee_service.kingdee_ito.AlipayBillAggResultController.Retrieve:input_type -> kingdee_service.kingdee_ito.AlipayBillAggResultRetrieveRequest
	55,  // 295: kingdee_service.kingdee_ito.AlipayBillAggResultController.RetrieveAlipayBill:input_type -> kingdee_service.kingdee_ito.AlipayBillRetrieveRequest
	56,  // 296: kingdee_service.kingdee_ito.AlipayBillAggResultController.RetrieveBillEntities:input_type -> kingdee_service.kingdee_ito.BillEntitiesRetrieveRequest
	321, // 297: kingdee_service.kingdee_ito.AlipayBillAggResultController.TaskSigAggAlipayBill:input_type -> kingdee_service.kingdee_ito.TaskSigAggAlipayBillRequest
	46,  // 298: kingdee_service.kingdee_ito.AlipayBillAggResultController.Update:input_type -> kingdee_service.kingdee_ito.AlipayBillAggResultRequest
	85,  // 299: kingdee_service.kingdee_ito.CeleryTaskController.CreateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRequest
	103, // 300: kingdee_service.kingdee_ito.CeleryTaskController.CreateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRequest
	154, // 301: kingdee_service.kingdee_ito.CeleryTaskController.CreateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	247, // 302: kingdee_service.kingdee_ito.CeleryTaskController.CreatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRequest
	309, // 303: kingdee_service.kingdee_ito.CeleryTaskController.CreateTaskProgress:input_type -> kingdee_service.kingdee_ito.TaskProgressRequest
	317, // 304: kingdee_service.kingdee_ito.CeleryTaskController.CreateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRequest
	81,  // 305: kingdee_service.kingdee_ito.CeleryTaskController.DestroyClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleDestroyRequest
	99,  // 306: kingdee_service.kingdee_ito.CeleryTaskController.DestroyCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleDestroyRequest
	150, // 307: kingdee_service.kingdee_ito.CeleryTaskController.DestroyIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleDestroyRequest
	243, // 308: kingdee_service.kingdee_ito.CeleryTaskController.DestroyPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskDestroyRequest
	305, // 309: kingdee_service.kingdee_ito.CeleryTaskController.DestroyTaskProgress:input_type -> kingdee_service.kingdee_ito.TaskProgressDestroyRequest
	313, // 310: kingdee_service.kingdee_ito.CeleryTaskController.DestroyTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultDestroyRequest
	71,  // 311: kingdee_service.kingdee_ito.CeleryTaskController.ListCeleryTasks:input_type -> kingdee_service.kingdee_ito.CeleryTaskQueryOptsRequest
	82,  // 312: kingdee_service.kingdee_ito.CeleryTaskController.ListClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleListRequest
	100, // 313: kingdee_service.kingdee_ito.CeleryTaskController.ListCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleListRequest
	151, // 314: kingdee_service.kingdee_ito.CeleryTaskController.ListIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleListRequest
	244, // 315: kingdee_service.kingdee_ito.CeleryTaskController.ListPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskListRequest
	306, // 316: kingdee_service.kingdee_ito.CeleryTaskController.ListTaskProgress:input_type -> kingdee_service.kingdee_ito.TaskProgressListRequest
	314, // 317: kingdee_service.kingdee_ito.CeleryTaskController.ListTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultListRequest
	84,  // 318: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedSchedulePartialUpdateRequest
	102, // 319: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabSchedulePartialUpdateRequest
	153, // 320: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalSchedulePartialUpdateRequest
	246, // 321: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskPartialUpdateRequest
	308, // 322: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateTaskProgress:input_type -> kingdee_service.kingdee_ito.TaskProgressPartialUpdateRequest
	316, // 323: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultPartialUpdateRequest
	87,  // 324: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRetrieveRequest
	105, // 325: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRetrieveRequest
	156, // 326: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRetrieveRequest
	249, // 327: kingdee_service.kingdee_ito.CeleryTaskController.RetrievePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRetrieveRequest
	311, // 328: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveTaskProgress:input_type -> kingdee_service.kingdee_ito.TaskProgressRetrieveRequest
	319, // 329: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRetrieveRequest
	72,  // 330: kingdee_service.kingdee_ito.CeleryTaskController.RunCeleryTask:input_type -> kingdee_service.kingdee_ito.CeleryTaskRunOptsRequest
	85,  // 331: kingdee_service.kingdee_ito.CeleryTaskController.UpdateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRequest
	103, // 332: kingdee_service.kingdee_ito.CeleryTaskController.UpdateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRequest
	154, // 333: kingdee_service.kingdee_ito.CeleryTaskController.UpdateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	247, // 334: kingdee_service.kingdee_ito.CeleryTaskController.UpdatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRequest
	309, // 335: kingdee_service.kingdee_ito.CeleryTaskController.UpdateTaskProgress:input_type -> kingdee_service.kingdee_ito.TaskProgressRequest
	317, // 336: kingdee_service.kingdee_ito.CeleryTaskController.UpdateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRequest
	57,  // 337: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKdPurchaseReturn:input_type -> kingdee_service.kingdee_ito.BulkCreateKdPurchaseReturnRequest
	59,  // 338: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKdTransferOrder:input_type -> kingdee_service.kingdee_ito.BulkCreateKdTransferOrderRequest
	61,  // 339: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderRequest
	63,  // 340: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeePurchaseOrderSync:input_type -> kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderSyncRequest
	65,  // 341: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillRequest
	67,  // 342: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeeReceiveBillSync:input_type -> kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillSyncRequest
	173, // 343: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Create:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseRequest
	93,  // 344: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CreateKdPurchaseReturn:input_type -> kingdee_service.kingdee_ito.CreateKdPurchaseReturnRequest
	95,  // 345: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CreateKdTransferOrder:input_type -> kingdee_service.kingdee_ito.CreateKdTransferOrderRequest
	107, // 346: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CxlKdPurchaseReturnFromWdt:input_type -> kingdee_service.kingdee_ito.CxlKdPurchaseReturnFromWdtRequest
	109, // 347: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CxlKdReceiveBillFromWdt:input_type -> kingdee_service.kingdee_ito.CxlKdReceiveBillFromWdtRequest
	111, // 348: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CxlKdTransferOrderFromWdt:input_type -> kingdee_service.kingdee_ito.CxlKdTransferOrderFromWdtRequest
	159, // 349: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Destroy:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseDestroyRequest
	160, // 350: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.List:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseListRequest
	172, // 351: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.PartialUpdate:input_type -> kingdee_service.kingdee_ito.KingdeePurchasePartialUpdateRequest
	255, // 352: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdPurchaseNoSyncStatus:input_type -> kingdee_service.kingdee_ito.QueryKdPurchaseNoSyncStatusRequest
	257, // 353: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdPurchaseReturnSyncStatus:input_type -> kingdee_service.kingdee_ito.QueryKdPurchaseReturnSyncStatusRequest
	259, // 354: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdReceiveBillSyncStatus:input_type -> kingdee_service.kingdee_ito.QueryKdReceiveBillSyncStatusRequest
	261, // 355: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdTransferOrderSyncStatus:input_type -> kingdee_service.kingdee_ito.QueryKdTransferOrderSyncStatusRequest
	263, // 356: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderRequest
	175, // 357: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Retrieve:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseRetrieveRequest
	289, // 358: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.StopKdReceiveBillFromWdt:input_type -> kingdee_service.kingdee_ito.StopKdReceiveBillFromWdtRequest
	301, // 359: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.SyncKdPurchaseReturn:input_type -> kingdee_service.kingdee_ito.SyncKdPurchaseReturnRequest
	303, // 360: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.SyncKdTransferOrder:input_type -> kingdee_service.kingdee_ito.SyncKdTransferOrderRequest
	173, // 361: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Update:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseRequest
	169, // 362: kingdee_service.kingdee_ito.PurchasePlatController.CreateKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderRequest
	181, // 363: kingdee_service.kingdee_ito.PurchasePlatController.CreateKingdeePurchaseReturn:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnRequest
	197, // 364: kingdee_service.kingdee_ito.PurchasePlatController.CreateKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillRequest
	366, // 365: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtPurchaseOrder:input_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderRequest
	375, // 366: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnRequest
	406, // 367: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtStockOutPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRequest
	393, // 368: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtStockinOrderPurchase:input_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseRequest
	406, // 369: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtStockoutOrderReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRequest
	162, // 370: kingdee_service.kingdee_ito.PurchasePlatController.DestroyKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderDestroyRequest
	176, // 371: kingdee_service.kingdee_ito.PurchasePlatController.DestroyKingdeePurchaseReturn:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnDestroyRequest
	190, // 372: kingdee_service.kingdee_ito.PurchasePlatController.DestroyKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillDestroyRequest
	361, // 373: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtPurchaseOrder:input_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderDestroyRequest
	369, // 374: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnDestroyRequest
	398, // 375: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtStockOutPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDestroyRequest
	388, // 376: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtStockinOrderPurchase:input_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseDestroyRequest
	398, // 377: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtStockoutOrderReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnDestroyRequest
	165, // 378: kingdee_service.kingdee_ito.PurchasePlatController.ListKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderListRequest
	178, // 379: kingdee_service.kingdee_ito.PurchasePlatController.ListKingdeePurchaseReturn:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnListRequest
	193, // 380: kingdee_service.kingdee_ito.PurchasePlatController.ListKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillListRequest
	363, // 381: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtPurchaseOrder:input_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderListRequest
	371, // 382: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnListRequest
	401, // 383: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtStockOutPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListRequest
	390, // 384: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtStockinOrderPurchase:input_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseListRequest
	401, // 385: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtStockoutOrderReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListRequest
	168, // 386: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderPartialUpdateRequest
	180, // 387: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateKingdeePurchaseReturn:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnPartialUpdateRequest
	196, // 388: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillPartialUpdateRequest
	365, // 389: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtPurchaseOrder:input_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderPartialUpdateRequest
	374, // 390: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnPartialUpdateRequest
	403, // 391: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtStockOutPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPartialUpdateRequest
	392, // 392: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtStockinOrderPurchase:input_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchasePartialUpdateRequest
	403, // 393: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtStockoutOrderReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnPartialUpdateRequest
	171, // 394: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderRetrieveRequest
	183, // 395: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveKingdeePurchaseReturn:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnRetrieveRequest
	199, // 396: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillRetrieveRequest
	368, // 397: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtPurchaseOrder:input_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderRetrieveRequest
	377, // 398: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnRetrieveRequest
	408, // 399: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtStockOutPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRetrieveRequest
	395, // 400: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtStockinOrderPurchase:input_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseRetrieveRequest
	408, // 401: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtStockoutOrderReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRetrieveRequest
	169, // 402: kingdee_service.kingdee_ito.PurchasePlatController.UpdateKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderRequest
	181, // 403: kingdee_service.kingdee_ito.PurchasePlatController.UpdateKingdeePurchaseReturn:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnRequest
	197, // 404: kingdee_service.kingdee_ito.PurchasePlatController.UpdateKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillRequest
	366, // 405: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtPurchaseOrder:input_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderRequest
	375, // 406: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnRequest
	406, // 407: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtStockOutPurchaseReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRequest
	393, // 408: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtStockinOrderPurchase:input_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseRequest
	406, // 409: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtStockoutOrderReturn:input_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnRequest
	13,  // 410: kingdee_service.kingdee_ito.TradeAggController.AggTradeByMonth:input_type -> kingdee_service.kingdee_ito.AggTradeByMonthRequest
	15,  // 411: kingdee_service.kingdee_ito.TradeAggController.AggTradeByMonthSync:input_type -> kingdee_service.kingdee_ito.AggTradeByMonthSyncRequest
	11,  // 412: kingdee_service.kingdee_ito.TradeAggController.CountAggPushStatus:input_type -> kingdee_service.kingdee_ito.AggPushStatusCountRequest
	230, // 413: kingdee_service.kingdee_ito.TradeAggController.Create:input_type -> kingdee_service.kingdee_ito.KingdeeTradeRequest
	2,   // 414: kingdee_service.kingdee_ito.TradeAggController.CreateAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeCreateRequest
	74,  // 415: kingdee_service.kingdee_ito.TradeAggController.CreateChannelShopConfig:input_type -> kingdee_service.kingdee_ito.ChannelShopConfigCreateRequest
	80,  // 416: kingdee_service.kingdee_ito.TradeAggController.CreateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleCreateRequest
	98,  // 417: kingdee_service.kingdee_ito.TradeAggController.CreateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleCreateRequest
	149, // 418: kingdee_service.kingdee_ito.TradeAggController.CreateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleCreateRequest
	242, // 419: kingdee_service.kingdee_ito.TradeAggController.CreatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskCreateRequest
	312, // 420: kingdee_service.kingdee_ito.TradeAggController.CreateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultCreateRequest
	226, // 421: kingdee_service.kingdee_ito.TradeAggController.Destroy:input_type -> kingdee_service.kingdee_ito.KingdeeTradeDestroyRequest
	3,   // 422: kingdee_service.kingdee_ito.TradeAggController.DestroyAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeDestroyRequest
	125, // 423: kingdee_service.kingdee_ito.TradeAggController.DestroyAggTrade:input_type -> kingdee_service.kingdee_ito.DestroyAggTradeRequest
	128, // 424: kingdee_service.kingdee_ito.TradeAggController.DestroyChannelShopConfig:input_type -> kingdee_service.kingdee_ito.DestroyChannelShopConfigRequest
	81,  // 425: kingdee_service.kingdee_ito.TradeAggController.DestroyClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleDestroyRequest
	99,  // 426: kingdee_service.kingdee_ito.TradeAggController.DestroyCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleDestroyRequest
	150, // 427: kingdee_service.kingdee_ito.TradeAggController.DestroyIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleDestroyRequest
	243, // 428: kingdee_service.kingdee_ito.TradeAggController.DestroyPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskDestroyRequest
	313, // 429: kingdee_service.kingdee_ito.TradeAggController.DestroyTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultDestroyRequest
	135, // 430: kingdee_service.kingdee_ito.TradeAggController.FetchQimenTrade:input_type -> kingdee_service.kingdee_ito.FetchQimenTradeRequest
	143, // 431: kingdee_service.kingdee_ito.TradeAggController.FetchTradeFromWdtList:input_type -> kingdee_service.kingdee_ito.FetchTradeListFromWdtRequest
	218, // 432: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeShopNoInfo:input_type -> kingdee_service.kingdee_ito.KingdeeShopNoInfoRequest
	224, // 433: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeStockNoInfo:input_type -> kingdee_service.kingdee_ito.KingdeeStockNoInfoRequest
	147, // 434: kingdee_service.kingdee_ito.TradeAggController.InitChannelShopConfig:input_type -> kingdee_service.kingdee_ito.InitChannelShopConfigRequest
	227, // 435: kingdee_service.kingdee_ito.TradeAggController.List:input_type -> kingdee_service.kingdee_ito.KingdeeTradeListRequest
	4,   // 436: kingdee_service.kingdee_ito.TradeAggController.ListAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeListRequest
	75,  // 437: kingdee_service.kingdee_ito.TradeAggController.ListChannelShopConfig:input_type -> kingdee_service.kingdee_ito.ChannelShopConfigListRequest
	82,  // 438: kingdee_service.kingdee_ito.TradeAggController.ListClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleListRequest
	100, // 439: kingdee_service.kingdee_ito.TradeAggController.ListCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleListRequest
	151, // 440: kingdee_service.kingdee_ito.TradeAggController.ListIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleListRequest
	201, // 441: kingdee_service.kingdee_ito.TradeAggController.ListKingdeeSalOutStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest
	244, // 442: kingdee_service.kingdee_ito.TradeAggController.ListPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskListRequest
	314, // 443: kingdee_service.kingdee_ito.TradeAggController.ListTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultListRequest
	413, // 444: kingdee_service.kingdee_ito.TradeAggController.ListWdtTrade:input_type -> kingdee_service.kingdee_ito.WdtTradeListRequest
	6,   // 445: kingdee_service.kingdee_ito.TradeAggController.NextNoAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeNextNoRequest
	229, // 446: kingdee_service.kingdee_ito.TradeAggController.PartialUpdate:input_type -> kingdee_service.kingdee_ito.KingdeeTradePartialUpdateRequest
	240, // 447: kingdee_service.kingdee_ito.TradeAggController.PeriodAggTrade:input_type -> kingdee_service.kingdee_ito.PeriodAggTradeRequest
	251, // 448: kingdee_service.kingdee_ito.TradeAggController.PushToKingDeeSalOutStock:input_type -> kingdee_service.kingdee_ito.PushToKingDeeSalOutStockRequest
	232, // 449: kingdee_service.kingdee_ito.TradeAggController.Retrieve:input_type -> kingdee_service.kingdee_ito.KingdeeTradeRetrieveRequest
	9,   // 450: kingdee_service.kingdee_ito.TradeAggController.RetrieveAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeRetrieveRequest
	78,  // 451: kingdee_service.kingdee_ito.TradeAggController.RetrieveChannelShopConfig:input_type -> kingdee_service.kingdee_ito.ChannelShopConfigRetrieveRequest
	87,  // 452: kingdee_service.kingdee_ito.TradeAggController.RetrieveClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRetrieveRequest
	105, // 453: kingdee_service.kingdee_ito.TradeAggController.RetrieveCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRetrieveRequest
	156, // 454: kingdee_service.kingdee_ito.TradeAggController.RetrieveIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRetrieveRequest
	205, // 455: kingdee_service.kingdee_ito.TradeAggController.RetrieveKingdeeSalOutStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockRetrieveRequest
	249, // 456: kingdee_service.kingdee_ito.TradeAggController.RetrievePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRetrieveRequest
	319, // 457: kingdee_service.kingdee_ito.TradeAggController.RetrieveTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRetrieveRequest
	434, // 458: kingdee_service.kingdee_ito.TradeAggController.RetrieveWdtTrade:input_type -> kingdee_service.kingdee_ito.WdtTradeRetrieveRequest
	265, // 459: kingdee_service.kingdee_ito.TradeAggController.RevokeKingdeeSalOutstock:input_type -> kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockRequest
	267, // 460: kingdee_service.kingdee_ito.TradeAggController.RunPeriodAggSharedTask:input_type -> kingdee_service.kingdee_ito.RunPeriodAggSharedTaskRequest
	277, // 461: kingdee_service.kingdee_ito.TradeAggController.RunPeriodPushToKingDeeSalOutStock:input_type -> kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockRequest
	279, // 462: kingdee_service.kingdee_ito.TradeAggController.RunPeriodicTask:input_type -> kingdee_service.kingdee_ito.RunPeriodicTaskRequest
	281, // 463: kingdee_service.kingdee_ito.TradeAggController.RunSliceFetchTrade:input_type -> kingdee_service.kingdee_ito.RunSharedTaskRequest
	378, // 464: kingdee_service.kingdee_ito.TradeAggController.ShopOptionsWdt:input_type -> kingdee_service.kingdee_ito.WdtShopListRequest
	381, // 465: kingdee_service.kingdee_ito.TradeAggController.StockOptionsWdt:input_type -> kingdee_service.kingdee_ito.WdtStockListRequest
	291, // 466: kingdee_service.kingdee_ito.TradeAggController.StopPeriodicTask:input_type -> kingdee_service.kingdee_ito.StopPeriodicTaskRequest
	334, // 467: kingdee_service.kingdee_ito.TradeAggController.TaskSigAggTrade:input_type -> kingdee_service.kingdee_ito.TaskSigAggTradeRequest
	342, // 468: kingdee_service.kingdee_ito.TradeAggController.TaskSigFetchWdtTrade:input_type -> kingdee_service.kingdee_ito.TaskSigFetchWdtTradeRequest
	230, // 469: kingdee_service.kingdee_ito.TradeAggController.Update:input_type -> kingdee_service.kingdee_ito.KingdeeTradeRequest
	10,  // 470: kingdee_service.kingdee_ito.TradeAggController.UpdateAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeUpdateRequest
	79,  // 471: kingdee_service.kingdee_ito.TradeAggController.UpdateChannelShopConfig:input_type -> kingdee_service.kingdee_ito.ChannelShopConfigUpdateRequest
	88,  // 472: kingdee_service.kingdee_ito.TradeAggController.UpdateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleUpdateRequest
	106, // 473: kingdee_service.kingdee_ito.TradeAggController.UpdateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleUpdateRequest
	157, // 474: kingdee_service.kingdee_ito.TradeAggController.UpdateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleUpdateRequest
	250, // 475: kingdee_service.kingdee_ito.TradeAggController.UpdatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskUpdateRequest
	320, // 476: kingdee_service.kingdee_ito.TradeAggController.UpdateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultUpdateRequest
	130, // 477: kingdee_service.kingdee_ito.TradeAggController.WdtOption:input_type -> kingdee_service.kingdee_ito.EmptyRequest
	17,  // 478: kingdee_service.kingdee_ito.TradeRefundAggController.AggTradeRefund:input_type -> kingdee_service.kingdee_ito.AggTradeRefundRequest
	90,  // 479: kingdee_service.kingdee_ito.TradeRefundAggController.CountAggRefundPushStatus:input_type -> kingdee_service.kingdee_ito.CountAggRefundPushStatusRequest
	130, // 480: kingdee_service.kingdee_ito.TradeRefundAggController.CountRefundStockInPushStatus:input_type -> kingdee_service.kingdee_ito.EmptyRequest
	213, // 481: kingdee_service.kingdee_ito.TradeRefundAggController.CreateKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockRequest
	421, // 482: kingdee_service.kingdee_ito.TradeRefundAggController.CreateWdtTradeRefund:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundRequest
	430, // 483: kingdee_service.kingdee_ito.TradeRefundAggController.CreateWdtTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinRequest
	123, // 484: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyAggTradeRefund:input_type -> kingdee_service.kingdee_ito.DestroyAggTradeRefundRequest
	207, // 485: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockDestroyRequest
	415, // 486: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyWdtTradeRefund:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundDestroyRequest
	424, // 487: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyWdtTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinDestroyRequest
	137, // 488: kingdee_service.kingdee_ito.TradeRefundAggController.FetchRefundListFromWdt:input_type -> kingdee_service.kingdee_ito.FetchRefundListFromWdtRequest
	145, // 489: kingdee_service.kingdee_ito.TradeRefundAggController.FetchTradeRefund:input_type -> kingdee_service.kingdee_ito.FetchTradeRefundRequest
	209, // 490: kingdee_service.kingdee_ito.TradeRefundAggController.ListKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest
	418, // 491: kingdee_service.kingdee_ito.TradeRefundAggController.ListWdtTradeRefund:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundListRequest
	427, // 492: kingdee_service.kingdee_ito.TradeRefundAggController.ListWdtTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinListRequest
	238, // 493: kingdee_service.kingdee_ito.TradeRefundAggController.MatchTradeRefund:input_type -> kingdee_service.kingdee_ito.MatchTradeRefundRequest
	212, // 494: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockPartialUpdateRequest
	420, // 495: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateWdtTradeRefund:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundPartialUpdateRequest
	429, // 496: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateWdtTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinPartialUpdateRequest
	253, // 497: kingdee_service.kingdee_ito.TradeRefundAggController.PushToKingDeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.PushToKingDeeSalReturnStockRequest
	215, // 498: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockRetrieveRequest
	423, // 499: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveWdtTradeRefund:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundRetrieveRequest
	432, // 500: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveWdtTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinRetrieveRequest
	331, // 501: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigAggTradeRefund:input_type -> kingdee_service.kingdee_ito.TaskSigAggTradeRefundRequest
	333, // 502: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigAggTradeRefundStockIn:input_type -> kingdee_service.kingdee_ito.TaskSigAggTradeRefundStockInRequest
	340, // 503: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigFetchTradeRefund:input_type -> kingdee_service.kingdee_ito.TaskSigFetchTradeRefundRequest
	344, // 504: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigMatchTradeRefund:input_type -> kingdee_service.kingdee_ito.TaskSigMatchTradeRefundRequest
	346, // 505: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigPushTradeRefund:input_type -> kingdee_service.kingdee_ito.TaskSigPushTradeRefundRequest
	213, // 506: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockRequest
	421, // 507: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateWdtTradeRefund:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundRequest
	430, // 508: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateWdtTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinRequest
	19,  // 509: kingdee_service.kingdee_ito.TransferController.AggTransByMonth:input_type -> kingdee_service.kingdee_ito.AggTransByMonthRequest
	21,  // 510: kingdee_service.kingdee_ito.TransferController.AggTransPushStockInToKingdee:input_type -> kingdee_service.kingdee_ito.AggTransPushStockInToKingdeeRequest
	23,  // 511: kingdee_service.kingdee_ito.TransferController.AggTransPushStockOutToKingdee:input_type -> kingdee_service.kingdee_ito.AggTransPushStockOutToKingdeeRequest
	25,  // 512: kingdee_service.kingdee_ito.TransferController.AggTransPushToKingdee:input_type -> kingdee_service.kingdee_ito.AggTransPushToKingdeeRequest
	27,  // 513: kingdee_service.kingdee_ito.TransferController.AggTransStockOutIn:input_type -> kingdee_service.kingdee_ito.AggTransStockOutInRequest
	130, // 514: kingdee_service.kingdee_ito.TransferController.CountAggTransfer:input_type -> kingdee_service.kingdee_ito.EmptyRequest
	130, // 515: kingdee_service.kingdee_ito.TransferController.CountKingdeeTransfer:input_type -> kingdee_service.kingdee_ito.EmptyRequest
	441, // 516: kingdee_service.kingdee_ito.TransferController.Create:input_type -> kingdee_service.kingdee_ito.WdtTransferOrderRequest
	351, // 517: kingdee_service.kingdee_ito.TransferController.CreateTransferOrder:input_type -> kingdee_service.kingdee_ito.TransferCreateOptsRequest
	435, // 518: kingdee_service.kingdee_ito.TransferController.Destroy:input_type -> kingdee_service.kingdee_ito.WdtTransferOrderDestroyRequest
	127, // 519: kingdee_service.kingdee_ito.TransferController.DestroyAggTrans:input_type -> kingdee_service.kingdee_ito.DestroyAggTransRequest
	438, // 520: kingdee_service.kingdee_ito.TransferController.List:input_type -> kingdee_service.kingdee_ito.WdtTransferOrderListRequest
	29,  // 521: kingdee_service.kingdee_ito.TransferController.ListAggTransfer:input_type -> kingdee_service.kingdee_ito.AggTransferListRequest
	233, // 522: kingdee_service.kingdee_ito.TransferController.ListKingdeeTransfer:input_type -> kingdee_service.kingdee_ito.KingdeeTransferListRequest
	440, // 523: kingdee_service.kingdee_ito.TransferController.PartialUpdate:input_type -> kingdee_service.kingdee_ito.WdtTransferOrderPartialUpdateRequest
	443, // 524: kingdee_service.kingdee_ito.TransferController.Retrieve:input_type -> kingdee_service.kingdee_ito.WdtTransferOrderRetrieveRequest
	336, // 525: kingdee_service.kingdee_ito.TransferController.TaskSigAggTransStockOutIn:input_type -> kingdee_service.kingdee_ito.TaskSigAggTransStockOutInRequest
	337, // 526: kingdee_service.kingdee_ito.TransferController.TaskSigAggTransfer:input_type -> kingdee_service.kingdee_ito.TaskSigAggTransferRequest
	348, // 527: kingdee_service.kingdee_ito.TransferController.TaskSigPushTransStockIn:input_type -> kingdee_service.kingdee_ito.TaskSigPushTransStockInRequest
	349, // 528: kingdee_service.kingdee_ito.TransferController.TaskSigPushTransStockOut:input_type -> kingdee_service.kingdee_ito.TaskSigPushTransStockOutRequest
	350, // 529: kingdee_service.kingdee_ito.TransferController.TaskSigPushTransfer:input_type -> kingdee_service.kingdee_ito.TaskSigPushTransferRequest
	130, // 530: kingdee_service.kingdee_ito.TransferController.TransferOption:input_type -> kingdee_service.kingdee_ito.EmptyRequest
	441, // 531: kingdee_service.kingdee_ito.TransferController.Update:input_type -> kingdee_service.kingdee_ito.WdtTransferOrderRequest
	115, // 532: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggKingdeeStkMisdelivery:input_type -> kingdee_service.kingdee_ito.DestroyAggKingdeeStkMisdeliveryRequest
	117, // 533: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggSeedingKingdeeTransferDirect:input_type -> kingdee_service.kingdee_ito.DestroyAggSeedingKingdeeTransferDirectRequest
	119, // 534: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggSwapKingdeeRefund:input_type -> kingdee_service.kingdee_ito.DestroyAggSwapKingdeeRefundRequest
	121, // 535: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggSwapKingdeeSalOutStock:input_type -> kingdee_service.kingdee_ito.DestroyAggSwapKingdeeSalOutStockRequest
	385, // 536: kingdee_service.kingdee_ito.VasOrderAggController.List:input_type -> kingdee_service.kingdee_ito.WdtStockinModelListRequest
	356, // 537: kingdee_service.kingdee_ito.VasOrderAggController.ListRepairKingdeeStkMisDelivery:input_type -> kingdee_service.kingdee_ito.VasOrderAggListRepairKingdeeStkMisDeliveryRequest
	357, // 538: kingdee_service.kingdee_ito.VasOrderAggController.ListSeedingKingdeeStkTransferDirect:input_type -> kingdee_service.kingdee_ito.VasOrderAggListSeedingKingdeeStkTransferDirectRequest
	358, // 539: kingdee_service.kingdee_ito.VasOrderAggController.ListSwapKingdeeSalOutStock:input_type -> kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalOutStockRequest
	359, // 540: kingdee_service.kingdee_ito.VasOrderAggController.ListSwapKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.VasOrderAggListSwapKingdeeSalReturnStockRequest
	269, // 541: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushRepairToKingdeeMisDelivery:input_type -> kingdee_service.kingdee_ito.RunPeriodPushRepairToKingdeeMisDeliveryRequest
	271, // 542: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushSeedingToKingdeeTransferDirect:input_type -> kingdee_service.kingdee_ito.RunPeriodPushSeedingToKingdeeTransferDirectRequest
	273, // 543: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushSwapRefundToKingdee:input_type -> kingdee_service.kingdee_ito.RunPeriodPushSwapRefundToKingdeeRequest
	275, // 544: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushSwapSalOutStockToKingdee:input_type -> kingdee_service.kingdee_ito.RunPeriodPushSwapSalOutStockToKingdeeRequest
	287, // 545: kingdee_service.kingdee_ito.VasOrderAggController.StaticsRepairKingdeeStkMisDelivery:input_type -> kingdee_service.kingdee_ito.StaticsRequest
	287, // 546: kingdee_service.kingdee_ito.VasOrderAggController.StaticsSeedingKingdeeStkTransferDirect:input_type -> kingdee_service.kingdee_ito.StaticsRequest
	287, // 547: kingdee_service.kingdee_ito.VasOrderAggController.StaticsSwapKingdeeSalOutStock:input_type -> kingdee_service.kingdee_ito.StaticsRequest
	287, // 548: kingdee_service.kingdee_ito.VasOrderAggController.StaticsSwapKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.StaticsRequest
	323, // 549: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggRepairStockout:input_type -> kingdee_service.kingdee_ito.TaskSigAggRepairStockoutRequest
	325, // 550: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggSeedingTrade:input_type -> kingdee_service.kingdee_ito.TaskSigAggSeedingTradeRequest
	327, // 551: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggSwapStockin:input_type -> kingdee_service.kingdee_ito.TaskSigAggSwapStockinRequest
	329, // 552: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggSwapTrade:input_type -> kingdee_service.kingdee_ito.TaskSigAggSwapTradeRequest
	338, // 553: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigFetchStockinOrder:input_type -> kingdee_service.kingdee_ito.TaskSigFetchStockinOrderRequest
	1,   // 554: kingdee_service.kingdee_ito.AlipayBillAggResultController.AggAliPayBySrcTid:output_type -> kingdee_service.kingdee_ito.AggAliPayBySrcTidResponse
	47,  // 555: kingdee_service.kingdee_ito.AlipayBillAggResultController.Create:output_type -> kingdee_service.kingdee_ito.AlipayBillAggResultResponse
	445, // 556: kingdee_service.kingdee_ito.AlipayBillAggResultController.Destroy:output_type -> google.protobuf.Empty
	114, // 557: kingdee_service.kingdee_ito.AlipayBillAggResultController.DestroyAggBillResult:output_type -> kingdee_service.kingdee_ito.DestroyAggBillResultResponse
	134, // 558: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchAlipayBillAsync:output_type -> kingdee_service.kingdee_ito.FetchAlipayLogAsyncResponse
	132, // 559: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchAlipayBillTask:output_type -> kingdee_service.kingdee_ito.FetchAlipayBillTaskResponse
	140, // 560: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchSrcTrade:output_type -> kingdee_service.kingdee_ito.FetchSrcTradeResponse
	141, // 561: kingdee_service.kingdee_ito.AlipayBillAggResultController.FetchSrcTradeTask:output_type -> kingdee_service.kingdee_ito.FetchSrcTradeTaskResponse
	44,  // 562: kingdee_service.kingdee_ito.AlipayBillAggResultController.List:output_type -> kingdee_service.kingdee_ito.AlipayBillAggResultListResponse
	53,  // 563: kingdee_service.kingdee_ito.AlipayBillAggResultController.ListAlipayBill:output_type -> kingdee_service.kingdee_ito.AlipayBillListResponse
	50,  // 564: kingdee_service.kingdee_ito.AlipayBillAggResultController.ListBillEntities:output_type -> kingdee_service.kingdee_ito.AlipayBillEntitiesListResponse
	47,  // 565: kingdee_service.kingdee_ito.AlipayBillAggResultController.PartialUpdate:output_type -> kingdee_service.kingdee_ito.AlipayBillAggResultResponse
	47,  // 566: kingdee_service.kingdee_ito.AlipayBillAggResultController.Retrieve:output_type -> kingdee_service.kingdee_ito.AlipayBillAggResultResponse
	54,  // 567: kingdee_service.kingdee_ito.AlipayBillAggResultController.RetrieveAlipayBill:output_type -> kingdee_service.kingdee_ito.AlipayBillResponse
	51,  // 568: kingdee_service.kingdee_ito.AlipayBillAggResultController.RetrieveBillEntities:output_type -> kingdee_service.kingdee_ito.AlipayBillEntitiesResponse
	322, // 569: kingdee_service.kingdee_ito.AlipayBillAggResultController.TaskSigAggAlipayBill:output_type -> kingdee_service.kingdee_ito.TaskSigAggAlipayBillResponse
	47,  // 570: kingdee_service.kingdee_ito.AlipayBillAggResultController.Update:output_type -> kingdee_service.kingdee_ito.AlipayBillAggResultResponse
	86,  // 571: kingdee_service.kingdee_ito.CeleryTaskController.CreateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	104, // 572: kingdee_service.kingdee_ito.CeleryTaskController.CreateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	155, // 573: kingdee_service.kingdee_ito.CeleryTaskController.CreateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	248, // 574: kingdee_service.kingdee_ito.CeleryTaskController.CreatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	310, // 575: kingdee_service.kingdee_ito.CeleryTaskController.CreateTaskProgress:output_type -> kingdee_service.kingdee_ito.TaskProgressResponse
	318, // 576: kingdee_service.kingdee_ito.CeleryTaskController.CreateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	445, // 577: kingdee_service.kingdee_ito.CeleryTaskController.DestroyClockedSchedule:output_type -> google.protobuf.Empty
	445, // 578: kingdee_service.kingdee_ito.CeleryTaskController.DestroyCrontabSchedule:output_type -> google.protobuf.Empty
	445, // 579: kingdee_service.kingdee_ito.CeleryTaskController.DestroyIntervalSchedule:output_type -> google.protobuf.Empty
	445, // 580: kingdee_service.kingdee_ito.CeleryTaskController.DestroyPeriodicTask:output_type -> google.protobuf.Empty
	445, // 581: kingdee_service.kingdee_ito.CeleryTaskController.DestroyTaskProgress:output_type -> google.protobuf.Empty
	445, // 582: kingdee_service.kingdee_ito.CeleryTaskController.DestroyTaskResult:output_type -> google.protobuf.Empty
	69,  // 583: kingdee_service.kingdee_ito.CeleryTaskController.ListCeleryTasks:output_type -> kingdee_service.kingdee_ito.CeleryTaskInfoListResponse
	83,  // 584: kingdee_service.kingdee_ito.CeleryTaskController.ListClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleListResponse
	101, // 585: kingdee_service.kingdee_ito.CeleryTaskController.ListCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleListResponse
	152, // 586: kingdee_service.kingdee_ito.CeleryTaskController.ListIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleListResponse
	245, // 587: kingdee_service.kingdee_ito.CeleryTaskController.ListPeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskListResponse
	307, // 588: kingdee_service.kingdee_ito.CeleryTaskController.ListTaskProgress:output_type -> kingdee_service.kingdee_ito.TaskProgressListResponse
	315, // 589: kingdee_service.kingdee_ito.CeleryTaskController.ListTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultListResponse
	86,  // 590: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	104, // 591: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	155, // 592: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	248, // 593: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	310, // 594: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateTaskProgress:output_type -> kingdee_service.kingdee_ito.TaskProgressResponse
	318, // 595: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	86,  // 596: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	104, // 597: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	155, // 598: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	248, // 599: kingdee_service.kingdee_ito.CeleryTaskController.RetrievePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	310, // 600: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveTaskProgress:output_type -> kingdee_service.kingdee_ito.TaskProgressResponse
	318, // 601: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	73,  // 602: kingdee_service.kingdee_ito.CeleryTaskController.RunCeleryTask:output_type -> kingdee_service.kingdee_ito.CeleryTaskRunOptsResponse
	86,  // 603: kingdee_service.kingdee_ito.CeleryTaskController.UpdateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	104, // 604: kingdee_service.kingdee_ito.CeleryTaskController.UpdateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	155, // 605: kingdee_service.kingdee_ito.CeleryTaskController.UpdateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	248, // 606: kingdee_service.kingdee_ito.CeleryTaskController.UpdatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	310, // 607: kingdee_service.kingdee_ito.CeleryTaskController.UpdateTaskProgress:output_type -> kingdee_service.kingdee_ito.TaskProgressResponse
	318, // 608: kingdee_service.kingdee_ito.CeleryTaskController.UpdateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	58,  // 609: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKdPurchaseReturn:output_type -> kingdee_service.kingdee_ito.BulkCreateKdPurchaseReturnResponse
	60,  // 610: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKdTransferOrder:output_type -> kingdee_service.kingdee_ito.BulkCreateKdTransferOrderResponse
	62,  // 611: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderResponse
	64,  // 612: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeePurchaseOrderSync:output_type -> kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderSyncResponse
	66,  // 613: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeeReceiveBill:output_type -> kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillResponse
	68,  // 614: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeeReceiveBillSync:output_type -> kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillSyncResponse
	174, // 615: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Create:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	94,  // 616: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CreateKdPurchaseReturn:output_type -> kingdee_service.kingdee_ito.CreateKdPurchaseReturnResponse
	96,  // 617: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CreateKdTransferOrder:output_type -> kingdee_service.kingdee_ito.CreateKdTransferOrderResponse
	108, // 618: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CxlKdPurchaseReturnFromWdt:output_type -> kingdee_service.kingdee_ito.CxlKdPurchaseReturnFromWdtResponse
	110, // 619: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CxlKdReceiveBillFromWdt:output_type -> kingdee_service.kingdee_ito.CxlKdReceiveBillFromWdtResponse
	112, // 620: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.CxlKdTransferOrderFromWdt:output_type -> kingdee_service.kingdee_ito.CxlKdTransferOrderFromWdtResponse
	445, // 621: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Destroy:output_type -> google.protobuf.Empty
	161, // 622: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.List:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseListResponse
	174, // 623: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.PartialUpdate:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	256, // 624: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdPurchaseNoSyncStatus:output_type -> kingdee_service.kingdee_ito.QueryKdPurchaseNoSyncStatusResponse
	258, // 625: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdPurchaseReturnSyncStatus:output_type -> kingdee_service.kingdee_ito.QueryKdPurchaseReturnSyncStatusResponse
	260, // 626: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdReceiveBillSyncStatus:output_type -> kingdee_service.kingdee_ito.QueryKdReceiveBillSyncStatusResponse
	262, // 627: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKdTransferOrderSyncStatus:output_type -> kingdee_service.kingdee_ito.QueryKdTransferOrderSyncStatusResponse
	264, // 628: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderResponse
	174, // 629: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Retrieve:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	290, // 630: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.StopKdReceiveBillFromWdt:output_type -> kingdee_service.kingdee_ito.StopKdReceiveBillFromWdtResponse
	302, // 631: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.SyncKdPurchaseReturn:output_type -> kingdee_service.kingdee_ito.SyncKdPurchaseReturnResponse
	304, // 632: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.SyncKdTransferOrder:output_type -> kingdee_service.kingdee_ito.SyncKdTransferOrderResponse
	174, // 633: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Update:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	170, // 634: kingdee_service.kingdee_ito.PurchasePlatController.CreateKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderResponse
	182, // 635: kingdee_service.kingdee_ito.PurchasePlatController.CreateKingdeePurchaseReturn:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnResponse
	198, // 636: kingdee_service.kingdee_ito.PurchasePlatController.CreateKingdeeReceiveBill:output_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillResponse
	367, // 637: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtPurchaseOrder:output_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderResponse
	376, // 638: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnResponse
	407, // 639: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtStockOutPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	394, // 640: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtStockinOrderPurchase:output_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseResponse
	407, // 641: kingdee_service.kingdee_ito.PurchasePlatController.CreateWdtStockoutOrderReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	445, // 642: kingdee_service.kingdee_ito.PurchasePlatController.DestroyKingdeePurchaseOrder:output_type -> google.protobuf.Empty
	445, // 643: kingdee_service.kingdee_ito.PurchasePlatController.DestroyKingdeePurchaseReturn:output_type -> google.protobuf.Empty
	445, // 644: kingdee_service.kingdee_ito.PurchasePlatController.DestroyKingdeeReceiveBill:output_type -> google.protobuf.Empty
	445, // 645: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtPurchaseOrder:output_type -> google.protobuf.Empty
	445, // 646: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtPurchaseReturn:output_type -> google.protobuf.Empty
	445, // 647: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtStockOutPurchaseReturn:output_type -> google.protobuf.Empty
	445, // 648: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtStockinOrderPurchase:output_type -> google.protobuf.Empty
	445, // 649: kingdee_service.kingdee_ito.PurchasePlatController.DestroyWdtStockoutOrderReturn:output_type -> google.protobuf.Empty
	166, // 650: kingdee_service.kingdee_ito.PurchasePlatController.ListKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderListResponse
	179, // 651: kingdee_service.kingdee_ito.PurchasePlatController.ListKingdeePurchaseReturn:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnListResponse
	194, // 652: kingdee_service.kingdee_ito.PurchasePlatController.ListKingdeeReceiveBill:output_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillListResponse
	364, // 653: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtPurchaseOrder:output_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderListResponse
	372, // 654: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnListResponse
	402, // 655: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtStockOutPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListResponse
	391, // 656: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtStockinOrderPurchase:output_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseListResponse
	402, // 657: kingdee_service.kingdee_ito.PurchasePlatController.ListWdtStockoutOrderReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnListResponse
	170, // 658: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderResponse
	182, // 659: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateKingdeePurchaseReturn:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnResponse
	198, // 660: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateKingdeeReceiveBill:output_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillResponse
	367, // 661: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtPurchaseOrder:output_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderResponse
	376, // 662: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnResponse
	407, // 663: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtStockOutPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	394, // 664: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtStockinOrderPurchase:output_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseResponse
	407, // 665: kingdee_service.kingdee_ito.PurchasePlatController.PartialUpdateWdtStockoutOrderReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	170, // 666: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderResponse
	182, // 667: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveKingdeePurchaseReturn:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnResponse
	198, // 668: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveKingdeeReceiveBill:output_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillResponse
	367, // 669: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtPurchaseOrder:output_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderResponse
	376, // 670: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnResponse
	407, // 671: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtStockOutPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	394, // 672: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtStockinOrderPurchase:output_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseResponse
	407, // 673: kingdee_service.kingdee_ito.PurchasePlatController.RetrieveWdtStockoutOrderReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	170, // 674: kingdee_service.kingdee_ito.PurchasePlatController.UpdateKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseOrderResponse
	182, // 675: kingdee_service.kingdee_ito.PurchasePlatController.UpdateKingdeePurchaseReturn:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseReturnResponse
	198, // 676: kingdee_service.kingdee_ito.PurchasePlatController.UpdateKingdeeReceiveBill:output_type -> kingdee_service.kingdee_ito.KingdeeReceiveBillResponse
	367, // 677: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtPurchaseOrder:output_type -> kingdee_service.kingdee_ito.WdtPurchaseOrderResponse
	376, // 678: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtPurchaseReturnResponse
	407, // 679: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtStockOutPurchaseReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	394, // 680: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtStockinOrderPurchase:output_type -> kingdee_service.kingdee_ito.WdtStockinOrderPurchaseResponse
	407, // 681: kingdee_service.kingdee_ito.PurchasePlatController.UpdateWdtStockoutOrderReturn:output_type -> kingdee_service.kingdee_ito.WdtStockoutPurchaseReturnResponse
	14,  // 682: kingdee_service.kingdee_ito.TradeAggController.AggTradeByMonth:output_type -> kingdee_service.kingdee_ito.AggTradeByMonthResponse
	16,  // 683: kingdee_service.kingdee_ito.TradeAggController.AggTradeByMonthSync:output_type -> kingdee_service.kingdee_ito.AggTradeByMonthSyncResponse
	12,  // 684: kingdee_service.kingdee_ito.TradeAggController.CountAggPushStatus:output_type -> kingdee_service.kingdee_ito.AggPushStatusCountResponse
	231, // 685: kingdee_service.kingdee_ito.TradeAggController.Create:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	8,   // 686: kingdee_service.kingdee_ito.TradeAggController.CreateAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	77,  // 687: kingdee_service.kingdee_ito.TradeAggController.CreateChannelShopConfig:output_type -> kingdee_service.kingdee_ito.ChannelShopConfigResponse
	86,  // 688: kingdee_service.kingdee_ito.TradeAggController.CreateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	104, // 689: kingdee_service.kingdee_ito.TradeAggController.CreateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	155, // 690: kingdee_service.kingdee_ito.TradeAggController.CreateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	248, // 691: kingdee_service.kingdee_ito.TradeAggController.CreatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	318, // 692: kingdee_service.kingdee_ito.TradeAggController.CreateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	445, // 693: kingdee_service.kingdee_ito.TradeAggController.Destroy:output_type -> google.protobuf.Empty
	445, // 694: kingdee_service.kingdee_ito.TradeAggController.DestroyAggParamsTrade:output_type -> google.protobuf.Empty
	126, // 695: kingdee_service.kingdee_ito.TradeAggController.DestroyAggTrade:output_type -> kingdee_service.kingdee_ito.DestroyAggTradeResponse
	129, // 696: kingdee_service.kingdee_ito.TradeAggController.DestroyChannelShopConfig:output_type -> kingdee_service.kingdee_ito.DestroyChannelShopConfigResponse
	445, // 697: kingdee_service.kingdee_ito.TradeAggController.DestroyClockedSchedule:output_type -> google.protobuf.Empty
	445, // 698: kingdee_service.kingdee_ito.TradeAggController.DestroyCrontabSchedule:output_type -> google.protobuf.Empty
	445, // 699: kingdee_service.kingdee_ito.TradeAggController.DestroyIntervalSchedule:output_type -> google.protobuf.Empty
	445, // 700: kingdee_service.kingdee_ito.TradeAggController.DestroyPeriodicTask:output_type -> google.protobuf.Empty
	445, // 701: kingdee_service.kingdee_ito.TradeAggController.DestroyTaskResult:output_type -> google.protobuf.Empty
	136, // 702: kingdee_service.kingdee_ito.TradeAggController.FetchQimenTrade:output_type -> kingdee_service.kingdee_ito.FetchQimenTradeResponse
	144, // 703: kingdee_service.kingdee_ito.TradeAggController.FetchTradeFromWdtList:output_type -> kingdee_service.kingdee_ito.FetchTradeListFromWdtResponse
	219, // 704: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeShopNoInfo:output_type -> kingdee_service.kingdee_ito.KingdeeShopNoInfoResponse
	225, // 705: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeStockNoInfo:output_type -> kingdee_service.kingdee_ito.KingdeeStockNoInfoResponse
	148, // 706: kingdee_service.kingdee_ito.TradeAggController.InitChannelShopConfig:output_type -> kingdee_service.kingdee_ito.InitChannelShopConfigResponse
	228, // 707: kingdee_service.kingdee_ito.TradeAggController.List:output_type -> kingdee_service.kingdee_ito.KingdeeTradeListResponse
	5,   // 708: kingdee_service.kingdee_ito.TradeAggController.ListAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeListResponse
	76,  // 709: kingdee_service.kingdee_ito.TradeAggController.ListChannelShopConfig:output_type -> kingdee_service.kingdee_ito.ChannelShopConfigListResponse
	83,  // 710: kingdee_service.kingdee_ito.TradeAggController.ListClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleListResponse
	101, // 711: kingdee_service.kingdee_ito.TradeAggController.ListCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleListResponse
	152, // 712: kingdee_service.kingdee_ito.TradeAggController.ListIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleListResponse
	202, // 713: kingdee_service.kingdee_ito.TradeAggController.ListKingdeeSalOutStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockListResponse
	245, // 714: kingdee_service.kingdee_ito.TradeAggController.ListPeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskListResponse
	315, // 715: kingdee_service.kingdee_ito.TradeAggController.ListTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultListResponse
	414, // 716: kingdee_service.kingdee_ito.TradeAggController.ListWdtTrade:output_type -> kingdee_service.kingdee_ito.WdtTradeListResponse
	7,   // 717: kingdee_service.kingdee_ito.TradeAggController.NextNoAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeNextNoResponse
	231, // 718: kingdee_service.kingdee_ito.TradeAggController.PartialUpdate:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	241, // 719: kingdee_service.kingdee_ito.TradeAggController.PeriodAggTrade:output_type -> kingdee_service.kingdee_ito.PeriodAggTradeResponse
	252, // 720: kingdee_service.kingdee_ito.TradeAggController.PushToKingDeeSalOutStock:output_type -> kingdee_service.kingdee_ito.PushToKingDeeSalOutStockResponse
	231, // 721: kingdee_service.kingdee_ito.TradeAggController.Retrieve:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	8,   // 722: kingdee_service.kingdee_ito.TradeAggController.RetrieveAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	77,  // 723: kingdee_service.kingdee_ito.TradeAggController.RetrieveChannelShopConfig:output_type -> kingdee_service.kingdee_ito.ChannelShopConfigResponse
	86,  // 724: kingdee_service.kingdee_ito.TradeAggController.RetrieveClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	104, // 725: kingdee_service.kingdee_ito.TradeAggController.RetrieveCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	155, // 726: kingdee_service.kingdee_ito.TradeAggController.RetrieveIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	204, // 727: kingdee_service.kingdee_ito.TradeAggController.RetrieveKingdeeSalOutStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockResponse
	248, // 728: kingdee_service.kingdee_ito.TradeAggController.RetrievePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	318, // 729: kingdee_service.kingdee_ito.TradeAggController.RetrieveTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	433, // 730: kingdee_service.kingdee_ito.TradeAggController.RetrieveWdtTrade:output_type -> kingdee_service.kingdee_ito.WdtTradeResponse
	266, // 731: kingdee_service.kingdee_ito.TradeAggController.RevokeKingdeeSalOutstock:output_type -> kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockResponse
	268, // 732: kingdee_service.kingdee_ito.TradeAggController.RunPeriodAggSharedTask:output_type -> kingdee_service.kingdee_ito.RunPeriodAggSharedTaskResponse
	278, // 733: kingdee_service.kingdee_ito.TradeAggController.RunPeriodPushToKingDeeSalOutStock:output_type -> kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockResponse
	280, // 734: kingdee_service.kingdee_ito.TradeAggController.RunPeriodicTask:output_type -> kingdee_service.kingdee_ito.RunPeriodicTaskResponse
	282, // 735: kingdee_service.kingdee_ito.TradeAggController.RunSliceFetchTrade:output_type -> kingdee_service.kingdee_ito.RunSharedTaskResponse
	379, // 736: kingdee_service.kingdee_ito.TradeAggController.ShopOptionsWdt:output_type -> kingdee_service.kingdee_ito.WdtShopListResponse
	382, // 737: kingdee_service.kingdee_ito.TradeAggController.StockOptionsWdt:output_type -> kingdee_service.kingdee_ito.WdtStockListResponse
	292, // 738: kingdee_service.kingdee_ito.TradeAggController.StopPeriodicTask:output_type -> kingdee_service.kingdee_ito.StopPeriodicTaskResponse
	335, // 739: kingdee_service.kingdee_ito.TradeAggController.TaskSigAggTrade:output_type -> kingdee_service.kingdee_ito.TaskSigAggTradeResponse
	343, // 740: kingdee_service.kingdee_ito.TradeAggController.TaskSigFetchWdtTrade:output_type -> kingdee_service.kingdee_ito.TaskSigFetchWdtTradeResponse
	231, // 741: kingdee_service.kingdee_ito.TradeAggController.Update:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	8,   // 742: kingdee_service.kingdee_ito.TradeAggController.UpdateAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	77,  // 743: kingdee_service.kingdee_ito.TradeAggController.UpdateChannelShopConfig:output_type -> kingdee_service.kingdee_ito.ChannelShopConfigResponse
	86,  // 744: kingdee_service.kingdee_ito.TradeAggController.UpdateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	104, // 745: kingdee_service.kingdee_ito.TradeAggController.UpdateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	155, // 746: kingdee_service.kingdee_ito.TradeAggController.UpdateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	248, // 747: kingdee_service.kingdee_ito.TradeAggController.UpdatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	318, // 748: kingdee_service.kingdee_ito.TradeAggController.UpdateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	360, // 749: kingdee_service.kingdee_ito.TradeAggController.WdtOption:output_type -> kingdee_service.kingdee_ito.WdtOptionResponse
	18,  // 750: kingdee_service.kingdee_ito.TradeRefundAggController.AggTradeRefund:output_type -> kingdee_service.kingdee_ito.AggTradeRefundResponse
	91,  // 751: kingdee_service.kingdee_ito.TradeRefundAggController.CountAggRefundPushStatus:output_type -> kingdee_service.kingdee_ito.CountAggRefundPushStatusResponse
	92,  // 752: kingdee_service.kingdee_ito.TradeRefundAggController.CountRefundStockInPushStatus:output_type -> kingdee_service.kingdee_ito.CountRefundStockInPushStatusResponse
	214, // 753: kingdee_service.kingdee_ito.TradeRefundAggController.CreateKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	422, // 754: kingdee_service.kingdee_ito.TradeRefundAggController.CreateWdtTradeRefund:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundResponse
	431, // 755: kingdee_service.kingdee_ito.TradeRefundAggController.CreateWdtTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinResponse
	124, // 756: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyAggTradeRefund:output_type -> kingdee_service.kingdee_ito.DestroyAggTradeRefundResponse
	445, // 757: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyKingdeeSalReturnStock:output_type -> google.protobuf.Empty
	445, // 758: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyWdtTradeRefund:output_type -> google.protobuf.Empty
	445, // 759: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyWdtTradeRefundStockin:output_type -> google.protobuf.Empty
	138, // 760: kingdee_service.kingdee_ito.TradeRefundAggController.FetchRefundListFromWdt:output_type -> kingdee_service.kingdee_ito.FetchRefundListFromWdtResponse
	146, // 761: kingdee_service.kingdee_ito.TradeRefundAggController.FetchTradeRefund:output_type -> kingdee_service.kingdee_ito.FetchTradeRefundResponse
	210, // 762: kingdee_service.kingdee_ito.TradeRefundAggController.ListKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockListResponse
	419, // 763: kingdee_service.kingdee_ito.TradeRefundAggController.ListWdtTradeRefund:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundListResponse
	428, // 764: kingdee_service.kingdee_ito.TradeRefundAggController.ListWdtTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinListResponse
	239, // 765: kingdee_service.kingdee_ito.TradeRefundAggController.MatchTradeRefund:output_type -> kingdee_service.kingdee_ito.MatchTradeRefundResponse
	214, // 766: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	422, // 767: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateWdtTradeRefund:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundResponse
	431, // 768: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateWdtTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinResponse
	254, // 769: kingdee_service.kingdee_ito.TradeRefundAggController.PushToKingDeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.PushToKingDeeSalReturnStockResponse
	214, // 770: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	422, // 771: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveWdtTradeRefund:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundResponse
	431, // 772: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveWdtTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinResponse
	332, // 773: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigAggTradeRefund:output_type -> kingdee_service.kingdee_ito.TaskSigAggTradeRefundResponse
	332, // 774: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigAggTradeRefundStockIn:output_type -> kingdee_service.kingdee_ito.TaskSigAggTradeRefundResponse
	341, // 775: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigFetchTradeRefund:output_type -> kingdee_service.kingdee_ito.TaskSigFetchTradeRefundResponse
	345, // 776: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigMatchTradeRefund:output_type -> kingdee_service.kingdee_ito.TaskSigMatchTradeRefundResponse
	347, // 777: kingdee_service.kingdee_ito.TradeRefundAggController.TaskSigPushTradeRefund:output_type -> kingdee_service.kingdee_ito.TaskSigPushTradeRefundResponse
	214, // 778: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	422, // 779: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateWdtTradeRefund:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundResponse
	431, // 780: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateWdtTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.WdtTradeRefundStockinResponse
	20,  // 781: kingdee_service.kingdee_ito.TransferController.AggTransByMonth:output_type -> kingdee_service.kingdee_ito.AggTransByMonthResponse
	22,  // 782: kingdee_service.kingdee_ito.TransferController.AggTransPushStockInToKingdee:output_type -> kingdee_service.kingdee_ito.AggTransPushStockInToKingdeeResponse
	24,  // 783: kingdee_service.kingdee_ito.TransferController.AggTransPushStockOutToKingdee:output_type -> kingdee_service.kingdee_ito.AggTransPushStockOutToKingdeeResponse
	26,  // 784: kingdee_service.kingdee_ito.TransferController.AggTransPushToKingdee:output_type -> kingdee_service.kingdee_ito.AggTransPushToKingdeeResponse
	28,  // 785: kingdee_service.kingdee_ito.TransferController.AggTransStockOutIn:output_type -> kingdee_service.kingdee_ito.AggTransStockOutInResponse
	288, // 786: kingdee_service.kingdee_ito.TransferController.CountAggTransfer:output_type -> kingdee_service.kingdee_ito.StaticsResponse
	288, // 787: kingdee_service.kingdee_ito.TransferController.CountKingdeeTransfer:output_type -> kingdee_service.kingdee_ito.StaticsResponse
	442, // 788: kingdee_service.kingdee_ito.TransferController.Create:output_type -> kingdee_service.kingdee_ito.WdtTransferOrderResponse
	97,  // 789: kingdee_service.kingdee_ito.TransferController.CreateTransferOrder:output_type -> kingdee_service.kingdee_ito.CreateTransferOrderResponse
	445, // 790: kingdee_service.kingdee_ito.TransferController.Destroy:output_type -> google.protobuf.Empty
	89,  // 791: kingdee_service.kingdee_ito.TransferController.DestroyAggTrans:output_type -> kingdee_service.kingdee_ito.CodeMsgResponse
	439, // 792: kingdee_service.kingdee_ito.TransferController.List:output_type -> kingdee_service.kingdee_ito.WdtTransferOrderListResponse
	31,  // 793: kingdee_service.kingdee_ito.TransferController.ListAggTransfer:output_type -> kingdee_service.kingdee_ito.AggTransferOrderListResponse
	234, // 794: kingdee_service.kingdee_ito.TransferController.ListKingdeeTransfer:output_type -> kingdee_service.kingdee_ito.KingdeeTransferOrderListResponse
	442, // 795: kingdee_service.kingdee_ito.TransferController.PartialUpdate:output_type -> kingdee_service.kingdee_ito.WdtTransferOrderResponse
	442, // 796: kingdee_service.kingdee_ito.TransferController.Retrieve:output_type -> kingdee_service.kingdee_ito.WdtTransferOrderResponse
	89,  // 797: kingdee_service.kingdee_ito.TransferController.TaskSigAggTransStockOutIn:output_type -> kingdee_service.kingdee_ito.CodeMsgResponse
	89,  // 798: kingdee_service.kingdee_ito.TransferController.TaskSigAggTransfer:output_type -> kingdee_service.kingdee_ito.CodeMsgResponse
	89,  // 799: kingdee_service.kingdee_ito.TransferController.TaskSigPushTransStockIn:output_type -> kingdee_service.kingdee_ito.CodeMsgResponse
	89,  // 800: kingdee_service.kingdee_ito.TransferController.TaskSigPushTransStockOut:output_type -> kingdee_service.kingdee_ito.CodeMsgResponse
	89,  // 801: kingdee_service.kingdee_ito.TransferController.TaskSigPushTransfer:output_type -> kingdee_service.kingdee_ito.CodeMsgResponse
	353, // 802: kingdee_service.kingdee_ito.TransferController.TransferOption:output_type -> kingdee_service.kingdee_ito.TransferOptionResponse
	442, // 803: kingdee_service.kingdee_ito.TransferController.Update:output_type -> kingdee_service.kingdee_ito.WdtTransferOrderResponse
	116, // 804: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggKingdeeStkMisdelivery:output_type -> kingdee_service.kingdee_ito.DestroyAggKingdeeStkMisdeliveryResponse
	118, // 805: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggSeedingKingdeeTransferDirect:output_type -> kingdee_service.kingdee_ito.DestroyAggSeedingKingdeeTransferDirectResponse
	120, // 806: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggSwapKingdeeRefund:output_type -> kingdee_service.kingdee_ito.DestroyAggSwapKingdeeRefundResponse
	122, // 807: kingdee_service.kingdee_ito.VasOrderAggController.DestroyAggSwapKingdeeSalOutStock:output_type -> kingdee_service.kingdee_ito.DestroyAggSwapKingdeeSalOutStockResponse
	386, // 808: kingdee_service.kingdee_ito.VasOrderAggController.List:output_type -> kingdee_service.kingdee_ito.WdtStockinModelListResponse
	221, // 809: kingdee_service.kingdee_ito.VasOrderAggController.ListRepairKingdeeStkMisDelivery:output_type -> kingdee_service.kingdee_ito.KingdeeStkMisDeliveryListResponse
	284, // 810: kingdee_service.kingdee_ito.VasOrderAggController.ListSeedingKingdeeStkTransferDirect:output_type -> kingdee_service.kingdee_ito.SeedingKingdeeStkTransferDirectListResponse
	294, // 811: kingdee_service.kingdee_ito.VasOrderAggController.ListSwapKingdeeSalOutStock:output_type -> kingdee_service.kingdee_ito.SwapKingdeeSalOutStockListResponse
	298, // 812: kingdee_service.kingdee_ito.VasOrderAggController.ListSwapKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.SwapKingdeeSalReturnStockListResponse
	270, // 813: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushRepairToKingdeeMisDelivery:output_type -> kingdee_service.kingdee_ito.RunPeriodPushRepairToKingdeeMisDeliveryResponse
	272, // 814: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushSeedingToKingdeeTransferDirect:output_type -> kingdee_service.kingdee_ito.RunPeriodPushSeedingToKingdeeTransferDirectResponse
	274, // 815: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushSwapRefundToKingdee:output_type -> kingdee_service.kingdee_ito.RunPeriodPushSwapRefundToKingdeeResponse
	276, // 816: kingdee_service.kingdee_ito.VasOrderAggController.RunPeriodPushSwapSalOutStockToKingdee:output_type -> kingdee_service.kingdee_ito.RunPeriodPushSwapSalOutStockToKingdeeResponse
	288, // 817: kingdee_service.kingdee_ito.VasOrderAggController.StaticsRepairKingdeeStkMisDelivery:output_type -> kingdee_service.kingdee_ito.StaticsResponse
	288, // 818: kingdee_service.kingdee_ito.VasOrderAggController.StaticsSeedingKingdeeStkTransferDirect:output_type -> kingdee_service.kingdee_ito.StaticsResponse
	288, // 819: kingdee_service.kingdee_ito.VasOrderAggController.StaticsSwapKingdeeSalOutStock:output_type -> kingdee_service.kingdee_ito.StaticsResponse
	288, // 820: kingdee_service.kingdee_ito.VasOrderAggController.StaticsSwapKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.StaticsResponse
	324, // 821: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggRepairStockout:output_type -> kingdee_service.kingdee_ito.TaskSigAggRepairStockoutResponse
	326, // 822: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggSeedingTrade:output_type -> kingdee_service.kingdee_ito.TaskSigAggSeedingTradeResponse
	328, // 823: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggSwapStockin:output_type -> kingdee_service.kingdee_ito.TaskSigAggSwapStockinResponse
	330, // 824: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigAggSwapTrade:output_type -> kingdee_service.kingdee_ito.TaskSigAggSwapTradeResponse
	339, // 825: kingdee_service.kingdee_ito.VasOrderAggController.TaskSigFetchStockinOrder:output_type -> kingdee_service.kingdee_ito.TaskSigFetchStockinOrderResponse
	554, // [554:826] is the sub-list for method output_type
	282, // [282:554] is the sub-list for method input_type
	282, // [282:282] is the sub-list for extension type_name
	282, // [282:282] is the sub-list for extension extendee
	0,   // [0:282] is the sub-list for field type_name
}

func init() { file_kingdee_ito_proto_init() }
func file_kingdee_ito_proto_init() {
	if File_kingdee_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kingdee_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggAliPayBySrcTidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggAliPayBySrcTidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeNextNoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeNextNoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggPushStatusCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggPushStatusCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTradeByMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTradeByMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTradeByMonthSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTradeByMonthSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransByMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransByMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransPushStockInToKingdeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransPushStockInToKingdeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransPushStockOutToKingdeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransPushStockOutToKingdeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransPushToKingdeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransPushToKingdeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransStockOutInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransStockOutInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferOrderEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferOrderModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferStockInEntitiesEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferStockInEntitiesModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferStockInEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferStockOutEntitiesEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferStockOutEntitiesModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggTransferStockOutEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliPayGoodsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggResultDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggResultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggResultListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggResultPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAggResultRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillEntitiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillEntitiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillEntitiesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKdPurchaseReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKdPurchaseReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKdTransferOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKdTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeePurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeePurchaseOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeePurchaseOrderSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeePurchaseOrderSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeeReceiveBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeeReceiveBillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeeReceiveBillSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeeReceiveBillSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskInfoListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskQueryOptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskRunOptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskRunOptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelShopConfigCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelShopConfigListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelShopConfigListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelShopConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelShopConfigRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelShopConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedSchedulePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAggRefundPushStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAggRefundPushStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRefundStockInPushStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKdPurchaseReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKdPurchaseReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKdTransferOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKdTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabSchedulePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CxlKdPurchaseReturnFromWdtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CxlKdPurchaseReturnFromWdtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CxlKdReceiveBillFromWdtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CxlKdReceiveBillFromWdtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CxlKdTransferOrderFromWdtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CxlKdTransferOrderFromWdtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggBillResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggBillResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggKingdeeStkMisdeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggKingdeeStkMisdeliveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggSeedingKingdeeTransferDirectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggSeedingKingdeeTransferDirectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggSwapKingdeeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggSwapKingdeeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggSwapKingdeeSalOutStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggSwapKingdeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyAggTransRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyChannelShopConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyChannelShopConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FStaffNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAlipayBillTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAlipayLogAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAlipayLogAsyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchQimenTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchQimenTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRefundListFromWdtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRefundListFromWdtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSrcTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSrcTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSrcTradeTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTradeListFromWdtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTradeListFromWdtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitChannelShopConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitChannelShopConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalSchedulePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeFNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderEntryDeliPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderFPOOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseOrderRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchasePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseReturnRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceivableEntityDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceivableEntityPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceivableModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceivableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceivableSubHeadFincResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceivableSubHeadSupplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillFDetailLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillFDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeReceiveBillRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockFEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockSubHeadEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockSubHeadEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSettleEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeShopNoInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeShopNoInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStkMisDeliveryFEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStkMisDeliveryListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStkMisDeliveryModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStkMisDeliveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStockNoInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStockNoInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTransferListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTransferOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodAggTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodAggTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToKingDeeSalOutStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToKingDeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToKingDeeSalReturnStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToKingDeeSalReturnStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdPurchaseNoSyncStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdPurchaseNoSyncStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdPurchaseReturnSyncStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdPurchaseReturnSyncStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdReceiveBillSyncStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdReceiveBillSyncStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdTransferOrderSyncStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKdTransferOrderSyncStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKingdeePurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKingdeePurchaseOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeKingdeeSalOutstockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeKingdeeSalOutstockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodAggSharedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodAggSharedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushRepairToKingdeeMisDeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushRepairToKingdeeMisDeliveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushSeedingToKingdeeTransferDirectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushSeedingToKingdeeTransferDirectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushSwapRefundToKingdeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushSwapRefundToKingdeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushSwapSalOutStockToKingdeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushSwapSalOutStockToKingdeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushToKingDeeSalOutStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushToKingDeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodicTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodicTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSharedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSharedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedingKingdeeStkTransferDirectEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedingKingdeeStkTransferDirectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedingKingdeeStkTransferDirectModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedingKingdeeStkTransferDirectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopKdReceiveBillFromWdtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopKdReceiveBillFromWdtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPeriodicTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPeriodicTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalOutStockEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalOutStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalOutStockModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalReturnStockEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalReturnStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalReturnStockModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapKingdeeSalReturnStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncKdPurchaseReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncKdPurchaseReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncKdTransferOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncKdTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgressDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgressListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgressListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgressPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgressRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggAlipayBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggAlipayBillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggRepairStockoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggRepairStockoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggSeedingTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggSeedingTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggSwapStockinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggSwapStockinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggSwapTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggSwapTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggTradeRefundStockInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggTransStockOutInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigAggTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigFetchStockinOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigFetchStockinOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigFetchTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigFetchTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigFetchWdtTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigFetchWdtTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigMatchTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigMatchTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigPushTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigPushTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigPushTransStockInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigPushTransStockOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSigPushTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCreateOptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCreateSKUOptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStockinOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStockoutOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VasOrderAggListRepairKingdeeStkMisDeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VasOrderAggListSeedingKingdeeStkTransferDirectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VasOrderAggListSwapKingdeeSalOutStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VasOrderAggListSwapKingdeeSalReturnStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseOrderRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnLogisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtPurchaseReturnRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtShopListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtShopListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtShopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinDetailModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinModelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchaseDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchaseDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchaseListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchaseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchasePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinOrderPurchaseRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinTransferOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockinTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnPositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutPurchaseReturnRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutTransferOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutTransferOrderPositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockoutTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeGoodslistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRefundStockinRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTradeRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtTransferOrderRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kingdee_ito_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[103].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[131].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[135].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[145].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[149].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[151].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[153].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[154].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[155].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[157].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[158].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[160].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[163].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[164].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[165].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[167].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[168].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[169].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[170].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[172].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[173].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[174].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[177].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[178].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[180].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[181].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[182].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[184].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[185].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[186].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[187].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[188].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[189].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[191].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[192].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[193].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[195].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[196].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[197].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[198].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[200].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[201].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[203].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[204].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[206].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[208].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[209].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[211].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[212].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[213].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[214].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[216].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[217].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[220].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[222].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[223].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[227].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[229].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[230].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[231].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[233].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[235].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[236].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[242].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[244].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[246].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[247].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[248].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[250].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[263].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[269].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[271].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[273].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[275].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[277].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[279].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[281].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[283].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[285].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[286].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[288].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[293].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[295].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[296].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[297].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[299].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[300].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[306].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[308].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[309].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[310].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[312].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[314].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[316].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[317].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[318].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[320].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[321].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[333].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[338].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[340].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[342].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[351].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[356].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[357].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[358].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[359].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[362].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[363].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[365].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[366].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[367].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[370].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[371].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[373].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[374].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[375].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[376].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[378].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[381].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[384].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[385].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[387].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[389].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[390].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[392].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[393].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[394].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[396].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[397].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[399].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[400].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[401].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[403].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[404].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[405].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[406].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[407].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[409].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[410].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[411].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[412].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[413].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[416].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[417].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[418].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[420].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[421].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[422].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[425].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[426].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[427].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[429].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[430].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[431].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[433].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[436].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[437].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[438].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[440].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[441].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[442].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kingdee_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   444,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_kingdee_ito_proto_goTypes,
		DependencyIndexes: file_kingdee_ito_proto_depIdxs,
		MessageInfos:      file_kingdee_ito_proto_msgTypes,
	}.Build()
	File_kingdee_ito_proto = out.File
	file_kingdee_ito_proto_rawDesc = nil
	file_kingdee_ito_proto_goTypes = nil
	file_kingdee_ito_proto_depIdxs = nil
}
