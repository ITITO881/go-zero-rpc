// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: kingdee_ito.proto

package pbKingdeeIto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggParamsTradeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreateName    *string `protobuf:"bytes,2,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	ConfigNo      *string `protobuf:"bytes,3,opt,name=config_no,json=configNo,proto3,oneof" json:"config_no,omitempty"`
	ConfigName    *string `protobuf:"bytes,4,opt,name=config_name,json=configName,proto3,oneof" json:"config_name,omitempty"`
	AggType       *int32  `protobuf:"varint,5,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	ChannelDim    *int32  `protobuf:"varint,6,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	TimeDim       *int32  `protobuf:"varint,7,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	MonthCutoff   *int32  `protobuf:"varint,8,opt,name=month_cutoff,json=monthCutoff,proto3,oneof" json:"month_cutoff,omitempty"`
	OrganizeNo    *string `protobuf:"bytes,9,opt,name=organize_no,json=organizeNo,proto3,oneof" json:"organize_no,omitempty"`
	OrganizeName  *string `protobuf:"bytes,10,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	ShopNo        *string `protobuf:"bytes,11,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName      *string `protobuf:"bytes,12,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo   *string `protobuf:"bytes,13,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName *string `protobuf:"bytes,14,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	AggDiscount   *int32  `protobuf:"varint,15,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
}

func (x *AggParamsTradeCreateRequest) Reset() {
	*x = AggParamsTradeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeCreateRequest) ProtoMessage() {}

func (x *AggParamsTradeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeCreateRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{0}
}

func (x *AggParamsTradeCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetConfigNo() string {
	if x != nil && x.ConfigNo != nil {
		return *x.ConfigNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetConfigName() string {
	if x != nil && x.ConfigName != nil {
		return *x.ConfigName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetMonthCutoff() int32 {
	if x != nil && x.MonthCutoff != nil {
		return *x.MonthCutoff
	}
	return 0
}

func (x *AggParamsTradeCreateRequest) GetOrganizeNo() string {
	if x != nil && x.OrganizeNo != nil {
		return *x.OrganizeNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *AggParamsTradeCreateRequest) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

type AggParamsTradeDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AggParamsTradeDestroyRequest) Reset() {
	*x = AggParamsTradeDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeDestroyRequest) ProtoMessage() {}

func (x *AggParamsTradeDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeDestroyRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{1}
}

func (x *AggParamsTradeDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AggParamsTradeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *AggParamsTradeListRequest) Reset() {
	*x = AggParamsTradeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeListRequest) ProtoMessage() {}

func (x *AggParamsTradeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeListRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{2}
}

func (x *AggParamsTradeListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *AggParamsTradeListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type AggParamsTradeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AggParamsTradeResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AggParamsTradeListResponse) Reset() {
	*x = AggParamsTradeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeListResponse) ProtoMessage() {}

func (x *AggParamsTradeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeListResponse.ProtoReflect.Descriptor instead.
func (*AggParamsTradeListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{3}
}

func (x *AggParamsTradeListResponse) GetResults() []*AggParamsTradeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AggParamsTradeListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AggParamsTradeNextNoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AggParamsTradeNextNoRequest) Reset() {
	*x = AggParamsTradeNextNoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeNextNoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeNextNoRequest) ProtoMessage() {}

func (x *AggParamsTradeNextNoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeNextNoRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeNextNoRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{4}
}

type AggParamsTradeNextNoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextNo string `protobuf:"bytes,1,opt,name=next_no,json=nextNo,proto3" json:"next_no,omitempty"`
}

func (x *AggParamsTradeNextNoResponse) Reset() {
	*x = AggParamsTradeNextNoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeNextNoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeNextNoResponse) ProtoMessage() {}

func (x *AggParamsTradeNextNoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeNextNoResponse.ProtoReflect.Descriptor instead.
func (*AggParamsTradeNextNoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{5}
}

func (x *AggParamsTradeNextNoResponse) GetNextNo() string {
	if x != nil {
		return x.NextNo
	}
	return ""
}

type AggParamsTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	AggTypeName    *string `protobuf:"bytes,2,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDimName *string `protobuf:"bytes,3,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDimName    *string `protobuf:"bytes,4,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	CreateTime     *string `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime     *string `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	CreateName     *string `protobuf:"bytes,7,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	ConfigNo       *string `protobuf:"bytes,8,opt,name=config_no,json=configNo,proto3,oneof" json:"config_no,omitempty"`
	ConfigName     *string `protobuf:"bytes,9,opt,name=config_name,json=configName,proto3,oneof" json:"config_name,omitempty"`
	AggType        *int32  `protobuf:"varint,10,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	ChannelDim     *int32  `protobuf:"varint,11,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	TimeDim        *int32  `protobuf:"varint,12,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	MonthCutoff    *int32  `protobuf:"varint,13,opt,name=month_cutoff,json=monthCutoff,proto3,oneof" json:"month_cutoff,omitempty"`
	OrganizeNo     *string `protobuf:"bytes,14,opt,name=organize_no,json=organizeNo,proto3,oneof" json:"organize_no,omitempty"`
	OrganizeName   *string `protobuf:"bytes,15,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	ShopNo         *string `protobuf:"bytes,16,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName       *string `protobuf:"bytes,17,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo    *string `protobuf:"bytes,18,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName  *string `protobuf:"bytes,19,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	AggDiscount    *int32  `protobuf:"varint,20,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
}

func (x *AggParamsTradeResponse) Reset() {
	*x = AggParamsTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeResponse) ProtoMessage() {}

func (x *AggParamsTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeResponse.ProtoReflect.Descriptor instead.
func (*AggParamsTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{6}
}

func (x *AggParamsTradeResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AggParamsTradeResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AggParamsTradeResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AggParamsTradeResponse) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetConfigNo() string {
	if x != nil && x.ConfigNo != nil {
		return *x.ConfigNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetConfigName() string {
	if x != nil && x.ConfigName != nil {
		return *x.ConfigName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *AggParamsTradeResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *AggParamsTradeResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *AggParamsTradeResponse) GetMonthCutoff() int32 {
	if x != nil && x.MonthCutoff != nil {
		return *x.MonthCutoff
	}
	return 0
}

func (x *AggParamsTradeResponse) GetOrganizeNo() string {
	if x != nil && x.OrganizeNo != nil {
		return *x.OrganizeNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *AggParamsTradeResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *AggParamsTradeResponse) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

type AggParamsTradeRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AggParamsTradeRetrieveRequest) Reset() {
	*x = AggParamsTradeRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeRetrieveRequest) ProtoMessage() {}

func (x *AggParamsTradeRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeRetrieveRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{7}
}

func (x *AggParamsTradeRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AggParamsTradeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateName           *string  `protobuf:"bytes,3,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	ConfigNo             *string  `protobuf:"bytes,4,opt,name=config_no,json=configNo,proto3,oneof" json:"config_no,omitempty"`
	ConfigName           *string  `protobuf:"bytes,5,opt,name=config_name,json=configName,proto3,oneof" json:"config_name,omitempty"`
	AggType              *int32   `protobuf:"varint,6,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	ChannelDim           *int32   `protobuf:"varint,7,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	TimeDim              *int32   `protobuf:"varint,8,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	MonthCutoff          *int32   `protobuf:"varint,9,opt,name=month_cutoff,json=monthCutoff,proto3,oneof" json:"month_cutoff,omitempty"`
	OrganizeNo           *string  `protobuf:"bytes,10,opt,name=organize_no,json=organizeNo,proto3,oneof" json:"organize_no,omitempty"`
	OrganizeName         *string  `protobuf:"bytes,11,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	ShopNo               *string  `protobuf:"bytes,12,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *string  `protobuf:"bytes,13,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo          *string  `protobuf:"bytes,14,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string  `protobuf:"bytes,15,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	AggDiscount          *int32   `protobuf:"varint,16,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
}

func (x *AggParamsTradeUpdateRequest) Reset() {
	*x = AggParamsTradeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggParamsTradeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggParamsTradeUpdateRequest) ProtoMessage() {}

func (x *AggParamsTradeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggParamsTradeUpdateRequest.ProtoReflect.Descriptor instead.
func (*AggParamsTradeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{8}
}

func (x *AggParamsTradeUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *AggParamsTradeUpdateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetConfigNo() string {
	if x != nil && x.ConfigNo != nil {
		return *x.ConfigNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetConfigName() string {
	if x != nil && x.ConfigName != nil {
		return *x.ConfigName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetMonthCutoff() int32 {
	if x != nil && x.MonthCutoff != nil {
		return *x.MonthCutoff
	}
	return 0
}

func (x *AggParamsTradeUpdateRequest) GetOrganizeNo() string {
	if x != nil && x.OrganizeNo != nil {
		return *x.OrganizeNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *AggParamsTradeUpdateRequest) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

type AggPushStatusCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AggPushStatusCountRequest) Reset() {
	*x = AggPushStatusCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggPushStatusCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggPushStatusCountRequest) ProtoMessage() {}

func (x *AggPushStatusCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggPushStatusCountRequest.ProtoReflect.Descriptor instead.
func (*AggPushStatusCountRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{9}
}

type AggPushStatusCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsignWaitPush   int32 `protobuf:"varint,1,opt,name=consign_wait_push,json=consignWaitPush,proto3" json:"consign_wait_push,omitempty"`
	ConsignFailedPush int32 `protobuf:"varint,2,opt,name=consign_failed_push,json=consignFailedPush,proto3" json:"consign_failed_push,omitempty"`
	PayWaitPush       int32 `protobuf:"varint,3,opt,name=pay_wait_push,json=payWaitPush,proto3" json:"pay_wait_push,omitempty"`
	PayFailedPush     int32 `protobuf:"varint,4,opt,name=pay_failed_push,json=payFailedPush,proto3" json:"pay_failed_push,omitempty"`
}

func (x *AggPushStatusCountResponse) Reset() {
	*x = AggPushStatusCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggPushStatusCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggPushStatusCountResponse) ProtoMessage() {}

func (x *AggPushStatusCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggPushStatusCountResponse.ProtoReflect.Descriptor instead.
func (*AggPushStatusCountResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{10}
}

func (x *AggPushStatusCountResponse) GetConsignWaitPush() int32 {
	if x != nil {
		return x.ConsignWaitPush
	}
	return 0
}

func (x *AggPushStatusCountResponse) GetConsignFailedPush() int32 {
	if x != nil {
		return x.ConsignFailedPush
	}
	return 0
}

func (x *AggPushStatusCountResponse) GetPayWaitPush() int32 {
	if x != nil {
		return x.PayWaitPush
	}
	return 0
}

func (x *AggPushStatusCountResponse) GetPayFailedPush() int32 {
	if x != nil {
		return x.PayFailedPush
	}
	return 0
}

type AlipayBillAccountlogDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountLogId string `protobuf:"bytes,1,opt,name=account_log_id,json=accountLogId,proto3" json:"account_log_id,omitempty"`
}

func (x *AlipayBillAccountlogDestroyRequest) Reset() {
	*x = AlipayBillAccountlogDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAccountlogDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAccountlogDestroyRequest) ProtoMessage() {}

func (x *AlipayBillAccountlogDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAccountlogDestroyRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAccountlogDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{11}
}

func (x *AlipayBillAccountlogDestroyRequest) GetAccountLogId() string {
	if x != nil {
		return x.AccountLogId
	}
	return ""
}

type AlipayBillAccountlogListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *AlipayBillAccountlogListRequest) Reset() {
	*x = AlipayBillAccountlogListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAccountlogListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAccountlogListRequest) ProtoMessage() {}

func (x *AlipayBillAccountlogListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAccountlogListRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAccountlogListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{12}
}

func (x *AlipayBillAccountlogListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *AlipayBillAccountlogListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type AlipayBillAccountlogListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AlipayBillAccountlogResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AlipayBillAccountlogListResponse) Reset() {
	*x = AlipayBillAccountlogListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAccountlogListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAccountlogListResponse) ProtoMessage() {}

func (x *AlipayBillAccountlogListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAccountlogListResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillAccountlogListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{13}
}

func (x *AlipayBillAccountlogListResponse) GetResults() []*AlipayBillAccountlogResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AlipayBillAccountlogListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AlipayBillAccountlogPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountLogId         string           `protobuf:"bytes,1,opt,name=account_log_id,json=accountLogId,proto3" json:"account_log_id,omitempty"`
	XPartialUpdateFields []string         `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	TransDt              string           `protobuf:"bytes,3,opt,name=trans_dt,json=transDt,proto3" json:"trans_dt,omitempty"`
	AssocitedTradeIds    *structpb.Struct `protobuf:"bytes,4,opt,name=associted_trade_ids,json=associtedTradeIds,proto3,oneof" json:"associted_trade_ids,omitempty"`
	AlipayOrderNo        string           `protobuf:"bytes,5,opt,name=alipay_order_no,json=alipayOrderNo,proto3" json:"alipay_order_no,omitempty"`
	MerchantOrderNo      string           `protobuf:"bytes,6,opt,name=merchant_order_no,json=merchantOrderNo,proto3" json:"merchant_order_no,omitempty"`
	TransAmount          float64          `protobuf:"fixed64,7,opt,name=trans_amount,json=transAmount,proto3" json:"trans_amount,omitempty"`
	Balance              float64          `protobuf:"fixed64,8,opt,name=balance,proto3" json:"balance,omitempty"`
	Type                 string           `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	OtherAccount         string           `protobuf:"bytes,10,opt,name=other_account,json=otherAccount,proto3" json:"other_account,omitempty"`
	Direction            string           `protobuf:"bytes,11,opt,name=direction,proto3" json:"direction,omitempty"`
	TransMemo            *string          `protobuf:"bytes,12,opt,name=trans_memo,json=transMemo,proto3,oneof" json:"trans_memo,omitempty"`
	BillSource           *string          `protobuf:"bytes,13,opt,name=bill_source,json=billSource,proto3,oneof" json:"bill_source,omitempty"`
	BizNos               *string          `protobuf:"bytes,14,opt,name=biz_nos,json=bizNos,proto3,oneof" json:"biz_nos,omitempty"`
	BizOrigNo            *string          `protobuf:"bytes,15,opt,name=biz_orig_no,json=bizOrigNo,proto3,oneof" json:"biz_orig_no,omitempty"`
	BizDesc              *string          `protobuf:"bytes,16,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	MerchantOutRefundNo  *string          `protobuf:"bytes,17,opt,name=merchant_out_refund_no,json=merchantOutRefundNo,proto3,oneof" json:"merchant_out_refund_no,omitempty"`
	ComplementInfo       *string          `protobuf:"bytes,18,opt,name=complement_info,json=complementInfo,proto3,oneof" json:"complement_info,omitempty"`
	StoreName            *string          `protobuf:"bytes,19,opt,name=store_name,json=storeName,proto3,oneof" json:"store_name,omitempty"`
}

func (x *AlipayBillAccountlogPartialUpdateRequest) Reset() {
	*x = AlipayBillAccountlogPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAccountlogPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAccountlogPartialUpdateRequest) ProtoMessage() {}

func (x *AlipayBillAccountlogPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAccountlogPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAccountlogPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{14}
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetAccountLogId() string {
	if x != nil {
		return x.AccountLogId
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetTransDt() string {
	if x != nil {
		return x.TransDt
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetAssocitedTradeIds() *structpb.Struct {
	if x != nil {
		return x.AssocitedTradeIds
	}
	return nil
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetAlipayOrderNo() string {
	if x != nil {
		return x.AlipayOrderNo
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetMerchantOrderNo() string {
	if x != nil {
		return x.MerchantOrderNo
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetTransAmount() float64 {
	if x != nil {
		return x.TransAmount
	}
	return 0
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetOtherAccount() string {
	if x != nil {
		return x.OtherAccount
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetTransMemo() string {
	if x != nil && x.TransMemo != nil {
		return *x.TransMemo
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetBillSource() string {
	if x != nil && x.BillSource != nil {
		return *x.BillSource
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetBizNos() string {
	if x != nil && x.BizNos != nil {
		return *x.BizNos
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetBizOrigNo() string {
	if x != nil && x.BizOrigNo != nil {
		return *x.BizOrigNo
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetMerchantOutRefundNo() string {
	if x != nil && x.MerchantOutRefundNo != nil {
		return *x.MerchantOutRefundNo
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetComplementInfo() string {
	if x != nil && x.ComplementInfo != nil {
		return *x.ComplementInfo
	}
	return ""
}

func (x *AlipayBillAccountlogPartialUpdateRequest) GetStoreName() string {
	if x != nil && x.StoreName != nil {
		return *x.StoreName
	}
	return ""
}

type AlipayBillAccountlogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountLogId        string           `protobuf:"bytes,1,opt,name=account_log_id,json=accountLogId,proto3" json:"account_log_id,omitempty"`
	TransDt             string           `protobuf:"bytes,2,opt,name=trans_dt,json=transDt,proto3" json:"trans_dt,omitempty"`
	AssocitedTradeIds   *structpb.Struct `protobuf:"bytes,3,opt,name=associted_trade_ids,json=associtedTradeIds,proto3,oneof" json:"associted_trade_ids,omitempty"`
	AlipayOrderNo       string           `protobuf:"bytes,4,opt,name=alipay_order_no,json=alipayOrderNo,proto3" json:"alipay_order_no,omitempty"`
	MerchantOrderNo     string           `protobuf:"bytes,5,opt,name=merchant_order_no,json=merchantOrderNo,proto3" json:"merchant_order_no,omitempty"`
	TransAmount         float64          `protobuf:"fixed64,6,opt,name=trans_amount,json=transAmount,proto3" json:"trans_amount,omitempty"`
	Balance             float64          `protobuf:"fixed64,7,opt,name=balance,proto3" json:"balance,omitempty"`
	Type                string           `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	OtherAccount        string           `protobuf:"bytes,9,opt,name=other_account,json=otherAccount,proto3" json:"other_account,omitempty"`
	Direction           string           `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	TransMemo           *string          `protobuf:"bytes,11,opt,name=trans_memo,json=transMemo,proto3,oneof" json:"trans_memo,omitempty"`
	BillSource          *string          `protobuf:"bytes,12,opt,name=bill_source,json=billSource,proto3,oneof" json:"bill_source,omitempty"`
	BizNos              *string          `protobuf:"bytes,13,opt,name=biz_nos,json=bizNos,proto3,oneof" json:"biz_nos,omitempty"`
	BizOrigNo           *string          `protobuf:"bytes,14,opt,name=biz_orig_no,json=bizOrigNo,proto3,oneof" json:"biz_orig_no,omitempty"`
	BizDesc             *string          `protobuf:"bytes,15,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	MerchantOutRefundNo *string          `protobuf:"bytes,16,opt,name=merchant_out_refund_no,json=merchantOutRefundNo,proto3,oneof" json:"merchant_out_refund_no,omitempty"`
	ComplementInfo      *string          `protobuf:"bytes,17,opt,name=complement_info,json=complementInfo,proto3,oneof" json:"complement_info,omitempty"`
	StoreName           *string          `protobuf:"bytes,18,opt,name=store_name,json=storeName,proto3,oneof" json:"store_name,omitempty"`
}

func (x *AlipayBillAccountlogRequest) Reset() {
	*x = AlipayBillAccountlogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAccountlogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAccountlogRequest) ProtoMessage() {}

func (x *AlipayBillAccountlogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAccountlogRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAccountlogRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{15}
}

func (x *AlipayBillAccountlogRequest) GetAccountLogId() string {
	if x != nil {
		return x.AccountLogId
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetTransDt() string {
	if x != nil {
		return x.TransDt
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetAssocitedTradeIds() *structpb.Struct {
	if x != nil {
		return x.AssocitedTradeIds
	}
	return nil
}

func (x *AlipayBillAccountlogRequest) GetAlipayOrderNo() string {
	if x != nil {
		return x.AlipayOrderNo
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetMerchantOrderNo() string {
	if x != nil {
		return x.MerchantOrderNo
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetTransAmount() float64 {
	if x != nil {
		return x.TransAmount
	}
	return 0
}

func (x *AlipayBillAccountlogRequest) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AlipayBillAccountlogRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetOtherAccount() string {
	if x != nil {
		return x.OtherAccount
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetTransMemo() string {
	if x != nil && x.TransMemo != nil {
		return *x.TransMemo
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetBillSource() string {
	if x != nil && x.BillSource != nil {
		return *x.BillSource
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetBizNos() string {
	if x != nil && x.BizNos != nil {
		return *x.BizNos
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetBizOrigNo() string {
	if x != nil && x.BizOrigNo != nil {
		return *x.BizOrigNo
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetMerchantOutRefundNo() string {
	if x != nil && x.MerchantOutRefundNo != nil {
		return *x.MerchantOutRefundNo
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetComplementInfo() string {
	if x != nil && x.ComplementInfo != nil {
		return *x.ComplementInfo
	}
	return ""
}

func (x *AlipayBillAccountlogRequest) GetStoreName() string {
	if x != nil && x.StoreName != nil {
		return *x.StoreName
	}
	return ""
}

type AlipayBillAccountlogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountLogId        string           `protobuf:"bytes,1,opt,name=account_log_id,json=accountLogId,proto3" json:"account_log_id,omitempty"`
	TransDt             string           `protobuf:"bytes,2,opt,name=trans_dt,json=transDt,proto3" json:"trans_dt,omitempty"`
	AssocitedTradeIds   *structpb.Struct `protobuf:"bytes,3,opt,name=associted_trade_ids,json=associtedTradeIds,proto3,oneof" json:"associted_trade_ids,omitempty"`
	AlipayOrderNo       string           `protobuf:"bytes,4,opt,name=alipay_order_no,json=alipayOrderNo,proto3" json:"alipay_order_no,omitempty"`
	MerchantOrderNo     string           `protobuf:"bytes,5,opt,name=merchant_order_no,json=merchantOrderNo,proto3" json:"merchant_order_no,omitempty"`
	TransAmount         float64          `protobuf:"fixed64,6,opt,name=trans_amount,json=transAmount,proto3" json:"trans_amount,omitempty"`
	Balance             float64          `protobuf:"fixed64,7,opt,name=balance,proto3" json:"balance,omitempty"`
	Type                string           `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	OtherAccount        string           `protobuf:"bytes,9,opt,name=other_account,json=otherAccount,proto3" json:"other_account,omitempty"`
	Direction           string           `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	TransMemo           *string          `protobuf:"bytes,11,opt,name=trans_memo,json=transMemo,proto3,oneof" json:"trans_memo,omitempty"`
	BillSource          *string          `protobuf:"bytes,12,opt,name=bill_source,json=billSource,proto3,oneof" json:"bill_source,omitempty"`
	BizNos              *string          `protobuf:"bytes,13,opt,name=biz_nos,json=bizNos,proto3,oneof" json:"biz_nos,omitempty"`
	BizOrigNo           *string          `protobuf:"bytes,14,opt,name=biz_orig_no,json=bizOrigNo,proto3,oneof" json:"biz_orig_no,omitempty"`
	BizDesc             *string          `protobuf:"bytes,15,opt,name=biz_desc,json=bizDesc,proto3,oneof" json:"biz_desc,omitempty"`
	MerchantOutRefundNo *string          `protobuf:"bytes,16,opt,name=merchant_out_refund_no,json=merchantOutRefundNo,proto3,oneof" json:"merchant_out_refund_no,omitempty"`
	ComplementInfo      *string          `protobuf:"bytes,17,opt,name=complement_info,json=complementInfo,proto3,oneof" json:"complement_info,omitempty"`
	StoreName           *string          `protobuf:"bytes,18,opt,name=store_name,json=storeName,proto3,oneof" json:"store_name,omitempty"`
}

func (x *AlipayBillAccountlogResponse) Reset() {
	*x = AlipayBillAccountlogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAccountlogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAccountlogResponse) ProtoMessage() {}

func (x *AlipayBillAccountlogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAccountlogResponse.ProtoReflect.Descriptor instead.
func (*AlipayBillAccountlogResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{16}
}

func (x *AlipayBillAccountlogResponse) GetAccountLogId() string {
	if x != nil {
		return x.AccountLogId
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetTransDt() string {
	if x != nil {
		return x.TransDt
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetAssocitedTradeIds() *structpb.Struct {
	if x != nil {
		return x.AssocitedTradeIds
	}
	return nil
}

func (x *AlipayBillAccountlogResponse) GetAlipayOrderNo() string {
	if x != nil {
		return x.AlipayOrderNo
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetMerchantOrderNo() string {
	if x != nil {
		return x.MerchantOrderNo
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetTransAmount() float64 {
	if x != nil {
		return x.TransAmount
	}
	return 0
}

func (x *AlipayBillAccountlogResponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AlipayBillAccountlogResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetOtherAccount() string {
	if x != nil {
		return x.OtherAccount
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetTransMemo() string {
	if x != nil && x.TransMemo != nil {
		return *x.TransMemo
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetBillSource() string {
	if x != nil && x.BillSource != nil {
		return *x.BillSource
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetBizNos() string {
	if x != nil && x.BizNos != nil {
		return *x.BizNos
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetBizOrigNo() string {
	if x != nil && x.BizOrigNo != nil {
		return *x.BizOrigNo
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetBizDesc() string {
	if x != nil && x.BizDesc != nil {
		return *x.BizDesc
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetMerchantOutRefundNo() string {
	if x != nil && x.MerchantOutRefundNo != nil {
		return *x.MerchantOutRefundNo
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetComplementInfo() string {
	if x != nil && x.ComplementInfo != nil {
		return *x.ComplementInfo
	}
	return ""
}

func (x *AlipayBillAccountlogResponse) GetStoreName() string {
	if x != nil && x.StoreName != nil {
		return *x.StoreName
	}
	return ""
}

type AlipayBillAccountlogRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountLogId string `protobuf:"bytes,1,opt,name=account_log_id,json=accountLogId,proto3" json:"account_log_id,omitempty"`
}

func (x *AlipayBillAccountlogRetrieveRequest) Reset() {
	*x = AlipayBillAccountlogRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayBillAccountlogRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayBillAccountlogRetrieveRequest) ProtoMessage() {}

func (x *AlipayBillAccountlogRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayBillAccountlogRetrieveRequest.ProtoReflect.Descriptor instead.
func (*AlipayBillAccountlogRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{17}
}

func (x *AlipayBillAccountlogRetrieveRequest) GetAccountLogId() string {
	if x != nil {
		return x.AccountLogId
	}
	return ""
}

type BulkCreateKingdeePurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PurchaseList string `protobuf:"bytes,2,opt,name=purchase_list,json=purchaseList,proto3" json:"purchase_list,omitempty"`
}

func (x *BulkCreateKingdeePurchaseOrderRequest) Reset() {
	*x = BulkCreateKingdeePurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeePurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeePurchaseOrderRequest) ProtoMessage() {}

func (x *BulkCreateKingdeePurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeePurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeePurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{18}
}

func (x *BulkCreateKingdeePurchaseOrderRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKingdeePurchaseOrderRequest) GetPurchaseList() string {
	if x != nil {
		return x.PurchaseList
	}
	return ""
}

type BulkCreateKingdeePurchaseOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKingdeePurchaseOrderResponse) Reset() {
	*x = BulkCreateKingdeePurchaseOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeePurchaseOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeePurchaseOrderResponse) ProtoMessage() {}

func (x *BulkCreateKingdeePurchaseOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeePurchaseOrderResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeePurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{19}
}

func (x *BulkCreateKingdeePurchaseOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKingdeePurchaseOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKingdeePurchaseOrderResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type BulkCreateKingdeeReceiveBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ReceiveBillList string `protobuf:"bytes,2,opt,name=receive_bill_list,json=receiveBillList,proto3" json:"receive_bill_list,omitempty"`
}

func (x *BulkCreateKingdeeReceiveBillRequest) Reset() {
	*x = BulkCreateKingdeeReceiveBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeeReceiveBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeeReceiveBillRequest) ProtoMessage() {}

func (x *BulkCreateKingdeeReceiveBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeeReceiveBillRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeeReceiveBillRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{20}
}

func (x *BulkCreateKingdeeReceiveBillRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BulkCreateKingdeeReceiveBillRequest) GetReceiveBillList() string {
	if x != nil {
		return x.ReceiveBillList
	}
	return ""
}

type BulkCreateKingdeeReceiveBillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *BulkCreateKingdeeReceiveBillResponse) Reset() {
	*x = BulkCreateKingdeeReceiveBillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateKingdeeReceiveBillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateKingdeeReceiveBillResponse) ProtoMessage() {}

func (x *BulkCreateKingdeeReceiveBillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateKingdeeReceiveBillResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateKingdeeReceiveBillResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{21}
}

func (x *BulkCreateKingdeeReceiveBillResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BulkCreateKingdeeReceiveBillResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BulkCreateKingdeeReceiveBillResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type CeleryTaskInfoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CeleryTaskInfoResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CeleryTaskInfoListResponse) Reset() {
	*x = CeleryTaskInfoListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskInfoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskInfoListResponse) ProtoMessage() {}

func (x *CeleryTaskInfoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskInfoListResponse.ProtoReflect.Descriptor instead.
func (*CeleryTaskInfoListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{22}
}

func (x *CeleryTaskInfoListResponse) GetResults() []*CeleryTaskInfoResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CeleryTaskInfoListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CeleryTaskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *CeleryTaskInfoResponse) Reset() {
	*x = CeleryTaskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskInfoResponse) ProtoMessage() {}

func (x *CeleryTaskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskInfoResponse.ProtoReflect.Descriptor instead.
func (*CeleryTaskInfoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{23}
}

func (x *CeleryTaskInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CeleryTaskInfoResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type CeleryTaskQueryOptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CeleryTaskQueryOptsRequest) Reset() {
	*x = CeleryTaskQueryOptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskQueryOptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskQueryOptsRequest) ProtoMessage() {}

func (x *CeleryTaskQueryOptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskQueryOptsRequest.ProtoReflect.Descriptor instead.
func (*CeleryTaskQueryOptsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{24}
}

type CeleryTaskRunOptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName       string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	CeleryTaskName string `protobuf:"bytes,3,opt,name=celery_task_name,json=celeryTaskName,proto3" json:"celery_task_name,omitempty"`
	Args           string `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	Kwargs         string `protobuf:"bytes,5,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
	Queue          string `protobuf:"bytes,6,opt,name=queue,proto3" json:"queue,omitempty"`
	Sync           bool   `protobuf:"varint,7,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *CeleryTaskRunOptsRequest) Reset() {
	*x = CeleryTaskRunOptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskRunOptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskRunOptsRequest) ProtoMessage() {}

func (x *CeleryTaskRunOptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskRunOptsRequest.ProtoReflect.Descriptor instead.
func (*CeleryTaskRunOptsRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{25}
}

func (x *CeleryTaskRunOptsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetCeleryTaskName() string {
	if x != nil {
		return x.CeleryTaskName
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetKwargs() string {
	if x != nil {
		return x.Kwargs
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *CeleryTaskRunOptsRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type CeleryTaskRunOptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CeleryTaskRunOptsResponse) Reset() {
	*x = CeleryTaskRunOptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeleryTaskRunOptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeleryTaskRunOptsResponse) ProtoMessage() {}

func (x *CeleryTaskRunOptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeleryTaskRunOptsResponse.ProtoReflect.Descriptor instead.
func (*CeleryTaskRunOptsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{26}
}

func (x *CeleryTaskRunOptsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CeleryTaskRunOptsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CeleryTaskRunOptsResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ClockedScheduleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime string `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
}

func (x *ClockedScheduleCreateRequest) Reset() {
	*x = ClockedScheduleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleCreateRequest) ProtoMessage() {}

func (x *ClockedScheduleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleCreateRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{27}
}

func (x *ClockedScheduleCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleCreateRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

type ClockedScheduleDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClockedScheduleDestroyRequest) Reset() {
	*x = ClockedScheduleDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleDestroyRequest) ProtoMessage() {}

func (x *ClockedScheduleDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleDestroyRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{28}
}

func (x *ClockedScheduleDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClockedScheduleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *ClockedScheduleListRequest) Reset() {
	*x = ClockedScheduleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleListRequest) ProtoMessage() {}

func (x *ClockedScheduleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleListRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{29}
}

func (x *ClockedScheduleListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *ClockedScheduleListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type ClockedScheduleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClockedScheduleResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ClockedScheduleListResponse) Reset() {
	*x = ClockedScheduleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleListResponse) ProtoMessage() {}

func (x *ClockedScheduleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleListResponse.ProtoReflect.Descriptor instead.
func (*ClockedScheduleListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{30}
}

func (x *ClockedScheduleListResponse) GetResults() []*ClockedScheduleResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ClockedScheduleListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ClockedSchedulePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime          string   `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *ClockedSchedulePartialUpdateRequest) Reset() {
	*x = ClockedSchedulePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedSchedulePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedSchedulePartialUpdateRequest) ProtoMessage() {}

func (x *ClockedSchedulePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedSchedulePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClockedSchedulePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{31}
}

func (x *ClockedSchedulePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedSchedulePartialUpdateRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

func (x *ClockedSchedulePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type ClockedScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime string `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
}

func (x *ClockedScheduleRequest) Reset() {
	*x = ClockedScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleRequest) ProtoMessage() {}

func (x *ClockedScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{32}
}

func (x *ClockedScheduleRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

type ClockedScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime string `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
}

func (x *ClockedScheduleResponse) Reset() {
	*x = ClockedScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleResponse) ProtoMessage() {}

func (x *ClockedScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleResponse.ProtoReflect.Descriptor instead.
func (*ClockedScheduleResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{33}
}

func (x *ClockedScheduleResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleResponse) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

type ClockedScheduleRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClockedScheduleRetrieveRequest) Reset() {
	*x = ClockedScheduleRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleRetrieveRequest) ProtoMessage() {}

func (x *ClockedScheduleRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{34}
}

func (x *ClockedScheduleRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClockedScheduleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClockedTime          string   `protobuf:"bytes,2,opt,name=clocked_time,json=clockedTime,proto3" json:"clocked_time,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *ClockedScheduleUpdateRequest) Reset() {
	*x = ClockedScheduleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockedScheduleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockedScheduleUpdateRequest) ProtoMessage() {}

func (x *ClockedScheduleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockedScheduleUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClockedScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{35}
}

func (x *ClockedScheduleUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClockedScheduleUpdateRequest) GetClockedTime() string {
	if x != nil {
		return x.ClockedTime
	}
	return ""
}

func (x *ClockedScheduleUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type CrontabScheduleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute      *string `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour        *string `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth  *string `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear *string `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek   *string `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone    string  `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *CrontabScheduleCreateRequest) Reset() {
	*x = CrontabScheduleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleCreateRequest) ProtoMessage() {}

func (x *CrontabScheduleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleCreateRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{36}
}

func (x *CrontabScheduleCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleCreateRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleCreateRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type CrontabScheduleDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CrontabScheduleDestroyRequest) Reset() {
	*x = CrontabScheduleDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleDestroyRequest) ProtoMessage() {}

func (x *CrontabScheduleDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleDestroyRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{37}
}

func (x *CrontabScheduleDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CrontabScheduleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *CrontabScheduleListRequest) Reset() {
	*x = CrontabScheduleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleListRequest) ProtoMessage() {}

func (x *CrontabScheduleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleListRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{38}
}

func (x *CrontabScheduleListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *CrontabScheduleListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type CrontabScheduleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CrontabScheduleResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CrontabScheduleListResponse) Reset() {
	*x = CrontabScheduleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleListResponse) ProtoMessage() {}

func (x *CrontabScheduleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleListResponse.ProtoReflect.Descriptor instead.
func (*CrontabScheduleListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{39}
}

func (x *CrontabScheduleListResponse) GetResults() []*CrontabScheduleResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CrontabScheduleListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CrontabSchedulePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute               *string  `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour                 *string  `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth           *string  `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear          *string  `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek            *string  `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone             string   `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,8,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *CrontabSchedulePartialUpdateRequest) Reset() {
	*x = CrontabSchedulePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabSchedulePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabSchedulePartialUpdateRequest) ProtoMessage() {}

func (x *CrontabSchedulePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabSchedulePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*CrontabSchedulePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{40}
}

func (x *CrontabSchedulePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabSchedulePartialUpdateRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CrontabSchedulePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type CrontabScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute      *string `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour        *string `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth  *string `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear *string `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek   *string `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone    string  `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *CrontabScheduleRequest) Reset() {
	*x = CrontabScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleRequest) ProtoMessage() {}

func (x *CrontabScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{41}
}

func (x *CrontabScheduleRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type CrontabScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute      *string `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour        *string `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth  *string `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear *string `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek   *string `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone    string  `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *CrontabScheduleResponse) Reset() {
	*x = CrontabScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleResponse) ProtoMessage() {}

func (x *CrontabScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleResponse.ProtoReflect.Descriptor instead.
func (*CrontabScheduleResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{42}
}

func (x *CrontabScheduleResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleResponse) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleResponse) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleResponse) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleResponse) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleResponse) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleResponse) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type CrontabScheduleRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CrontabScheduleRetrieveRequest) Reset() {
	*x = CrontabScheduleRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleRetrieveRequest) ProtoMessage() {}

func (x *CrontabScheduleRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{43}
}

func (x *CrontabScheduleRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CrontabScheduleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Minute               *string  `protobuf:"bytes,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Hour                 *string  `protobuf:"bytes,3,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	DayOfMonth           *string  `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty"`
	MonthOfYear          *string  `protobuf:"bytes,5,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty"`
	DayOfWeek            *string  `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3,oneof" json:"day_of_week,omitempty"`
	Timezone             string   `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,8,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *CrontabScheduleUpdateRequest) Reset() {
	*x = CrontabScheduleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabScheduleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabScheduleUpdateRequest) ProtoMessage() {}

func (x *CrontabScheduleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabScheduleUpdateRequest.ProtoReflect.Descriptor instead.
func (*CrontabScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{44}
}

func (x *CrontabScheduleUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CrontabScheduleUpdateRequest) GetMinute() string {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetDayOfMonth() string {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetMonthOfYear() string {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetDayOfWeek() string {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CrontabScheduleUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type FEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FMaterialID     string   `protobuf:"bytes,1,opt,name=FMaterialID,proto3" json:"FMaterialID,omitempty"`
	FOwnerID        string   `protobuf:"bytes,2,opt,name=FOwnerID,proto3" json:"FOwnerID,omitempty"`
	FStockID        string   `protobuf:"bytes,3,opt,name=FStockID,proto3" json:"FStockID,omitempty"`
	FUnitID         string   `protobuf:"bytes,4,opt,name=FUnitID,proto3" json:"FUnitID,omitempty"`
	FENTRYID        *int32   `protobuf:"varint,5,opt,name=FENTRYID,proto3,oneof" json:"FENTRYID,omitempty"`
	FRowType        *string  `protobuf:"bytes,6,opt,name=FRowType,proto3,oneof" json:"FRowType,omitempty"`
	FOwnerTypeID    *string  `protobuf:"bytes,7,opt,name=FOwnerTypeID,proto3,oneof" json:"FOwnerTypeID,omitempty"`
	FSALUNITQTY     *float64 `protobuf:"fixed64,8,opt,name=FSALUNITQTY,proto3,oneof" json:"FSALUNITQTY,omitempty"`
	FRealQty        *float64 `protobuf:"fixed64,9,opt,name=FRealQty,proto3,oneof" json:"FRealQty,omitempty"`
	FSALBASEQTY     *float64 `protobuf:"fixed64,10,opt,name=FSALBASEQTY,proto3,oneof" json:"FSALBASEQTY,omitempty"`
	FPRICEBASEQTY   *float64 `protobuf:"fixed64,11,opt,name=FPRICEBASEQTY,proto3,oneof" json:"FPRICEBASEQTY,omitempty"`
	FARNOTJOINQTY   *float64 `protobuf:"fixed64,12,opt,name=FARNOTJOINQTY,proto3,oneof" json:"FARNOTJOINQTY,omitempty"`
	FAllAmount      *float64 `protobuf:"fixed64,13,opt,name=FAllAmount,proto3,oneof" json:"FAllAmount,omitempty"`
	FDiscountRate   *int32   `protobuf:"varint,14,opt,name=FDiscountRate,proto3,oneof" json:"FDiscountRate,omitempty"`
	FOUTCONTROL     *bool    `protobuf:"varint,15,opt,name=FOUTCONTROL,proto3,oneof" json:"FOUTCONTROL,omitempty"`
	FIsOverLegalOrg *bool    `protobuf:"varint,16,opt,name=FIsOverLegalOrg,proto3,oneof" json:"FIsOverLegalOrg,omitempty"`
	FCheckDelivery  *bool    `protobuf:"varint,17,opt,name=FCheckDelivery,proto3,oneof" json:"FCheckDelivery,omitempty"`
	FIsFree         *bool    `protobuf:"varint,18,opt,name=FIsFree,proto3,oneof" json:"FIsFree,omitempty"`
	FEntrynote      *string  `protobuf:"bytes,19,opt,name=FEntrynote,proto3,oneof" json:"FEntrynote,omitempty"`
	FEntryTaxRate   *int32   `protobuf:"varint,20,opt,name=FEntryTaxRate,proto3,oneof" json:"FEntryTaxRate,omitempty"`
}

func (x *FEntityResponse) Reset() {
	*x = FEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FEntityResponse) ProtoMessage() {}

func (x *FEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FEntityResponse.ProtoReflect.Descriptor instead.
func (*FEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{45}
}

func (x *FEntityResponse) GetFMaterialID() string {
	if x != nil {
		return x.FMaterialID
	}
	return ""
}

func (x *FEntityResponse) GetFOwnerID() string {
	if x != nil {
		return x.FOwnerID
	}
	return ""
}

func (x *FEntityResponse) GetFStockID() string {
	if x != nil {
		return x.FStockID
	}
	return ""
}

func (x *FEntityResponse) GetFUnitID() string {
	if x != nil {
		return x.FUnitID
	}
	return ""
}

func (x *FEntityResponse) GetFENTRYID() int32 {
	if x != nil && x.FENTRYID != nil {
		return *x.FENTRYID
	}
	return 0
}

func (x *FEntityResponse) GetFRowType() string {
	if x != nil && x.FRowType != nil {
		return *x.FRowType
	}
	return ""
}

func (x *FEntityResponse) GetFOwnerTypeID() string {
	if x != nil && x.FOwnerTypeID != nil {
		return *x.FOwnerTypeID
	}
	return ""
}

func (x *FEntityResponse) GetFSALUNITQTY() float64 {
	if x != nil && x.FSALUNITQTY != nil {
		return *x.FSALUNITQTY
	}
	return 0
}

func (x *FEntityResponse) GetFRealQty() float64 {
	if x != nil && x.FRealQty != nil {
		return *x.FRealQty
	}
	return 0
}

func (x *FEntityResponse) GetFSALBASEQTY() float64 {
	if x != nil && x.FSALBASEQTY != nil {
		return *x.FSALBASEQTY
	}
	return 0
}

func (x *FEntityResponse) GetFPRICEBASEQTY() float64 {
	if x != nil && x.FPRICEBASEQTY != nil {
		return *x.FPRICEBASEQTY
	}
	return 0
}

func (x *FEntityResponse) GetFARNOTJOINQTY() float64 {
	if x != nil && x.FARNOTJOINQTY != nil {
		return *x.FARNOTJOINQTY
	}
	return 0
}

func (x *FEntityResponse) GetFAllAmount() float64 {
	if x != nil && x.FAllAmount != nil {
		return *x.FAllAmount
	}
	return 0
}

func (x *FEntityResponse) GetFDiscountRate() int32 {
	if x != nil && x.FDiscountRate != nil {
		return *x.FDiscountRate
	}
	return 0
}

func (x *FEntityResponse) GetFOUTCONTROL() bool {
	if x != nil && x.FOUTCONTROL != nil {
		return *x.FOUTCONTROL
	}
	return false
}

func (x *FEntityResponse) GetFIsOverLegalOrg() bool {
	if x != nil && x.FIsOverLegalOrg != nil {
		return *x.FIsOverLegalOrg
	}
	return false
}

func (x *FEntityResponse) GetFCheckDelivery() bool {
	if x != nil && x.FCheckDelivery != nil {
		return *x.FCheckDelivery
	}
	return false
}

func (x *FEntityResponse) GetFIsFree() bool {
	if x != nil && x.FIsFree != nil {
		return *x.FIsFree
	}
	return false
}

func (x *FEntityResponse) GetFEntrynote() string {
	if x != nil && x.FEntrynote != nil {
		return *x.FEntrynote
	}
	return ""
}

func (x *FEntityResponse) GetFEntryTaxRate() int32 {
	if x != nil && x.FEntryTaxRate != nil {
		return *x.FEntryTaxRate
	}
	return 0
}

type FetchQimenTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string  `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string  `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status    *string `protobuf:"bytes,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *FetchQimenTradeRequest) Reset() {
	*x = FetchQimenTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchQimenTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchQimenTradeRequest) ProtoMessage() {}

func (x *FetchQimenTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchQimenTradeRequest.ProtoReflect.Descriptor instead.
func (*FetchQimenTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{46}
}

func (x *FetchQimenTradeRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FetchQimenTradeRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *FetchQimenTradeRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type FetchQimenTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Affected int32 `protobuf:"varint,2,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *FetchQimenTradeResponse) Reset() {
	*x = FetchQimenTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchQimenTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchQimenTradeResponse) ProtoMessage() {}

func (x *FetchQimenTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchQimenTradeResponse.ProtoReflect.Descriptor instead.
func (*FetchQimenTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{47}
}

func (x *FetchQimenTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FetchQimenTradeResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type IntervalScheduleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every  int32  `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *IntervalScheduleCreateRequest) Reset() {
	*x = IntervalScheduleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleCreateRequest) ProtoMessage() {}

func (x *IntervalScheduleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleCreateRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{48}
}

func (x *IntervalScheduleCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleCreateRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleCreateRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type IntervalScheduleDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IntervalScheduleDestroyRequest) Reset() {
	*x = IntervalScheduleDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleDestroyRequest) ProtoMessage() {}

func (x *IntervalScheduleDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleDestroyRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{49}
}

func (x *IntervalScheduleDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IntervalScheduleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *IntervalScheduleListRequest) Reset() {
	*x = IntervalScheduleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleListRequest) ProtoMessage() {}

func (x *IntervalScheduleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleListRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{50}
}

func (x *IntervalScheduleListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *IntervalScheduleListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type IntervalScheduleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*IntervalScheduleResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *IntervalScheduleListResponse) Reset() {
	*x = IntervalScheduleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleListResponse) ProtoMessage() {}

func (x *IntervalScheduleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleListResponse.ProtoReflect.Descriptor instead.
func (*IntervalScheduleListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{51}
}

func (x *IntervalScheduleListResponse) GetResults() []*IntervalScheduleResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *IntervalScheduleListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type IntervalSchedulePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every                int32    `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period               string   `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *IntervalSchedulePartialUpdateRequest) Reset() {
	*x = IntervalSchedulePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalSchedulePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalSchedulePartialUpdateRequest) ProtoMessage() {}

func (x *IntervalSchedulePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalSchedulePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*IntervalSchedulePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{52}
}

func (x *IntervalSchedulePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalSchedulePartialUpdateRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalSchedulePartialUpdateRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *IntervalSchedulePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type IntervalScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every  int32  `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *IntervalScheduleRequest) Reset() {
	*x = IntervalScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleRequest) ProtoMessage() {}

func (x *IntervalScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{53}
}

func (x *IntervalScheduleRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type IntervalScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every  int32  `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *IntervalScheduleResponse) Reset() {
	*x = IntervalScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleResponse) ProtoMessage() {}

func (x *IntervalScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleResponse.ProtoReflect.Descriptor instead.
func (*IntervalScheduleResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{54}
}

func (x *IntervalScheduleResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleResponse) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleResponse) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type IntervalScheduleRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IntervalScheduleRetrieveRequest) Reset() {
	*x = IntervalScheduleRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleRetrieveRequest) ProtoMessage() {}

func (x *IntervalScheduleRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleRetrieveRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{55}
}

func (x *IntervalScheduleRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IntervalScheduleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Every                int32    `protobuf:"varint,2,opt,name=every,proto3" json:"every,omitempty"`
	Period               string   `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *IntervalScheduleUpdateRequest) Reset() {
	*x = IntervalScheduleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalScheduleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalScheduleUpdateRequest) ProtoMessage() {}

func (x *IntervalScheduleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalScheduleUpdateRequest.ProtoReflect.Descriptor instead.
func (*IntervalScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{56}
}

func (x *IntervalScheduleUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *IntervalScheduleUpdateRequest) GetEvery() int32 {
	if x != nil {
		return x.Every
	}
	return 0
}

func (x *IntervalScheduleUpdateRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *IntervalScheduleUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type KingdeePurchaseDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeePurchaseDestroyRequest) Reset() {
	*x = KingdeePurchaseDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseDestroyRequest) ProtoMessage() {}

func (x *KingdeePurchaseDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{57}
}

func (x *KingdeePurchaseDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeePurchaseListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeePurchaseListRequest) Reset() {
	*x = KingdeePurchaseListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseListRequest) ProtoMessage() {}

func (x *KingdeePurchaseListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseListRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{58}
}

func (x *KingdeePurchaseListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeePurchaseListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeePurchaseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeePurchaseResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeePurchaseListResponse) Reset() {
	*x = KingdeePurchaseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseListResponse) ProtoMessage() {}

func (x *KingdeePurchaseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseListResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{59}
}

func (x *KingdeePurchaseListResponse) GetResults() []*KingdeePurchaseResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeePurchaseListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeePurchasePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	XPartialUpdateFields  []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	FormId                *string  `protobuf:"bytes,3,opt,name=form_id,json=formId,proto3,oneof" json:"form_id,omitempty"`
	KingdeeNo             *string  `protobuf:"bytes,4,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	PushKingdeeStatus     *int32   `protobuf:"varint,5,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KingdeePurchaseOrder  *string  `protobuf:"bytes,6,opt,name=kingdee_purchase_order,json=kingdeePurchaseOrder,proto3,oneof" json:"kingdee_purchase_order,omitempty"`
	KingdeePurchaseInform *string  `protobuf:"bytes,7,opt,name=kingdee_purchase_inform,json=kingdeePurchaseInform,proto3,oneof" json:"kingdee_purchase_inform,omitempty"`
	WdtPurchaseOrder      *string  `protobuf:"bytes,8,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	WdtStockinNo          *string  `protobuf:"bytes,9,opt,name=wdt_stockin_no,json=wdtStockinNo,proto3,oneof" json:"wdt_stockin_no,omitempty"`
}

func (x *KingdeePurchasePartialUpdateRequest) Reset() {
	*x = KingdeePurchasePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchasePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchasePartialUpdateRequest) ProtoMessage() {}

func (x *KingdeePurchasePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchasePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchasePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{60}
}

func (x *KingdeePurchasePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeePurchasePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeePurchasePartialUpdateRequest) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeePurchasePartialUpdateRequest) GetKingdeePurchaseOrder() string {
	if x != nil && x.KingdeePurchaseOrder != nil {
		return *x.KingdeePurchaseOrder
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetKingdeePurchaseInform() string {
	if x != nil && x.KingdeePurchaseInform != nil {
		return *x.KingdeePurchaseInform
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *KingdeePurchasePartialUpdateRequest) GetWdtStockinNo() string {
	if x != nil && x.WdtStockinNo != nil {
		return *x.WdtStockinNo
	}
	return ""
}

type KingdeePurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	FormId                *string `protobuf:"bytes,2,opt,name=form_id,json=formId,proto3,oneof" json:"form_id,omitempty"`
	KingdeeNo             *string `protobuf:"bytes,3,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	PushKingdeeStatus     *int32  `protobuf:"varint,4,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KingdeePurchaseOrder  *string `protobuf:"bytes,5,opt,name=kingdee_purchase_order,json=kingdeePurchaseOrder,proto3,oneof" json:"kingdee_purchase_order,omitempty"`
	KingdeePurchaseInform *string `protobuf:"bytes,6,opt,name=kingdee_purchase_inform,json=kingdeePurchaseInform,proto3,oneof" json:"kingdee_purchase_inform,omitempty"`
	WdtPurchaseOrder      *string `protobuf:"bytes,7,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	WdtStockinNo          *string `protobuf:"bytes,8,opt,name=wdt_stockin_no,json=wdtStockinNo,proto3,oneof" json:"wdt_stockin_no,omitempty"`
}

func (x *KingdeePurchaseRequest) Reset() {
	*x = KingdeePurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseRequest) ProtoMessage() {}

func (x *KingdeePurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{61}
}

func (x *KingdeePurchaseRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeePurchaseRequest) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeePurchaseRequest) GetKingdeePurchaseOrder() string {
	if x != nil && x.KingdeePurchaseOrder != nil {
		return *x.KingdeePurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetKingdeePurchaseInform() string {
	if x != nil && x.KingdeePurchaseInform != nil {
		return *x.KingdeePurchaseInform
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseRequest) GetWdtStockinNo() string {
	if x != nil && x.WdtStockinNo != nil {
		return *x.WdtStockinNo
	}
	return ""
}

type KingdeePurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreateTime            *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FormId                *string `protobuf:"bytes,4,opt,name=form_id,json=formId,proto3,oneof" json:"form_id,omitempty"`
	KingdeeNo             *string `protobuf:"bytes,5,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	PushKingdeeStatus     *int32  `protobuf:"varint,6,opt,name=push_kingdee_status,json=pushKingdeeStatus,proto3,oneof" json:"push_kingdee_status,omitempty"`
	KingdeePurchaseOrder  *string `protobuf:"bytes,7,opt,name=kingdee_purchase_order,json=kingdeePurchaseOrder,proto3,oneof" json:"kingdee_purchase_order,omitempty"`
	KingdeePurchaseInform *string `protobuf:"bytes,8,opt,name=kingdee_purchase_inform,json=kingdeePurchaseInform,proto3,oneof" json:"kingdee_purchase_inform,omitempty"`
	WdtPurchaseOrder      *string `protobuf:"bytes,9,opt,name=wdt_purchase_order,json=wdtPurchaseOrder,proto3,oneof" json:"wdt_purchase_order,omitempty"`
	WdtStockinNo          *string `protobuf:"bytes,10,opt,name=wdt_stockin_no,json=wdtStockinNo,proto3,oneof" json:"wdt_stockin_no,omitempty"`
}

func (x *KingdeePurchaseResponse) Reset() {
	*x = KingdeePurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseResponse) ProtoMessage() {}

func (x *KingdeePurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseResponse.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{62}
}

func (x *KingdeePurchaseResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeePurchaseResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetPushKingdeeStatus() int32 {
	if x != nil && x.PushKingdeeStatus != nil {
		return *x.PushKingdeeStatus
	}
	return 0
}

func (x *KingdeePurchaseResponse) GetKingdeePurchaseOrder() string {
	if x != nil && x.KingdeePurchaseOrder != nil {
		return *x.KingdeePurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetKingdeePurchaseInform() string {
	if x != nil && x.KingdeePurchaseInform != nil {
		return *x.KingdeePurchaseInform
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetWdtPurchaseOrder() string {
	if x != nil && x.WdtPurchaseOrder != nil {
		return *x.WdtPurchaseOrder
	}
	return ""
}

func (x *KingdeePurchaseResponse) GetWdtStockinNo() string {
	if x != nil && x.WdtStockinNo != nil {
		return *x.WdtStockinNo
	}
	return ""
}

type KingdeePurchaseRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeePurchaseRetrieveRequest) Reset() {
	*x = KingdeePurchaseRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeePurchaseRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeePurchaseRetrieveRequest) ProtoMessage() {}

func (x *KingdeePurchaseRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeePurchaseRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeePurchaseRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{63}
}

func (x *KingdeePurchaseRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeeSalOutStockListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeSalOutStockListRequest) Reset() {
	*x = KingdeeSalOutStockListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockListRequest) ProtoMessage() {}

func (x *KingdeeSalOutStockListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{64}
}

func (x *KingdeeSalOutStockListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeSalOutStockListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeSalOutStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeSalOutStockResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeSalOutStockListResponse) Reset() {
	*x = KingdeeSalOutStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockListResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{65}
}

func (x *KingdeeSalOutStockListResponse) GetResults() []*KingdeeSalOutStockResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeSalOutStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeSalOutStockModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubHeadEntity *SubHeadEntityResponse `protobuf:"bytes,1,opt,name=SubHeadEntity,proto3,oneof" json:"SubHeadEntity,omitempty"`
	FEntity       []*FEntityResponse     `protobuf:"bytes,2,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	FBillTypeID   string                 `protobuf:"bytes,3,opt,name=FBillTypeID,proto3" json:"FBillTypeID,omitempty"`
	FSaleOrgId    string                 `protobuf:"bytes,4,opt,name=FSaleOrgId,proto3" json:"FSaleOrgId,omitempty"`
	FStockOrgId   string                 `protobuf:"bytes,5,opt,name=FStockOrgId,proto3" json:"FStockOrgId,omitempty"`
	FBranchId     string                 `protobuf:"bytes,6,opt,name=FBranchId,proto3" json:"FBranchId,omitempty"`
	FCustomerID   string                 `protobuf:"bytes,7,opt,name=FCustomerID,proto3" json:"FCustomerID,omitempty"`
	FSettleID     string                 `protobuf:"bytes,8,opt,name=FSettleID,proto3" json:"FSettleID,omitempty"`
	FPayerID      string                 `protobuf:"bytes,9,opt,name=FPayerID,proto3" json:"FPayerID,omitempty"`
	FReceiverID   string                 `protobuf:"bytes,10,opt,name=FReceiverID,proto3" json:"FReceiverID,omitempty"`
	FSaleDeptID   string                 `protobuf:"bytes,11,opt,name=FSaleDeptID,proto3" json:"FSaleDeptID,omitempty"`
	FSalesManID   string                 `protobuf:"bytes,12,opt,name=FSalesManID,proto3" json:"FSalesManID,omitempty"`
	FBillNo       *string                `protobuf:"bytes,13,opt,name=FBillNo,proto3,oneof" json:"FBillNo,omitempty"`
	FDate         string                 `protobuf:"bytes,14,opt,name=FDate,proto3" json:"FDate,omitempty"`
	FZBStockID    *string                `protobuf:"bytes,15,opt,name=FZBStockID,proto3,oneof" json:"FZBStockID,omitempty"`
	FOwnerIdHead  *string                `protobuf:"bytes,16,opt,name=FOwnerIdHead,proto3,oneof" json:"FOwnerIdHead,omitempty"`
	FNote         *string                `protobuf:"bytes,17,opt,name=FNote,proto3,oneof" json:"FNote,omitempty"`
	FLogisticsNos *string                `protobuf:"bytes,18,opt,name=FLogisticsNos,proto3,oneof" json:"FLogisticsNos,omitempty"`
	FARStatus     *string                `protobuf:"bytes,19,opt,name=FARStatus,proto3,oneof" json:"FARStatus,omitempty"`
}

func (x *KingdeeSalOutStockModelResponse) Reset() {
	*x = KingdeeSalOutStockModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockModelResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockModelResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockModelResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{66}
}

func (x *KingdeeSalOutStockModelResponse) GetSubHeadEntity() *SubHeadEntityResponse {
	if x != nil {
		return x.SubHeadEntity
	}
	return nil
}

func (x *KingdeeSalOutStockModelResponse) GetFEntity() []*FEntityResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *KingdeeSalOutStockModelResponse) GetFBillTypeID() string {
	if x != nil {
		return x.FBillTypeID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSaleOrgId() string {
	if x != nil {
		return x.FSaleOrgId
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFStockOrgId() string {
	if x != nil {
		return x.FStockOrgId
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFBranchId() string {
	if x != nil {
		return x.FBranchId
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFCustomerID() string {
	if x != nil {
		return x.FCustomerID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSettleID() string {
	if x != nil {
		return x.FSettleID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFPayerID() string {
	if x != nil {
		return x.FPayerID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFReceiverID() string {
	if x != nil {
		return x.FReceiverID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSaleDeptID() string {
	if x != nil {
		return x.FSaleDeptID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFSalesManID() string {
	if x != nil {
		return x.FSalesManID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFBillNo() string {
	if x != nil && x.FBillNo != nil {
		return *x.FBillNo
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFZBStockID() string {
	if x != nil && x.FZBStockID != nil {
		return *x.FZBStockID
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFOwnerIdHead() string {
	if x != nil && x.FOwnerIdHead != nil {
		return *x.FOwnerIdHead
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFNote() string {
	if x != nil && x.FNote != nil {
		return *x.FNote
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFLogisticsNos() string {
	if x != nil && x.FLogisticsNos != nil {
		return *x.FLogisticsNos
	}
	return ""
}

func (x *KingdeeSalOutStockModelResponse) GetFARStatus() string {
	if x != nil && x.FARStatus != nil {
		return *x.FARStatus
	}
	return ""
}

type KingdeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *string                          `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	Model               *KingdeeSalOutStockModelResponse `protobuf:"bytes,2,opt,name=model,proto3,oneof" json:"model,omitempty"`
	AggNo               *string                          `protobuf:"bytes,3,opt,name=agg_no,json=aggNo,proto3,oneof" json:"agg_no,omitempty"`
	AggName             *string                          `protobuf:"bytes,4,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
	NeedUpDateFields    *string                          `protobuf:"bytes,5,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields    *string                          `protobuf:"bytes,6,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo           *string                          `protobuf:"bytes,7,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus   *int32                           `protobuf:"varint,8,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason       *string                          `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string                          `protobuf:"bytes,10,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32                           `protobuf:"varint,11,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string                          `protobuf:"bytes,12,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim          *int32                           `protobuf:"varint,13,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string                          `protobuf:"bytes,14,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32                           `protobuf:"varint,15,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string                          `protobuf:"bytes,16,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo       *string                          `protobuf:"bytes,17,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string                          `protobuf:"bytes,18,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggYear             *int32                           `protobuf:"varint,19,opt,name=agg_year,json=aggYear,proto3,oneof" json:"agg_year,omitempty"`
	AggMonth            *int32                           `protobuf:"varint,20,opt,name=agg_month,json=aggMonth,proto3,oneof" json:"agg_month,omitempty"`
	AggWeek             *int32                           `protobuf:"varint,21,opt,name=agg_week,json=aggWeek,proto3,oneof" json:"agg_week,omitempty"`
	AggDay              *int32                           `protobuf:"varint,22,opt,name=agg_day,json=aggDay,proto3,oneof" json:"agg_day,omitempty"`
	AggShopNo           *string                          `protobuf:"bytes,23,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string                          `protobuf:"bytes,24,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string                          `protobuf:"bytes,25,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string                          `protobuf:"bytes,26,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo          *string                          `protobuf:"bytes,27,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount       *int32                           `protobuf:"varint,28,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount   *int32                           `protobuf:"varint,29,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *float64                         `protobuf:"fixed64,30,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount      *float64                         `protobuf:"fixed64,31,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *float64                         `protobuf:"fixed64,32,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *float64                         `protobuf:"fixed64,33,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *float64                         `protobuf:"fixed64,34,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod           *string                          `protobuf:"bytes,35,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	CreateTime          *string                          `protobuf:"bytes,36,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string                          `protobuf:"bytes,37,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *KingdeeSalOutStockResponse) Reset() {
	*x = KingdeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockResponse) ProtoMessage() {}

func (x *KingdeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{67}
}

func (x *KingdeeSalOutStockResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetModel() *KingdeeSalOutStockModelResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeeSalOutStockResponse) GetAggNo() string {
	if x != nil && x.AggNo != nil {
		return *x.AggNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggYear() int32 {
	if x != nil && x.AggYear != nil {
		return *x.AggYear
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggMonth() int32 {
	if x != nil && x.AggMonth != nil {
		return *x.AggMonth
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggWeek() int32 {
	if x != nil && x.AggWeek != nil {
		return *x.AggWeek
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggDay() int32 {
	if x != nil && x.AggDay != nil {
		return *x.AggDay
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggTotalAmount() float64 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggDiscountAmount() float64 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggReceivableAmount() float64 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggPaidAmount() float64 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeSalOutStockResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalOutStockResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type KingdeeSalOutStockRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *KingdeeSalOutStockRetrieveRequest) Reset() {
	*x = KingdeeSalOutStockRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalOutStockRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalOutStockRetrieveRequest) ProtoMessage() {}

func (x *KingdeeSalOutStockRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalOutStockRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalOutStockRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{68}
}

func (x *KingdeeSalOutStockRetrieveRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type KingdeeSalReturnStockDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *KingdeeSalReturnStockDestroyRequest) Reset() {
	*x = KingdeeSalReturnStockDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockDestroyRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{69}
}

func (x *KingdeeSalReturnStockDestroyRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type KingdeeSalReturnStockListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeSalReturnStockListRequest) Reset() {
	*x = KingdeeSalReturnStockListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockListRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{70}
}

func (x *KingdeeSalReturnStockListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeSalReturnStockListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeSalReturnStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeSalReturnStockResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeSalReturnStockListResponse) Reset() {
	*x = KingdeeSalReturnStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockListResponse) ProtoMessage() {}

func (x *KingdeeSalReturnStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{71}
}

func (x *KingdeeSalReturnStockListResponse) GetResults() []*KingdeeSalReturnStockResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeSalReturnStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeSalReturnStockPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo                 string   `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
	AggRefundStockinNo    []string `protobuf:"bytes,2,rep,name=agg_refund_stockin_no,json=aggRefundStockinNo,proto3" json:"agg_refund_stockin_no,omitempty"`
	XPartialUpdateFields  []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	NeedUpDateFields      *string  `protobuf:"bytes,4,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string  `protobuf:"bytes,5,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo             *string  `protobuf:"bytes,6,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	KingdeePushStatus     *int32   `protobuf:"varint,7,opt,name=kingdee_push_status,json=kingdeePushStatus,proto3,oneof" json:"kingdee_push_status,omitempty"`
	FailureReason         *string  `protobuf:"bytes,8,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason          *string  `protobuf:"bytes,9,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggOrganizeNo         *string  `protobuf:"bytes,10,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName       *string  `protobuf:"bytes,11,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo             *string  `protobuf:"bytes,12,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName           *string  `protobuf:"bytes,13,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo        *string  `protobuf:"bytes,14,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName      *string  `protobuf:"bytes,15,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	TradeAggNo            *string  `protobuf:"bytes,16,opt,name=trade_agg_no,json=tradeAggNo,proto3,oneof" json:"trade_agg_no,omitempty"`
	AggRefundStockinCount *int32   `protobuf:"varint,17,opt,name=agg_refund_stockin_count,json=aggRefundStockinCount,proto3,oneof" json:"agg_refund_stockin_count,omitempty"`
	AggGoodsTypeCount     *int32   `protobuf:"varint,18,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount         *float64 `protobuf:"fixed64,19,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggActualRefundAmount *float64 `protobuf:"fixed64,20,opt,name=agg_actual_refund_amount,json=aggActualRefundAmount,proto3,oneof" json:"agg_actual_refund_amount,omitempty"`
	AggTotalPrice         *float64 `protobuf:"fixed64,21,opt,name=agg_total_price,json=aggTotalPrice,proto3,oneof" json:"agg_total_price,omitempty"`
	AggGoodsAmount        *float64 `protobuf:"fixed64,22,opt,name=agg_goods_amount,json=aggGoodsAmount,proto3,oneof" json:"agg_goods_amount,omitempty"`
	AggPeriod             *string  `protobuf:"bytes,23,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	CreateTime            *string  `protobuf:"bytes,24,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string  `protobuf:"bytes,25,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) Reset() {
	*x = KingdeeSalReturnStockPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockPartialUpdateRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{72}
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggRefundStockinNo() []string {
	if x != nil {
		return x.AggRefundStockinNo
	}
	return nil
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetKingdeePushStatus() int32 {
	if x != nil && x.KingdeePushStatus != nil {
		return *x.KingdeePushStatus
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetTradeAggNo() string {
	if x != nil && x.TradeAggNo != nil {
		return *x.TradeAggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggRefundStockinCount() int32 {
	if x != nil && x.AggRefundStockinCount != nil {
		return *x.AggRefundStockinCount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggActualRefundAmount() float64 {
	if x != nil && x.AggActualRefundAmount != nil {
		return *x.AggActualRefundAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggTotalPrice() float64 {
	if x != nil && x.AggTotalPrice != nil {
		return *x.AggTotalPrice
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggGoodsAmount() float64 {
	if x != nil && x.AggGoodsAmount != nil {
		return *x.AggGoodsAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockPartialUpdateRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type KingdeeSalReturnStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo                 string   `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
	AggRefundStockinNo    []string `protobuf:"bytes,2,rep,name=agg_refund_stockin_no,json=aggRefundStockinNo,proto3" json:"agg_refund_stockin_no,omitempty"`
	NeedUpDateFields      *string  `protobuf:"bytes,3,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string  `protobuf:"bytes,4,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo             *string  `protobuf:"bytes,5,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	KingdeePushStatus     *int32   `protobuf:"varint,6,opt,name=kingdee_push_status,json=kingdeePushStatus,proto3,oneof" json:"kingdee_push_status,omitempty"`
	FailureReason         *string  `protobuf:"bytes,7,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason          *string  `protobuf:"bytes,8,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggOrganizeNo         *string  `protobuf:"bytes,9,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName       *string  `protobuf:"bytes,10,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo             *string  `protobuf:"bytes,11,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName           *string  `protobuf:"bytes,12,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo        *string  `protobuf:"bytes,13,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName      *string  `protobuf:"bytes,14,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	TradeAggNo            *string  `protobuf:"bytes,15,opt,name=trade_agg_no,json=tradeAggNo,proto3,oneof" json:"trade_agg_no,omitempty"`
	AggRefundStockinCount *int32   `protobuf:"varint,16,opt,name=agg_refund_stockin_count,json=aggRefundStockinCount,proto3,oneof" json:"agg_refund_stockin_count,omitempty"`
	AggGoodsTypeCount     *int32   `protobuf:"varint,17,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount         *float64 `protobuf:"fixed64,18,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggActualRefundAmount *float64 `protobuf:"fixed64,19,opt,name=agg_actual_refund_amount,json=aggActualRefundAmount,proto3,oneof" json:"agg_actual_refund_amount,omitempty"`
	AggTotalPrice         *float64 `protobuf:"fixed64,20,opt,name=agg_total_price,json=aggTotalPrice,proto3,oneof" json:"agg_total_price,omitempty"`
	AggGoodsAmount        *float64 `protobuf:"fixed64,21,opt,name=agg_goods_amount,json=aggGoodsAmount,proto3,oneof" json:"agg_goods_amount,omitempty"`
	AggPeriod             *string  `protobuf:"bytes,22,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	CreateTime            *string  `protobuf:"bytes,23,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string  `protobuf:"bytes,24,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *KingdeeSalReturnStockRequest) Reset() {
	*x = KingdeeSalReturnStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{73}
}

func (x *KingdeeSalReturnStockRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggRefundStockinNo() []string {
	if x != nil {
		return x.AggRefundStockinNo
	}
	return nil
}

func (x *KingdeeSalReturnStockRequest) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetKingdeePushStatus() int32 {
	if x != nil && x.KingdeePushStatus != nil {
		return *x.KingdeePushStatus
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetTradeAggNo() string {
	if x != nil && x.TradeAggNo != nil {
		return *x.TradeAggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetAggRefundStockinCount() int32 {
	if x != nil && x.AggRefundStockinCount != nil {
		return *x.AggRefundStockinCount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggActualRefundAmount() float64 {
	if x != nil && x.AggActualRefundAmount != nil {
		return *x.AggActualRefundAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggTotalPrice() float64 {
	if x != nil && x.AggTotalPrice != nil {
		return *x.AggTotalPrice
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggGoodsAmount() float64 {
	if x != nil && x.AggGoodsAmount != nil {
		return *x.AggGoodsAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockRequest) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type KingdeeSalReturnStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo                 string                  `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
	Model                 *SalReturnStockResponse `protobuf:"bytes,2,opt,name=Model,proto3,oneof" json:"Model,omitempty"`
	AggRefundStockinNo    []string                `protobuf:"bytes,3,rep,name=agg_refund_stockin_no,json=aggRefundStockinNo,proto3" json:"agg_refund_stockin_no,omitempty"`
	NeedUpDateFields      *string                 `protobuf:"bytes,4,opt,name=NeedUpDateFields,proto3,oneof" json:"NeedUpDateFields,omitempty"`
	NeedReturnFields      *string                 `protobuf:"bytes,5,opt,name=NeedReturnFields,proto3,oneof" json:"NeedReturnFields,omitempty"`
	KingdeeNo             *string                 `protobuf:"bytes,6,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	KingdeePushStatus     *int32                  `protobuf:"varint,7,opt,name=kingdee_push_status,json=kingdeePushStatus,proto3,oneof" json:"kingdee_push_status,omitempty"`
	FailureReason         *string                 `protobuf:"bytes,8,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason          *string                 `protobuf:"bytes,9,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggOrganizeNo         *string                 `protobuf:"bytes,10,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName       *string                 `protobuf:"bytes,11,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo             *string                 `protobuf:"bytes,12,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName           *string                 `protobuf:"bytes,13,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo        *string                 `protobuf:"bytes,14,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName      *string                 `protobuf:"bytes,15,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	TradeAggNo            *string                 `protobuf:"bytes,16,opt,name=trade_agg_no,json=tradeAggNo,proto3,oneof" json:"trade_agg_no,omitempty"`
	AggRefundStockinCount *int32                  `protobuf:"varint,17,opt,name=agg_refund_stockin_count,json=aggRefundStockinCount,proto3,oneof" json:"agg_refund_stockin_count,omitempty"`
	AggGoodsTypeCount     *int32                  `protobuf:"varint,18,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount         *float64                `protobuf:"fixed64,19,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggActualRefundAmount *float64                `protobuf:"fixed64,20,opt,name=agg_actual_refund_amount,json=aggActualRefundAmount,proto3,oneof" json:"agg_actual_refund_amount,omitempty"`
	AggTotalPrice         *float64                `protobuf:"fixed64,21,opt,name=agg_total_price,json=aggTotalPrice,proto3,oneof" json:"agg_total_price,omitempty"`
	AggGoodsAmount        *float64                `protobuf:"fixed64,22,opt,name=agg_goods_amount,json=aggGoodsAmount,proto3,oneof" json:"agg_goods_amount,omitempty"`
	AggPeriod             *string                 `protobuf:"bytes,23,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	CreateTime            *string                 `protobuf:"bytes,24,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime            *string                 `protobuf:"bytes,25,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *KingdeeSalReturnStockResponse) Reset() {
	*x = KingdeeSalReturnStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockResponse) ProtoMessage() {}

func (x *KingdeeSalReturnStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockResponse.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{74}
}

func (x *KingdeeSalReturnStockResponse) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetModel() *SalReturnStockResponse {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *KingdeeSalReturnStockResponse) GetAggRefundStockinNo() []string {
	if x != nil {
		return x.AggRefundStockinNo
	}
	return nil
}

func (x *KingdeeSalReturnStockResponse) GetNeedUpDateFields() string {
	if x != nil && x.NeedUpDateFields != nil {
		return *x.NeedUpDateFields
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetNeedReturnFields() string {
	if x != nil && x.NeedReturnFields != nil {
		return *x.NeedReturnFields
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetKingdeePushStatus() int32 {
	if x != nil && x.KingdeePushStatus != nil {
		return *x.KingdeePushStatus
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetTradeAggNo() string {
	if x != nil && x.TradeAggNo != nil {
		return *x.TradeAggNo
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetAggRefundStockinCount() int32 {
	if x != nil && x.AggRefundStockinCount != nil {
		return *x.AggRefundStockinCount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggGoodsCount() float64 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggActualRefundAmount() float64 {
	if x != nil && x.AggActualRefundAmount != nil {
		return *x.AggActualRefundAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggTotalPrice() float64 {
	if x != nil && x.AggTotalPrice != nil {
		return *x.AggTotalPrice
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggGoodsAmount() float64 {
	if x != nil && x.AggGoodsAmount != nil {
		return *x.AggGoodsAmount
	}
	return 0
}

func (x *KingdeeSalReturnStockResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeSalReturnStockResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type KingdeeSalReturnStockRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNo string `protobuf:"bytes,1,opt,name=agg_no,json=aggNo,proto3" json:"agg_no,omitempty"`
}

func (x *KingdeeSalReturnStockRetrieveRequest) Reset() {
	*x = KingdeeSalReturnStockRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeSalReturnStockRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeSalReturnStockRetrieveRequest) ProtoMessage() {}

func (x *KingdeeSalReturnStockRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeSalReturnStockRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeeSalReturnStockRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{75}
}

func (x *KingdeeSalReturnStockRetrieveRequest) GetAggNo() string {
	if x != nil {
		return x.AggNo
	}
	return ""
}

type KingdeeShopNoInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopNo string `protobuf:"bytes,1,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
}

func (x *KingdeeShopNoInfoRequest) Reset() {
	*x = KingdeeShopNoInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeShopNoInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeShopNoInfoRequest) ProtoMessage() {}

func (x *KingdeeShopNoInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeShopNoInfoRequest.ProtoReflect.Descriptor instead.
func (*KingdeeShopNoInfoRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{76}
}

func (x *KingdeeShopNoInfoRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

type KingdeeShopNoInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KingdeeShopNoInfoResponse) Reset() {
	*x = KingdeeShopNoInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeShopNoInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeShopNoInfoResponse) ProtoMessage() {}

func (x *KingdeeShopNoInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeShopNoInfoResponse.ProtoReflect.Descriptor instead.
func (*KingdeeShopNoInfoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{77}
}

func (x *KingdeeShopNoInfoResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type KingdeeStockNoInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNo string `protobuf:"bytes,1,opt,name=stock_no,json=stockNo,proto3" json:"stock_no,omitempty"`
}

func (x *KingdeeStockNoInfoRequest) Reset() {
	*x = KingdeeStockNoInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStockNoInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStockNoInfoRequest) ProtoMessage() {}

func (x *KingdeeStockNoInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStockNoInfoRequest.ProtoReflect.Descriptor instead.
func (*KingdeeStockNoInfoRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{78}
}

func (x *KingdeeStockNoInfoRequest) GetStockNo() string {
	if x != nil {
		return x.StockNo
	}
	return ""
}

type KingdeeStockNoInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KingdeeStockNoInfoResponse) Reset() {
	*x = KingdeeStockNoInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeStockNoInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeStockNoInfoResponse) ProtoMessage() {}

func (x *KingdeeStockNoInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeStockNoInfoResponse.ProtoReflect.Descriptor instead.
func (*KingdeeStockNoInfoResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{79}
}

func (x *KingdeeStockNoInfoResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type KingdeeTradeDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeeTradeDestroyRequest) Reset() {
	*x = KingdeeTradeDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeDestroyRequest) ProtoMessage() {}

func (x *KingdeeTradeDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeDestroyRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{80}
}

func (x *KingdeeTradeDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KingdeeTradeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *KingdeeTradeListRequest) Reset() {
	*x = KingdeeTradeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeListRequest) ProtoMessage() {}

func (x *KingdeeTradeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeListRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{81}
}

func (x *KingdeeTradeListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *KingdeeTradeListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type KingdeeTradeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KingdeeTradeResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KingdeeTradeListResponse) Reset() {
	*x = KingdeeTradeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeListResponse) ProtoMessage() {}

func (x *KingdeeTradeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeListResponse.ProtoReflect.Descriptor instead.
func (*KingdeeTradeListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{82}
}

func (x *KingdeeTradeListResponse) GetResults() []*KingdeeTradeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KingdeeTradeListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KingdeeTradePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	FormId               string   `protobuf:"bytes,3,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	KingdeeNo            *string  `protobuf:"bytes,4,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus    *int32   `protobuf:"varint,5,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason        *string  `protobuf:"bytes,6,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason         *string  `protobuf:"bytes,7,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType              *int32   `protobuf:"varint,8,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName          *string  `protobuf:"bytes,9,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim           *int32   `protobuf:"varint,10,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName       *string  `protobuf:"bytes,11,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim              *int32   `protobuf:"varint,12,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName          *string  `protobuf:"bytes,13,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo        *string  `protobuf:"bytes,14,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName      *string  `protobuf:"bytes,15,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo            *string  `protobuf:"bytes,16,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName          *string  `protobuf:"bytes,17,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo       *string  `protobuf:"bytes,18,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName     *string  `protobuf:"bytes,19,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo           *string  `protobuf:"bytes,20,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount        *int32   `protobuf:"varint,21,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount    *int32   `protobuf:"varint,22,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount        *int32   `protobuf:"varint,23,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount       *int32   `protobuf:"varint,24,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount    *int32   `protobuf:"varint,25,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount  *int32   `protobuf:"varint,26,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount        *int32   `protobuf:"varint,27,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod            *string  `protobuf:"bytes,28,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
}

func (x *KingdeeTradePartialUpdateRequest) Reset() {
	*x = KingdeeTradePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradePartialUpdateRequest) ProtoMessage() {}

func (x *KingdeeTradePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{83}
}

func (x *KingdeeTradePartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KingdeeTradePartialUpdateRequest) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggTotalAmount() int32 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggDiscountAmount() int32 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggReceivableAmount() int32 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggPaidAmount() int32 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeTradePartialUpdateRequest) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

type KingdeeTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	FormId              string  `protobuf:"bytes,2,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	KingdeeNo           *string `protobuf:"bytes,3,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus   *int32  `protobuf:"varint,4,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason       *string `protobuf:"bytes,5,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string `protobuf:"bytes,6,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32  `protobuf:"varint,7,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string `protobuf:"bytes,8,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim          *int32  `protobuf:"varint,9,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string `protobuf:"bytes,10,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32  `protobuf:"varint,11,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string `protobuf:"bytes,12,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo       *string `protobuf:"bytes,13,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string `protobuf:"bytes,14,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string `protobuf:"bytes,15,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string `protobuf:"bytes,16,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string `protobuf:"bytes,17,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string `protobuf:"bytes,18,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,19,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount       *int32  `protobuf:"varint,20,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount   *int32  `protobuf:"varint,21,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32  `protobuf:"varint,22,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount      *int32  `protobuf:"varint,23,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *int32  `protobuf:"varint,24,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *int32  `protobuf:"varint,25,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *int32  `protobuf:"varint,26,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod           *string `protobuf:"bytes,27,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
}

func (x *KingdeeTradeRequest) Reset() {
	*x = KingdeeTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeRequest) ProtoMessage() {}

func (x *KingdeeTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{84}
}

func (x *KingdeeTradeRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeTradeRequest) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *KingdeeTradeRequest) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeTradeRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeTradeRequest) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeTradeRequest) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeTradeRequest) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeTradeRequest) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggTotalAmount() int32 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggDiscountAmount() int32 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggReceivableAmount() int32 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggPaidAmount() int32 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeTradeRequest) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

type KingdeeTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreateTime          *string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime          *string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	FormId              string  `protobuf:"bytes,4,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	KingdeeNo           *string `protobuf:"bytes,5,opt,name=kingdee_no,json=kingdeeNo,proto3,oneof" json:"kingdee_no,omitempty"`
	SalOutstockStatus   *int32  `protobuf:"varint,6,opt,name=sal_outstock_status,json=salOutstockStatus,proto3,oneof" json:"sal_outstock_status,omitempty"`
	FailureReason       *string `protobuf:"bytes,7,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CancelReason        *string `protobuf:"bytes,8,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	AggType             *int32  `protobuf:"varint,9,opt,name=agg_type,json=aggType,proto3,oneof" json:"agg_type,omitempty"`
	AggTypeName         *string `protobuf:"bytes,10,opt,name=agg_type_name,json=aggTypeName,proto3,oneof" json:"agg_type_name,omitempty"`
	ChannelDim          *int32  `protobuf:"varint,11,opt,name=channel_dim,json=channelDim,proto3,oneof" json:"channel_dim,omitempty"`
	ChannelDimName      *string `protobuf:"bytes,12,opt,name=channel_dim_name,json=channelDimName,proto3,oneof" json:"channel_dim_name,omitempty"`
	TimeDim             *int32  `protobuf:"varint,13,opt,name=time_dim,json=timeDim,proto3,oneof" json:"time_dim,omitempty"`
	TimeDimName         *string `protobuf:"bytes,14,opt,name=time_dim_name,json=timeDimName,proto3,oneof" json:"time_dim_name,omitempty"`
	AggOrganizeNo       *string `protobuf:"bytes,15,opt,name=agg_organize_no,json=aggOrganizeNo,proto3,oneof" json:"agg_organize_no,omitempty"`
	AggOrganizeName     *string `protobuf:"bytes,16,opt,name=agg_organize_name,json=aggOrganizeName,proto3,oneof" json:"agg_organize_name,omitempty"`
	AggShopNo           *string `protobuf:"bytes,17,opt,name=agg_shop_no,json=aggShopNo,proto3,oneof" json:"agg_shop_no,omitempty"`
	AggShopName         *string `protobuf:"bytes,18,opt,name=agg_shop_name,json=aggShopName,proto3,oneof" json:"agg_shop_name,omitempty"`
	AggWarehouseNo      *string `protobuf:"bytes,19,opt,name=agg_warehouse_no,json=aggWarehouseNo,proto3,oneof" json:"agg_warehouse_no,omitempty"`
	AggWarehouseName    *string `protobuf:"bytes,20,opt,name=agg_warehouse_name,json=aggWarehouseName,proto3,oneof" json:"agg_warehouse_name,omitempty"`
	AggTradeNo          *string `protobuf:"bytes,21,opt,name=agg_trade_no,json=aggTradeNo,proto3,oneof" json:"agg_trade_no,omitempty"`
	AggTradeCount       *int32  `protobuf:"varint,22,opt,name=agg_trade_count,json=aggTradeCount,proto3,oneof" json:"agg_trade_count,omitempty"`
	AggGoodsTypeCount   *int32  `protobuf:"varint,23,opt,name=agg_goods_type_count,json=aggGoodsTypeCount,proto3,oneof" json:"agg_goods_type_count,omitempty"`
	AggGoodsCount       *int32  `protobuf:"varint,24,opt,name=agg_goods_count,json=aggGoodsCount,proto3,oneof" json:"agg_goods_count,omitempty"`
	AggTotalAmount      *int32  `protobuf:"varint,25,opt,name=agg_total_amount,json=aggTotalAmount,proto3,oneof" json:"agg_total_amount,omitempty"`
	AggDiscountAmount   *int32  `protobuf:"varint,26,opt,name=agg_discount_amount,json=aggDiscountAmount,proto3,oneof" json:"agg_discount_amount,omitempty"`
	AggReceivableAmount *int32  `protobuf:"varint,27,opt,name=agg_receivable_amount,json=aggReceivableAmount,proto3,oneof" json:"agg_receivable_amount,omitempty"`
	AggPaidAmount       *int32  `protobuf:"varint,28,opt,name=agg_paid_amount,json=aggPaidAmount,proto3,oneof" json:"agg_paid_amount,omitempty"`
	AggPeriod           *string `protobuf:"bytes,29,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
}

func (x *KingdeeTradeResponse) Reset() {
	*x = KingdeeTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeResponse) ProtoMessage() {}

func (x *KingdeeTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeResponse.ProtoReflect.Descriptor instead.
func (*KingdeeTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{85}
}

func (x *KingdeeTradeResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KingdeeTradeResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *KingdeeTradeResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *KingdeeTradeResponse) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *KingdeeTradeResponse) GetKingdeeNo() string {
	if x != nil && x.KingdeeNo != nil {
		return *x.KingdeeNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetSalOutstockStatus() int32 {
	if x != nil && x.SalOutstockStatus != nil {
		return *x.SalOutstockStatus
	}
	return 0
}

func (x *KingdeeTradeResponse) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *KingdeeTradeResponse) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggType() int32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggTypeName() string {
	if x != nil && x.AggTypeName != nil {
		return *x.AggTypeName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetChannelDim() int32 {
	if x != nil && x.ChannelDim != nil {
		return *x.ChannelDim
	}
	return 0
}

func (x *KingdeeTradeResponse) GetChannelDimName() string {
	if x != nil && x.ChannelDimName != nil {
		return *x.ChannelDimName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetTimeDim() int32 {
	if x != nil && x.TimeDim != nil {
		return *x.TimeDim
	}
	return 0
}

func (x *KingdeeTradeResponse) GetTimeDimName() string {
	if x != nil && x.TimeDimName != nil {
		return *x.TimeDimName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggOrganizeNo() string {
	if x != nil && x.AggOrganizeNo != nil {
		return *x.AggOrganizeNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggOrganizeName() string {
	if x != nil && x.AggOrganizeName != nil {
		return *x.AggOrganizeName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggShopNo() string {
	if x != nil && x.AggShopNo != nil {
		return *x.AggShopNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggShopName() string {
	if x != nil && x.AggShopName != nil {
		return *x.AggShopName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggWarehouseNo() string {
	if x != nil && x.AggWarehouseNo != nil {
		return *x.AggWarehouseNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggWarehouseName() string {
	if x != nil && x.AggWarehouseName != nil {
		return *x.AggWarehouseName
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggTradeNo() string {
	if x != nil && x.AggTradeNo != nil {
		return *x.AggTradeNo
	}
	return ""
}

func (x *KingdeeTradeResponse) GetAggTradeCount() int32 {
	if x != nil && x.AggTradeCount != nil {
		return *x.AggTradeCount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggGoodsTypeCount() int32 {
	if x != nil && x.AggGoodsTypeCount != nil {
		return *x.AggGoodsTypeCount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggGoodsCount() int32 {
	if x != nil && x.AggGoodsCount != nil {
		return *x.AggGoodsCount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggTotalAmount() int32 {
	if x != nil && x.AggTotalAmount != nil {
		return *x.AggTotalAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggDiscountAmount() int32 {
	if x != nil && x.AggDiscountAmount != nil {
		return *x.AggDiscountAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggReceivableAmount() int32 {
	if x != nil && x.AggReceivableAmount != nil {
		return *x.AggReceivableAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggPaidAmount() int32 {
	if x != nil && x.AggPaidAmount != nil {
		return *x.AggPaidAmount
	}
	return 0
}

func (x *KingdeeTradeResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

type KingdeeTradeRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KingdeeTradeRetrieveRequest) Reset() {
	*x = KingdeeTradeRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdeeTradeRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdeeTradeRetrieveRequest) ProtoMessage() {}

func (x *KingdeeTradeRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdeeTradeRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KingdeeTradeRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{86}
}

func (x *KingdeeTradeRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MongoGoodslistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poid            string   `protobuf:"bytes,1,opt,name=poid,proto3" json:"poid,omitempty"`
	Modified        *string  `protobuf:"bytes,2,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created         *string  `protobuf:"bytes,3,opt,name=created,proto3,oneof" json:"created,omitempty"`
	SrcTid          *string  `protobuf:"bytes,4,opt,name=src_tid,json=srcTid,proto3,oneof" json:"src_tid,omitempty"`
	RecId           *int32   `protobuf:"varint,5,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	SrcOid          *string  `protobuf:"bytes,6,opt,name=src_oid,json=srcOid,proto3,oneof" json:"src_oid,omitempty"`
	Flag            *int32   `protobuf:"varint,7,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	RefundStatus    *int32   `protobuf:"varint,8,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	PayId           *string  `protobuf:"bytes,9,opt,name=pay_id,json=payId,proto3,oneof" json:"pay_id,omitempty"`
	PayStatus       *int32   `protobuf:"varint,10,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime         *string  `protobuf:"bytes,11,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm    *int32   `protobuf:"varint,12,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BindOid         *string  `protobuf:"bytes,13,opt,name=bind_oid,json=bindOid,proto3,oneof" json:"bind_oid,omitempty"`
	PlatformId      *int32   `protobuf:"varint,14,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformGoodsId *string  `protobuf:"bytes,15,opt,name=platform_goods_id,json=platformGoodsId,proto3,oneof" json:"platform_goods_id,omitempty"`
	PlatformSpecId  *string  `protobuf:"bytes,16,opt,name=platform_spec_id,json=platformSpecId,proto3,oneof" json:"platform_spec_id,omitempty"`
	SuiteId         *int32   `protobuf:"varint,17,opt,name=suite_id,json=suiteId,proto3,oneof" json:"suite_id,omitempty"`
	SuiteNo         *string  `protobuf:"bytes,18,opt,name=suite_no,json=suiteNo,proto3,oneof" json:"suite_no,omitempty"`
	SuiteName       *string  `protobuf:"bytes,19,opt,name=suite_name,json=suiteName,proto3,oneof" json:"suite_name,omitempty"`
	SuiteNum        *float64 `protobuf:"fixed64,20,opt,name=suite_num,json=suiteNum,proto3,oneof" json:"suite_num,omitempty"`
	SuiteAmount     *float64 `protobuf:"fixed64,21,opt,name=suite_amount,json=suiteAmount,proto3,oneof" json:"suite_amount,omitempty"`
	SuiteDiscount   *float64 `protobuf:"fixed64,22,opt,name=suite_discount,json=suiteDiscount,proto3,oneof" json:"suite_discount,omitempty"`
	ClassName       *string  `protobuf:"bytes,23,opt,name=class_name,json=className,proto3,oneof" json:"class_name,omitempty"`
	GoodsId         *int32   `protobuf:"varint,24,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,25,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName       *string  `protobuf:"bytes,26,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecId          *int32   `protobuf:"varint,27,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	SpecName        *string  `protobuf:"bytes,28,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo          *string  `protobuf:"bytes,29,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode        *string  `protobuf:"bytes,30,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	Barcode         *string  `protobuf:"bytes,31,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	ApiGoodsName    *string  `protobuf:"bytes,32,opt,name=api_goods_name,json=apiGoodsName,proto3,oneof" json:"api_goods_name,omitempty"`
	ApiSpecName     *string  `protobuf:"bytes,33,opt,name=api_spec_name,json=apiSpecName,proto3,oneof" json:"api_spec_name,omitempty"`
	Num             *float64 `protobuf:"fixed64,34,opt,name=num,proto3,oneof" json:"num,omitempty"`
	ActualNum       *float64 `protobuf:"fixed64,35,opt,name=actual_num,json=actualNum,proto3,oneof" json:"actual_num,omitempty"`
	Price           *float64 `protobuf:"fixed64,36,opt,name=price,proto3,oneof" json:"price,omitempty"`
	OrderPrice      *float64 `protobuf:"fixed64,37,opt,name=order_price,json=orderPrice,proto3,oneof" json:"order_price,omitempty"`
	SharePrice      *float64 `protobuf:"fixed64,38,opt,name=share_price,json=sharePrice,proto3,oneof" json:"share_price,omitempty"`
	Adjust          *float64 `protobuf:"fixed64,39,opt,name=adjust,proto3,oneof" json:"adjust,omitempty"`
	Discount        *float64 `protobuf:"fixed64,40,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	ShareAmount     *float64 `protobuf:"fixed64,41,opt,name=share_amount,json=shareAmount,proto3,oneof" json:"share_amount,omitempty"`
	SharePost       *float64 `protobuf:"fixed64,42,opt,name=share_post,json=sharePost,proto3,oneof" json:"share_post,omitempty"`
	Paid            *float64 `protobuf:"fixed64,43,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	GiftType        *int32   `protobuf:"varint,44,opt,name=gift_type,json=giftType,proto3,oneof" json:"gift_type,omitempty"`
	GuaranteeMode   *int32   `protobuf:"varint,45,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	IsPrintSuite    *int32   `protobuf:"varint,46,opt,name=is_print_suite,json=isPrintSuite,proto3,oneof" json:"is_print_suite,omitempty"`
	IsZeroCost      *int32   `protobuf:"varint,47,opt,name=is_zero_cost,json=isZeroCost,proto3,oneof" json:"is_zero_cost,omitempty"`
	StockReserved   *int32   `protobuf:"varint,48,opt,name=stock_reserved,json=stockReserved,proto3,oneof" json:"stock_reserved,omitempty"`
	IsConsigned     *int32   `protobuf:"varint,49,opt,name=is_consigned,json=isConsigned,proto3,oneof" json:"is_consigned,omitempty"`
	IsReceived      *int32   `protobuf:"varint,50,opt,name=is_received,json=isReceived,proto3,oneof" json:"is_received,omitempty"`
	Weight          *float64 `protobuf:"fixed64,51,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Commission      *float64 `protobuf:"fixed64,52,opt,name=commission,proto3,oneof" json:"commission,omitempty"`
	GoodsType       *int32   `protobuf:"varint,53,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	LargeType       *int32   `protobuf:"varint,54,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	InvoiceType     *int32   `protobuf:"varint,55,opt,name=invoice_type,json=invoiceType,proto3,oneof" json:"invoice_type,omitempty"`
	InvoiceContent  *string  `protobuf:"bytes,56,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	FromMask        *int32   `protobuf:"varint,57,opt,name=from_mask,json=fromMask,proto3,oneof" json:"from_mask,omitempty"`
	Cid             *int32   `protobuf:"varint,58,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	TaxRate         *float64 `protobuf:"fixed64,59,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	BaseUnitId      *int32   `protobuf:"varint,60,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitName        *string  `protobuf:"bytes,61,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
}

func (x *MongoGoodslistResponse) Reset() {
	*x = MongoGoodslistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoGoodslistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoGoodslistResponse) ProtoMessage() {}

func (x *MongoGoodslistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoGoodslistResponse.ProtoReflect.Descriptor instead.
func (*MongoGoodslistResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{87}
}

func (x *MongoGoodslistResponse) GetPoid() string {
	if x != nil {
		return x.Poid
	}
	return ""
}

func (x *MongoGoodslistResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *MongoGoodslistResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *MongoGoodslistResponse) GetSrcTid() string {
	if x != nil && x.SrcTid != nil {
		return *x.SrcTid
	}
	return ""
}

func (x *MongoGoodslistResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *MongoGoodslistResponse) GetSrcOid() string {
	if x != nil && x.SrcOid != nil {
		return *x.SrcOid
	}
	return ""
}

func (x *MongoGoodslistResponse) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *MongoGoodslistResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *MongoGoodslistResponse) GetPayId() string {
	if x != nil && x.PayId != nil {
		return *x.PayId
	}
	return ""
}

func (x *MongoGoodslistResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *MongoGoodslistResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *MongoGoodslistResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *MongoGoodslistResponse) GetBindOid() string {
	if x != nil && x.BindOid != nil {
		return *x.BindOid
	}
	return ""
}

func (x *MongoGoodslistResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *MongoGoodslistResponse) GetPlatformGoodsId() string {
	if x != nil && x.PlatformGoodsId != nil {
		return *x.PlatformGoodsId
	}
	return ""
}

func (x *MongoGoodslistResponse) GetPlatformSpecId() string {
	if x != nil && x.PlatformSpecId != nil {
		return *x.PlatformSpecId
	}
	return ""
}

func (x *MongoGoodslistResponse) GetSuiteId() int32 {
	if x != nil && x.SuiteId != nil {
		return *x.SuiteId
	}
	return 0
}

func (x *MongoGoodslistResponse) GetSuiteNo() string {
	if x != nil && x.SuiteNo != nil {
		return *x.SuiteNo
	}
	return ""
}

func (x *MongoGoodslistResponse) GetSuiteName() string {
	if x != nil && x.SuiteName != nil {
		return *x.SuiteName
	}
	return ""
}

func (x *MongoGoodslistResponse) GetSuiteNum() float64 {
	if x != nil && x.SuiteNum != nil {
		return *x.SuiteNum
	}
	return 0
}

func (x *MongoGoodslistResponse) GetSuiteAmount() float64 {
	if x != nil && x.SuiteAmount != nil {
		return *x.SuiteAmount
	}
	return 0
}

func (x *MongoGoodslistResponse) GetSuiteDiscount() float64 {
	if x != nil && x.SuiteDiscount != nil {
		return *x.SuiteDiscount
	}
	return 0
}

func (x *MongoGoodslistResponse) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *MongoGoodslistResponse) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *MongoGoodslistResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *MongoGoodslistResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *MongoGoodslistResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *MongoGoodslistResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *MongoGoodslistResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *MongoGoodslistResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *MongoGoodslistResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *MongoGoodslistResponse) GetApiGoodsName() string {
	if x != nil && x.ApiGoodsName != nil {
		return *x.ApiGoodsName
	}
	return ""
}

func (x *MongoGoodslistResponse) GetApiSpecName() string {
	if x != nil && x.ApiSpecName != nil {
		return *x.ApiSpecName
	}
	return ""
}

func (x *MongoGoodslistResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *MongoGoodslistResponse) GetActualNum() float64 {
	if x != nil && x.ActualNum != nil {
		return *x.ActualNum
	}
	return 0
}

func (x *MongoGoodslistResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *MongoGoodslistResponse) GetOrderPrice() float64 {
	if x != nil && x.OrderPrice != nil {
		return *x.OrderPrice
	}
	return 0
}

func (x *MongoGoodslistResponse) GetSharePrice() float64 {
	if x != nil && x.SharePrice != nil {
		return *x.SharePrice
	}
	return 0
}

func (x *MongoGoodslistResponse) GetAdjust() float64 {
	if x != nil && x.Adjust != nil {
		return *x.Adjust
	}
	return 0
}

func (x *MongoGoodslistResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *MongoGoodslistResponse) GetShareAmount() float64 {
	if x != nil && x.ShareAmount != nil {
		return *x.ShareAmount
	}
	return 0
}

func (x *MongoGoodslistResponse) GetSharePost() float64 {
	if x != nil && x.SharePost != nil {
		return *x.SharePost
	}
	return 0
}

func (x *MongoGoodslistResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *MongoGoodslistResponse) GetGiftType() int32 {
	if x != nil && x.GiftType != nil {
		return *x.GiftType
	}
	return 0
}

func (x *MongoGoodslistResponse) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *MongoGoodslistResponse) GetIsPrintSuite() int32 {
	if x != nil && x.IsPrintSuite != nil {
		return *x.IsPrintSuite
	}
	return 0
}

func (x *MongoGoodslistResponse) GetIsZeroCost() int32 {
	if x != nil && x.IsZeroCost != nil {
		return *x.IsZeroCost
	}
	return 0
}

func (x *MongoGoodslistResponse) GetStockReserved() int32 {
	if x != nil && x.StockReserved != nil {
		return *x.StockReserved
	}
	return 0
}

func (x *MongoGoodslistResponse) GetIsConsigned() int32 {
	if x != nil && x.IsConsigned != nil {
		return *x.IsConsigned
	}
	return 0
}

func (x *MongoGoodslistResponse) GetIsReceived() int32 {
	if x != nil && x.IsReceived != nil {
		return *x.IsReceived
	}
	return 0
}

func (x *MongoGoodslistResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *MongoGoodslistResponse) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *MongoGoodslistResponse) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *MongoGoodslistResponse) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *MongoGoodslistResponse) GetInvoiceType() int32 {
	if x != nil && x.InvoiceType != nil {
		return *x.InvoiceType
	}
	return 0
}

func (x *MongoGoodslistResponse) GetInvoiceContent() string {
	if x != nil && x.InvoiceContent != nil {
		return *x.InvoiceContent
	}
	return ""
}

func (x *MongoGoodslistResponse) GetFromMask() int32 {
	if x != nil && x.FromMask != nil {
		return *x.FromMask
	}
	return 0
}

func (x *MongoGoodslistResponse) GetCid() int32 {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return 0
}

func (x *MongoGoodslistResponse) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *MongoGoodslistResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *MongoGoodslistResponse) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

type MongoTradesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *MongoTradesListRequest) Reset() {
	*x = MongoTradesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoTradesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoTradesListRequest) ProtoMessage() {}

func (x *MongoTradesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoTradesListRequest.ProtoReflect.Descriptor instead.
func (*MongoTradesListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{88}
}

func (x *MongoTradesListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *MongoTradesListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type MongoTradesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results            []*MongoTradesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count              int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	GoodsCount         int32                  `protobuf:"varint,3,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsCategoryCount int32                  `protobuf:"varint,4,opt,name=goods_category_count,json=goodsCategoryCount,proto3" json:"goods_category_count,omitempty"`
	TotalAmount        string                 `protobuf:"bytes,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *MongoTradesListResponse) Reset() {
	*x = MongoTradesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoTradesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoTradesListResponse) ProtoMessage() {}

func (x *MongoTradesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoTradesListResponse.ProtoReflect.Descriptor instead.
func (*MongoTradesListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{89}
}

func (x *MongoTradesListResponse) GetResults() []*MongoTradesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MongoTradesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MongoTradesListResponse) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *MongoTradesListResponse) GetGoodsCategoryCount() int32 {
	if x != nil {
		return x.GoodsCategoryCount
	}
	return 0
}

func (x *MongoTradesListResponse) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

type MongoTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *string                   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3,oneof" json:"_id,omitempty"`
	AggConsignStatusName *string                   `protobuf:"bytes,2,opt,name=agg_consign_status_name,json=aggConsignStatusName,proto3,oneof" json:"agg_consign_status_name,omitempty"`
	AggPayStatusName     *string                   `protobuf:"bytes,3,opt,name=agg_pay_status_name,json=aggPayStatusName,proto3,oneof" json:"agg_pay_status_name,omitempty"`
	GoodsList            []*MongoGoodslistResponse `protobuf:"bytes,4,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	Reserve              *string                   `protobuf:"bytes,5,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	Oaid                 *string                   `protobuf:"bytes,6,opt,name=oaid,proto3,oneof" json:"oaid,omitempty"`
	Valid                *int32                    `protobuf:"varint,7,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
	ColorFlag            *int32                    `protobuf:"varint,8,opt,name=color_flag,json=colorFlag,proto3,oneof" json:"color_flag,omitempty"`
	ConsignTime          *string                   `protobuf:"bytes,9,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	TradeTime            *string                   `protobuf:"bytes,10,opt,name=trade_time,json=tradeTime,proto3,oneof" json:"trade_time,omitempty"`
	PayTime              *string                   `protobuf:"bytes,11,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	Modified             *string                   `protobuf:"bytes,12,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created              *string                   `protobuf:"bytes,13,opt,name=created,proto3,oneof" json:"created,omitempty"`
	VersionId            *int32                    `protobuf:"varint,14,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	TradeId              *int32                    `protobuf:"varint,15,opt,name=trade_id,json=tradeId,proto3,oneof" json:"trade_id,omitempty"`
	TradeNo              *string                   `protobuf:"bytes,16,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	TradeFrom            *int32                    `protobuf:"varint,17,opt,name=trade_from,json=tradeFrom,proto3,oneof" json:"trade_from,omitempty"`
	SrcTids              *string                   `protobuf:"bytes,18,opt,name=src_tids,json=srcTids,proto3,oneof" json:"src_tids,omitempty"`
	IsSealed             *int32                    `protobuf:"varint,19,opt,name=is_sealed,json=isSealed,proto3,oneof" json:"is_sealed,omitempty"`
	SplitFromTradeId     *string                   `protobuf:"bytes,20,opt,name=split_from_trade_id,json=splitFromTradeId,proto3,oneof" json:"split_from_trade_id,omitempty"`
	SplitPackageNum      *int32                    `protobuf:"varint,21,opt,name=split_package_num,json=splitPackageNum,proto3,oneof" json:"split_package_num,omitempty"`
	Tags                 *string                   `protobuf:"bytes,22,opt,name=tags,proto3,oneof" json:"tags,omitempty"`
	TradeStatus          *int32                    `protobuf:"varint,23,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	ConsignStatus        *int32                    `protobuf:"varint,24,opt,name=consign_status,json=consignStatus,proto3,oneof" json:"consign_status,omitempty"`
	TradeType            *int32                    `protobuf:"varint,25,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	RefundStatus         *int32                    `protobuf:"varint,26,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsTypeCount       *int32                    `protobuf:"varint,27,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsCount           *float64                  `protobuf:"fixed64,28,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	SingleSpecNo         *string                   `protobuf:"bytes,29,opt,name=single_spec_no,json=singleSpecNo,proto3,oneof" json:"single_spec_no,omitempty"`
	RawGoodsCount        *float64                  `protobuf:"fixed64,30,opt,name=raw_goods_count,json=rawGoodsCount,proto3,oneof" json:"raw_goods_count,omitempty"`
	RawGoodsTypeCount    *int32                    `protobuf:"varint,31,opt,name=raw_goods_type_count,json=rawGoodsTypeCount,proto3,oneof" json:"raw_goods_type_count,omitempty"`
	GoodsAmount          *float64                  `protobuf:"fixed64,32,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostAmount           *float64                  `protobuf:"fixed64,33,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64                  `protobuf:"fixed64,34,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	Discount             *float64                  `protobuf:"fixed64,35,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	Receivable           *float64                  `protobuf:"fixed64,36,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	DapAmount            *float64                  `protobuf:"fixed64,37,opt,name=dap_amount,json=dapAmount,proto3,oneof" json:"dap_amount,omitempty"`
	CodAmount            *float64                  `protobuf:"fixed64,38,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	ExtCodFee            *float64                  `protobuf:"fixed64,39,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	GoodsCost            *float64                  `protobuf:"fixed64,40,opt,name=goods_cost,json=goodsCost,proto3,oneof" json:"goods_cost,omitempty"`
	PostCost             *float64                  `protobuf:"fixed64,41,opt,name=post_cost,json=postCost,proto3,oneof" json:"post_cost,omitempty"`
	Paid                 *float64                  `protobuf:"fixed64,42,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	Profit               *float64                  `protobuf:"fixed64,43,opt,name=profit,proto3,oneof" json:"profit,omitempty"`
	Tax                  *float64                  `protobuf:"fixed64,44,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TaxRate              *float64                  `protobuf:"fixed64,45,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	Commission           *float64                  `protobuf:"fixed64,46,opt,name=commission,proto3,oneof" json:"commission,omitempty"`
	Currency             *string                   `protobuf:"bytes,47,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	InvoiceType          *int32                    `protobuf:"varint,48,opt,name=invoice_type,json=invoiceType,proto3,oneof" json:"invoice_type,omitempty"`
	InvoiceTitle         *string                   `protobuf:"bytes,49,opt,name=invoice_title,json=invoiceTitle,proto3,oneof" json:"invoice_title,omitempty"`
	InvoiceContent       *string                   `protobuf:"bytes,50,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	InvoiceId            *int32                    `protobuf:"varint,51,opt,name=invoice_id,json=invoiceId,proto3,oneof" json:"invoice_id,omitempty"`
	CustomerId           *string                   `protobuf:"bytes,52,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	CustomerType         *int32                    `protobuf:"varint,53,opt,name=customer_type,json=customerType,proto3,oneof" json:"customer_type,omitempty"`
	CustomerName         *string                   `protobuf:"bytes,54,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	CustomerNo           *string                   `protobuf:"bytes,55,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	PayAccount           *string                   `protobuf:"bytes,56,opt,name=pay_account,json=payAccount,proto3,oneof" json:"pay_account,omitempty"`
	BuyerNick            *string                   `protobuf:"bytes,57,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	ReceiverName         *string                   `protobuf:"bytes,58,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince     *int32                    `protobuf:"varint,59,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *int32                    `protobuf:"varint,60,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *int32                    `protobuf:"varint,61,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string                   `protobuf:"bytes,62,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string                   `protobuf:"bytes,63,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverTelno        *string                   `protobuf:"bytes,64,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReceiverZip          *string                   `protobuf:"bytes,65,opt,name=receiver_zip,json=receiverZip,proto3,oneof" json:"receiver_zip,omitempty"`
	ReceiverArea         *string                   `protobuf:"bytes,66,opt,name=receiver_area,json=receiverArea,proto3,oneof" json:"receiver_area,omitempty"`
	ReceiverRing         *string                   `protobuf:"bytes,67,opt,name=receiver_ring,json=receiverRing,proto3,oneof" json:"receiver_ring,omitempty"`
	ReceiverDtb          *string                   `protobuf:"bytes,68,opt,name=receiver_dtb,json=receiverDtb,proto3,oneof" json:"receiver_dtb,omitempty"`
	ReceiverCountry      *int32                    `protobuf:"varint,69,opt,name=receiver_country,json=receiverCountry,proto3,oneof" json:"receiver_country,omitempty"`
	BuyerMessage         *string                   `protobuf:"bytes,70,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	CsRemark             *string                   `protobuf:"bytes,71,opt,name=cs_remark,json=csRemark,proto3,oneof" json:"cs_remark,omitempty"`
	RemarkFlag           *int32                    `protobuf:"varint,72,opt,name=remark_flag,json=remarkFlag,proto3,oneof" json:"remark_flag,omitempty"`
	PrintRemark          *string                   `protobuf:"bytes,73,opt,name=print_remark,json=printRemark,proto3,oneof" json:"print_remark,omitempty"`
	ToDeliverTime        *string                   `protobuf:"bytes,74,opt,name=to_deliver_time,json=toDeliverTime,proto3,oneof" json:"to_deliver_time,omitempty"`
	BadReason            *int32                    `protobuf:"varint,75,opt,name=bad_reason,json=badReason,proto3,oneof" json:"bad_reason,omitempty"`
	LogisticsId          *int32                    `protobuf:"varint,76,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	LogisticsName        *string                   `protobuf:"bytes,77,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string                   `protobuf:"bytes,78,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsType        *int32                    `protobuf:"varint,79,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo          *string                   `protobuf:"bytes,80,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	PreChargeTime        *string                   `protobuf:"bytes,81,opt,name=pre_charge_time,json=preChargeTime,proto3,oneof" json:"pre_charge_time,omitempty"`
	IsPrevNotify         *int32                    `protobuf:"varint,82,opt,name=is_prev_notify,json=isPrevNotify,proto3,oneof" json:"is_prev_notify,omitempty"`
	Volume               *float64                  `protobuf:"fixed64,83,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	Weight               *float64                  `protobuf:"fixed64,84,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	LogisticsTemplateId  *string                   `protobuf:"bytes,85,opt,name=logistics_template_id,json=logisticsTemplateId,proto3,oneof" json:"logistics_template_id,omitempty"`
	SendbillTemplateId   *string                   `protobuf:"bytes,86,opt,name=sendbill_template_id,json=sendbillTemplateId,proto3,oneof" json:"sendbill_template_id,omitempty"`
	PackageId            *string                   `protobuf:"bytes,87,opt,name=package_id,json=packageId,proto3,oneof" json:"package_id,omitempty"`
	LargeType            *int32                    `protobuf:"varint,88,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	StockoutNo           *string                   `protobuf:"bytes,89,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	SalesmanId           *int32                    `protobuf:"varint,90,opt,name=salesman_id,json=salesmanId,proto3,oneof" json:"salesman_id,omitempty"`
	CheckerId            *int32                    `protobuf:"varint,91,opt,name=checker_id,json=checkerId,proto3,oneof" json:"checker_id,omitempty"`
	Fullname             *string                   `protobuf:"bytes,92,opt,name=fullname,proto3,oneof" json:"fullname,omitempty"`
	CheckerName          *string                   `protobuf:"bytes,93,opt,name=checker_name,json=checkerName,proto3,oneof" json:"checker_name,omitempty"`
	FcheckerId           *int32                    `protobuf:"varint,94,opt,name=fchecker_id,json=fcheckerId,proto3,oneof" json:"fchecker_id,omitempty"`
	FcheckerName         *string                   `protobuf:"bytes,95,opt,name=fchecker_name,json=fcheckerName,proto3,oneof" json:"fchecker_name,omitempty"`
	CheckouterId         *int32                    `protobuf:"varint,96,opt,name=checkouter_id,json=checkouterId,proto3,oneof" json:"checkouter_id,omitempty"`
	CheckouterName       *string                   `protobuf:"bytes,97,opt,name=checkouter_name,json=checkouterName,proto3,oneof" json:"checkouter_name,omitempty"`
	PlatformId           *int32                    `protobuf:"varint,98,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopPlatformId       *int32                    `protobuf:"varint,99,opt,name=shop_platform_id,json=shopPlatformId,proto3,oneof" json:"shop_platform_id,omitempty"`
	DeliveryTerm         *int32                    `protobuf:"varint,100,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	FreezeReason         *int32                    `protobuf:"varint,101,opt,name=freeze_reason,json=freezeReason,proto3,oneof" json:"freeze_reason,omitempty"`
	FenxiaoType          *int32                    `protobuf:"varint,102,opt,name=fenxiao_type,json=fenxiaoType,proto3,oneof" json:"fenxiao_type,omitempty"`
	FenxiaoNick          *string                   `protobuf:"bytes,103,opt,name=fenxiao_nick,json=fenxiaoNick,proto3,oneof" json:"fenxiao_nick,omitempty"`
	CheckStep            *int32                    `protobuf:"varint,104,opt,name=check_step,json=checkStep,proto3,oneof" json:"check_step,omitempty"`
	UnmergeMask          *int32                    `protobuf:"varint,105,opt,name=unmerge_mask,json=unmergeMask,proto3,oneof" json:"unmerge_mask,omitempty"`
	DelayToTime          *string                   `protobuf:"bytes,106,opt,name=delay_to_time,json=delayToTime,proto3,oneof" json:"delay_to_time,omitempty"`
	NoteCount            *int32                    `protobuf:"varint,107,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	BuyerMessageCount    *int32                    `protobuf:"varint,108,opt,name=buyer_message_count,json=buyerMessageCount,proto3,oneof" json:"buyer_message_count,omitempty"`
	CsRemarkCount        *int32                    `protobuf:"varint,109,opt,name=cs_remark_count,json=csRemarkCount,proto3,oneof" json:"cs_remark_count,omitempty"`
	CsRemarkChangeCount  *int32                    `protobuf:"varint,110,opt,name=cs_remark_change_count,json=csRemarkChangeCount,proto3,oneof" json:"cs_remark_change_count,omitempty"`
	DiscountChange       *float64                  `protobuf:"fixed64,111,opt,name=discount_change,json=discountChange,proto3,oneof" json:"discount_change,omitempty"`
	TradePrepay          *float64                  `protobuf:"fixed64,112,opt,name=trade_prepay,json=tradePrepay,proto3,oneof" json:"trade_prepay,omitempty"`
	PiAmount             *float64                  `protobuf:"fixed64,113,opt,name=pi_amount,json=piAmount,proto3,oneof" json:"pi_amount,omitempty"`
	OtherCost            *float64                  `protobuf:"fixed64,114,opt,name=other_cost,json=otherCost,proto3,oneof" json:"other_cost,omitempty"`
	SalesScore           *string                   `protobuf:"bytes,115,opt,name=sales_score,json=salesScore,proto3,oneof" json:"sales_score,omitempty"`
	GiftMask             *int32                    `protobuf:"varint,116,opt,name=gift_mask,json=giftMask,proto3,oneof" json:"gift_mask,omitempty"`
	RevertReason         *int32                    `protobuf:"varint,117,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	CancelReason         *int32                    `protobuf:"varint,118,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	IsUnpaymentSms       *int32                    `protobuf:"varint,119,opt,name=is_unpayment_sms,json=isUnpaymentSms,proto3,oneof" json:"is_unpayment_sms,omitempty"`
	TradeMask            *string                   `protobuf:"bytes,120,opt,name=trade_mask,json=tradeMask,proto3,oneof" json:"trade_mask,omitempty"`
	FlagId               *int32                    `protobuf:"varint,121,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	FlagName             *string                   `protobuf:"bytes,122,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	IdCardType           *int32                    `protobuf:"varint,123,opt,name=id_card_type,json=idCardType,proto3,oneof" json:"id_card_type,omitempty"`
	IdCard               *string                   `protobuf:"bytes,124,opt,name=id_card,json=idCard,proto3,oneof" json:"id_card,omitempty"`
	FreezeReasonInfo     *string                   `protobuf:"bytes,125,opt,name=freeze_reason_info,json=freezeReasonInfo,proto3,oneof" json:"freeze_reason_info,omitempty"`
	FenxiaoTid           *string                   `protobuf:"bytes,126,opt,name=fenxiao_tid,json=fenxiaoTid,proto3,oneof" json:"fenxiao_tid,omitempty"`
	ShopId               *int32                    `protobuf:"varint,127,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	ShopNo               *string                   `protobuf:"bytes,128,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *string                   `protobuf:"bytes,129,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ShopRemark           *string                   `protobuf:"bytes,130,opt,name=shop_remark,json=shopRemark,proto3,oneof" json:"shop_remark,omitempty"`
	WarehouseId          *int32                    `protobuf:"varint,131,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	WarehouseType        *int32                    `protobuf:"varint,132,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	WarehouseNo          *string                   `protobuf:"bytes,133,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	AggDiscount          *int32                    `protobuf:"varint,134,opt,name=agg_discount,json=aggDiscount,proto3,oneof" json:"agg_discount,omitempty"`
	AdjustDiscount       *int32                    `protobuf:"varint,135,opt,name=adjust_discount,json=adjustDiscount,proto3,oneof" json:"adjust_discount,omitempty"`
	CollectionTime       *string                   `protobuf:"bytes,136,opt,name=collection_time,json=collectionTime,proto3,oneof" json:"collection_time,omitempty"`
	CollectionAccount    *string                   `protobuf:"bytes,137,opt,name=collection_account,json=collectionAccount,proto3,oneof" json:"collection_account,omitempty"`
	CollectionNo         *string                   `protobuf:"bytes,138,opt,name=collection_no,json=collectionNo,proto3,oneof" json:"collection_no,omitempty"`
	CollectionType       *int32                    `protobuf:"varint,139,opt,name=collection_type,json=collectionType,proto3,oneof" json:"collection_type,omitempty"`
	CollectionAmount     *float64                  `protobuf:"fixed64,140,opt,name=collection_amount,json=collectionAmount,proto3,oneof" json:"collection_amount,omitempty"`
	AggConsignStatus     *int32                    `protobuf:"varint,141,opt,name=agg_consign_status,json=aggConsignStatus,proto3,oneof" json:"agg_consign_status,omitempty"`
	ConsignAggNo         *string                   `protobuf:"bytes,142,opt,name=consign_agg_no,json=consignAggNo,proto3,oneof" json:"consign_agg_no,omitempty"`
	AggPayStatus         *int32                    `protobuf:"varint,143,opt,name=agg_pay_status,json=aggPayStatus,proto3,oneof" json:"agg_pay_status,omitempty"`
	PayAggNo             *string                   `protobuf:"bytes,144,opt,name=pay_agg_no,json=payAggNo,proto3,oneof" json:"pay_agg_no,omitempty"`
}

func (x *MongoTradesResponse) Reset() {
	*x = MongoTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoTradesResponse) ProtoMessage() {}

func (x *MongoTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoTradesResponse.ProtoReflect.Descriptor instead.
func (*MongoTradesResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{90}
}

func (x *MongoTradesResponse) GetXId() string {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return ""
}

func (x *MongoTradesResponse) GetAggConsignStatusName() string {
	if x != nil && x.AggConsignStatusName != nil {
		return *x.AggConsignStatusName
	}
	return ""
}

func (x *MongoTradesResponse) GetAggPayStatusName() string {
	if x != nil && x.AggPayStatusName != nil {
		return *x.AggPayStatusName
	}
	return ""
}

func (x *MongoTradesResponse) GetGoodsList() []*MongoGoodslistResponse {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *MongoTradesResponse) GetReserve() string {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return ""
}

func (x *MongoTradesResponse) GetOaid() string {
	if x != nil && x.Oaid != nil {
		return *x.Oaid
	}
	return ""
}

func (x *MongoTradesResponse) GetValid() int32 {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return 0
}

func (x *MongoTradesResponse) GetColorFlag() int32 {
	if x != nil && x.ColorFlag != nil {
		return *x.ColorFlag
	}
	return 0
}

func (x *MongoTradesResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *MongoTradesResponse) GetTradeTime() string {
	if x != nil && x.TradeTime != nil {
		return *x.TradeTime
	}
	return ""
}

func (x *MongoTradesResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *MongoTradesResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *MongoTradesResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *MongoTradesResponse) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *MongoTradesResponse) GetTradeId() int32 {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return 0
}

func (x *MongoTradesResponse) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *MongoTradesResponse) GetTradeFrom() int32 {
	if x != nil && x.TradeFrom != nil {
		return *x.TradeFrom
	}
	return 0
}

func (x *MongoTradesResponse) GetSrcTids() string {
	if x != nil && x.SrcTids != nil {
		return *x.SrcTids
	}
	return ""
}

func (x *MongoTradesResponse) GetIsSealed() int32 {
	if x != nil && x.IsSealed != nil {
		return *x.IsSealed
	}
	return 0
}

func (x *MongoTradesResponse) GetSplitFromTradeId() string {
	if x != nil && x.SplitFromTradeId != nil {
		return *x.SplitFromTradeId
	}
	return ""
}

func (x *MongoTradesResponse) GetSplitPackageNum() int32 {
	if x != nil && x.SplitPackageNum != nil {
		return *x.SplitPackageNum
	}
	return 0
}

func (x *MongoTradesResponse) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *MongoTradesResponse) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *MongoTradesResponse) GetConsignStatus() int32 {
	if x != nil && x.ConsignStatus != nil {
		return *x.ConsignStatus
	}
	return 0
}

func (x *MongoTradesResponse) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *MongoTradesResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *MongoTradesResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *MongoTradesResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *MongoTradesResponse) GetSingleSpecNo() string {
	if x != nil && x.SingleSpecNo != nil {
		return *x.SingleSpecNo
	}
	return ""
}

func (x *MongoTradesResponse) GetRawGoodsCount() float64 {
	if x != nil && x.RawGoodsCount != nil {
		return *x.RawGoodsCount
	}
	return 0
}

func (x *MongoTradesResponse) GetRawGoodsTypeCount() int32 {
	if x != nil && x.RawGoodsTypeCount != nil {
		return *x.RawGoodsTypeCount
	}
	return 0
}

func (x *MongoTradesResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *MongoTradesResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *MongoTradesResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *MongoTradesResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *MongoTradesResponse) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *MongoTradesResponse) GetDapAmount() float64 {
	if x != nil && x.DapAmount != nil {
		return *x.DapAmount
	}
	return 0
}

func (x *MongoTradesResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *MongoTradesResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *MongoTradesResponse) GetGoodsCost() float64 {
	if x != nil && x.GoodsCost != nil {
		return *x.GoodsCost
	}
	return 0
}

func (x *MongoTradesResponse) GetPostCost() float64 {
	if x != nil && x.PostCost != nil {
		return *x.PostCost
	}
	return 0
}

func (x *MongoTradesResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *MongoTradesResponse) GetProfit() float64 {
	if x != nil && x.Profit != nil {
		return *x.Profit
	}
	return 0
}

func (x *MongoTradesResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *MongoTradesResponse) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *MongoTradesResponse) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *MongoTradesResponse) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *MongoTradesResponse) GetInvoiceType() int32 {
	if x != nil && x.InvoiceType != nil {
		return *x.InvoiceType
	}
	return 0
}

func (x *MongoTradesResponse) GetInvoiceTitle() string {
	if x != nil && x.InvoiceTitle != nil {
		return *x.InvoiceTitle
	}
	return ""
}

func (x *MongoTradesResponse) GetInvoiceContent() string {
	if x != nil && x.InvoiceContent != nil {
		return *x.InvoiceContent
	}
	return ""
}

func (x *MongoTradesResponse) GetInvoiceId() int32 {
	if x != nil && x.InvoiceId != nil {
		return *x.InvoiceId
	}
	return 0
}

func (x *MongoTradesResponse) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *MongoTradesResponse) GetCustomerType() int32 {
	if x != nil && x.CustomerType != nil {
		return *x.CustomerType
	}
	return 0
}

func (x *MongoTradesResponse) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *MongoTradesResponse) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *MongoTradesResponse) GetPayAccount() string {
	if x != nil && x.PayAccount != nil {
		return *x.PayAccount
	}
	return ""
}

func (x *MongoTradesResponse) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverProvince() int32 {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return 0
}

func (x *MongoTradesResponse) GetReceiverCity() int32 {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return 0
}

func (x *MongoTradesResponse) GetReceiverDistrict() int32 {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return 0
}

func (x *MongoTradesResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverZip() string {
	if x != nil && x.ReceiverZip != nil {
		return *x.ReceiverZip
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverArea() string {
	if x != nil && x.ReceiverArea != nil {
		return *x.ReceiverArea
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverRing() string {
	if x != nil && x.ReceiverRing != nil {
		return *x.ReceiverRing
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverDtb() string {
	if x != nil && x.ReceiverDtb != nil {
		return *x.ReceiverDtb
	}
	return ""
}

func (x *MongoTradesResponse) GetReceiverCountry() int32 {
	if x != nil && x.ReceiverCountry != nil {
		return *x.ReceiverCountry
	}
	return 0
}

func (x *MongoTradesResponse) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *MongoTradesResponse) GetCsRemark() string {
	if x != nil && x.CsRemark != nil {
		return *x.CsRemark
	}
	return ""
}

func (x *MongoTradesResponse) GetRemarkFlag() int32 {
	if x != nil && x.RemarkFlag != nil {
		return *x.RemarkFlag
	}
	return 0
}

func (x *MongoTradesResponse) GetPrintRemark() string {
	if x != nil && x.PrintRemark != nil {
		return *x.PrintRemark
	}
	return ""
}

func (x *MongoTradesResponse) GetToDeliverTime() string {
	if x != nil && x.ToDeliverTime != nil {
		return *x.ToDeliverTime
	}
	return ""
}

func (x *MongoTradesResponse) GetBadReason() int32 {
	if x != nil && x.BadReason != nil {
		return *x.BadReason
	}
	return 0
}

func (x *MongoTradesResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *MongoTradesResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *MongoTradesResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *MongoTradesResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *MongoTradesResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *MongoTradesResponse) GetPreChargeTime() string {
	if x != nil && x.PreChargeTime != nil {
		return *x.PreChargeTime
	}
	return ""
}

func (x *MongoTradesResponse) GetIsPrevNotify() int32 {
	if x != nil && x.IsPrevNotify != nil {
		return *x.IsPrevNotify
	}
	return 0
}

func (x *MongoTradesResponse) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *MongoTradesResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *MongoTradesResponse) GetLogisticsTemplateId() string {
	if x != nil && x.LogisticsTemplateId != nil {
		return *x.LogisticsTemplateId
	}
	return ""
}

func (x *MongoTradesResponse) GetSendbillTemplateId() string {
	if x != nil && x.SendbillTemplateId != nil {
		return *x.SendbillTemplateId
	}
	return ""
}

func (x *MongoTradesResponse) GetPackageId() string {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return ""
}

func (x *MongoTradesResponse) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *MongoTradesResponse) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *MongoTradesResponse) GetSalesmanId() int32 {
	if x != nil && x.SalesmanId != nil {
		return *x.SalesmanId
	}
	return 0
}

func (x *MongoTradesResponse) GetCheckerId() int32 {
	if x != nil && x.CheckerId != nil {
		return *x.CheckerId
	}
	return 0
}

func (x *MongoTradesResponse) GetFullname() string {
	if x != nil && x.Fullname != nil {
		return *x.Fullname
	}
	return ""
}

func (x *MongoTradesResponse) GetCheckerName() string {
	if x != nil && x.CheckerName != nil {
		return *x.CheckerName
	}
	return ""
}

func (x *MongoTradesResponse) GetFcheckerId() int32 {
	if x != nil && x.FcheckerId != nil {
		return *x.FcheckerId
	}
	return 0
}

func (x *MongoTradesResponse) GetFcheckerName() string {
	if x != nil && x.FcheckerName != nil {
		return *x.FcheckerName
	}
	return ""
}

func (x *MongoTradesResponse) GetCheckouterId() int32 {
	if x != nil && x.CheckouterId != nil {
		return *x.CheckouterId
	}
	return 0
}

func (x *MongoTradesResponse) GetCheckouterName() string {
	if x != nil && x.CheckouterName != nil {
		return *x.CheckouterName
	}
	return ""
}

func (x *MongoTradesResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *MongoTradesResponse) GetShopPlatformId() int32 {
	if x != nil && x.ShopPlatformId != nil {
		return *x.ShopPlatformId
	}
	return 0
}

func (x *MongoTradesResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *MongoTradesResponse) GetFreezeReason() int32 {
	if x != nil && x.FreezeReason != nil {
		return *x.FreezeReason
	}
	return 0
}

func (x *MongoTradesResponse) GetFenxiaoType() int32 {
	if x != nil && x.FenxiaoType != nil {
		return *x.FenxiaoType
	}
	return 0
}

func (x *MongoTradesResponse) GetFenxiaoNick() string {
	if x != nil && x.FenxiaoNick != nil {
		return *x.FenxiaoNick
	}
	return ""
}

func (x *MongoTradesResponse) GetCheckStep() int32 {
	if x != nil && x.CheckStep != nil {
		return *x.CheckStep
	}
	return 0
}

func (x *MongoTradesResponse) GetUnmergeMask() int32 {
	if x != nil && x.UnmergeMask != nil {
		return *x.UnmergeMask
	}
	return 0
}

func (x *MongoTradesResponse) GetDelayToTime() string {
	if x != nil && x.DelayToTime != nil {
		return *x.DelayToTime
	}
	return ""
}

func (x *MongoTradesResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *MongoTradesResponse) GetBuyerMessageCount() int32 {
	if x != nil && x.BuyerMessageCount != nil {
		return *x.BuyerMessageCount
	}
	return 0
}

func (x *MongoTradesResponse) GetCsRemarkCount() int32 {
	if x != nil && x.CsRemarkCount != nil {
		return *x.CsRemarkCount
	}
	return 0
}

func (x *MongoTradesResponse) GetCsRemarkChangeCount() int32 {
	if x != nil && x.CsRemarkChangeCount != nil {
		return *x.CsRemarkChangeCount
	}
	return 0
}

func (x *MongoTradesResponse) GetDiscountChange() float64 {
	if x != nil && x.DiscountChange != nil {
		return *x.DiscountChange
	}
	return 0
}

func (x *MongoTradesResponse) GetTradePrepay() float64 {
	if x != nil && x.TradePrepay != nil {
		return *x.TradePrepay
	}
	return 0
}

func (x *MongoTradesResponse) GetPiAmount() float64 {
	if x != nil && x.PiAmount != nil {
		return *x.PiAmount
	}
	return 0
}

func (x *MongoTradesResponse) GetOtherCost() float64 {
	if x != nil && x.OtherCost != nil {
		return *x.OtherCost
	}
	return 0
}

func (x *MongoTradesResponse) GetSalesScore() string {
	if x != nil && x.SalesScore != nil {
		return *x.SalesScore
	}
	return ""
}

func (x *MongoTradesResponse) GetGiftMask() int32 {
	if x != nil && x.GiftMask != nil {
		return *x.GiftMask
	}
	return 0
}

func (x *MongoTradesResponse) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *MongoTradesResponse) GetCancelReason() int32 {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return 0
}

func (x *MongoTradesResponse) GetIsUnpaymentSms() int32 {
	if x != nil && x.IsUnpaymentSms != nil {
		return *x.IsUnpaymentSms
	}
	return 0
}

func (x *MongoTradesResponse) GetTradeMask() string {
	if x != nil && x.TradeMask != nil {
		return *x.TradeMask
	}
	return ""
}

func (x *MongoTradesResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *MongoTradesResponse) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *MongoTradesResponse) GetIdCardType() int32 {
	if x != nil && x.IdCardType != nil {
		return *x.IdCardType
	}
	return 0
}

func (x *MongoTradesResponse) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

func (x *MongoTradesResponse) GetFreezeReasonInfo() string {
	if x != nil && x.FreezeReasonInfo != nil {
		return *x.FreezeReasonInfo
	}
	return ""
}

func (x *MongoTradesResponse) GetFenxiaoTid() string {
	if x != nil && x.FenxiaoTid != nil {
		return *x.FenxiaoTid
	}
	return ""
}

func (x *MongoTradesResponse) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *MongoTradesResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *MongoTradesResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *MongoTradesResponse) GetShopRemark() string {
	if x != nil && x.ShopRemark != nil {
		return *x.ShopRemark
	}
	return ""
}

func (x *MongoTradesResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *MongoTradesResponse) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *MongoTradesResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *MongoTradesResponse) GetAggDiscount() int32 {
	if x != nil && x.AggDiscount != nil {
		return *x.AggDiscount
	}
	return 0
}

func (x *MongoTradesResponse) GetAdjustDiscount() int32 {
	if x != nil && x.AdjustDiscount != nil {
		return *x.AdjustDiscount
	}
	return 0
}

func (x *MongoTradesResponse) GetCollectionTime() string {
	if x != nil && x.CollectionTime != nil {
		return *x.CollectionTime
	}
	return ""
}

func (x *MongoTradesResponse) GetCollectionAccount() string {
	if x != nil && x.CollectionAccount != nil {
		return *x.CollectionAccount
	}
	return ""
}

func (x *MongoTradesResponse) GetCollectionNo() string {
	if x != nil && x.CollectionNo != nil {
		return *x.CollectionNo
	}
	return ""
}

func (x *MongoTradesResponse) GetCollectionType() int32 {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return 0
}

func (x *MongoTradesResponse) GetCollectionAmount() float64 {
	if x != nil && x.CollectionAmount != nil {
		return *x.CollectionAmount
	}
	return 0
}

func (x *MongoTradesResponse) GetAggConsignStatus() int32 {
	if x != nil && x.AggConsignStatus != nil {
		return *x.AggConsignStatus
	}
	return 0
}

func (x *MongoTradesResponse) GetConsignAggNo() string {
	if x != nil && x.ConsignAggNo != nil {
		return *x.ConsignAggNo
	}
	return ""
}

func (x *MongoTradesResponse) GetAggPayStatus() int32 {
	if x != nil && x.AggPayStatus != nil {
		return *x.AggPayStatus
	}
	return 0
}

func (x *MongoTradesResponse) GetPayAggNo() string {
	if x != nil && x.PayAggNo != nil {
		return *x.PayAggNo
	}
	return ""
}

type MongoTradesRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo string `protobuf:"bytes,1,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
}

func (x *MongoTradesRetrieveRequest) Reset() {
	*x = MongoTradesRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoTradesRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoTradesRetrieveRequest) ProtoMessage() {}

func (x *MongoTradesRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoTradesRetrieveRequest.ProtoReflect.Descriptor instead.
func (*MongoTradesRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{91}
}

func (x *MongoTradesRetrieveRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

type PeriodAggTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PeriodStart string `protobuf:"bytes,2,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd   string `protobuf:"bytes,3,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	ConfigNo    string `protobuf:"bytes,4,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *PeriodAggTradeRequest) Reset() {
	*x = PeriodAggTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodAggTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodAggTradeRequest) ProtoMessage() {}

func (x *PeriodAggTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodAggTradeRequest.ProtoReflect.Descriptor instead.
func (*PeriodAggTradeRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{92}
}

func (x *PeriodAggTradeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PeriodAggTradeRequest) GetPeriodStart() string {
	if x != nil {
		return x.PeriodStart
	}
	return ""
}

func (x *PeriodAggTradeRequest) GetPeriodEnd() string {
	if x != nil {
		return x.PeriodEnd
	}
	return ""
}

func (x *PeriodAggTradeRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type PeriodAggTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PeriodAggTradeResponse) Reset() {
	*x = PeriodAggTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodAggTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodAggTradeResponse) ProtoMessage() {}

func (x *PeriodAggTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodAggTradeResponse.ProtoReflect.Descriptor instead.
func (*PeriodAggTradeResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{93}
}

func (x *PeriodAggTradeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PeriodAggTradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PeriodAggTradeResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PeriodicTaskCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	Name            string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Task            string                   `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Args            *string                  `protobuf:"bytes,5,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs          *string                  `protobuf:"bytes,6,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue           *string                  `protobuf:"bytes,7,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange        *string                  `protobuf:"bytes,8,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey      *string                  `protobuf:"bytes,9,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority        *int32                   `protobuf:"varint,10,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires         *string                  `protobuf:"bytes,11,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds   *int32                   `protobuf:"varint,12,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff          *bool                    `protobuf:"varint,13,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime       *string                  `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled         *bool                    `protobuf:"varint,15,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description     *string                  `protobuf:"bytes,16,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab         *int32                   `protobuf:"varint,17,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar           *int32                   `protobuf:"varint,18,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked         *int32                   `protobuf:"varint,19,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskCreateRequest) Reset() {
	*x = PeriodicTaskCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskCreateRequest) ProtoMessage() {}

func (x *PeriodicTaskCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskCreateRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{94}
}

func (x *PeriodicTaskCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskCreateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskCreateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskCreateRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskCreateRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PeriodicTaskDestroyRequest) Reset() {
	*x = PeriodicTaskDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskDestroyRequest) ProtoMessage() {}

func (x *PeriodicTaskDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskDestroyRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{95}
}

func (x *PeriodicTaskDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PeriodicTaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *PeriodicTaskListRequest) Reset() {
	*x = PeriodicTaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskListRequest) ProtoMessage() {}

func (x *PeriodicTaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskListRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{96}
}

func (x *PeriodicTaskListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *PeriodicTaskListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type PeriodicTaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*PeriodicTaskResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PeriodicTaskListResponse) Reset() {
	*x = PeriodicTaskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskListResponse) ProtoMessage() {}

func (x *PeriodicTaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskListResponse.ProtoReflect.Descriptor instead.
func (*PeriodicTaskListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{97}
}

func (x *PeriodicTaskListResponse) GetResults() []*PeriodicTaskResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PeriodicTaskListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PeriodicTaskPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent      *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	XPartialUpdateFields []string                 `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Task                 string                   `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	Args                 *string                  `protobuf:"bytes,6,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs               *string                  `protobuf:"bytes,7,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue                *string                  `protobuf:"bytes,8,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange             *string                  `protobuf:"bytes,9,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey           *string                  `protobuf:"bytes,10,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority             *int32                   `protobuf:"varint,11,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires              *string                  `protobuf:"bytes,12,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds        *int32                   `protobuf:"varint,13,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff               *bool                    `protobuf:"varint,14,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime            *string                  `protobuf:"bytes,15,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled              *bool                    `protobuf:"varint,16,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description          *string                  `protobuf:"bytes,17,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab              *int32                   `protobuf:"varint,18,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar                *int32                   `protobuf:"varint,19,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked              *int32                   `protobuf:"varint,20,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskPartialUpdateRequest) Reset() {
	*x = PeriodicTaskPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskPartialUpdateRequest) ProtoMessage() {}

func (x *PeriodicTaskPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{98}
}

func (x *PeriodicTaskPartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *PeriodicTaskPartialUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskPartialUpdateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskPartialUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskPartialUpdateRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskPartialUpdateRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	Name            string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Task            string                   `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Args            *string                  `protobuf:"bytes,5,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs          *string                  `protobuf:"bytes,6,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue           *string                  `protobuf:"bytes,7,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange        *string                  `protobuf:"bytes,8,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey      *string                  `protobuf:"bytes,9,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority        *int32                   `protobuf:"varint,10,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires         *string                  `protobuf:"bytes,11,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds   *int32                   `protobuf:"varint,12,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff          *bool                    `protobuf:"varint,13,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime       *string                  `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled         *bool                    `protobuf:"varint,15,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description     *string                  `protobuf:"bytes,16,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab         *int32                   `protobuf:"varint,17,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar           *int32                   `protobuf:"varint,18,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked         *int32                   `protobuf:"varint,19,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskRequest) Reset() {
	*x = PeriodicTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskRequest) ProtoMessage() {}

func (x *PeriodicTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{99}
}

func (x *PeriodicTaskRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32                    `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Interval      *IntervalScheduleResponse `protobuf:"bytes,2,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
	Name          string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Task          string                    `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Args          *string                   `protobuf:"bytes,5,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs        *string                   `protobuf:"bytes,6,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue         *string                   `protobuf:"bytes,7,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange      *string                   `protobuf:"bytes,8,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey    *string                   `protobuf:"bytes,9,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority      *int32                    `protobuf:"varint,10,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires       *string                   `protobuf:"bytes,11,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds *int32                    `protobuf:"varint,12,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff        *bool                     `protobuf:"varint,13,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime     *string                   `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled       *bool                     `protobuf:"varint,15,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	LastRunAt     *string                   `protobuf:"bytes,16,opt,name=last_run_at,json=lastRunAt,proto3,oneof" json:"last_run_at,omitempty"`
	TotalRunCount *int32                    `protobuf:"varint,17,opt,name=total_run_count,json=totalRunCount,proto3,oneof" json:"total_run_count,omitempty"`
	DateChanged   *string                   `protobuf:"bytes,18,opt,name=date_changed,json=dateChanged,proto3,oneof" json:"date_changed,omitempty"`
	Description   *string                   `protobuf:"bytes,19,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab       *int32                    `protobuf:"varint,20,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar         *int32                    `protobuf:"varint,21,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked       *int32                    `protobuf:"varint,22,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskResponse) Reset() {
	*x = PeriodicTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskResponse) ProtoMessage() {}

func (x *PeriodicTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskResponse.ProtoReflect.Descriptor instead.
func (*PeriodicTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{100}
}

func (x *PeriodicTaskResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskResponse) GetInterval() *IntervalScheduleResponse {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *PeriodicTaskResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskResponse) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskResponse) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskResponse) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskResponse) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskResponse) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskResponse) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskResponse) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskResponse) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskResponse) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskResponse) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskResponse) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskResponse) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskResponse) GetLastRunAt() string {
	if x != nil && x.LastRunAt != nil {
		return *x.LastRunAt
	}
	return ""
}

func (x *PeriodicTaskResponse) GetTotalRunCount() int32 {
	if x != nil && x.TotalRunCount != nil {
		return *x.TotalRunCount
	}
	return 0
}

func (x *PeriodicTaskResponse) GetDateChanged() string {
	if x != nil && x.DateChanged != nil {
		return *x.DateChanged
	}
	return ""
}

func (x *PeriodicTaskResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskResponse) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskResponse) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskResponse) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PeriodicTaskRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PeriodicTaskRetrieveRequest) Reset() {
	*x = PeriodicTaskRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskRetrieveRequest) ProtoMessage() {}

func (x *PeriodicTaskRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskRetrieveRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{101}
}

func (x *PeriodicTaskRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PeriodicTaskUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	IntervalContent      *IntervalScheduleRequest `protobuf:"bytes,2,opt,name=interval_content,json=intervalContent,proto3,oneof" json:"interval_content,omitempty"`
	XPartialUpdateFields []string                 `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Task                 string                   `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	Args                 *string                  `protobuf:"bytes,6,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Kwargs               *string                  `protobuf:"bytes,7,opt,name=kwargs,proto3,oneof" json:"kwargs,omitempty"`
	Queue                *string                  `protobuf:"bytes,8,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Exchange             *string                  `protobuf:"bytes,9,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"`
	RoutingKey           *string                  `protobuf:"bytes,10,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	Priority             *int32                   `protobuf:"varint,11,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Expires              *string                  `protobuf:"bytes,12,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	ExpireSeconds        *int32                   `protobuf:"varint,13,opt,name=expire_seconds,json=expireSeconds,proto3,oneof" json:"expire_seconds,omitempty"`
	OneOff               *bool                    `protobuf:"varint,14,opt,name=one_off,json=oneOff,proto3,oneof" json:"one_off,omitempty"`
	StartTime            *string                  `protobuf:"bytes,15,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Enabled              *bool                    `protobuf:"varint,16,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Description          *string                  `protobuf:"bytes,17,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Crontab              *int32                   `protobuf:"varint,18,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`
	Solar                *int32                   `protobuf:"varint,19,opt,name=solar,proto3,oneof" json:"solar,omitempty"`
	Clocked              *int32                   `protobuf:"varint,20,opt,name=clocked,proto3,oneof" json:"clocked,omitempty"`
}

func (x *PeriodicTaskUpdateRequest) Reset() {
	*x = PeriodicTaskUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTaskUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTaskUpdateRequest) ProtoMessage() {}

func (x *PeriodicTaskUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTaskUpdateRequest.ProtoReflect.Descriptor instead.
func (*PeriodicTaskUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{102}
}

func (x *PeriodicTaskUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetIntervalContent() *IntervalScheduleRequest {
	if x != nil {
		return x.IntervalContent
	}
	return nil
}

func (x *PeriodicTaskUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *PeriodicTaskUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetKwargs() string {
	if x != nil && x.Kwargs != nil {
		return *x.Kwargs
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetQueue() string {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetExpires() string {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetExpireSeconds() int32 {
	if x != nil && x.ExpireSeconds != nil {
		return *x.ExpireSeconds
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetOneOff() bool {
	if x != nil && x.OneOff != nil {
		return *x.OneOff
	}
	return false
}

func (x *PeriodicTaskUpdateRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PeriodicTaskUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PeriodicTaskUpdateRequest) GetCrontab() int32 {
	if x != nil && x.Crontab != nil {
		return *x.Crontab
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetSolar() int32 {
	if x != nil && x.Solar != nil {
		return *x.Solar
	}
	return 0
}

func (x *PeriodicTaskUpdateRequest) GetClocked() int32 {
	if x != nil && x.Clocked != nil {
		return *x.Clocked
	}
	return 0
}

type PushToKingDeeSalOutStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggNoList string `protobuf:"bytes,1,opt,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
}

func (x *PushToKingDeeSalOutStockRequest) Reset() {
	*x = PushToKingDeeSalOutStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToKingDeeSalOutStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToKingDeeSalOutStockRequest) ProtoMessage() {}

func (x *PushToKingDeeSalOutStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToKingDeeSalOutStockRequest.ProtoReflect.Descriptor instead.
func (*PushToKingDeeSalOutStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{103}
}

func (x *PushToKingDeeSalOutStockRequest) GetAggNoList() string {
	if x != nil {
		return x.AggNoList
	}
	return ""
}

type PushToKingDeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *PushToKingDeeSalOutStockResponse) Reset() {
	*x = PushToKingDeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToKingDeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToKingDeeSalOutStockResponse) ProtoMessage() {}

func (x *PushToKingDeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToKingDeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*PushToKingDeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{104}
}

func (x *PushToKingDeeSalOutStockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PushToKingDeeSalOutStockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PushToKingDeeSalOutStockResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type QueryKingdeePurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateOrgId *int32  `protobuf:"varint,1,opt,name=CreateOrgId,proto3,oneof" json:"CreateOrgId,omitempty"`
	Number      *string `protobuf:"bytes,2,opt,name=Number,proto3,oneof" json:"Number,omitempty"`
	Id          *string `protobuf:"bytes,3,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
}

func (x *QueryKingdeePurchaseOrderRequest) Reset() {
	*x = QueryKingdeePurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKingdeePurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKingdeePurchaseOrderRequest) ProtoMessage() {}

func (x *QueryKingdeePurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKingdeePurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*QueryKingdeePurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{105}
}

func (x *QueryKingdeePurchaseOrderRequest) GetCreateOrgId() int32 {
	if x != nil && x.CreateOrgId != nil {
		return *x.CreateOrgId
	}
	return 0
}

func (x *QueryKingdeePurchaseOrderRequest) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *QueryKingdeePurchaseOrderRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type QueryKingdeePurchaseOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Affected int32  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *QueryKingdeePurchaseOrderResponse) Reset() {
	*x = QueryKingdeePurchaseOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKingdeePurchaseOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKingdeePurchaseOrderResponse) ProtoMessage() {}

func (x *QueryKingdeePurchaseOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKingdeePurchaseOrderResponse.ProtoReflect.Descriptor instead.
func (*QueryKingdeePurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{106}
}

func (x *QueryKingdeePurchaseOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryKingdeePurchaseOrderResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryKingdeePurchaseOrderResponse) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type RevokeKingdeeSalOutstockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action     int32    `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	DocNumbers []string `protobuf:"bytes,2,rep,name=doc_numbers,json=docNumbers,proto3" json:"doc_numbers,omitempty"`
}

func (x *RevokeKingdeeSalOutstockRequest) Reset() {
	*x = RevokeKingdeeSalOutstockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeKingdeeSalOutstockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeKingdeeSalOutstockRequest) ProtoMessage() {}

func (x *RevokeKingdeeSalOutstockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeKingdeeSalOutstockRequest.ProtoReflect.Descriptor instead.
func (*RevokeKingdeeSalOutstockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{107}
}

func (x *RevokeKingdeeSalOutstockRequest) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *RevokeKingdeeSalOutstockRequest) GetDocNumbers() []string {
	if x != nil {
		return x.DocNumbers
	}
	return nil
}

type RevokeKingdeeSalOutstockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RevokeKingdeeSalOutstockResponse) Reset() {
	*x = RevokeKingdeeSalOutstockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeKingdeeSalOutstockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeKingdeeSalOutstockResponse) ProtoMessage() {}

func (x *RevokeKingdeeSalOutstockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeKingdeeSalOutstockResponse.ProtoReflect.Descriptor instead.
func (*RevokeKingdeeSalOutstockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{108}
}

func (x *RevokeKingdeeSalOutstockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RevokeKingdeeSalOutstockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RevokeKingdeeSalOutstockResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodAggSharedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggTaskName string `protobuf:"bytes,2,opt,name=agg_task_name,json=aggTaskName,proto3" json:"agg_task_name,omitempty"`
	PeriodStart string `protobuf:"bytes,3,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd   string `protobuf:"bytes,4,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	ConfigNo    string `protobuf:"bytes,5,opt,name=config_no,json=configNo,proto3" json:"config_no,omitempty"`
}

func (x *RunPeriodAggSharedTaskRequest) Reset() {
	*x = RunPeriodAggSharedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodAggSharedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodAggSharedTaskRequest) ProtoMessage() {}

func (x *RunPeriodAggSharedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodAggSharedTaskRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodAggSharedTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{109}
}

func (x *RunPeriodAggSharedTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetAggTaskName() string {
	if x != nil {
		return x.AggTaskName
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetPeriodStart() string {
	if x != nil {
		return x.PeriodStart
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetPeriodEnd() string {
	if x != nil {
		return x.PeriodEnd
	}
	return ""
}

func (x *RunPeriodAggSharedTaskRequest) GetConfigNo() string {
	if x != nil {
		return x.ConfigNo
	}
	return ""
}

type RunPeriodAggSharedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodAggSharedTaskResponse) Reset() {
	*x = RunPeriodAggSharedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodAggSharedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodAggSharedTaskResponse) ProtoMessage() {}

func (x *RunPeriodAggSharedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodAggSharedTaskResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodAggSharedTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{110}
}

func (x *RunPeriodAggSharedTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodAggSharedTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodAggSharedTaskResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodPushToKingDeeSalOutStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AggNoList   string  `protobuf:"bytes,2,opt,name=agg_no_list,json=aggNoList,proto3" json:"agg_no_list,omitempty"`
	AggTaskName *string `protobuf:"bytes,3,opt,name=agg_task_name,json=aggTaskName,proto3,oneof" json:"agg_task_name,omitempty"`
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) Reset() {
	*x = RunPeriodPushToKingDeeSalOutStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushToKingDeeSalOutStockRequest) ProtoMessage() {}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushToKingDeeSalOutStockRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodPushToKingDeeSalOutStockRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{111}
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) GetAggNoList() string {
	if x != nil {
		return x.AggNoList
	}
	return ""
}

func (x *RunPeriodPushToKingDeeSalOutStockRequest) GetAggTaskName() string {
	if x != nil && x.AggTaskName != nil {
		return *x.AggTaskName
	}
	return ""
}

type RunPeriodPushToKingDeeSalOutStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) Reset() {
	*x = RunPeriodPushToKingDeeSalOutStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodPushToKingDeeSalOutStockResponse) ProtoMessage() {}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodPushToKingDeeSalOutStockResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodPushToKingDeeSalOutStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{112}
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodPushToKingDeeSalOutStockResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RunPeriodicTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RequireStart   string  `protobuf:"bytes,2,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd     *string `protobuf:"bytes,3,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	AggName        string  `protobuf:"bytes,4,opt,name=agg_name,json=aggName,proto3" json:"agg_name,omitempty"`
	IntervalEvery  *string `protobuf:"bytes,5,opt,name=interval_every,json=intervalEvery,proto3,oneof" json:"interval_every,omitempty"`
	PeriodicStart  *string `protobuf:"bytes,6,opt,name=periodic_start,json=periodicStart,proto3,oneof" json:"periodic_start,omitempty"`
	PeriodicExpire *string `protobuf:"bytes,7,opt,name=periodic_expire,json=periodicExpire,proto3,oneof" json:"periodic_expire,omitempty"`
	SliceEvery     *int32  `protobuf:"varint,8,opt,name=slice_every,json=sliceEvery,proto3,oneof" json:"slice_every,omitempty"`
	SliceOverlap   *int32  `protobuf:"varint,9,opt,name=slice_overlap,json=sliceOverlap,proto3,oneof" json:"slice_overlap,omitempty"`
}

func (x *RunPeriodicTaskRequest) Reset() {
	*x = RunPeriodicTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodicTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodicTaskRequest) ProtoMessage() {}

func (x *RunPeriodicTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodicTaskRequest.ProtoReflect.Descriptor instead.
func (*RunPeriodicTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{113}
}

func (x *RunPeriodicTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetAggName() string {
	if x != nil {
		return x.AggName
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetIntervalEvery() string {
	if x != nil && x.IntervalEvery != nil {
		return *x.IntervalEvery
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetPeriodicStart() string {
	if x != nil && x.PeriodicStart != nil {
		return *x.PeriodicStart
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetPeriodicExpire() string {
	if x != nil && x.PeriodicExpire != nil {
		return *x.PeriodicExpire
	}
	return ""
}

func (x *RunPeriodicTaskRequest) GetSliceEvery() int32 {
	if x != nil && x.SliceEvery != nil {
		return *x.SliceEvery
	}
	return 0
}

func (x *RunPeriodicTaskRequest) GetSliceOverlap() int32 {
	if x != nil && x.SliceOverlap != nil {
		return *x.SliceOverlap
	}
	return 0
}

type RunPeriodicTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data int32  `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunPeriodicTaskResponse) Reset() {
	*x = RunPeriodicTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPeriodicTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPeriodicTaskResponse) ProtoMessage() {}

func (x *RunPeriodicTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPeriodicTaskResponse.ProtoReflect.Descriptor instead.
func (*RunPeriodicTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{114}
}

func (x *RunPeriodicTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunPeriodicTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunPeriodicTaskResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type RunSharedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid             string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SliceTaskName    string  `protobuf:"bytes,2,opt,name=slice_task_name,json=sliceTaskName,proto3" json:"slice_task_name,omitempty"`
	RequireStart     string  `protobuf:"bytes,3,opt,name=require_start,json=requireStart,proto3" json:"require_start,omitempty"`
	RequireEnd       *string `protobuf:"bytes,4,opt,name=require_end,json=requireEnd,proto3,oneof" json:"require_end,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,5,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	SliceEvery       *int32  `protobuf:"varint,6,opt,name=slice_every,json=sliceEvery,proto3,oneof" json:"slice_every,omitempty"`
	SliceOverlap     *int32  `protobuf:"varint,7,opt,name=slice_overlap,json=sliceOverlap,proto3,oneof" json:"slice_overlap,omitempty"`
}

func (x *RunSharedTaskRequest) Reset() {
	*x = RunSharedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSharedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSharedTaskRequest) ProtoMessage() {}

func (x *RunSharedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSharedTaskRequest.ProtoReflect.Descriptor instead.
func (*RunSharedTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{115}
}

func (x *RunSharedTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RunSharedTaskRequest) GetSliceTaskName() string {
	if x != nil {
		return x.SliceTaskName
	}
	return ""
}

func (x *RunSharedTaskRequest) GetRequireStart() string {
	if x != nil {
		return x.RequireStart
	}
	return ""
}

func (x *RunSharedTaskRequest) GetRequireEnd() string {
	if x != nil && x.RequireEnd != nil {
		return *x.RequireEnd
	}
	return ""
}

func (x *RunSharedTaskRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *RunSharedTaskRequest) GetSliceEvery() int32 {
	if x != nil && x.SliceEvery != nil {
		return *x.SliceEvery
	}
	return 0
}

func (x *RunSharedTaskRequest) GetSliceOverlap() int32 {
	if x != nil && x.SliceOverlap != nil {
		return *x.SliceOverlap
	}
	return 0
}

type RunSharedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data int32  `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunSharedTaskResponse) Reset() {
	*x = RunSharedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSharedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSharedTaskResponse) ProtoMessage() {}

func (x *RunSharedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSharedTaskResponse.ProtoReflect.Descriptor instead.
func (*RunSharedTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{116}
}

func (x *RunSharedTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunSharedTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunSharedTaskResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type SalReturnStockEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FMaterialID     string   `protobuf:"bytes,1,opt,name=FMaterialID,proto3" json:"FMaterialID,omitempty"`
	FOWNERID        string   `protobuf:"bytes,2,opt,name=FOWNERID,proto3" json:"FOWNERID,omitempty"`
	FStockId        string   `protobuf:"bytes,3,opt,name=FStockId,proto3" json:"FStockId,omitempty"`
	FReturnType     string   `protobuf:"bytes,4,opt,name=FReturnType,proto3" json:"FReturnType,omitempty"`
	FRowType        *string  `protobuf:"bytes,5,opt,name=FRowType,proto3,oneof" json:"FRowType,omitempty"`
	FRealQty        int32    `protobuf:"varint,6,opt,name=FRealQty,proto3" json:"FRealQty,omitempty"`
	FSalUnitQty     int32    `protobuf:"varint,7,opt,name=FSalUnitQty,proto3" json:"FSalUnitQty,omitempty"`
	FSalBaseQty     int32    `protobuf:"varint,8,opt,name=FSalBaseQty,proto3" json:"FSalBaseQty,omitempty"`
	FPriceBaseQty   int32    `protobuf:"varint,9,opt,name=FPriceBaseQty,proto3" json:"FPriceBaseQty,omitempty"`
	FArnotJoinQty   int32    `protobuf:"varint,10,opt,name=FArnotJoinQty,proto3" json:"FArnotJoinQty,omitempty"`
	FEntryTaxRate   *int32   `protobuf:"varint,11,opt,name=FEntryTaxRate,proto3,oneof" json:"FEntryTaxRate,omitempty"`
	FTaxPrice       *float64 `protobuf:"fixed64,12,opt,name=FTaxPrice,proto3,oneof" json:"FTaxPrice,omitempty"`
	FAllAmount      *float64 `protobuf:"fixed64,13,opt,name=FAllAmount,proto3,oneof" json:"FAllAmount,omitempty"`
	FOWNERTYPEID    *string  `protobuf:"bytes,14,opt,name=FOWNERTYPEID,proto3,oneof" json:"FOWNERTYPEID,omitempty"`
	FDeliveryDate   string   `protobuf:"bytes,15,opt,name=FDeliveryDate,proto3" json:"FDeliveryDate,omitempty"`
	FIsOverLegalOrg *bool    `protobuf:"varint,16,opt,name=FIsOverLegalOrg,proto3,oneof" json:"FIsOverLegalOrg,omitempty"`
	FIsReturnCheck  *bool    `protobuf:"varint,17,opt,name=FIsReturnCheck,proto3,oneof" json:"FIsReturnCheck,omitempty"`
}

func (x *SalReturnStockEntityResponse) Reset() {
	*x = SalReturnStockEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalReturnStockEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalReturnStockEntityResponse) ProtoMessage() {}

func (x *SalReturnStockEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalReturnStockEntityResponse.ProtoReflect.Descriptor instead.
func (*SalReturnStockEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{117}
}

func (x *SalReturnStockEntityResponse) GetFMaterialID() string {
	if x != nil {
		return x.FMaterialID
	}
	return ""
}

func (x *SalReturnStockEntityResponse) GetFOWNERID() string {
	if x != nil {
		return x.FOWNERID
	}
	return ""
}

func (x *SalReturnStockEntityResponse) GetFStockId() string {
	if x != nil {
		return x.FStockId
	}
	return ""
}

func (x *SalReturnStockEntityResponse) GetFReturnType() string {
	if x != nil {
		return x.FReturnType
	}
	return ""
}

func (x *SalReturnStockEntityResponse) GetFRowType() string {
	if x != nil && x.FRowType != nil {
		return *x.FRowType
	}
	return ""
}

func (x *SalReturnStockEntityResponse) GetFRealQty() int32 {
	if x != nil {
		return x.FRealQty
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFSalUnitQty() int32 {
	if x != nil {
		return x.FSalUnitQty
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFSalBaseQty() int32 {
	if x != nil {
		return x.FSalBaseQty
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFPriceBaseQty() int32 {
	if x != nil {
		return x.FPriceBaseQty
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFArnotJoinQty() int32 {
	if x != nil {
		return x.FArnotJoinQty
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFEntryTaxRate() int32 {
	if x != nil && x.FEntryTaxRate != nil {
		return *x.FEntryTaxRate
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFTaxPrice() float64 {
	if x != nil && x.FTaxPrice != nil {
		return *x.FTaxPrice
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFAllAmount() float64 {
	if x != nil && x.FAllAmount != nil {
		return *x.FAllAmount
	}
	return 0
}

func (x *SalReturnStockEntityResponse) GetFOWNERTYPEID() string {
	if x != nil && x.FOWNERTYPEID != nil {
		return *x.FOWNERTYPEID
	}
	return ""
}

func (x *SalReturnStockEntityResponse) GetFDeliveryDate() string {
	if x != nil {
		return x.FDeliveryDate
	}
	return ""
}

func (x *SalReturnStockEntityResponse) GetFIsOverLegalOrg() bool {
	if x != nil && x.FIsOverLegalOrg != nil {
		return *x.FIsOverLegalOrg
	}
	return false
}

func (x *SalReturnStockEntityResponse) GetFIsReturnCheck() bool {
	if x != nil && x.FIsReturnCheck != nil {
		return *x.FIsReturnCheck
	}
	return false
}

type SalReturnStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FBillNo          string                          `protobuf:"bytes,1,opt,name=FBillNo,proto3" json:"FBillNo,omitempty"`
	FEntity          []*SalReturnStockEntityResponse `protobuf:"bytes,2,rep,name=FEntity,proto3" json:"FEntity,omitempty"`
	FBillTypeID      string                          `protobuf:"bytes,3,opt,name=FBillTypeID,proto3" json:"FBillTypeID,omitempty"`
	FSaleOrgId       string                          `protobuf:"bytes,4,opt,name=FSaleOrgId,proto3" json:"FSaleOrgId,omitempty"`
	FStockOrgId      string                          `protobuf:"bytes,5,opt,name=FStockOrgId,proto3" json:"FStockOrgId,omitempty"`
	FOwnerIdHead     string                          `protobuf:"bytes,6,opt,name=FOwnerIdHead,proto3" json:"FOwnerIdHead,omitempty"`
	FRetcustId       string                          `protobuf:"bytes,7,opt,name=FRetcustId,proto3" json:"FRetcustId,omitempty"`
	FReceiveCustId   string                          `protobuf:"bytes,8,opt,name=FReceiveCustId,proto3" json:"FReceiveCustId,omitempty"`
	FSettleCustId    string                          `protobuf:"bytes,9,opt,name=FSettleCustId,proto3" json:"FSettleCustId,omitempty"`
	FPayCustId       string                          `protobuf:"bytes,10,opt,name=FPayCustId,proto3" json:"FPayCustId,omitempty"`
	FZBStockID       string                          `protobuf:"bytes,11,opt,name=FZBStockID,proto3" json:"FZBStockID,omitempty"`
	Fprop2           string                          `protobuf:"bytes,12,opt,name=Fprop2,proto3" json:"Fprop2,omitempty"`
	FID              *int32                          `protobuf:"varint,13,opt,name=FID,proto3,oneof" json:"FID,omitempty"`
	FDate            string                          `protobuf:"bytes,14,opt,name=FDate,proto3" json:"FDate,omitempty"`
	FOwnerTypeIdHead *string                         `protobuf:"bytes,15,opt,name=FOwnerTypeIdHead,proto3,oneof" json:"FOwnerTypeIdHead,omitempty"`
	FSplitBillType   *string                         `protobuf:"bytes,16,opt,name=FSplitBillType,proto3,oneof" json:"FSplitBillType,omitempty"`
}

func (x *SalReturnStockResponse) Reset() {
	*x = SalReturnStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalReturnStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalReturnStockResponse) ProtoMessage() {}

func (x *SalReturnStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalReturnStockResponse.ProtoReflect.Descriptor instead.
func (*SalReturnStockResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{118}
}

func (x *SalReturnStockResponse) GetFBillNo() string {
	if x != nil {
		return x.FBillNo
	}
	return ""
}

func (x *SalReturnStockResponse) GetFEntity() []*SalReturnStockEntityResponse {
	if x != nil {
		return x.FEntity
	}
	return nil
}

func (x *SalReturnStockResponse) GetFBillTypeID() string {
	if x != nil {
		return x.FBillTypeID
	}
	return ""
}

func (x *SalReturnStockResponse) GetFSaleOrgId() string {
	if x != nil {
		return x.FSaleOrgId
	}
	return ""
}

func (x *SalReturnStockResponse) GetFStockOrgId() string {
	if x != nil {
		return x.FStockOrgId
	}
	return ""
}

func (x *SalReturnStockResponse) GetFOwnerIdHead() string {
	if x != nil {
		return x.FOwnerIdHead
	}
	return ""
}

func (x *SalReturnStockResponse) GetFRetcustId() string {
	if x != nil {
		return x.FRetcustId
	}
	return ""
}

func (x *SalReturnStockResponse) GetFReceiveCustId() string {
	if x != nil {
		return x.FReceiveCustId
	}
	return ""
}

func (x *SalReturnStockResponse) GetFSettleCustId() string {
	if x != nil {
		return x.FSettleCustId
	}
	return ""
}

func (x *SalReturnStockResponse) GetFPayCustId() string {
	if x != nil {
		return x.FPayCustId
	}
	return ""
}

func (x *SalReturnStockResponse) GetFZBStockID() string {
	if x != nil {
		return x.FZBStockID
	}
	return ""
}

func (x *SalReturnStockResponse) GetFprop2() string {
	if x != nil {
		return x.Fprop2
	}
	return ""
}

func (x *SalReturnStockResponse) GetFID() int32 {
	if x != nil && x.FID != nil {
		return *x.FID
	}
	return 0
}

func (x *SalReturnStockResponse) GetFDate() string {
	if x != nil {
		return x.FDate
	}
	return ""
}

func (x *SalReturnStockResponse) GetFOwnerTypeIdHead() string {
	if x != nil && x.FOwnerTypeIdHead != nil {
		return *x.FOwnerTypeIdHead
	}
	return ""
}

func (x *SalReturnStockResponse) GetFSplitBillType() string {
	if x != nil && x.FSplitBillType != nil {
		return *x.FSplitBillType
	}
	return ""
}

type StopPeriodicTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeriodicTaskName string `protobuf:"bytes,1,opt,name=periodic_task_name,json=periodicTaskName,proto3" json:"periodic_task_name,omitempty"`
}

func (x *StopPeriodicTaskRequest) Reset() {
	*x = StopPeriodicTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPeriodicTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPeriodicTaskRequest) ProtoMessage() {}

func (x *StopPeriodicTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPeriodicTaskRequest.ProtoReflect.Descriptor instead.
func (*StopPeriodicTaskRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{119}
}

func (x *StopPeriodicTaskRequest) GetPeriodicTaskName() string {
	if x != nil {
		return x.PeriodicTaskName
	}
	return ""
}

type StopPeriodicTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StopPeriodicTaskResponse) Reset() {
	*x = StopPeriodicTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPeriodicTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPeriodicTaskResponse) ProtoMessage() {}

func (x *StopPeriodicTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPeriodicTaskResponse.ProtoReflect.Descriptor instead.
func (*StopPeriodicTaskResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{120}
}

func (x *StopPeriodicTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StopPeriodicTaskResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SubHeadEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FSettleCurrID   string  `protobuf:"bytes,1,opt,name=FSettleCurrID,proto3" json:"FSettleCurrID,omitempty"`
	FSettleOrgID    string  `protobuf:"bytes,2,opt,name=FSettleOrgID,proto3" json:"FSettleOrgID,omitempty"`
	FSettleTypeID   string  `protobuf:"bytes,3,opt,name=FSettleTypeID,proto3" json:"FSettleTypeID,omitempty"`
	FPriceListId    string  `protobuf:"bytes,4,opt,name=FPriceListId,proto3" json:"FPriceListId,omitempty"`
	FDiscountListId string  `protobuf:"bytes,5,opt,name=FDiscountListId,proto3" json:"FDiscountListId,omitempty"`
	FEntryId        *int32  `protobuf:"varint,6,opt,name=FEntryId,proto3,oneof" json:"FEntryId,omitempty"`
	FThirdBillNo    *string `protobuf:"bytes,7,opt,name=FThirdBillNo,proto3,oneof" json:"FThirdBillNo,omitempty"`
	FThirdBillId    *string `protobuf:"bytes,8,opt,name=FThirdBillId,proto3,oneof" json:"FThirdBillId,omitempty"`
}

func (x *SubHeadEntityResponse) Reset() {
	*x = SubHeadEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubHeadEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubHeadEntityResponse) ProtoMessage() {}

func (x *SubHeadEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubHeadEntityResponse.ProtoReflect.Descriptor instead.
func (*SubHeadEntityResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{121}
}

func (x *SubHeadEntityResponse) GetFSettleCurrID() string {
	if x != nil {
		return x.FSettleCurrID
	}
	return ""
}

func (x *SubHeadEntityResponse) GetFSettleOrgID() string {
	if x != nil {
		return x.FSettleOrgID
	}
	return ""
}

func (x *SubHeadEntityResponse) GetFSettleTypeID() string {
	if x != nil {
		return x.FSettleTypeID
	}
	return ""
}

func (x *SubHeadEntityResponse) GetFPriceListId() string {
	if x != nil {
		return x.FPriceListId
	}
	return ""
}

func (x *SubHeadEntityResponse) GetFDiscountListId() string {
	if x != nil {
		return x.FDiscountListId
	}
	return ""
}

func (x *SubHeadEntityResponse) GetFEntryId() int32 {
	if x != nil && x.FEntryId != nil {
		return *x.FEntryId
	}
	return 0
}

func (x *SubHeadEntityResponse) GetFThirdBillNo() string {
	if x != nil && x.FThirdBillNo != nil {
		return *x.FThirdBillNo
	}
	return ""
}

func (x *SubHeadEntityResponse) GetFThirdBillId() string {
	if x != nil && x.FThirdBillId != nil {
		return *x.FThirdBillId
	}
	return ""
}

type TaskResultCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId           string  `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName         *string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs         *string `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs       *string `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status           *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker           *string `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType      string  `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding  string  `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback        *string `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
}

func (x *TaskResultCreateRequest) Reset() {
	*x = TaskResultCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultCreateRequest) ProtoMessage() {}

func (x *TaskResultCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultCreateRequest.ProtoReflect.Descriptor instead.
func (*TaskResultCreateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{122}
}

func (x *TaskResultCreateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultCreateRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultCreateRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultCreateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultCreateRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultCreateRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultCreateRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultCreateRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

type TaskResultDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskResultDestroyRequest) Reset() {
	*x = TaskResultDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultDestroyRequest) ProtoMessage() {}

func (x *TaskResultDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultDestroyRequest.ProtoReflect.Descriptor instead.
func (*TaskResultDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{123}
}

func (x *TaskResultDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskResultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *TaskResultListRequest) Reset() {
	*x = TaskResultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultListRequest) ProtoMessage() {}

func (x *TaskResultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultListRequest.ProtoReflect.Descriptor instead.
func (*TaskResultListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{124}
}

func (x *TaskResultListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *TaskResultListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type TaskResultListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TaskResultResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TaskResultListResponse) Reset() {
	*x = TaskResultListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultListResponse) ProtoMessage() {}

func (x *TaskResultListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultListResponse.ProtoReflect.Descriptor instead.
func (*TaskResultListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{125}
}

func (x *TaskResultListResponse) GetResults() []*TaskResultResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TaskResultListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TaskResultPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId               string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName             *string  `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName     *string  `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs             *string  `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs           *string  `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status               *string  `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker               *string  `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType          string   `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding      string   `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback            *string  `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,12,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *TaskResultPartialUpdateRequest) Reset() {
	*x = TaskResultPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultPartialUpdateRequest) ProtoMessage() {}

func (x *TaskResultPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaskResultPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{126}
}

func (x *TaskResultPartialUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultPartialUpdateRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

func (x *TaskResultPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type TaskResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId           string  `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName         *string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs         *string `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs       *string `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status           *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker           *string `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType      string  `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding  string  `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback        *string `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
}

func (x *TaskResultRequest) Reset() {
	*x = TaskResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultRequest) ProtoMessage() {}

func (x *TaskResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultRequest.ProtoReflect.Descriptor instead.
func (*TaskResultRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{127}
}

func (x *TaskResultRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

type TaskResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId           string  `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName         *string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName *string `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs         *string `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs       *string `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Result           *string `protobuf:"bytes,7,opt,name=result,proto3,oneof" json:"result,omitempty"`
	Status           *string `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker           *string `protobuf:"bytes,9,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType      string  `protobuf:"bytes,10,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding  string  `protobuf:"bytes,11,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	DateCreated      *string `protobuf:"bytes,12,opt,name=date_created,json=dateCreated,proto3,oneof" json:"date_created,omitempty"`
	DateDone         *string `protobuf:"bytes,13,opt,name=date_done,json=dateDone,proto3,oneof" json:"date_done,omitempty"`
	Traceback        *string `protobuf:"bytes,14,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
	Meta             *string `protobuf:"bytes,15,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (x *TaskResultResponse) Reset() {
	*x = TaskResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultResponse) ProtoMessage() {}

func (x *TaskResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultResponse.ProtoReflect.Descriptor instead.
func (*TaskResultResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{128}
}

func (x *TaskResultResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultResponse) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultResponse) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultResponse) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultResponse) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultResponse) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *TaskResultResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultResponse) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultResponse) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultResponse) GetDateCreated() string {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return ""
}

func (x *TaskResultResponse) GetDateDone() string {
	if x != nil && x.DateDone != nil {
		return *x.DateDone
	}
	return ""
}

func (x *TaskResultResponse) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

func (x *TaskResultResponse) GetMeta() string {
	if x != nil && x.Meta != nil {
		return *x.Meta
	}
	return ""
}

type TaskResultRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskResultRetrieveRequest) Reset() {
	*x = TaskResultRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultRetrieveRequest) ProtoMessage() {}

func (x *TaskResultRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultRetrieveRequest.ProtoReflect.Descriptor instead.
func (*TaskResultRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{129}
}

func (x *TaskResultRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskResultUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TaskId               string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName             *string  `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	PeriodicTaskName     *string  `protobuf:"bytes,4,opt,name=periodic_task_name,json=periodicTaskName,proto3,oneof" json:"periodic_task_name,omitempty"`
	TaskArgs             *string  `protobuf:"bytes,5,opt,name=task_args,json=taskArgs,proto3,oneof" json:"task_args,omitempty"`
	TaskKwargs           *string  `protobuf:"bytes,6,opt,name=task_kwargs,json=taskKwargs,proto3,oneof" json:"task_kwargs,omitempty"`
	Status               *string  `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Worker               *string  `protobuf:"bytes,8,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
	ContentType          string   `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding      string   `protobuf:"bytes,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Traceback            *string  `protobuf:"bytes,11,opt,name=traceback,proto3,oneof" json:"traceback,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,12,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
}

func (x *TaskResultUpdateRequest) Reset() {
	*x = TaskResultUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResultUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultUpdateRequest) ProtoMessage() {}

func (x *TaskResultUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaskResultUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{130}
}

func (x *TaskResultUpdateRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskResultUpdateRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetPeriodicTaskName() string {
	if x != nil && x.PeriodicTaskName != nil {
		return *x.PeriodicTaskName
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTaskArgs() string {
	if x != nil && x.TaskArgs != nil {
		return *x.TaskArgs
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTaskKwargs() string {
	if x != nil && x.TaskKwargs != nil {
		return *x.TaskKwargs
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetTraceback() string {
	if x != nil && x.Traceback != nil {
		return *x.Traceback
	}
	return ""
}

func (x *TaskResultUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

type TradeRefundDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo string `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
}

func (x *TradeRefundDestroyRequest) Reset() {
	*x = TradeRefundDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundDestroyRequest) ProtoMessage() {}

func (x *TradeRefundDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundDestroyRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{131}
}

func (x *TradeRefundDestroyRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

type TradeRefundDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId      int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	PlatformId *int32  `protobuf:"varint,2,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	Tid        string  `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	Oid        string  `protobuf:"bytes,4,opt,name=oid,proto3" json:"oid,omitempty"`
	RefundNo   string  `protobuf:"bytes,5,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	Name       string  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Amount     float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TradeRefundDiscountResponse) Reset() {
	*x = TradeRefundDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundDiscountResponse) ProtoMessage() {}

func (x *TradeRefundDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundDiscountResponse.ProtoReflect.Descriptor instead.
func (*TradeRefundDiscountResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{132}
}

func (x *TradeRefundDiscountResponse) GetRecId() int32 {
	if x != nil {
		return x.RecId
	}
	return 0
}

func (x *TradeRefundDiscountResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundDiscountResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundDiscountResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *TradeRefundDiscountResponse) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundDiscountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TradeRefundDiscountResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TradeRefundGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid         string  `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	PlatformId  *int32  `protobuf:"varint,2,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	RefundNo    string  `protobuf:"bytes,3,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	Status      *int32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	GoodsId     string  `protobuf:"bytes,5,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	SpecId      string  `protobuf:"bytes,6,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	GoodsNo     string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3" json:"goods_no,omitempty"`
	SpecNo      string  `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	Num         float64 `protobuf:"fixed64,9,opt,name=num,proto3" json:"num,omitempty"`
	Price       float64 `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	TotalAmount float64 `protobuf:"fixed64,11,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Remark      string  `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
	Modified    *string `protobuf:"bytes,13,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created     *string `protobuf:"bytes,14,opt,name=created,proto3,oneof" json:"created,omitempty"`
	GoodsName   string  `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	SpecName    string  `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3" json:"spec_name,omitempty"`
	OrderId     *int32  `protobuf:"varint,17,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	ReturnTime  *string `protobuf:"bytes,18,opt,name=return_time,json=returnTime,proto3,oneof" json:"return_time,omitempty"`
}

func (x *TradeRefundGoodsResponse) Reset() {
	*x = TradeRefundGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundGoodsResponse) ProtoMessage() {}

func (x *TradeRefundGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundGoodsResponse.ProtoReflect.Descriptor instead.
func (*TradeRefundGoodsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{133}
}

func (x *TradeRefundGoodsResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundGoodsResponse) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *TradeRefundGoodsResponse) GetGoodsId() string {
	if x != nil {
		return x.GoodsId
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetGoodsNo() string {
	if x != nil {
		return x.GoodsNo
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TradeRefundGoodsResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeRefundGoodsResponse) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TradeRefundGoodsResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetSpecName() string {
	if x != nil {
		return x.SpecName
	}
	return ""
}

func (x *TradeRefundGoodsResponse) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *TradeRefundGoodsResponse) GetReturnTime() string {
	if x != nil && x.ReturnTime != nil {
		return *x.ReturnTime
	}
	return ""
}

type TradeRefundListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *TradeRefundListRequest) Reset() {
	*x = TradeRefundListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundListRequest) ProtoMessage() {}

func (x *TradeRefundListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundListRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{134}
}

func (x *TradeRefundListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *TradeRefundListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type TradeRefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TradeRefundResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TradeRefundListResponse) Reset() {
	*x = TradeRefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundListResponse) ProtoMessage() {}

func (x *TradeRefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundListResponse.ProtoReflect.Descriptor instead.
func (*TradeRefundListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{135}
}

func (x *TradeRefundListResponse) GetResults() []*TradeRefundResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TradeRefundListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TradeRefundPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo              string   `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	XPartialUpdateFields  []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PlatformId            *int32   `protobuf:"varint,3,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopNo                string   `protobuf:"bytes,4,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	Tid                   string   `protobuf:"bytes,5,opt,name=tid,proto3" json:"tid,omitempty"`
	TradeNo               *string  `protobuf:"bytes,6,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	KingdeeStockoutBillNo *string  `protobuf:"bytes,7,opt,name=kingdee_stockout_bill_no,json=kingdeeStockoutBillNo,proto3,oneof" json:"kingdee_stockout_bill_no,omitempty"`
	Type                  *int32   `protobuf:"varint,8,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Status                *int32   `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProcessStatus         *int32   `protobuf:"varint,10,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	OpConstraint          *int32   `protobuf:"varint,11,opt,name=op_constraint,json=opConstraint,proto3,oneof" json:"op_constraint,omitempty"`
	IsAftersale           *int32   `protobuf:"varint,12,opt,name=is_aftersale,json=isAftersale,proto3,oneof" json:"is_aftersale,omitempty"`
	CsStatus              *int32   `protobuf:"varint,13,opt,name=cs_status,json=csStatus,proto3,oneof" json:"cs_status,omitempty"`
	GuaranteeMode         *int32   `protobuf:"varint,14,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	RefundAmount          float64  `protobuf:"fixed64,15,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	ActualRefundAmount    float64  `protobuf:"fixed64,16,opt,name=actual_refund_amount,json=actualRefundAmount,proto3" json:"actual_refund_amount,omitempty"`
	Reason                string   `protobuf:"bytes,17,opt,name=reason,proto3" json:"reason,omitempty"`
	Remark                string   `protobuf:"bytes,18,opt,name=remark,proto3" json:"remark,omitempty"`
	RefundMask            *int32   `protobuf:"varint,19,opt,name=refund_mask,json=refundMask,proto3,oneof" json:"refund_mask,omitempty"`
	LogisticsName         string   `protobuf:"bytes,20,opt,name=logistics_name,json=logisticsName,proto3" json:"logistics_name,omitempty"`
	LogisticsNo           string   `protobuf:"bytes,21,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
	RefundTime            *string  `protobuf:"bytes,22,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	Modified              *string  `protobuf:"bytes,23,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created               *string  `protobuf:"bytes,24,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CurrentPhaseTimeout   *string  `protobuf:"bytes,25,opt,name=current_phase_timeout,json=currentPhaseTimeout,proto3,oneof" json:"current_phase_timeout,omitempty"`
	ShopId                *int32   `protobuf:"varint,26,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	Title                 string   `protobuf:"bytes,27,opt,name=title,proto3" json:"title,omitempty"`
	IsExternal            *int32   `protobuf:"varint,28,opt,name=is_external,json=isExternal,proto3,oneof" json:"is_external,omitempty"`
	RefundId              *int32   `protobuf:"varint,29,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	PayNo                 string   `protobuf:"bytes,30,opt,name=pay_no,json=payNo,proto3" json:"pay_no,omitempty"`
}

func (x *TradeRefundPartialUpdateRequest) Reset() {
	*x = TradeRefundPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundPartialUpdateRequest) ProtoMessage() {}

func (x *TradeRefundPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{136}
}

func (x *TradeRefundPartialUpdateRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *TradeRefundPartialUpdateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetKingdeeStockoutBillNo() string {
	if x != nil && x.KingdeeStockoutBillNo != nil {
		return *x.KingdeeStockoutBillNo
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetOpConstraint() int32 {
	if x != nil && x.OpConstraint != nil {
		return *x.OpConstraint
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetIsAftersale() int32 {
	if x != nil && x.IsAftersale != nil {
		return *x.IsAftersale
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetCsStatus() int32 {
	if x != nil && x.CsStatus != nil {
		return *x.CsStatus
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetRefundAmount() float64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetActualRefundAmount() float64 {
	if x != nil {
		return x.ActualRefundAmount
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetRefundMask() int32 {
	if x != nil && x.RefundMask != nil {
		return *x.RefundMask
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetLogisticsName() string {
	if x != nil {
		return x.LogisticsName
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetCurrentPhaseTimeout() string {
	if x != nil && x.CurrentPhaseTimeout != nil {
		return *x.CurrentPhaseTimeout
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TradeRefundPartialUpdateRequest) GetIsExternal() int32 {
	if x != nil && x.IsExternal != nil {
		return *x.IsExternal
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *TradeRefundPartialUpdateRequest) GetPayNo() string {
	if x != nil {
		return x.PayNo
	}
	return ""
}

type TradeRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo              string  `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	PlatformId            *int32  `protobuf:"varint,2,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopNo                string  `protobuf:"bytes,3,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	Tid                   string  `protobuf:"bytes,4,opt,name=tid,proto3" json:"tid,omitempty"`
	TradeNo               *string `protobuf:"bytes,5,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	KingdeeStockoutBillNo *string `protobuf:"bytes,6,opt,name=kingdee_stockout_bill_no,json=kingdeeStockoutBillNo,proto3,oneof" json:"kingdee_stockout_bill_no,omitempty"`
	Type                  *int32  `protobuf:"varint,7,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Status                *int32  `protobuf:"varint,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProcessStatus         *int32  `protobuf:"varint,9,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	OpConstraint          *int32  `protobuf:"varint,10,opt,name=op_constraint,json=opConstraint,proto3,oneof" json:"op_constraint,omitempty"`
	IsAftersale           *int32  `protobuf:"varint,11,opt,name=is_aftersale,json=isAftersale,proto3,oneof" json:"is_aftersale,omitempty"`
	CsStatus              *int32  `protobuf:"varint,12,opt,name=cs_status,json=csStatus,proto3,oneof" json:"cs_status,omitempty"`
	GuaranteeMode         *int32  `protobuf:"varint,13,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	RefundAmount          float64 `protobuf:"fixed64,14,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	ActualRefundAmount    float64 `protobuf:"fixed64,15,opt,name=actual_refund_amount,json=actualRefundAmount,proto3" json:"actual_refund_amount,omitempty"`
	Reason                string  `protobuf:"bytes,16,opt,name=reason,proto3" json:"reason,omitempty"`
	Remark                string  `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`
	RefundMask            *int32  `protobuf:"varint,18,opt,name=refund_mask,json=refundMask,proto3,oneof" json:"refund_mask,omitempty"`
	LogisticsName         string  `protobuf:"bytes,19,opt,name=logistics_name,json=logisticsName,proto3" json:"logistics_name,omitempty"`
	LogisticsNo           string  `protobuf:"bytes,20,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
	RefundTime            *string `protobuf:"bytes,21,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	Modified              *string `protobuf:"bytes,22,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created               *string `protobuf:"bytes,23,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CurrentPhaseTimeout   *string `protobuf:"bytes,24,opt,name=current_phase_timeout,json=currentPhaseTimeout,proto3,oneof" json:"current_phase_timeout,omitempty"`
	ShopId                *int32  `protobuf:"varint,25,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	Title                 string  `protobuf:"bytes,26,opt,name=title,proto3" json:"title,omitempty"`
	IsExternal            *int32  `protobuf:"varint,27,opt,name=is_external,json=isExternal,proto3,oneof" json:"is_external,omitempty"`
	RefundId              *int32  `protobuf:"varint,28,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	PayNo                 string  `protobuf:"bytes,29,opt,name=pay_no,json=payNo,proto3" json:"pay_no,omitempty"`
}

func (x *TradeRefundRequest) Reset() {
	*x = TradeRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundRequest) ProtoMessage() {}

func (x *TradeRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{137}
}

func (x *TradeRefundRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *TradeRefundRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundRequest) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *TradeRefundRequest) GetKingdeeStockoutBillNo() string {
	if x != nil && x.KingdeeStockoutBillNo != nil {
		return *x.KingdeeStockoutBillNo
	}
	return ""
}

func (x *TradeRefundRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TradeRefundRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *TradeRefundRequest) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *TradeRefundRequest) GetOpConstraint() int32 {
	if x != nil && x.OpConstraint != nil {
		return *x.OpConstraint
	}
	return 0
}

func (x *TradeRefundRequest) GetIsAftersale() int32 {
	if x != nil && x.IsAftersale != nil {
		return *x.IsAftersale
	}
	return 0
}

func (x *TradeRefundRequest) GetCsStatus() int32 {
	if x != nil && x.CsStatus != nil {
		return *x.CsStatus
	}
	return 0
}

func (x *TradeRefundRequest) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *TradeRefundRequest) GetRefundAmount() float64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *TradeRefundRequest) GetActualRefundAmount() float64 {
	if x != nil {
		return x.ActualRefundAmount
	}
	return 0
}

func (x *TradeRefundRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TradeRefundRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundRequest) GetRefundMask() int32 {
	if x != nil && x.RefundMask != nil {
		return *x.RefundMask
	}
	return 0
}

func (x *TradeRefundRequest) GetLogisticsName() string {
	if x != nil {
		return x.LogisticsName
	}
	return ""
}

func (x *TradeRefundRequest) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

func (x *TradeRefundRequest) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *TradeRefundRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TradeRefundRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TradeRefundRequest) GetCurrentPhaseTimeout() string {
	if x != nil && x.CurrentPhaseTimeout != nil {
		return *x.CurrentPhaseTimeout
	}
	return ""
}

func (x *TradeRefundRequest) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *TradeRefundRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TradeRefundRequest) GetIsExternal() int32 {
	if x != nil && x.IsExternal != nil {
		return *x.IsExternal
	}
	return 0
}

func (x *TradeRefundRequest) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *TradeRefundRequest) GetPayNo() string {
	if x != nil {
		return x.PayNo
	}
	return ""
}

type TradeRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo              string                         `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	GoodsList             []*TradeRefundGoodsResponse    `protobuf:"bytes,2,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	DiscountList          []*TradeRefundDiscountResponse `protobuf:"bytes,3,rep,name=discount_list,json=discountList,proto3" json:"discount_list,omitempty"`
	PlatformId            *int32                         `protobuf:"varint,4,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopNo                string                         `protobuf:"bytes,5,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	Tid                   string                         `protobuf:"bytes,6,opt,name=tid,proto3" json:"tid,omitempty"`
	TradeNo               *string                        `protobuf:"bytes,7,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	KingdeeStockoutBillNo *string                        `protobuf:"bytes,8,opt,name=kingdee_stockout_bill_no,json=kingdeeStockoutBillNo,proto3,oneof" json:"kingdee_stockout_bill_no,omitempty"`
	Type                  *int32                         `protobuf:"varint,9,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Status                *int32                         `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProcessStatus         *int32                         `protobuf:"varint,11,opt,name=process_status,json=processStatus,proto3,oneof" json:"process_status,omitempty"`
	OpConstraint          *int32                         `protobuf:"varint,12,opt,name=op_constraint,json=opConstraint,proto3,oneof" json:"op_constraint,omitempty"`
	IsAftersale           *int32                         `protobuf:"varint,13,opt,name=is_aftersale,json=isAftersale,proto3,oneof" json:"is_aftersale,omitempty"`
	CsStatus              *int32                         `protobuf:"varint,14,opt,name=cs_status,json=csStatus,proto3,oneof" json:"cs_status,omitempty"`
	GuaranteeMode         *int32                         `protobuf:"varint,15,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	RefundAmount          float64                        `protobuf:"fixed64,16,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	ActualRefundAmount    float64                        `protobuf:"fixed64,17,opt,name=actual_refund_amount,json=actualRefundAmount,proto3" json:"actual_refund_amount,omitempty"`
	Reason                string                         `protobuf:"bytes,18,opt,name=reason,proto3" json:"reason,omitempty"`
	Remark                string                         `protobuf:"bytes,19,opt,name=remark,proto3" json:"remark,omitempty"`
	RefundMask            *int32                         `protobuf:"varint,20,opt,name=refund_mask,json=refundMask,proto3,oneof" json:"refund_mask,omitempty"`
	LogisticsName         string                         `protobuf:"bytes,21,opt,name=logistics_name,json=logisticsName,proto3" json:"logistics_name,omitempty"`
	LogisticsNo           string                         `protobuf:"bytes,22,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
	RefundTime            *string                        `protobuf:"bytes,23,opt,name=refund_time,json=refundTime,proto3,oneof" json:"refund_time,omitempty"`
	Modified              *string                        `protobuf:"bytes,24,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created               *string                        `protobuf:"bytes,25,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CurrentPhaseTimeout   *string                        `protobuf:"bytes,26,opt,name=current_phase_timeout,json=currentPhaseTimeout,proto3,oneof" json:"current_phase_timeout,omitempty"`
	ShopId                *int32                         `protobuf:"varint,27,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	Title                 string                         `protobuf:"bytes,28,opt,name=title,proto3" json:"title,omitempty"`
	IsExternal            *int32                         `protobuf:"varint,29,opt,name=is_external,json=isExternal,proto3,oneof" json:"is_external,omitempty"`
	RefundId              *int32                         `protobuf:"varint,30,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	PayNo                 string                         `protobuf:"bytes,31,opt,name=pay_no,json=payNo,proto3" json:"pay_no,omitempty"`
}

func (x *TradeRefundResponse) Reset() {
	*x = TradeRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundResponse) ProtoMessage() {}

func (x *TradeRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundResponse.ProtoReflect.Descriptor instead.
func (*TradeRefundResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{138}
}

func (x *TradeRefundResponse) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundResponse) GetGoodsList() []*TradeRefundGoodsResponse {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *TradeRefundResponse) GetDiscountList() []*TradeRefundDiscountResponse {
	if x != nil {
		return x.DiscountList
	}
	return nil
}

func (x *TradeRefundResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *TradeRefundResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundResponse) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *TradeRefundResponse) GetKingdeeStockoutBillNo() string {
	if x != nil && x.KingdeeStockoutBillNo != nil {
		return *x.KingdeeStockoutBillNo
	}
	return ""
}

func (x *TradeRefundResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TradeRefundResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *TradeRefundResponse) GetProcessStatus() int32 {
	if x != nil && x.ProcessStatus != nil {
		return *x.ProcessStatus
	}
	return 0
}

func (x *TradeRefundResponse) GetOpConstraint() int32 {
	if x != nil && x.OpConstraint != nil {
		return *x.OpConstraint
	}
	return 0
}

func (x *TradeRefundResponse) GetIsAftersale() int32 {
	if x != nil && x.IsAftersale != nil {
		return *x.IsAftersale
	}
	return 0
}

func (x *TradeRefundResponse) GetCsStatus() int32 {
	if x != nil && x.CsStatus != nil {
		return *x.CsStatus
	}
	return 0
}

func (x *TradeRefundResponse) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *TradeRefundResponse) GetRefundAmount() float64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *TradeRefundResponse) GetActualRefundAmount() float64 {
	if x != nil {
		return x.ActualRefundAmount
	}
	return 0
}

func (x *TradeRefundResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TradeRefundResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundResponse) GetRefundMask() int32 {
	if x != nil && x.RefundMask != nil {
		return *x.RefundMask
	}
	return 0
}

func (x *TradeRefundResponse) GetLogisticsName() string {
	if x != nil {
		return x.LogisticsName
	}
	return ""
}

func (x *TradeRefundResponse) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

func (x *TradeRefundResponse) GetRefundTime() string {
	if x != nil && x.RefundTime != nil {
		return *x.RefundTime
	}
	return ""
}

func (x *TradeRefundResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TradeRefundResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TradeRefundResponse) GetCurrentPhaseTimeout() string {
	if x != nil && x.CurrentPhaseTimeout != nil {
		return *x.CurrentPhaseTimeout
	}
	return ""
}

func (x *TradeRefundResponse) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *TradeRefundResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TradeRefundResponse) GetIsExternal() int32 {
	if x != nil && x.IsExternal != nil {
		return *x.IsExternal
	}
	return 0
}

func (x *TradeRefundResponse) GetRefundId() int32 {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return 0
}

func (x *TradeRefundResponse) GetPayNo() string {
	if x != nil {
		return x.PayNo
	}
	return ""
}

type TradeRefundRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundNo string `protobuf:"bytes,1,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
}

func (x *TradeRefundRetrieveRequest) Reset() {
	*x = TradeRefundRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundRetrieveRequest) ProtoMessage() {}

func (x *TradeRefundRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundRetrieveRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{139}
}

func (x *TradeRefundRetrieveRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

type TradeRefundStockinDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId int32 `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3" json:"stockin_id,omitempty"`
}

func (x *TradeRefundStockinDestroyRequest) Reset() {
	*x = TradeRefundStockinDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinDestroyRequest) ProtoMessage() {}

func (x *TradeRefundStockinDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinDestroyRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinDestroyRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{140}
}

func (x *TradeRefundStockinDestroyRequest) GetStockinId() int32 {
	if x != nil {
		return x.StockinId
	}
	return 0
}

type TradeRefundStockinDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId              int32   `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	StockinId          *int32  `protobuf:"varint,2,opt,name=stockin_id,json=stockinId,proto3,oneof" json:"stockin_id,omitempty"`
	SrcOrderDetailId   *int32  `protobuf:"varint,3,opt,name=src_order_detail_id,json=srcOrderDetailId,proto3,oneof" json:"src_order_detail_id,omitempty"`
	SpecNo             string  `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SuiteNo            string  `protobuf:"bytes,5,opt,name=suite_no,json=suiteNo,proto3" json:"suite_no,omitempty"`
	GoodsCount         float64 `protobuf:"fixed64,6,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	Discount           float64 `protobuf:"fixed64,7,opt,name=discount,proto3" json:"discount,omitempty"`
	CostPrice          float64 `protobuf:"fixed64,8,opt,name=cost_price,json=costPrice,proto3" json:"cost_price,omitempty"`
	ProductionDate     *string `protobuf:"bytes,9,opt,name=production_date,json=productionDate,proto3,oneof" json:"production_date,omitempty"`
	ValidityDays       *int32  `protobuf:"varint,10,opt,name=validity_days,json=validityDays,proto3,oneof" json:"validity_days,omitempty"`
	ExpireDate         *string `protobuf:"bytes,11,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	SrcPrice           float64 `protobuf:"fixed64,12,opt,name=src_price,json=srcPrice,proto3" json:"src_price,omitempty"`
	TaxPrice           float64 `protobuf:"fixed64,13,opt,name=tax_price,json=taxPrice,proto3" json:"tax_price,omitempty"`
	TaxAmount          float64 `protobuf:"fixed64,14,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	Tax                float64 `protobuf:"fixed64,15,opt,name=tax,proto3" json:"tax,omitempty"`
	TotalCost          float64 `protobuf:"fixed64,16,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	Remark             string  `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`
	AdjustNum          float64 `protobuf:"fixed64,18,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	AdjustPrice        float64 `protobuf:"fixed64,19,opt,name=adjust_price,json=adjustPrice,proto3" json:"adjust_price,omitempty"`
	RightNum           float64 `protobuf:"fixed64,20,opt,name=right_num,json=rightNum,proto3" json:"right_num,omitempty"`
	RightPrice         float64 `protobuf:"fixed64,21,opt,name=right_price,json=rightPrice,proto3" json:"right_price,omitempty"`
	Num                float64 `protobuf:"fixed64,22,opt,name=num,proto3" json:"num,omitempty"`
	Num2               float64 `protobuf:"fixed64,23,opt,name=num2,proto3" json:"num2,omitempty"`
	RightCost          float64 `protobuf:"fixed64,24,opt,name=right_cost,json=rightCost,proto3" json:"right_cost,omitempty"`
	BrandNo            string  `protobuf:"bytes,25,opt,name=brand_no,json=brandNo,proto3" json:"brand_no,omitempty"`
	BrandName          string  `protobuf:"bytes,26,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`
	GoodsName          string  `protobuf:"bytes,27,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	Prop1              string  `protobuf:"bytes,28,opt,name=prop1,proto3" json:"prop1,omitempty"`
	Prop2              string  `protobuf:"bytes,29,opt,name=prop2,proto3" json:"prop2,omitempty"`
	Prop3              string  `protobuf:"bytes,30,opt,name=prop3,proto3" json:"prop3,omitempty"`
	Prop4              string  `protobuf:"bytes,31,opt,name=prop4,proto3" json:"prop4,omitempty"`
	Prop5              string  `protobuf:"bytes,32,opt,name=prop5,proto3" json:"prop5,omitempty"`
	Prop6              string  `protobuf:"bytes,33,opt,name=prop6,proto3" json:"prop6,omitempty"`
	GoodProp1          string  `protobuf:"bytes,34,opt,name=good_prop1,json=goodProp1,proto3" json:"good_prop1,omitempty"`
	GoodProp2          string  `protobuf:"bytes,35,opt,name=good_prop2,json=goodProp2,proto3" json:"good_prop2,omitempty"`
	GoodProp3          string  `protobuf:"bytes,36,opt,name=good_prop3,json=goodProp3,proto3" json:"good_prop3,omitempty"`
	GoodProp4          string  `protobuf:"bytes,37,opt,name=good_prop4,json=goodProp4,proto3" json:"good_prop4,omitempty"`
	GoodProp5          string  `protobuf:"bytes,38,opt,name=good_prop5,json=goodProp5,proto3" json:"good_prop5,omitempty"`
	GoodProp6          string  `protobuf:"bytes,39,opt,name=good_prop6,json=goodProp6,proto3" json:"good_prop6,omitempty"`
	GoodsNo            string  `protobuf:"bytes,40,opt,name=goods_no,json=goodsNo,proto3" json:"goods_no,omitempty"`
	SpecName           string  `protobuf:"bytes,41,opt,name=spec_name,json=specName,proto3" json:"spec_name,omitempty"`
	SpecCode           string  `protobuf:"bytes,42,opt,name=spec_code,json=specCode,proto3" json:"spec_code,omitempty"`
	GoodsUnit          string  `protobuf:"bytes,43,opt,name=goods_unit,json=goodsUnit,proto3" json:"goods_unit,omitempty"`
	BatchNo            string  `protobuf:"bytes,44,opt,name=batch_no,json=batchNo,proto3" json:"batch_no,omitempty"`
	BatchRemark        string  `protobuf:"bytes,45,opt,name=batch_remark,json=batchRemark,proto3" json:"batch_remark,omitempty"`
	PositionNo         string  `protobuf:"bytes,46,opt,name=position_no,json=positionNo,proto3" json:"position_no,omitempty"`
	Tid                string  `protobuf:"bytes,47,opt,name=tid,proto3" json:"tid,omitempty"`
	Oid                string  `protobuf:"bytes,48,opt,name=oid,proto3" json:"oid,omitempty"`
	SrcOrderType       int32   `protobuf:"varint,49,opt,name=src_order_type,json=srcOrderType,proto3" json:"src_order_type,omitempty"`
	OrgStockinDetailId *int32  `protobuf:"varint,50,opt,name=org_stockin_detail_id,json=orgStockinDetailId,proto3,oneof" json:"org_stockin_detail_id,omitempty"`
	SpecId             *int32  `protobuf:"varint,51,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	BatchId            *int32  `protobuf:"varint,52,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	PositionId         *int32  `protobuf:"varint,53,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	UnitId             *int32  `protobuf:"varint,54,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId         *int32  `protobuf:"varint,55,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitRatio          float64 `protobuf:"fixed64,56,opt,name=unit_ratio,json=unitRatio,proto3" json:"unit_ratio,omitempty"`
	ExpectNum          float64 `protobuf:"fixed64,57,opt,name=expect_num,json=expectNum,proto3" json:"expect_num,omitempty"`
	CostPrice2         float64 `protobuf:"fixed64,58,opt,name=cost_price2,json=costPrice2,proto3" json:"cost_price2,omitempty"`
	SharePostCost      float64 `protobuf:"fixed64,59,opt,name=share_post_cost,json=sharePostCost,proto3" json:"share_post_cost,omitempty"`
	SharePostTotal     float64 `protobuf:"fixed64,60,opt,name=share_post_total,json=sharePostTotal,proto3" json:"share_post_total,omitempty"`
	Modified           *string `protobuf:"bytes,61,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created            *string `protobuf:"bytes,62,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Price              float64 `protobuf:"fixed64,63,opt,name=price,proto3" json:"price,omitempty"`
	Barcode            string  `protobuf:"bytes,64,opt,name=barcode,proto3" json:"barcode,omitempty"`
}

func (x *TradeRefundStockinDetailsResponse) Reset() {
	*x = TradeRefundStockinDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinDetailsResponse) ProtoMessage() {}

func (x *TradeRefundStockinDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinDetailsResponse.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinDetailsResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{141}
}

func (x *TradeRefundStockinDetailsResponse) GetRecId() int32 {
	if x != nil {
		return x.RecId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetStockinId() int32 {
	if x != nil && x.StockinId != nil {
		return *x.StockinId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetSrcOrderDetailId() int32 {
	if x != nil && x.SrcOrderDetailId != nil {
		return *x.SrcOrderDetailId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetSuiteNo() string {
	if x != nil {
		return x.SuiteNo
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetCostPrice() float64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetProductionDate() string {
	if x != nil && x.ProductionDate != nil {
		return *x.ProductionDate
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetValidityDays() int32 {
	if x != nil && x.ValidityDays != nil {
		return *x.ValidityDays
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetSrcPrice() float64 {
	if x != nil {
		return x.SrcPrice
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetTaxPrice() float64 {
	if x != nil {
		return x.TaxPrice
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetAdjustNum() float64 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetAdjustPrice() float64 {
	if x != nil {
		return x.AdjustPrice
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetRightNum() float64 {
	if x != nil {
		return x.RightNum
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetRightPrice() float64 {
	if x != nil {
		return x.RightPrice
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetNum2() float64 {
	if x != nil {
		return x.Num2
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetRightCost() float64 {
	if x != nil {
		return x.RightCost
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetBrandNo() string {
	if x != nil {
		return x.BrandNo
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetProp1() string {
	if x != nil {
		return x.Prop1
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetProp2() string {
	if x != nil {
		return x.Prop2
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetProp3() string {
	if x != nil {
		return x.Prop3
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetProp4() string {
	if x != nil {
		return x.Prop4
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetProp5() string {
	if x != nil {
		return x.Prop5
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetProp6() string {
	if x != nil {
		return x.Prop6
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodProp1() string {
	if x != nil {
		return x.GoodProp1
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodProp2() string {
	if x != nil {
		return x.GoodProp2
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodProp3() string {
	if x != nil {
		return x.GoodProp3
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodProp4() string {
	if x != nil {
		return x.GoodProp4
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodProp5() string {
	if x != nil {
		return x.GoodProp5
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodProp6() string {
	if x != nil {
		return x.GoodProp6
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodsNo() string {
	if x != nil {
		return x.GoodsNo
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetSpecName() string {
	if x != nil {
		return x.SpecName
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetSpecCode() string {
	if x != nil {
		return x.SpecCode
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetGoodsUnit() string {
	if x != nil {
		return x.GoodsUnit
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetBatchNo() string {
	if x != nil {
		return x.BatchNo
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetBatchRemark() string {
	if x != nil {
		return x.BatchRemark
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetPositionNo() string {
	if x != nil {
		return x.PositionNo
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetSrcOrderType() int32 {
	if x != nil {
		return x.SrcOrderType
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetOrgStockinDetailId() int32 {
	if x != nil && x.OrgStockinDetailId != nil {
		return *x.OrgStockinDetailId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetPositionId() int32 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetUnitRatio() float64 {
	if x != nil {
		return x.UnitRatio
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetExpectNum() float64 {
	if x != nil {
		return x.ExpectNum
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetCostPrice2() float64 {
	if x != nil {
		return x.CostPrice2
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetSharePostCost() float64 {
	if x != nil {
		return x.SharePostCost
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetSharePostTotal() float64 {
	if x != nil {
		return x.SharePostTotal
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TradeRefundStockinDetailsResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeRefundStockinDetailsResponse) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

type TradeRefundStockinListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *TradeRefundStockinListRequest) Reset() {
	*x = TradeRefundStockinListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinListRequest) ProtoMessage() {}

func (x *TradeRefundStockinListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinListRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinListRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{142}
}

func (x *TradeRefundStockinListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *TradeRefundStockinListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type TradeRefundStockinListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TradeRefundStockinResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TradeRefundStockinListResponse) Reset() {
	*x = TradeRefundStockinListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinListResponse) ProtoMessage() {}

func (x *TradeRefundStockinListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinListResponse.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinListResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{143}
}

func (x *TradeRefundStockinListResponse) GetResults() []*TradeRefundStockinResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TradeRefundStockinListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TradeRefundStockinPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId            int32    `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3" json:"stockin_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	OrderNo              string   `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	WarehouseNo          string   `protobuf:"bytes,4,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName        string   `protobuf:"bytes,5,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ShopNo               string   `protobuf:"bytes,6,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopRemark           string   `protobuf:"bytes,7,opt,name=shop_remark,json=shopRemark,proto3" json:"shop_remark,omitempty"`
	SrcOrderNo           string   `protobuf:"bytes,8,opt,name=src_order_no,json=srcOrderNo,proto3" json:"src_order_no,omitempty"`
	ProcessStatus        int32    `protobuf:"varint,9,opt,name=process_status,json=processStatus,proto3" json:"process_status,omitempty"`
	Status               int32    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	StockinTime          *string  `protobuf:"bytes,11,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime          *string  `protobuf:"bytes,12,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	AssociatedTime       *string  `protobuf:"bytes,13,opt,name=associated_time,json=associatedTime,proto3,oneof" json:"associated_time,omitempty"`
	Remark               string   `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	TradeNo              string   `protobuf:"bytes,15,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	TradeAggNo           *string  `protobuf:"bytes,16,opt,name=trade_agg_no,json=tradeAggNo,proto3,oneof" json:"trade_agg_no,omitempty"`
	TradeType            string   `protobuf:"bytes,17,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	OrderType            int32    `protobuf:"varint,18,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderTypeName        string   `protobuf:"bytes,19,opt,name=order_type_name,json=orderTypeName,proto3" json:"order_type_name,omitempty"`
	GoodsCount           float64  `protobuf:"fixed64,20,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount          float64  `protobuf:"fixed64,21,opt,name=goods_amount,json=goodsAmount,proto3" json:"goods_amount,omitempty"`
	ActualRefundAmount   float64  `protobuf:"fixed64,22,opt,name=actual_refund_amount,json=actualRefundAmount,proto3" json:"actual_refund_amount,omitempty"`
	TotalPrice           float64  `protobuf:"fixed64,23,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	Discount             float64  `protobuf:"fixed64,24,opt,name=discount,proto3" json:"discount,omitempty"`
	TaxAmount            float64  `protobuf:"fixed64,25,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	PostFee              float64  `protobuf:"fixed64,26,opt,name=post_fee,json=postFee,proto3" json:"post_fee,omitempty"`
	OtherFee             float64  `protobuf:"fixed64,27,opt,name=other_fee,json=otherFee,proto3" json:"other_fee,omitempty"`
	AdjustPrice          float64  `protobuf:"fixed64,28,opt,name=adjust_price,json=adjustPrice,proto3" json:"adjust_price,omitempty"`
	RightPrice           float64  `protobuf:"fixed64,29,opt,name=right_price,json=rightPrice,proto3" json:"right_price,omitempty"`
	LogisticsType        *int32   `protobuf:"varint,30,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo          string   `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
	LogisticsName        string   `protobuf:"bytes,32,opt,name=logistics_name,json=logisticsName,proto3" json:"logistics_name,omitempty"`
	LogisticsCode        string   `protobuf:"bytes,33,opt,name=logistics_code,json=logisticsCode,proto3" json:"logistics_code,omitempty"`
	RefundNo             string   `protobuf:"bytes,34,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	CheckTime            *string  `protobuf:"bytes,35,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CustomerNo           string   `protobuf:"bytes,36,opt,name=customer_no,json=customerNo,proto3" json:"customer_no,omitempty"`
	CustomerName         string   `protobuf:"bytes,37,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	NickName             string   `protobuf:"bytes,38,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	ShopName             string   `protobuf:"bytes,39,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	FenxiaoNick          string   `protobuf:"bytes,40,opt,name=fenxiao_nick,json=fenxiaoNick,proto3" json:"fenxiao_nick,omitempty"`
	FenxiaoNickNo        string   `protobuf:"bytes,41,opt,name=fenxiao_nick_no,json=fenxiaoNickNo,proto3" json:"fenxiao_nick_no,omitempty"`
	Reason               string   `protobuf:"bytes,42,opt,name=reason,proto3" json:"reason,omitempty"`
	StockinReason        string   `protobuf:"bytes,43,opt,name=stockin_reason,json=stockinReason,proto3" json:"stockin_reason,omitempty"`
	FlagName             string   `protobuf:"bytes,44,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
	PlatformId           *int32   `protobuf:"varint,45,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	Tid                  string   `protobuf:"bytes,46,opt,name=tid,proto3" json:"tid,omitempty"`
	StockinOperatorName  string   `protobuf:"bytes,47,opt,name=stockin_operator_name,json=stockinOperatorName,proto3" json:"stockin_operator_name,omitempty"`
	CheckOperatorName    string   `protobuf:"bytes,48,opt,name=check_operator_name,json=checkOperatorName,proto3" json:"check_operator_name,omitempty"`
	RefundRemark         string   `protobuf:"bytes,49,opt,name=refund_remark,json=refundRemark,proto3" json:"refund_remark,omitempty"`
	RefundOperatorName   string   `protobuf:"bytes,50,opt,name=refund_operator_name,json=refundOperatorName,proto3" json:"refund_operator_name,omitempty"`
	StockinNo            string   `protobuf:"bytes,51,opt,name=stockin_no,json=stockinNo,proto3" json:"stockin_no,omitempty"`
	WmsOuterNo           string   `protobuf:"bytes,52,opt,name=wms_outer_no,json=wmsOuterNo,proto3" json:"wms_outer_no,omitempty"`
	WmsStatus            int32    `protobuf:"varint,53,opt,name=wms_status,json=wmsStatus,proto3" json:"wms_status,omitempty"`
	WmsResult            string   `protobuf:"bytes,54,opt,name=wms_result,json=wmsResult,proto3" json:"wms_result,omitempty"`
	WarehouseId          *int32   `protobuf:"varint,55,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType         int32    `protobuf:"varint,56,opt,name=src_order_type,json=srcOrderType,proto3" json:"src_order_type,omitempty"`
	SrcOrderId           *int32   `protobuf:"varint,57,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId             *int32   `protobuf:"varint,58,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus             int32    `protobuf:"varint,59,opt,name=fa_status,json=faStatus,proto3" json:"fa_status,omitempty"`
	LogisticsId          *int32   `protobuf:"varint,60,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType        *int32   `protobuf:"varint,61,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId           string   `protobuf:"bytes,62,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	CheckOperatorId      string   `protobuf:"bytes,63,opt,name=check_operator_id,json=checkOperatorId,proto3" json:"check_operator_id,omitempty"`
	GoodsTypeCount       *int32   `protobuf:"varint,64,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	AdjustNum            float64  `protobuf:"fixed64,65,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	NoteCount            *int32   `protobuf:"varint,66,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId               *int32   `protobuf:"varint,67,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified             *string  `protobuf:"bytes,68,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
}

func (x *TradeRefundStockinPartialUpdateRequest) Reset() {
	*x = TradeRefundStockinPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinPartialUpdateRequest) ProtoMessage() {}

func (x *TradeRefundStockinPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{144}
}

func (x *TradeRefundStockinPartialUpdateRequest) GetStockinId() int32 {
	if x != nil {
		return x.StockinId
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *TradeRefundStockinPartialUpdateRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetShopRemark() string {
	if x != nil {
		return x.ShopRemark
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetSrcOrderNo() string {
	if x != nil {
		return x.SrcOrderNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetProcessStatus() int32 {
	if x != nil {
		return x.ProcessStatus
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetAssociatedTime() string {
	if x != nil && x.AssociatedTime != nil {
		return *x.AssociatedTime
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetTradeAggNo() string {
	if x != nil && x.TradeAggNo != nil {
		return *x.TradeAggNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetOrderTypeName() string {
	if x != nil {
		return x.OrderTypeName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetGoodsAmount() float64 {
	if x != nil {
		return x.GoodsAmount
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetActualRefundAmount() float64 {
	if x != nil {
		return x.ActualRefundAmount
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetPostFee() float64 {
	if x != nil {
		return x.PostFee
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetOtherFee() float64 {
	if x != nil {
		return x.OtherFee
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetAdjustPrice() float64 {
	if x != nil {
		return x.AdjustPrice
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetRightPrice() float64 {
	if x != nil {
		return x.RightPrice
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetLogisticsName() string {
	if x != nil {
		return x.LogisticsName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetLogisticsCode() string {
	if x != nil {
		return x.LogisticsCode
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetCustomerNo() string {
	if x != nil {
		return x.CustomerNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetFenxiaoNick() string {
	if x != nil {
		return x.FenxiaoNick
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetFenxiaoNickNo() string {
	if x != nil {
		return x.FenxiaoNickNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetStockinReason() string {
	if x != nil {
		return x.StockinReason
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetStockinOperatorName() string {
	if x != nil {
		return x.StockinOperatorName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetCheckOperatorName() string {
	if x != nil {
		return x.CheckOperatorName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetRefundRemark() string {
	if x != nil {
		return x.RefundRemark
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetRefundOperatorName() string {
	if x != nil {
		return x.RefundOperatorName
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetStockinNo() string {
	if x != nil {
		return x.StockinNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetWmsOuterNo() string {
	if x != nil {
		return x.WmsOuterNo
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetWmsStatus() int32 {
	if x != nil {
		return x.WmsStatus
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetWmsResult() string {
	if x != nil {
		return x.WmsResult
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetSrcOrderType() int32 {
	if x != nil {
		return x.SrcOrderType
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetFaStatus() int32 {
	if x != nil {
		return x.FaStatus
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetCheckOperatorId() string {
	if x != nil {
		return x.CheckOperatorId
	}
	return ""
}

func (x *TradeRefundStockinPartialUpdateRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetAdjustNum() float64 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *TradeRefundStockinPartialUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

type TradeRefundStockinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId           int32   `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3" json:"stockin_id,omitempty"`
	OrderNo             string  `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	WarehouseNo         string  `protobuf:"bytes,3,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName       string  `protobuf:"bytes,4,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ShopNo              string  `protobuf:"bytes,5,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopRemark          string  `protobuf:"bytes,6,opt,name=shop_remark,json=shopRemark,proto3" json:"shop_remark,omitempty"`
	SrcOrderNo          string  `protobuf:"bytes,7,opt,name=src_order_no,json=srcOrderNo,proto3" json:"src_order_no,omitempty"`
	ProcessStatus       int32   `protobuf:"varint,8,opt,name=process_status,json=processStatus,proto3" json:"process_status,omitempty"`
	Status              int32   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	StockinTime         *string `protobuf:"bytes,10,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime         *string `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	AssociatedTime      *string `protobuf:"bytes,12,opt,name=associated_time,json=associatedTime,proto3,oneof" json:"associated_time,omitempty"`
	Remark              string  `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	TradeNo             string  `protobuf:"bytes,14,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	TradeAggNo          *string `protobuf:"bytes,15,opt,name=trade_agg_no,json=tradeAggNo,proto3,oneof" json:"trade_agg_no,omitempty"`
	TradeType           string  `protobuf:"bytes,16,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	OrderType           int32   `protobuf:"varint,17,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderTypeName       string  `protobuf:"bytes,18,opt,name=order_type_name,json=orderTypeName,proto3" json:"order_type_name,omitempty"`
	GoodsCount          float64 `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount         float64 `protobuf:"fixed64,20,opt,name=goods_amount,json=goodsAmount,proto3" json:"goods_amount,omitempty"`
	ActualRefundAmount  float64 `protobuf:"fixed64,21,opt,name=actual_refund_amount,json=actualRefundAmount,proto3" json:"actual_refund_amount,omitempty"`
	TotalPrice          float64 `protobuf:"fixed64,22,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	Discount            float64 `protobuf:"fixed64,23,opt,name=discount,proto3" json:"discount,omitempty"`
	TaxAmount           float64 `protobuf:"fixed64,24,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	PostFee             float64 `protobuf:"fixed64,25,opt,name=post_fee,json=postFee,proto3" json:"post_fee,omitempty"`
	OtherFee            float64 `protobuf:"fixed64,26,opt,name=other_fee,json=otherFee,proto3" json:"other_fee,omitempty"`
	AdjustPrice         float64 `protobuf:"fixed64,27,opt,name=adjust_price,json=adjustPrice,proto3" json:"adjust_price,omitempty"`
	RightPrice          float64 `protobuf:"fixed64,28,opt,name=right_price,json=rightPrice,proto3" json:"right_price,omitempty"`
	LogisticsType       *int32  `protobuf:"varint,29,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo         string  `protobuf:"bytes,30,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
	LogisticsName       string  `protobuf:"bytes,31,opt,name=logistics_name,json=logisticsName,proto3" json:"logistics_name,omitempty"`
	LogisticsCode       string  `protobuf:"bytes,32,opt,name=logistics_code,json=logisticsCode,proto3" json:"logistics_code,omitempty"`
	RefundNo            string  `protobuf:"bytes,33,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	CheckTime           *string `protobuf:"bytes,34,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CustomerNo          string  `protobuf:"bytes,35,opt,name=customer_no,json=customerNo,proto3" json:"customer_no,omitempty"`
	CustomerName        string  `protobuf:"bytes,36,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	NickName            string  `protobuf:"bytes,37,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	ShopName            string  `protobuf:"bytes,38,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	FenxiaoNick         string  `protobuf:"bytes,39,opt,name=fenxiao_nick,json=fenxiaoNick,proto3" json:"fenxiao_nick,omitempty"`
	FenxiaoNickNo       string  `protobuf:"bytes,40,opt,name=fenxiao_nick_no,json=fenxiaoNickNo,proto3" json:"fenxiao_nick_no,omitempty"`
	Reason              string  `protobuf:"bytes,41,opt,name=reason,proto3" json:"reason,omitempty"`
	StockinReason       string  `protobuf:"bytes,42,opt,name=stockin_reason,json=stockinReason,proto3" json:"stockin_reason,omitempty"`
	FlagName            string  `protobuf:"bytes,43,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
	PlatformId          *int32  `protobuf:"varint,44,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	Tid                 string  `protobuf:"bytes,45,opt,name=tid,proto3" json:"tid,omitempty"`
	StockinOperatorName string  `protobuf:"bytes,46,opt,name=stockin_operator_name,json=stockinOperatorName,proto3" json:"stockin_operator_name,omitempty"`
	CheckOperatorName   string  `protobuf:"bytes,47,opt,name=check_operator_name,json=checkOperatorName,proto3" json:"check_operator_name,omitempty"`
	RefundRemark        string  `protobuf:"bytes,48,opt,name=refund_remark,json=refundRemark,proto3" json:"refund_remark,omitempty"`
	RefundOperatorName  string  `protobuf:"bytes,49,opt,name=refund_operator_name,json=refundOperatorName,proto3" json:"refund_operator_name,omitempty"`
	StockinNo           string  `protobuf:"bytes,50,opt,name=stockin_no,json=stockinNo,proto3" json:"stockin_no,omitempty"`
	WmsOuterNo          string  `protobuf:"bytes,51,opt,name=wms_outer_no,json=wmsOuterNo,proto3" json:"wms_outer_no,omitempty"`
	WmsStatus           int32   `protobuf:"varint,52,opt,name=wms_status,json=wmsStatus,proto3" json:"wms_status,omitempty"`
	WmsResult           string  `protobuf:"bytes,53,opt,name=wms_result,json=wmsResult,proto3" json:"wms_result,omitempty"`
	WarehouseId         *int32  `protobuf:"varint,54,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType        int32   `protobuf:"varint,55,opt,name=src_order_type,json=srcOrderType,proto3" json:"src_order_type,omitempty"`
	SrcOrderId          *int32  `protobuf:"varint,56,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId            *int32  `protobuf:"varint,57,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus            int32   `protobuf:"varint,58,opt,name=fa_status,json=faStatus,proto3" json:"fa_status,omitempty"`
	LogisticsId         *int32  `protobuf:"varint,59,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType       *int32  `protobuf:"varint,60,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId          string  `protobuf:"bytes,61,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	CheckOperatorId     string  `protobuf:"bytes,62,opt,name=check_operator_id,json=checkOperatorId,proto3" json:"check_operator_id,omitempty"`
	GoodsTypeCount      *int32  `protobuf:"varint,63,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	AdjustNum           float64 `protobuf:"fixed64,64,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	NoteCount           *int32  `protobuf:"varint,65,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId              *int32  `protobuf:"varint,66,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified            *string `protobuf:"bytes,67,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
}

func (x *TradeRefundStockinRequest) Reset() {
	*x = TradeRefundStockinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinRequest) ProtoMessage() {}

func (x *TradeRefundStockinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{145}
}

func (x *TradeRefundStockinRequest) GetStockinId() int32 {
	if x != nil {
		return x.StockinId
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetShopRemark() string {
	if x != nil {
		return x.ShopRemark
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetSrcOrderNo() string {
	if x != nil {
		return x.SrcOrderNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetProcessStatus() int32 {
	if x != nil {
		return x.ProcessStatus
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetAssociatedTime() string {
	if x != nil && x.AssociatedTime != nil {
		return *x.AssociatedTime
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetTradeAggNo() string {
	if x != nil && x.TradeAggNo != nil {
		return *x.TradeAggNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetOrderTypeName() string {
	if x != nil {
		return x.OrderTypeName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetGoodsAmount() float64 {
	if x != nil {
		return x.GoodsAmount
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetActualRefundAmount() float64 {
	if x != nil {
		return x.ActualRefundAmount
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetPostFee() float64 {
	if x != nil {
		return x.PostFee
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetOtherFee() float64 {
	if x != nil {
		return x.OtherFee
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetAdjustPrice() float64 {
	if x != nil {
		return x.AdjustPrice
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetRightPrice() float64 {
	if x != nil {
		return x.RightPrice
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetLogisticsName() string {
	if x != nil {
		return x.LogisticsName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetLogisticsCode() string {
	if x != nil {
		return x.LogisticsCode
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetCustomerNo() string {
	if x != nil {
		return x.CustomerNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetFenxiaoNick() string {
	if x != nil {
		return x.FenxiaoNick
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetFenxiaoNickNo() string {
	if x != nil {
		return x.FenxiaoNickNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetStockinReason() string {
	if x != nil {
		return x.StockinReason
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetStockinOperatorName() string {
	if x != nil {
		return x.StockinOperatorName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetCheckOperatorName() string {
	if x != nil {
		return x.CheckOperatorName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetRefundRemark() string {
	if x != nil {
		return x.RefundRemark
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetRefundOperatorName() string {
	if x != nil {
		return x.RefundOperatorName
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetStockinNo() string {
	if x != nil {
		return x.StockinNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetWmsOuterNo() string {
	if x != nil {
		return x.WmsOuterNo
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetWmsStatus() int32 {
	if x != nil {
		return x.WmsStatus
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetWmsResult() string {
	if x != nil {
		return x.WmsResult
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetSrcOrderType() int32 {
	if x != nil {
		return x.SrcOrderType
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetFaStatus() int32 {
	if x != nil {
		return x.FaStatus
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetCheckOperatorId() string {
	if x != nil {
		return x.CheckOperatorId
	}
	return ""
}

func (x *TradeRefundStockinRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetAdjustNum() float64 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *TradeRefundStockinRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

type TradeRefundStockinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId           int32                                `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3" json:"stockin_id,omitempty"`
	DetailsList         []*TradeRefundStockinDetailsResponse `protobuf:"bytes,2,rep,name=details_list,json=detailsList,proto3" json:"details_list,omitempty"`
	OrderNo             string                               `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	WarehouseNo         string                               `protobuf:"bytes,4,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName       string                               `protobuf:"bytes,5,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ShopNo              string                               `protobuf:"bytes,6,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopRemark          string                               `protobuf:"bytes,7,opt,name=shop_remark,json=shopRemark,proto3" json:"shop_remark,omitempty"`
	SrcOrderNo          string                               `protobuf:"bytes,8,opt,name=src_order_no,json=srcOrderNo,proto3" json:"src_order_no,omitempty"`
	ProcessStatus       int32                                `protobuf:"varint,9,opt,name=process_status,json=processStatus,proto3" json:"process_status,omitempty"`
	Status              int32                                `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	StockinTime         *string                              `protobuf:"bytes,11,opt,name=stockin_time,json=stockinTime,proto3,oneof" json:"stockin_time,omitempty"`
	CreatedTime         *string                              `protobuf:"bytes,12,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	AssociatedTime      *string                              `protobuf:"bytes,13,opt,name=associated_time,json=associatedTime,proto3,oneof" json:"associated_time,omitempty"`
	Remark              string                               `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	TradeNo             string                               `protobuf:"bytes,15,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	TradeAggNo          *string                              `protobuf:"bytes,16,opt,name=trade_agg_no,json=tradeAggNo,proto3,oneof" json:"trade_agg_no,omitempty"`
	TradeType           string                               `protobuf:"bytes,17,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	OrderType           int32                                `protobuf:"varint,18,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderTypeName       string                               `protobuf:"bytes,19,opt,name=order_type_name,json=orderTypeName,proto3" json:"order_type_name,omitempty"`
	GoodsCount          float64                              `protobuf:"fixed64,20,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount         float64                              `protobuf:"fixed64,21,opt,name=goods_amount,json=goodsAmount,proto3" json:"goods_amount,omitempty"`
	ActualRefundAmount  float64                              `protobuf:"fixed64,22,opt,name=actual_refund_amount,json=actualRefundAmount,proto3" json:"actual_refund_amount,omitempty"`
	TotalPrice          float64                              `protobuf:"fixed64,23,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	Discount            float64                              `protobuf:"fixed64,24,opt,name=discount,proto3" json:"discount,omitempty"`
	TaxAmount           float64                              `protobuf:"fixed64,25,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	PostFee             float64                              `protobuf:"fixed64,26,opt,name=post_fee,json=postFee,proto3" json:"post_fee,omitempty"`
	OtherFee            float64                              `protobuf:"fixed64,27,opt,name=other_fee,json=otherFee,proto3" json:"other_fee,omitempty"`
	AdjustPrice         float64                              `protobuf:"fixed64,28,opt,name=adjust_price,json=adjustPrice,proto3" json:"adjust_price,omitempty"`
	RightPrice          float64                              `protobuf:"fixed64,29,opt,name=right_price,json=rightPrice,proto3" json:"right_price,omitempty"`
	LogisticsType       *int32                               `protobuf:"varint,30,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo         string                               `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
	LogisticsName       string                               `protobuf:"bytes,32,opt,name=logistics_name,json=logisticsName,proto3" json:"logistics_name,omitempty"`
	LogisticsCode       string                               `protobuf:"bytes,33,opt,name=logistics_code,json=logisticsCode,proto3" json:"logistics_code,omitempty"`
	RefundNo            string                               `protobuf:"bytes,34,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	CheckTime           *string                              `protobuf:"bytes,35,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	CustomerNo          string                               `protobuf:"bytes,36,opt,name=customer_no,json=customerNo,proto3" json:"customer_no,omitempty"`
	CustomerName        string                               `protobuf:"bytes,37,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	NickName            string                               `protobuf:"bytes,38,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	ShopName            string                               `protobuf:"bytes,39,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	FenxiaoNick         string                               `protobuf:"bytes,40,opt,name=fenxiao_nick,json=fenxiaoNick,proto3" json:"fenxiao_nick,omitempty"`
	FenxiaoNickNo       string                               `protobuf:"bytes,41,opt,name=fenxiao_nick_no,json=fenxiaoNickNo,proto3" json:"fenxiao_nick_no,omitempty"`
	Reason              string                               `protobuf:"bytes,42,opt,name=reason,proto3" json:"reason,omitempty"`
	StockinReason       string                               `protobuf:"bytes,43,opt,name=stockin_reason,json=stockinReason,proto3" json:"stockin_reason,omitempty"`
	FlagName            string                               `protobuf:"bytes,44,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
	PlatformId          *int32                               `protobuf:"varint,45,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	Tid                 string                               `protobuf:"bytes,46,opt,name=tid,proto3" json:"tid,omitempty"`
	StockinOperatorName string                               `protobuf:"bytes,47,opt,name=stockin_operator_name,json=stockinOperatorName,proto3" json:"stockin_operator_name,omitempty"`
	CheckOperatorName   string                               `protobuf:"bytes,48,opt,name=check_operator_name,json=checkOperatorName,proto3" json:"check_operator_name,omitempty"`
	RefundRemark        string                               `protobuf:"bytes,49,opt,name=refund_remark,json=refundRemark,proto3" json:"refund_remark,omitempty"`
	RefundOperatorName  string                               `protobuf:"bytes,50,opt,name=refund_operator_name,json=refundOperatorName,proto3" json:"refund_operator_name,omitempty"`
	StockinNo           string                               `protobuf:"bytes,51,opt,name=stockin_no,json=stockinNo,proto3" json:"stockin_no,omitempty"`
	WmsOuterNo          string                               `protobuf:"bytes,52,opt,name=wms_outer_no,json=wmsOuterNo,proto3" json:"wms_outer_no,omitempty"`
	WmsStatus           int32                                `protobuf:"varint,53,opt,name=wms_status,json=wmsStatus,proto3" json:"wms_status,omitempty"`
	WmsResult           string                               `protobuf:"bytes,54,opt,name=wms_result,json=wmsResult,proto3" json:"wms_result,omitempty"`
	WarehouseId         *int32                               `protobuf:"varint,55,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	SrcOrderType        int32                                `protobuf:"varint,56,opt,name=src_order_type,json=srcOrderType,proto3" json:"src_order_type,omitempty"`
	SrcOrderId          *int32                               `protobuf:"varint,57,opt,name=src_order_id,json=srcOrderId,proto3,oneof" json:"src_order_id,omitempty"`
	ReasonId            *int32                               `protobuf:"varint,58,opt,name=reason_id,json=reasonId,proto3,oneof" json:"reason_id,omitempty"`
	FaStatus            int32                                `protobuf:"varint,59,opt,name=fa_status,json=faStatus,proto3" json:"fa_status,omitempty"`
	LogisticsId         *int32                               `protobuf:"varint,60,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	PostShareType       *int32                               `protobuf:"varint,61,opt,name=post_share_type,json=postShareType,proto3,oneof" json:"post_share_type,omitempty"`
	OperatorId          string                               `protobuf:"bytes,62,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	CheckOperatorId     string                               `protobuf:"bytes,63,opt,name=check_operator_id,json=checkOperatorId,proto3" json:"check_operator_id,omitempty"`
	GoodsTypeCount      *int32                               `protobuf:"varint,64,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	AdjustNum           float64                              `protobuf:"fixed64,65,opt,name=adjust_num,json=adjustNum,proto3" json:"adjust_num,omitempty"`
	NoteCount           *int32                               `protobuf:"varint,66,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId              *int32                               `protobuf:"varint,67,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified            *string                              `protobuf:"bytes,68,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
}

func (x *TradeRefundStockinResponse) Reset() {
	*x = TradeRefundStockinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinResponse) ProtoMessage() {}

func (x *TradeRefundStockinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinResponse.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinResponse) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{146}
}

func (x *TradeRefundStockinResponse) GetStockinId() int32 {
	if x != nil {
		return x.StockinId
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetDetailsList() []*TradeRefundStockinDetailsResponse {
	if x != nil {
		return x.DetailsList
	}
	return nil
}

func (x *TradeRefundStockinResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetShopRemark() string {
	if x != nil {
		return x.ShopRemark
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetSrcOrderNo() string {
	if x != nil {
		return x.SrcOrderNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetProcessStatus() int32 {
	if x != nil {
		return x.ProcessStatus
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetStockinTime() string {
	if x != nil && x.StockinTime != nil {
		return *x.StockinTime
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetAssociatedTime() string {
	if x != nil && x.AssociatedTime != nil {
		return *x.AssociatedTime
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetTradeAggNo() string {
	if x != nil && x.TradeAggNo != nil {
		return *x.TradeAggNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetOrderTypeName() string {
	if x != nil {
		return x.OrderTypeName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetGoodsAmount() float64 {
	if x != nil {
		return x.GoodsAmount
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetActualRefundAmount() float64 {
	if x != nil {
		return x.ActualRefundAmount
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetPostFee() float64 {
	if x != nil {
		return x.PostFee
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetOtherFee() float64 {
	if x != nil {
		return x.OtherFee
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetAdjustPrice() float64 {
	if x != nil {
		return x.AdjustPrice
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetRightPrice() float64 {
	if x != nil {
		return x.RightPrice
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetLogisticsName() string {
	if x != nil {
		return x.LogisticsName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetLogisticsCode() string {
	if x != nil {
		return x.LogisticsCode
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetCustomerNo() string {
	if x != nil {
		return x.CustomerNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetFenxiaoNick() string {
	if x != nil {
		return x.FenxiaoNick
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetFenxiaoNickNo() string {
	if x != nil {
		return x.FenxiaoNickNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetStockinReason() string {
	if x != nil {
		return x.StockinReason
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetStockinOperatorName() string {
	if x != nil {
		return x.StockinOperatorName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetCheckOperatorName() string {
	if x != nil {
		return x.CheckOperatorName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetRefundRemark() string {
	if x != nil {
		return x.RefundRemark
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetRefundOperatorName() string {
	if x != nil {
		return x.RefundOperatorName
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetStockinNo() string {
	if x != nil {
		return x.StockinNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetWmsOuterNo() string {
	if x != nil {
		return x.WmsOuterNo
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetWmsStatus() int32 {
	if x != nil {
		return x.WmsStatus
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetWmsResult() string {
	if x != nil {
		return x.WmsResult
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetSrcOrderType() int32 {
	if x != nil {
		return x.SrcOrderType
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetSrcOrderId() int32 {
	if x != nil && x.SrcOrderId != nil {
		return *x.SrcOrderId
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetReasonId() int32 {
	if x != nil && x.ReasonId != nil {
		return *x.ReasonId
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetFaStatus() int32 {
	if x != nil {
		return x.FaStatus
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetPostShareType() int32 {
	if x != nil && x.PostShareType != nil {
		return *x.PostShareType
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetCheckOperatorId() string {
	if x != nil {
		return x.CheckOperatorId
	}
	return ""
}

func (x *TradeRefundStockinResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetAdjustNum() float64 {
	if x != nil {
		return x.AdjustNum
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *TradeRefundStockinResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

type TradeRefundStockinRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockinId int32 `protobuf:"varint,1,opt,name=stockin_id,json=stockinId,proto3" json:"stockin_id,omitempty"`
}

func (x *TradeRefundStockinRetrieveRequest) Reset() {
	*x = TradeRefundStockinRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kingdee_ito_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefundStockinRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefundStockinRetrieveRequest) ProtoMessage() {}

func (x *TradeRefundStockinRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kingdee_ito_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefundStockinRetrieveRequest.ProtoReflect.Descriptor instead.
func (*TradeRefundStockinRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_kingdee_ito_proto_rawDescGZIP(), []int{147}
}

func (x *TradeRefundStockinRetrieveRequest) GetStockinId() int32 {
	if x != nil {
		return x.StockinId
	}
	return 0
}

var File_kingdee_ito_proto protoreflect.FileDescriptor

var file_kingdee_ito_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x06, 0x0a, 0x1b,
	0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x1c, 0x41, 0x67, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x41, 0x67,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a,
	0x1a, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x22, 0xbc, 0x08, 0x0a, 0x16, 0x41, 0x67, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44,
	0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0c, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x1d, 0x41, 0x67, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd0, 0x06, 0x0a, 0x1b, 0x41, 0x67, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x41,
	0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x41, 0x67, 0x67,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50,
	0x75, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x57,
	0x61, 0x69, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x22,
	0x4a, 0x0a, 0x22, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x1f,
	0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x20, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad, 0x07, 0x0a, 0x28, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x5f, 0x6e,
	0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x4e,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x62, 0x69,
	0x7a, 0x4f, 0x72, 0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07,
	0x62, 0x69, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x13, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x6f, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x69,
	0x7a, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69,
	0x7a, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x06, 0x0a, 0x1b, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x64, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x44, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x11, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x6f, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x4e, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f,
	0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x4f,
	0x72, 0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x62, 0x69,
	0x7a, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x6f, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x69, 0x7a, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x7a, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xec, 0x06, 0x0a, 0x1c, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x64, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x44, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x11, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x6f, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x4e, 0x6f, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6e,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x4f, 0x72,
	0x69, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x62, 0x69, 0x7a,
	0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62,
	0x69, 0x7a, 0x5f, 0x6e, 0x6f, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x4b, 0x0a, 0x23, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x22, 0x60,
	0x0a, 0x25, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x6a, 0x0a, 0x26, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x23,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x24, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x1a, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x55, 0x0a, 0x19, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a,
	0x1c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1d,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x17,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xc8, 0x02,
	0x0a, 0x1c, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x2f, 0x0a, 0x1d, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x1a, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x23, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59,
	0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0xc2, 0x02, 0x0a, 0x16, 0x43,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22,
	0xc3, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59,
	0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x30, 0x0a, 0x1e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79,
	0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0xf8, 0x07, 0x0a, 0x0f, 0x46, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x08, 0x46, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x46, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53,
	0x41, 0x4c, 0x55, 0x4e, 0x49, 0x54, 0x51, 0x54, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x03, 0x52, 0x0b, 0x46, 0x53, 0x41, 0x4c, 0x55, 0x4e, 0x49, 0x54, 0x51, 0x54, 0x59, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x08, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x53, 0x41, 0x4c, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54,
	0x59, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0b, 0x46, 0x53, 0x41, 0x4c, 0x42,
	0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x06, 0x52, 0x0d, 0x46, 0x50, 0x52, 0x49, 0x43, 0x45, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54,
	0x59, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a, 0x4f,
	0x49, 0x4e, 0x51, 0x54, 0x59, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x46,
	0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a, 0x4f, 0x49, 0x4e, 0x51, 0x54, 0x59, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x46,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x46, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x46, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0b, 0x52, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f,
	0x72, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52,
	0x0e, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x07, 0x46, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x6e,
	0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52,
	0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x49, 0x44, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x46, 0x53, 0x41, 0x4c, 0x55, 0x4e, 0x49, 0x54, 0x51, 0x54, 0x59, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x46, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x53,
	0x41, 0x4c, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x42, 0x41, 0x53, 0x45, 0x51, 0x54, 0x59, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x46, 0x41, 0x52, 0x4e, 0x4f, 0x54, 0x4a, 0x4f, 0x49, 0x4e, 0x51, 0x54, 0x59, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f,
	0x72, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x49, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x6e, 0x6f, 0x74, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x7a, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49,
	0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x1d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x1c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x17, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x22, 0x64, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1d, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x1a,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x83, 0x01, 0x0a, 0x1b, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd7, 0x04, 0x0a, 0x23, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x16, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x14, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x15, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x64, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0c, 0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x22,
	0x95, 0x04, 0x0a, 0x16, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x14, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x15, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x77, 0x64,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x77, 0x64, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x22, 0x82, 0x05, 0x0a, 0x17, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x14, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x15, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x10, 0x77, 0x64, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x64, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0c, 0x77, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x64, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x64,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x22, 0x30, 0x0a, 0x1e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4,
	0x01, 0x0a, 0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xe0, 0x06, 0x0a, 0x1f, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x48, 0x65,
	0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x46, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x46, 0x5a, 0x42,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x46, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x46, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x46, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4e, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x41, 0x52,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09,
	0x46, 0x41, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46,
	0x5a, 0x42, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4e, 0x6f, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x41, 0x52, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xc9, 0x11, 0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0a, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x07, 0x61, 0x67, 0x67, 0x59, 0x65, 0x61,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x08, 0x61, 0x67, 0x67, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x07, 0x61, 0x67, 0x67, 0x57,
	0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x06, 0x61, 0x67, 0x67, 0x44, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x09, 0x61, 0x67, 0x67,
	0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x17, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0e,
	0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52,
	0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x61, 0x67,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1f, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20,
	0x52, 0x13, 0x61, 0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x21, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x61, 0x67, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x58, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x61, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x64, 0x69, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22, 0x3c, 0x0a, 0x23,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x20, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x0c, 0x0a, 0x29, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x61,
	0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x67, 0x67, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f,
	0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x61, 0x67,
	0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10, 0x61,
	0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x67, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x15, 0x61,
	0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x67,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x15,
	0x61, 0x67, 0x67, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x11, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x12, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x6f, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x97, 0x0c, 0x0a, 0x1c, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x67,
	0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x67, 0x67, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x2f, 0x0a,
	0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x11, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53,
	0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x67, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x15, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0e, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0f, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x15, 0x61, 0x67, 0x67, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0e, 0x61, 0x67, 0x67,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x13, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xf2, 0x0c, 0x0a,
	0x1d, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x67, 0x67, 0x4e, 0x6f, 0x12, 0x4e, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x11, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09,
	0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x18, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0e, 0x52, 0x15, 0x61, 0x67, 0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14,
	0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x11, 0x61, 0x67,
	0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x11, 0x52, 0x15, 0x61, 0x67, 0x67, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x15, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x6e, 0x6f, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x24, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x4e, 0x6f,
	0x22, 0x33, 0x0a, 0x18, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4e,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x22, 0x2f, 0x0a, 0x19, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x19, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x22, 0x30,
	0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x2c, 0x0a, 0x1a, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae,
	0x01, 0x0a, 0x17, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7d, 0x0a, 0x18, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8,
	0x0d, 0x0a, 0x20, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x61,
	0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x11,
	0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52,
	0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x13, 0x61, 0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61,
	0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x19, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xf6, 0x0c, 0x0a, 0x13, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x61, 0x67, 0x67, 0x53,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x10,
	0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x61, 0x67, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x11, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x67, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x11, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52,
	0x13, 0x61, 0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x18, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0xe3, 0x0d, 0x0a, 0x14, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x61, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x44, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61,
	0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x67, 0x67,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x09, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x53, 0x68, 0x6f, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x12, 0x52, 0x10, 0x61, 0x67, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x13, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0d, 0x61, 0x67, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x14, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x11, 0x61,
	0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0d,
	0x61, 0x67, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0e, 0x61, 0x67,
	0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x11,
	0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x13, 0x61, 0x67, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x50, 0x61, 0x69,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x17, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x72, 0x63, 0x54, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x05, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x08, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x4f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x08, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52,
	0x0b, 0x73, 0x75, 0x69, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x15, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x16, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x17, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0c, 0x61, 0x70,
	0x69, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x21, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x22, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x23, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x06, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x28, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x29, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a,
	0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x2c, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x0a, 0x69, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52,
	0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x01, 0x48, 0x31, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x48, 0x32, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x34, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x36, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x37, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x38, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x39, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x6f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x40, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x14, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10,
	0x61, 0x67, 0x67, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x69, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x16, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x18, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19,
	0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1b, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52,
	0x0d, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1d, 0x52, 0x11, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x1f, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x0b, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x21, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x22, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x64, 0x61, 0x70, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x09, 0x63,
	0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x25, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x29, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x61, 0x78, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2a, 0x52, 0x03, 0x74, 0x61, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2b, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x2e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x32, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x36, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x39, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3b, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x3f, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x41, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x74, 0x62, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x74, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45, 0x52, 0x08, 0x63, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x48, 0x46,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x09, 0x48, 0x47, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x48, 0x52, 0x0d, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x09, 0x62, 0x61, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4a,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x4c, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x4d, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4e, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4f, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x50, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x51, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x52, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x53, 0x52,
	0x13, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x09, 0x48, 0x54, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x55, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x48, 0x57, 0x52, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x58, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x59, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5a, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5b, 0x52,
	0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x5c, 0x52, 0x0a, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5d, 0x52, 0x0c,
	0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x5f, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x48, 0x60, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x48, 0x61, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x70, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x62, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x48, 0x63, 0x52,
	0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x48, 0x64, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65,
	0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x66, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x48, 0x67, 0x52, 0x0b, 0x75, 0x6e,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x68, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x69, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6a, 0x52, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6b, 0x52, 0x0d, 0x63, 0x73, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x63,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6c, 0x52, 0x13, 0x63,
	0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x6d,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x79, 0x18, 0x70, 0x20, 0x01, 0x28, 0x01, 0x48, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x01, 0x48, 0x6f,
	0x52, 0x08, 0x70, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x70, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x48, 0x71, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x48, 0x72, 0x52, 0x08, 0x67, 0x69,
	0x66, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x48, 0x74, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d,
	0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x48, 0x75, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x6e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x76, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x77, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x78, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7a, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x7b, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7c, 0x52,
	0x0a, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x54, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x7d, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7e,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x7f, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x80, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x81, 0x01,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x82, 0x01, 0x52, 0x0d, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x83, 0x01, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x84, 0x01, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x85, 0x01, 0x52,
	0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x86, 0x01, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x87, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x88, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x89,
	0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x8a, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8d,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x8b, 0x01, 0x52, 0x10, 0x61, 0x67, 0x67, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x8c, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x67,
	0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8f, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x8d, 0x01, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x50, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x8e, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x79, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x58, 0x5f, 0x69, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6f, 0x61, 0x69, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x61, 0x77, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x61, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x6c, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x7a, 0x69, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x62, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c,
	0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x65,
	0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66,
	0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75,
	0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x69, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f, 0x75,
	0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x65,
	0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x22, 0x37, 0x0a, 0x1a,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x6f, 0x22, 0x54, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xff, 0x06, 0x0a, 0x19, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a,
	0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x10, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x18, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbb, 0x07, 0x0a, 0x20, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x07, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e,
	0x65, 0x4f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0f, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xf9, 0x06, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e,
	0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x05, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x22, 0x93, 0x08, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x56, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x13, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x07, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x41,
	0x0a, 0x1f, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x64, 0x0a, 0x20, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x5a,
	0x0a, 0x1f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x20, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a, 0x1d, 0x52, 0x75, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x6f, 0x22, 0x5a, 0x0a, 0x1e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67,
	0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01,
	0x0a, 0x28, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x54,
	0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0d, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x29, 0x52, 0x75, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd4, 0x03, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x22, 0x53, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe9, 0x02, 0x0a,
	0x14, 0x52, 0x75, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x22, 0x51, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x05, 0x0a, 0x1c,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x46, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x52, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x46, 0x52,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x52, 0x65,
	0x61, 0x6c, 0x51, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x52, 0x65,
	0x61, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x74, 0x51, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x53, 0x61, 0x6c,
	0x55, 0x6e, 0x69, 0x74, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x53, 0x61, 0x6c, 0x42,
	0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x53,
	0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x46, 0x41, 0x72, 0x6e, 0x6f, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x51, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x41, 0x72, 0x6e, 0x6f, 0x74, 0x4a, 0x6f,
	0x69, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x09, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0a, 0x46, 0x41, 0x6c, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0c, 0x46, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x4f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x49, 0x73, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06,
	0x52, 0x0e, 0x46, 0x49, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x54, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x41, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x46, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x4f, 0x72, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x49, 0x73, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x90, 0x05, 0x0a, 0x16, 0x53, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x53, 0x0a, 0x07,
	0x46, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x46, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x53, 0x61, 0x6c, 0x65, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x52, 0x65,
	0x74, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46,
	0x52, 0x65, 0x74, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x46, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x50, 0x61, 0x79, 0x43,
	0x75, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x50, 0x61,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x5a, 0x42, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x5a, 0x42,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x12,
	0x15, 0x0a, 0x03, 0x46, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03,
	0x46, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x10,
	0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x46, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x46, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x46,
	0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xf7, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x48, 0x65, 0x61,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x46, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0c, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x46, 0x54, 0x68, 0x69, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22,
	0xfd, 0x03, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x22,
	0x2a, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x15,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x16, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9, 0x04, 0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63,
	0x6b, 0x22, 0xf7, 0x03, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xab, 0x05, 0x0a, 0x12,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x19, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb2, 0x04, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x38, 0x0a, 0x19, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x22,
	0xea, 0x04, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xef, 0x0a, 0x0a, 0x1f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x18, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x15, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x70, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x07, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x22, 0xad, 0x0a, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x18, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x15, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x70, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x07, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0d,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x22, 0xe3, 0x0b, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f,
	0x12, 0x54, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x15, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52,
	0x0c, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x63,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f,
	0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x22, 0x39, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x22, 0x41, 0x0a, 0x20,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x93, 0x11, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x10, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x35, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x35,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x33, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x34, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x35,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x36, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x36,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x15, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x12,
	0x6f, 0x72, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06, 0x75, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a,
	0x1e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x15, 0x0a, 0x26, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f,
	0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x07, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08,
	0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0b, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xcf, 0x14, 0x0a,
	0x19, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69,
	0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61,
	0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0c,
	0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0b, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xb3,
	0x15, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0c,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f,
	0x12, 0x25, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x67, 0x67, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x6e,
	0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72,
	0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0c, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x6e, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x06, 0x66,
	0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x32, 0xa2, 0x07, 0x0a, 0x14, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67,
	0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x12, 0x3f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x12, 0x3c,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01,
	0x0a, 0x21, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x6c, 0x6f, 0x67, 0x12, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb7, 0x21,
	0x0a, 0x14, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01,
	0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x19,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x85, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e,
	0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x65, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xee, 0x09, 0x0a, 0x1e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x1e, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x1c, 0x42, 0x75, 0x6c,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x3b, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb3, 0x37, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x67, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x87, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x39,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x69, 0x6d, 0x65, 0x6e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8d, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x93, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x4e,
	0x6f, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x32,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8b, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x67, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8e, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x91, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x67, 0x6f,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x12, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a,
	0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x52, 0x75, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x67, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb4,
	0x01, 0x0a, 0x21, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x4b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x38, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8a, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74,
	0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x91,
	0x14, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x36, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a,
	0x0a, 0x1c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x40,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x12, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x12, 0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12,
	0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x12, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01,
	0x0a, 0x22, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x46, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x18, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x1f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x43, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01,
	0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x41, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x12, 0x3e, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x96, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x39, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x65, 0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65,
	0x53, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x12,
	0x36, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x65,
	0x65, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x4b, 0x69, 0x6e, 0x67, 0x64,
	0x65, 0x65, 0x49, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kingdee_ito_proto_rawDescOnce sync.Once
	file_kingdee_ito_proto_rawDescData = file_kingdee_ito_proto_rawDesc
)

func file_kingdee_ito_proto_rawDescGZIP() []byte {
	file_kingdee_ito_proto_rawDescOnce.Do(func() {
		file_kingdee_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_kingdee_ito_proto_rawDescData)
	})
	return file_kingdee_ito_proto_rawDescData
}

var file_kingdee_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 148)
var file_kingdee_ito_proto_goTypes = []interface{}{
	(*AggParamsTradeCreateRequest)(nil),               // 0: kingdee_service.kingdee_ito.AggParamsTradeCreateRequest
	(*AggParamsTradeDestroyRequest)(nil),              // 1: kingdee_service.kingdee_ito.AggParamsTradeDestroyRequest
	(*AggParamsTradeListRequest)(nil),                 // 2: kingdee_service.kingdee_ito.AggParamsTradeListRequest
	(*AggParamsTradeListResponse)(nil),                // 3: kingdee_service.kingdee_ito.AggParamsTradeListResponse
	(*AggParamsTradeNextNoRequest)(nil),               // 4: kingdee_service.kingdee_ito.AggParamsTradeNextNoRequest
	(*AggParamsTradeNextNoResponse)(nil),              // 5: kingdee_service.kingdee_ito.AggParamsTradeNextNoResponse
	(*AggParamsTradeResponse)(nil),                    // 6: kingdee_service.kingdee_ito.AggParamsTradeResponse
	(*AggParamsTradeRetrieveRequest)(nil),             // 7: kingdee_service.kingdee_ito.AggParamsTradeRetrieveRequest
	(*AggParamsTradeUpdateRequest)(nil),               // 8: kingdee_service.kingdee_ito.AggParamsTradeUpdateRequest
	(*AggPushStatusCountRequest)(nil),                 // 9: kingdee_service.kingdee_ito.AggPushStatusCountRequest
	(*AggPushStatusCountResponse)(nil),                // 10: kingdee_service.kingdee_ito.AggPushStatusCountResponse
	(*AlipayBillAccountlogDestroyRequest)(nil),        // 11: kingdee_service.kingdee_ito.AlipayBillAccountlogDestroyRequest
	(*AlipayBillAccountlogListRequest)(nil),           // 12: kingdee_service.kingdee_ito.AlipayBillAccountlogListRequest
	(*AlipayBillAccountlogListResponse)(nil),          // 13: kingdee_service.kingdee_ito.AlipayBillAccountlogListResponse
	(*AlipayBillAccountlogPartialUpdateRequest)(nil),  // 14: kingdee_service.kingdee_ito.AlipayBillAccountlogPartialUpdateRequest
	(*AlipayBillAccountlogRequest)(nil),               // 15: kingdee_service.kingdee_ito.AlipayBillAccountlogRequest
	(*AlipayBillAccountlogResponse)(nil),              // 16: kingdee_service.kingdee_ito.AlipayBillAccountlogResponse
	(*AlipayBillAccountlogRetrieveRequest)(nil),       // 17: kingdee_service.kingdee_ito.AlipayBillAccountlogRetrieveRequest
	(*BulkCreateKingdeePurchaseOrderRequest)(nil),     // 18: kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderRequest
	(*BulkCreateKingdeePurchaseOrderResponse)(nil),    // 19: kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderResponse
	(*BulkCreateKingdeeReceiveBillRequest)(nil),       // 20: kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillRequest
	(*BulkCreateKingdeeReceiveBillResponse)(nil),      // 21: kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillResponse
	(*CeleryTaskInfoListResponse)(nil),                // 22: kingdee_service.kingdee_ito.CeleryTaskInfoListResponse
	(*CeleryTaskInfoResponse)(nil),                    // 23: kingdee_service.kingdee_ito.CeleryTaskInfoResponse
	(*CeleryTaskQueryOptsRequest)(nil),                // 24: kingdee_service.kingdee_ito.CeleryTaskQueryOptsRequest
	(*CeleryTaskRunOptsRequest)(nil),                  // 25: kingdee_service.kingdee_ito.CeleryTaskRunOptsRequest
	(*CeleryTaskRunOptsResponse)(nil),                 // 26: kingdee_service.kingdee_ito.CeleryTaskRunOptsResponse
	(*ClockedScheduleCreateRequest)(nil),              // 27: kingdee_service.kingdee_ito.ClockedScheduleCreateRequest
	(*ClockedScheduleDestroyRequest)(nil),             // 28: kingdee_service.kingdee_ito.ClockedScheduleDestroyRequest
	(*ClockedScheduleListRequest)(nil),                // 29: kingdee_service.kingdee_ito.ClockedScheduleListRequest
	(*ClockedScheduleListResponse)(nil),               // 30: kingdee_service.kingdee_ito.ClockedScheduleListResponse
	(*ClockedSchedulePartialUpdateRequest)(nil),       // 31: kingdee_service.kingdee_ito.ClockedSchedulePartialUpdateRequest
	(*ClockedScheduleRequest)(nil),                    // 32: kingdee_service.kingdee_ito.ClockedScheduleRequest
	(*ClockedScheduleResponse)(nil),                   // 33: kingdee_service.kingdee_ito.ClockedScheduleResponse
	(*ClockedScheduleRetrieveRequest)(nil),            // 34: kingdee_service.kingdee_ito.ClockedScheduleRetrieveRequest
	(*ClockedScheduleUpdateRequest)(nil),              // 35: kingdee_service.kingdee_ito.ClockedScheduleUpdateRequest
	(*CrontabScheduleCreateRequest)(nil),              // 36: kingdee_service.kingdee_ito.CrontabScheduleCreateRequest
	(*CrontabScheduleDestroyRequest)(nil),             // 37: kingdee_service.kingdee_ito.CrontabScheduleDestroyRequest
	(*CrontabScheduleListRequest)(nil),                // 38: kingdee_service.kingdee_ito.CrontabScheduleListRequest
	(*CrontabScheduleListResponse)(nil),               // 39: kingdee_service.kingdee_ito.CrontabScheduleListResponse
	(*CrontabSchedulePartialUpdateRequest)(nil),       // 40: kingdee_service.kingdee_ito.CrontabSchedulePartialUpdateRequest
	(*CrontabScheduleRequest)(nil),                    // 41: kingdee_service.kingdee_ito.CrontabScheduleRequest
	(*CrontabScheduleResponse)(nil),                   // 42: kingdee_service.kingdee_ito.CrontabScheduleResponse
	(*CrontabScheduleRetrieveRequest)(nil),            // 43: kingdee_service.kingdee_ito.CrontabScheduleRetrieveRequest
	(*CrontabScheduleUpdateRequest)(nil),              // 44: kingdee_service.kingdee_ito.CrontabScheduleUpdateRequest
	(*FEntityResponse)(nil),                           // 45: kingdee_service.kingdee_ito.FEntityResponse
	(*FetchQimenTradeRequest)(nil),                    // 46: kingdee_service.kingdee_ito.FetchQimenTradeRequest
	(*FetchQimenTradeResponse)(nil),                   // 47: kingdee_service.kingdee_ito.FetchQimenTradeResponse
	(*IntervalScheduleCreateRequest)(nil),             // 48: kingdee_service.kingdee_ito.IntervalScheduleCreateRequest
	(*IntervalScheduleDestroyRequest)(nil),            // 49: kingdee_service.kingdee_ito.IntervalScheduleDestroyRequest
	(*IntervalScheduleListRequest)(nil),               // 50: kingdee_service.kingdee_ito.IntervalScheduleListRequest
	(*IntervalScheduleListResponse)(nil),              // 51: kingdee_service.kingdee_ito.IntervalScheduleListResponse
	(*IntervalSchedulePartialUpdateRequest)(nil),      // 52: kingdee_service.kingdee_ito.IntervalSchedulePartialUpdateRequest
	(*IntervalScheduleRequest)(nil),                   // 53: kingdee_service.kingdee_ito.IntervalScheduleRequest
	(*IntervalScheduleResponse)(nil),                  // 54: kingdee_service.kingdee_ito.IntervalScheduleResponse
	(*IntervalScheduleRetrieveRequest)(nil),           // 55: kingdee_service.kingdee_ito.IntervalScheduleRetrieveRequest
	(*IntervalScheduleUpdateRequest)(nil),             // 56: kingdee_service.kingdee_ito.IntervalScheduleUpdateRequest
	(*KingdeePurchaseDestroyRequest)(nil),             // 57: kingdee_service.kingdee_ito.KingdeePurchaseDestroyRequest
	(*KingdeePurchaseListRequest)(nil),                // 58: kingdee_service.kingdee_ito.KingdeePurchaseListRequest
	(*KingdeePurchaseListResponse)(nil),               // 59: kingdee_service.kingdee_ito.KingdeePurchaseListResponse
	(*KingdeePurchasePartialUpdateRequest)(nil),       // 60: kingdee_service.kingdee_ito.KingdeePurchasePartialUpdateRequest
	(*KingdeePurchaseRequest)(nil),                    // 61: kingdee_service.kingdee_ito.KingdeePurchaseRequest
	(*KingdeePurchaseResponse)(nil),                   // 62: kingdee_service.kingdee_ito.KingdeePurchaseResponse
	(*KingdeePurchaseRetrieveRequest)(nil),            // 63: kingdee_service.kingdee_ito.KingdeePurchaseRetrieveRequest
	(*KingdeeSalOutStockListRequest)(nil),             // 64: kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest
	(*KingdeeSalOutStockListResponse)(nil),            // 65: kingdee_service.kingdee_ito.KingdeeSalOutStockListResponse
	(*KingdeeSalOutStockModelResponse)(nil),           // 66: kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse
	(*KingdeeSalOutStockResponse)(nil),                // 67: kingdee_service.kingdee_ito.KingdeeSalOutStockResponse
	(*KingdeeSalOutStockRetrieveRequest)(nil),         // 68: kingdee_service.kingdee_ito.KingdeeSalOutStockRetrieveRequest
	(*KingdeeSalReturnStockDestroyRequest)(nil),       // 69: kingdee_service.kingdee_ito.KingdeeSalReturnStockDestroyRequest
	(*KingdeeSalReturnStockListRequest)(nil),          // 70: kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest
	(*KingdeeSalReturnStockListResponse)(nil),         // 71: kingdee_service.kingdee_ito.KingdeeSalReturnStockListResponse
	(*KingdeeSalReturnStockPartialUpdateRequest)(nil), // 72: kingdee_service.kingdee_ito.KingdeeSalReturnStockPartialUpdateRequest
	(*KingdeeSalReturnStockRequest)(nil),              // 73: kingdee_service.kingdee_ito.KingdeeSalReturnStockRequest
	(*KingdeeSalReturnStockResponse)(nil),             // 74: kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	(*KingdeeSalReturnStockRetrieveRequest)(nil),      // 75: kingdee_service.kingdee_ito.KingdeeSalReturnStockRetrieveRequest
	(*KingdeeShopNoInfoRequest)(nil),                  // 76: kingdee_service.kingdee_ito.KingdeeShopNoInfoRequest
	(*KingdeeShopNoInfoResponse)(nil),                 // 77: kingdee_service.kingdee_ito.KingdeeShopNoInfoResponse
	(*KingdeeStockNoInfoRequest)(nil),                 // 78: kingdee_service.kingdee_ito.KingdeeStockNoInfoRequest
	(*KingdeeStockNoInfoResponse)(nil),                // 79: kingdee_service.kingdee_ito.KingdeeStockNoInfoResponse
	(*KingdeeTradeDestroyRequest)(nil),                // 80: kingdee_service.kingdee_ito.KingdeeTradeDestroyRequest
	(*KingdeeTradeListRequest)(nil),                   // 81: kingdee_service.kingdee_ito.KingdeeTradeListRequest
	(*KingdeeTradeListResponse)(nil),                  // 82: kingdee_service.kingdee_ito.KingdeeTradeListResponse
	(*KingdeeTradePartialUpdateRequest)(nil),          // 83: kingdee_service.kingdee_ito.KingdeeTradePartialUpdateRequest
	(*KingdeeTradeRequest)(nil),                       // 84: kingdee_service.kingdee_ito.KingdeeTradeRequest
	(*KingdeeTradeResponse)(nil),                      // 85: kingdee_service.kingdee_ito.KingdeeTradeResponse
	(*KingdeeTradeRetrieveRequest)(nil),               // 86: kingdee_service.kingdee_ito.KingdeeTradeRetrieveRequest
	(*MongoGoodslistResponse)(nil),                    // 87: kingdee_service.kingdee_ito.MongoGoodslistResponse
	(*MongoTradesListRequest)(nil),                    // 88: kingdee_service.kingdee_ito.MongoTradesListRequest
	(*MongoTradesListResponse)(nil),                   // 89: kingdee_service.kingdee_ito.MongoTradesListResponse
	(*MongoTradesResponse)(nil),                       // 90: kingdee_service.kingdee_ito.MongoTradesResponse
	(*MongoTradesRetrieveRequest)(nil),                // 91: kingdee_service.kingdee_ito.MongoTradesRetrieveRequest
	(*PeriodAggTradeRequest)(nil),                     // 92: kingdee_service.kingdee_ito.PeriodAggTradeRequest
	(*PeriodAggTradeResponse)(nil),                    // 93: kingdee_service.kingdee_ito.PeriodAggTradeResponse
	(*PeriodicTaskCreateRequest)(nil),                 // 94: kingdee_service.kingdee_ito.PeriodicTaskCreateRequest
	(*PeriodicTaskDestroyRequest)(nil),                // 95: kingdee_service.kingdee_ito.PeriodicTaskDestroyRequest
	(*PeriodicTaskListRequest)(nil),                   // 96: kingdee_service.kingdee_ito.PeriodicTaskListRequest
	(*PeriodicTaskListResponse)(nil),                  // 97: kingdee_service.kingdee_ito.PeriodicTaskListResponse
	(*PeriodicTaskPartialUpdateRequest)(nil),          // 98: kingdee_service.kingdee_ito.PeriodicTaskPartialUpdateRequest
	(*PeriodicTaskRequest)(nil),                       // 99: kingdee_service.kingdee_ito.PeriodicTaskRequest
	(*PeriodicTaskResponse)(nil),                      // 100: kingdee_service.kingdee_ito.PeriodicTaskResponse
	(*PeriodicTaskRetrieveRequest)(nil),               // 101: kingdee_service.kingdee_ito.PeriodicTaskRetrieveRequest
	(*PeriodicTaskUpdateRequest)(nil),                 // 102: kingdee_service.kingdee_ito.PeriodicTaskUpdateRequest
	(*PushToKingDeeSalOutStockRequest)(nil),           // 103: kingdee_service.kingdee_ito.PushToKingDeeSalOutStockRequest
	(*PushToKingDeeSalOutStockResponse)(nil),          // 104: kingdee_service.kingdee_ito.PushToKingDeeSalOutStockResponse
	(*QueryKingdeePurchaseOrderRequest)(nil),          // 105: kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderRequest
	(*QueryKingdeePurchaseOrderResponse)(nil),         // 106: kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderResponse
	(*RevokeKingdeeSalOutstockRequest)(nil),           // 107: kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockRequest
	(*RevokeKingdeeSalOutstockResponse)(nil),          // 108: kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockResponse
	(*RunPeriodAggSharedTaskRequest)(nil),             // 109: kingdee_service.kingdee_ito.RunPeriodAggSharedTaskRequest
	(*RunPeriodAggSharedTaskResponse)(nil),            // 110: kingdee_service.kingdee_ito.RunPeriodAggSharedTaskResponse
	(*RunPeriodPushToKingDeeSalOutStockRequest)(nil),  // 111: kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockRequest
	(*RunPeriodPushToKingDeeSalOutStockResponse)(nil), // 112: kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockResponse
	(*RunPeriodicTaskRequest)(nil),                    // 113: kingdee_service.kingdee_ito.RunPeriodicTaskRequest
	(*RunPeriodicTaskResponse)(nil),                   // 114: kingdee_service.kingdee_ito.RunPeriodicTaskResponse
	(*RunSharedTaskRequest)(nil),                      // 115: kingdee_service.kingdee_ito.RunSharedTaskRequest
	(*RunSharedTaskResponse)(nil),                     // 116: kingdee_service.kingdee_ito.RunSharedTaskResponse
	(*SalReturnStockEntityResponse)(nil),              // 117: kingdee_service.kingdee_ito.SalReturnStockEntityResponse
	(*SalReturnStockResponse)(nil),                    // 118: kingdee_service.kingdee_ito.SalReturnStockResponse
	(*StopPeriodicTaskRequest)(nil),                   // 119: kingdee_service.kingdee_ito.StopPeriodicTaskRequest
	(*StopPeriodicTaskResponse)(nil),                  // 120: kingdee_service.kingdee_ito.StopPeriodicTaskResponse
	(*SubHeadEntityResponse)(nil),                     // 121: kingdee_service.kingdee_ito.SubHeadEntityResponse
	(*TaskResultCreateRequest)(nil),                   // 122: kingdee_service.kingdee_ito.TaskResultCreateRequest
	(*TaskResultDestroyRequest)(nil),                  // 123: kingdee_service.kingdee_ito.TaskResultDestroyRequest
	(*TaskResultListRequest)(nil),                     // 124: kingdee_service.kingdee_ito.TaskResultListRequest
	(*TaskResultListResponse)(nil),                    // 125: kingdee_service.kingdee_ito.TaskResultListResponse
	(*TaskResultPartialUpdateRequest)(nil),            // 126: kingdee_service.kingdee_ito.TaskResultPartialUpdateRequest
	(*TaskResultRequest)(nil),                         // 127: kingdee_service.kingdee_ito.TaskResultRequest
	(*TaskResultResponse)(nil),                        // 128: kingdee_service.kingdee_ito.TaskResultResponse
	(*TaskResultRetrieveRequest)(nil),                 // 129: kingdee_service.kingdee_ito.TaskResultRetrieveRequest
	(*TaskResultUpdateRequest)(nil),                   // 130: kingdee_service.kingdee_ito.TaskResultUpdateRequest
	(*TradeRefundDestroyRequest)(nil),                 // 131: kingdee_service.kingdee_ito.TradeRefundDestroyRequest
	(*TradeRefundDiscountResponse)(nil),               // 132: kingdee_service.kingdee_ito.TradeRefundDiscountResponse
	(*TradeRefundGoodsResponse)(nil),                  // 133: kingdee_service.kingdee_ito.TradeRefundGoodsResponse
	(*TradeRefundListRequest)(nil),                    // 134: kingdee_service.kingdee_ito.TradeRefundListRequest
	(*TradeRefundListResponse)(nil),                   // 135: kingdee_service.kingdee_ito.TradeRefundListResponse
	(*TradeRefundPartialUpdateRequest)(nil),           // 136: kingdee_service.kingdee_ito.TradeRefundPartialUpdateRequest
	(*TradeRefundRequest)(nil),                        // 137: kingdee_service.kingdee_ito.TradeRefundRequest
	(*TradeRefundResponse)(nil),                       // 138: kingdee_service.kingdee_ito.TradeRefundResponse
	(*TradeRefundRetrieveRequest)(nil),                // 139: kingdee_service.kingdee_ito.TradeRefundRetrieveRequest
	(*TradeRefundStockinDestroyRequest)(nil),          // 140: kingdee_service.kingdee_ito.TradeRefundStockinDestroyRequest
	(*TradeRefundStockinDetailsResponse)(nil),         // 141: kingdee_service.kingdee_ito.TradeRefundStockinDetailsResponse
	(*TradeRefundStockinListRequest)(nil),             // 142: kingdee_service.kingdee_ito.TradeRefundStockinListRequest
	(*TradeRefundStockinListResponse)(nil),            // 143: kingdee_service.kingdee_ito.TradeRefundStockinListResponse
	(*TradeRefundStockinPartialUpdateRequest)(nil),    // 144: kingdee_service.kingdee_ito.TradeRefundStockinPartialUpdateRequest
	(*TradeRefundStockinRequest)(nil),                 // 145: kingdee_service.kingdee_ito.TradeRefundStockinRequest
	(*TradeRefundStockinResponse)(nil),                // 146: kingdee_service.kingdee_ito.TradeRefundStockinResponse
	(*TradeRefundStockinRetrieveRequest)(nil),         // 147: kingdee_service.kingdee_ito.TradeRefundStockinRetrieveRequest
	(*structpb.Struct)(nil),                           // 148: google.protobuf.Struct
	(*emptypb.Empty)(nil),                             // 149: google.protobuf.Empty
}
var file_kingdee_ito_proto_depIdxs = []int32{
	148, // 0: kingdee_service.kingdee_ito.AggParamsTradeListRequest._filters:type_name -> google.protobuf.Struct
	148, // 1: kingdee_service.kingdee_ito.AggParamsTradeListRequest._pagination:type_name -> google.protobuf.Struct
	6,   // 2: kingdee_service.kingdee_ito.AggParamsTradeListResponse.results:type_name -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	148, // 3: kingdee_service.kingdee_ito.AlipayBillAccountlogListRequest._filters:type_name -> google.protobuf.Struct
	148, // 4: kingdee_service.kingdee_ito.AlipayBillAccountlogListRequest._pagination:type_name -> google.protobuf.Struct
	16,  // 5: kingdee_service.kingdee_ito.AlipayBillAccountlogListResponse.results:type_name -> kingdee_service.kingdee_ito.AlipayBillAccountlogResponse
	148, // 6: kingdee_service.kingdee_ito.AlipayBillAccountlogPartialUpdateRequest.associted_trade_ids:type_name -> google.protobuf.Struct
	148, // 7: kingdee_service.kingdee_ito.AlipayBillAccountlogRequest.associted_trade_ids:type_name -> google.protobuf.Struct
	148, // 8: kingdee_service.kingdee_ito.AlipayBillAccountlogResponse.associted_trade_ids:type_name -> google.protobuf.Struct
	23,  // 9: kingdee_service.kingdee_ito.CeleryTaskInfoListResponse.results:type_name -> kingdee_service.kingdee_ito.CeleryTaskInfoResponse
	148, // 10: kingdee_service.kingdee_ito.ClockedScheduleListRequest._filters:type_name -> google.protobuf.Struct
	148, // 11: kingdee_service.kingdee_ito.ClockedScheduleListRequest._pagination:type_name -> google.protobuf.Struct
	33,  // 12: kingdee_service.kingdee_ito.ClockedScheduleListResponse.results:type_name -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	148, // 13: kingdee_service.kingdee_ito.CrontabScheduleListRequest._filters:type_name -> google.protobuf.Struct
	148, // 14: kingdee_service.kingdee_ito.CrontabScheduleListRequest._pagination:type_name -> google.protobuf.Struct
	42,  // 15: kingdee_service.kingdee_ito.CrontabScheduleListResponse.results:type_name -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	148, // 16: kingdee_service.kingdee_ito.IntervalScheduleListRequest._filters:type_name -> google.protobuf.Struct
	148, // 17: kingdee_service.kingdee_ito.IntervalScheduleListRequest._pagination:type_name -> google.protobuf.Struct
	54,  // 18: kingdee_service.kingdee_ito.IntervalScheduleListResponse.results:type_name -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	148, // 19: kingdee_service.kingdee_ito.KingdeePurchaseListRequest._filters:type_name -> google.protobuf.Struct
	148, // 20: kingdee_service.kingdee_ito.KingdeePurchaseListRequest._pagination:type_name -> google.protobuf.Struct
	62,  // 21: kingdee_service.kingdee_ito.KingdeePurchaseListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	148, // 22: kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest._filters:type_name -> google.protobuf.Struct
	148, // 23: kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest._pagination:type_name -> google.protobuf.Struct
	67,  // 24: kingdee_service.kingdee_ito.KingdeeSalOutStockListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeSalOutStockResponse
	121, // 25: kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse.SubHeadEntity:type_name -> kingdee_service.kingdee_ito.SubHeadEntityResponse
	45,  // 26: kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse.FEntity:type_name -> kingdee_service.kingdee_ito.FEntityResponse
	66,  // 27: kingdee_service.kingdee_ito.KingdeeSalOutStockResponse.model:type_name -> kingdee_service.kingdee_ito.KingdeeSalOutStockModelResponse
	148, // 28: kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest._filters:type_name -> google.protobuf.Struct
	148, // 29: kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest._pagination:type_name -> google.protobuf.Struct
	74,  // 30: kingdee_service.kingdee_ito.KingdeeSalReturnStockListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	118, // 31: kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse.Model:type_name -> kingdee_service.kingdee_ito.SalReturnStockResponse
	148, // 32: kingdee_service.kingdee_ito.KingdeeTradeListRequest._filters:type_name -> google.protobuf.Struct
	148, // 33: kingdee_service.kingdee_ito.KingdeeTradeListRequest._pagination:type_name -> google.protobuf.Struct
	85,  // 34: kingdee_service.kingdee_ito.KingdeeTradeListResponse.results:type_name -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	148, // 35: kingdee_service.kingdee_ito.MongoTradesListRequest._filters:type_name -> google.protobuf.Struct
	148, // 36: kingdee_service.kingdee_ito.MongoTradesListRequest._pagination:type_name -> google.protobuf.Struct
	90,  // 37: kingdee_service.kingdee_ito.MongoTradesListResponse.results:type_name -> kingdee_service.kingdee_ito.MongoTradesResponse
	87,  // 38: kingdee_service.kingdee_ito.MongoTradesResponse.goods_list:type_name -> kingdee_service.kingdee_ito.MongoGoodslistResponse
	53,  // 39: kingdee_service.kingdee_ito.PeriodicTaskCreateRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	148, // 40: kingdee_service.kingdee_ito.PeriodicTaskListRequest._filters:type_name -> google.protobuf.Struct
	148, // 41: kingdee_service.kingdee_ito.PeriodicTaskListRequest._pagination:type_name -> google.protobuf.Struct
	100, // 42: kingdee_service.kingdee_ito.PeriodicTaskListResponse.results:type_name -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	53,  // 43: kingdee_service.kingdee_ito.PeriodicTaskPartialUpdateRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	53,  // 44: kingdee_service.kingdee_ito.PeriodicTaskRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	54,  // 45: kingdee_service.kingdee_ito.PeriodicTaskResponse.interval:type_name -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	53,  // 46: kingdee_service.kingdee_ito.PeriodicTaskUpdateRequest.interval_content:type_name -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	117, // 47: kingdee_service.kingdee_ito.SalReturnStockResponse.FEntity:type_name -> kingdee_service.kingdee_ito.SalReturnStockEntityResponse
	148, // 48: kingdee_service.kingdee_ito.TaskResultListRequest._filters:type_name -> google.protobuf.Struct
	148, // 49: kingdee_service.kingdee_ito.TaskResultListRequest._pagination:type_name -> google.protobuf.Struct
	128, // 50: kingdee_service.kingdee_ito.TaskResultListResponse.results:type_name -> kingdee_service.kingdee_ito.TaskResultResponse
	148, // 51: kingdee_service.kingdee_ito.TradeRefundListRequest._filters:type_name -> google.protobuf.Struct
	148, // 52: kingdee_service.kingdee_ito.TradeRefundListRequest._pagination:type_name -> google.protobuf.Struct
	138, // 53: kingdee_service.kingdee_ito.TradeRefundListResponse.results:type_name -> kingdee_service.kingdee_ito.TradeRefundResponse
	133, // 54: kingdee_service.kingdee_ito.TradeRefundResponse.goods_list:type_name -> kingdee_service.kingdee_ito.TradeRefundGoodsResponse
	132, // 55: kingdee_service.kingdee_ito.TradeRefundResponse.discount_list:type_name -> kingdee_service.kingdee_ito.TradeRefundDiscountResponse
	148, // 56: kingdee_service.kingdee_ito.TradeRefundStockinListRequest._filters:type_name -> google.protobuf.Struct
	148, // 57: kingdee_service.kingdee_ito.TradeRefundStockinListRequest._pagination:type_name -> google.protobuf.Struct
	146, // 58: kingdee_service.kingdee_ito.TradeRefundStockinListResponse.results:type_name -> kingdee_service.kingdee_ito.TradeRefundStockinResponse
	141, // 59: kingdee_service.kingdee_ito.TradeRefundStockinResponse.details_list:type_name -> kingdee_service.kingdee_ito.TradeRefundStockinDetailsResponse
	15,  // 60: kingdee_service.kingdee_ito.AlipayBillController.CreateAlipayBillAccountlog:input_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogRequest
	11,  // 61: kingdee_service.kingdee_ito.AlipayBillController.DestroyAlipayBillAccountlog:input_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogDestroyRequest
	12,  // 62: kingdee_service.kingdee_ito.AlipayBillController.ListAlipayBillAccountlog:input_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogListRequest
	14,  // 63: kingdee_service.kingdee_ito.AlipayBillController.PartialUpdateAlipayBillAccountlog:input_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogPartialUpdateRequest
	17,  // 64: kingdee_service.kingdee_ito.AlipayBillController.RetrieveAlipayBillAccountlog:input_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogRetrieveRequest
	15,  // 65: kingdee_service.kingdee_ito.AlipayBillController.UpdateAlipayBillAccountlog:input_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogRequest
	32,  // 66: kingdee_service.kingdee_ito.CeleryTaskController.CreateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRequest
	41,  // 67: kingdee_service.kingdee_ito.CeleryTaskController.CreateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRequest
	53,  // 68: kingdee_service.kingdee_ito.CeleryTaskController.CreateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	99,  // 69: kingdee_service.kingdee_ito.CeleryTaskController.CreatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRequest
	127, // 70: kingdee_service.kingdee_ito.CeleryTaskController.CreateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRequest
	28,  // 71: kingdee_service.kingdee_ito.CeleryTaskController.DestroyClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleDestroyRequest
	37,  // 72: kingdee_service.kingdee_ito.CeleryTaskController.DestroyCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleDestroyRequest
	49,  // 73: kingdee_service.kingdee_ito.CeleryTaskController.DestroyIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleDestroyRequest
	95,  // 74: kingdee_service.kingdee_ito.CeleryTaskController.DestroyPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskDestroyRequest
	123, // 75: kingdee_service.kingdee_ito.CeleryTaskController.DestroyTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultDestroyRequest
	24,  // 76: kingdee_service.kingdee_ito.CeleryTaskController.ListCeleryTasks:input_type -> kingdee_service.kingdee_ito.CeleryTaskQueryOptsRequest
	29,  // 77: kingdee_service.kingdee_ito.CeleryTaskController.ListClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleListRequest
	38,  // 78: kingdee_service.kingdee_ito.CeleryTaskController.ListCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleListRequest
	50,  // 79: kingdee_service.kingdee_ito.CeleryTaskController.ListIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleListRequest
	96,  // 80: kingdee_service.kingdee_ito.CeleryTaskController.ListPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskListRequest
	124, // 81: kingdee_service.kingdee_ito.CeleryTaskController.ListTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultListRequest
	31,  // 82: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedSchedulePartialUpdateRequest
	40,  // 83: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabSchedulePartialUpdateRequest
	52,  // 84: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalSchedulePartialUpdateRequest
	98,  // 85: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskPartialUpdateRequest
	126, // 86: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultPartialUpdateRequest
	34,  // 87: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRetrieveRequest
	43,  // 88: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRetrieveRequest
	55,  // 89: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRetrieveRequest
	101, // 90: kingdee_service.kingdee_ito.CeleryTaskController.RetrievePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRetrieveRequest
	129, // 91: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRetrieveRequest
	25,  // 92: kingdee_service.kingdee_ito.CeleryTaskController.RunCeleryTask:input_type -> kingdee_service.kingdee_ito.CeleryTaskRunOptsRequest
	32,  // 93: kingdee_service.kingdee_ito.CeleryTaskController.UpdateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRequest
	41,  // 94: kingdee_service.kingdee_ito.CeleryTaskController.UpdateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRequest
	53,  // 95: kingdee_service.kingdee_ito.CeleryTaskController.UpdateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRequest
	99,  // 96: kingdee_service.kingdee_ito.CeleryTaskController.UpdatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRequest
	127, // 97: kingdee_service.kingdee_ito.CeleryTaskController.UpdateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRequest
	18,  // 98: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderRequest
	20,  // 99: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeeReceiveBill:input_type -> kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillRequest
	61,  // 100: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Create:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseRequest
	57,  // 101: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Destroy:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseDestroyRequest
	58,  // 102: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.List:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseListRequest
	60,  // 103: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.PartialUpdate:input_type -> kingdee_service.kingdee_ito.KingdeePurchasePartialUpdateRequest
	105, // 104: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKingdeePurchaseOrder:input_type -> kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderRequest
	63,  // 105: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Retrieve:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseRetrieveRequest
	61,  // 106: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Update:input_type -> kingdee_service.kingdee_ito.KingdeePurchaseRequest
	9,   // 107: kingdee_service.kingdee_ito.TradeAggController.CountAggPushStatus:input_type -> kingdee_service.kingdee_ito.AggPushStatusCountRequest
	84,  // 108: kingdee_service.kingdee_ito.TradeAggController.Create:input_type -> kingdee_service.kingdee_ito.KingdeeTradeRequest
	0,   // 109: kingdee_service.kingdee_ito.TradeAggController.CreateAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeCreateRequest
	27,  // 110: kingdee_service.kingdee_ito.TradeAggController.CreateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleCreateRequest
	36,  // 111: kingdee_service.kingdee_ito.TradeAggController.CreateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleCreateRequest
	48,  // 112: kingdee_service.kingdee_ito.TradeAggController.CreateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleCreateRequest
	94,  // 113: kingdee_service.kingdee_ito.TradeAggController.CreatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskCreateRequest
	122, // 114: kingdee_service.kingdee_ito.TradeAggController.CreateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultCreateRequest
	80,  // 115: kingdee_service.kingdee_ito.TradeAggController.Destroy:input_type -> kingdee_service.kingdee_ito.KingdeeTradeDestroyRequest
	1,   // 116: kingdee_service.kingdee_ito.TradeAggController.DestroyAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeDestroyRequest
	28,  // 117: kingdee_service.kingdee_ito.TradeAggController.DestroyClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleDestroyRequest
	37,  // 118: kingdee_service.kingdee_ito.TradeAggController.DestroyCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleDestroyRequest
	49,  // 119: kingdee_service.kingdee_ito.TradeAggController.DestroyIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleDestroyRequest
	95,  // 120: kingdee_service.kingdee_ito.TradeAggController.DestroyPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskDestroyRequest
	123, // 121: kingdee_service.kingdee_ito.TradeAggController.DestroyTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultDestroyRequest
	46,  // 122: kingdee_service.kingdee_ito.TradeAggController.FetchQimenTrade:input_type -> kingdee_service.kingdee_ito.FetchQimenTradeRequest
	76,  // 123: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeShopNoInfo:input_type -> kingdee_service.kingdee_ito.KingdeeShopNoInfoRequest
	78,  // 124: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeStockNoInfo:input_type -> kingdee_service.kingdee_ito.KingdeeStockNoInfoRequest
	81,  // 125: kingdee_service.kingdee_ito.TradeAggController.List:input_type -> kingdee_service.kingdee_ito.KingdeeTradeListRequest
	2,   // 126: kingdee_service.kingdee_ito.TradeAggController.ListAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeListRequest
	29,  // 127: kingdee_service.kingdee_ito.TradeAggController.ListClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleListRequest
	38,  // 128: kingdee_service.kingdee_ito.TradeAggController.ListCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleListRequest
	50,  // 129: kingdee_service.kingdee_ito.TradeAggController.ListIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleListRequest
	64,  // 130: kingdee_service.kingdee_ito.TradeAggController.ListKingdeeSalOutStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockListRequest
	88,  // 131: kingdee_service.kingdee_ito.TradeAggController.ListMongoTrades:input_type -> kingdee_service.kingdee_ito.MongoTradesListRequest
	96,  // 132: kingdee_service.kingdee_ito.TradeAggController.ListPeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskListRequest
	124, // 133: kingdee_service.kingdee_ito.TradeAggController.ListTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultListRequest
	4,   // 134: kingdee_service.kingdee_ito.TradeAggController.NextNoAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeNextNoRequest
	83,  // 135: kingdee_service.kingdee_ito.TradeAggController.PartialUpdate:input_type -> kingdee_service.kingdee_ito.KingdeeTradePartialUpdateRequest
	92,  // 136: kingdee_service.kingdee_ito.TradeAggController.PeriodAggTrade:input_type -> kingdee_service.kingdee_ito.PeriodAggTradeRequest
	103, // 137: kingdee_service.kingdee_ito.TradeAggController.PushToKingDeeSalOutStock:input_type -> kingdee_service.kingdee_ito.PushToKingDeeSalOutStockRequest
	86,  // 138: kingdee_service.kingdee_ito.TradeAggController.Retrieve:input_type -> kingdee_service.kingdee_ito.KingdeeTradeRetrieveRequest
	7,   // 139: kingdee_service.kingdee_ito.TradeAggController.RetrieveAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeRetrieveRequest
	34,  // 140: kingdee_service.kingdee_ito.TradeAggController.RetrieveClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleRetrieveRequest
	43,  // 141: kingdee_service.kingdee_ito.TradeAggController.RetrieveCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleRetrieveRequest
	55,  // 142: kingdee_service.kingdee_ito.TradeAggController.RetrieveIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleRetrieveRequest
	68,  // 143: kingdee_service.kingdee_ito.TradeAggController.RetrieveKingdeeSalOutStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockRetrieveRequest
	91,  // 144: kingdee_service.kingdee_ito.TradeAggController.RetrieveMongoTrades:input_type -> kingdee_service.kingdee_ito.MongoTradesRetrieveRequest
	101, // 145: kingdee_service.kingdee_ito.TradeAggController.RetrievePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskRetrieveRequest
	129, // 146: kingdee_service.kingdee_ito.TradeAggController.RetrieveTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultRetrieveRequest
	107, // 147: kingdee_service.kingdee_ito.TradeAggController.RevokeKingdeeSalOutstock:input_type -> kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockRequest
	109, // 148: kingdee_service.kingdee_ito.TradeAggController.RunPeriodAggSharedTask:input_type -> kingdee_service.kingdee_ito.RunPeriodAggSharedTaskRequest
	111, // 149: kingdee_service.kingdee_ito.TradeAggController.RunPeriodPushToKingDeeSalOutStock:input_type -> kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockRequest
	113, // 150: kingdee_service.kingdee_ito.TradeAggController.RunPeriodicTask:input_type -> kingdee_service.kingdee_ito.RunPeriodicTaskRequest
	115, // 151: kingdee_service.kingdee_ito.TradeAggController.RunSliceFetchTrade:input_type -> kingdee_service.kingdee_ito.RunSharedTaskRequest
	119, // 152: kingdee_service.kingdee_ito.TradeAggController.StopPeriodicTask:input_type -> kingdee_service.kingdee_ito.StopPeriodicTaskRequest
	84,  // 153: kingdee_service.kingdee_ito.TradeAggController.Update:input_type -> kingdee_service.kingdee_ito.KingdeeTradeRequest
	8,   // 154: kingdee_service.kingdee_ito.TradeAggController.UpdateAggParamsTrade:input_type -> kingdee_service.kingdee_ito.AggParamsTradeUpdateRequest
	35,  // 155: kingdee_service.kingdee_ito.TradeAggController.UpdateClockedSchedule:input_type -> kingdee_service.kingdee_ito.ClockedScheduleUpdateRequest
	44,  // 156: kingdee_service.kingdee_ito.TradeAggController.UpdateCrontabSchedule:input_type -> kingdee_service.kingdee_ito.CrontabScheduleUpdateRequest
	56,  // 157: kingdee_service.kingdee_ito.TradeAggController.UpdateIntervalSchedule:input_type -> kingdee_service.kingdee_ito.IntervalScheduleUpdateRequest
	102, // 158: kingdee_service.kingdee_ito.TradeAggController.UpdatePeriodicTask:input_type -> kingdee_service.kingdee_ito.PeriodicTaskUpdateRequest
	130, // 159: kingdee_service.kingdee_ito.TradeAggController.UpdateTaskResult:input_type -> kingdee_service.kingdee_ito.TaskResultUpdateRequest
	73,  // 160: kingdee_service.kingdee_ito.TradeRefundAggController.CreateKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockRequest
	137, // 161: kingdee_service.kingdee_ito.TradeRefundAggController.CreateTradeRefund:input_type -> kingdee_service.kingdee_ito.TradeRefundRequest
	145, // 162: kingdee_service.kingdee_ito.TradeRefundAggController.CreateTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.TradeRefundStockinRequest
	69,  // 163: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockDestroyRequest
	131, // 164: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyTradeRefund:input_type -> kingdee_service.kingdee_ito.TradeRefundDestroyRequest
	140, // 165: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.TradeRefundStockinDestroyRequest
	70,  // 166: kingdee_service.kingdee_ito.TradeRefundAggController.ListKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockListRequest
	134, // 167: kingdee_service.kingdee_ito.TradeRefundAggController.ListTradeRefund:input_type -> kingdee_service.kingdee_ito.TradeRefundListRequest
	142, // 168: kingdee_service.kingdee_ito.TradeRefundAggController.ListTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.TradeRefundStockinListRequest
	72,  // 169: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockPartialUpdateRequest
	136, // 170: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateTradeRefund:input_type -> kingdee_service.kingdee_ito.TradeRefundPartialUpdateRequest
	144, // 171: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.TradeRefundStockinPartialUpdateRequest
	75,  // 172: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockRetrieveRequest
	139, // 173: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveTradeRefund:input_type -> kingdee_service.kingdee_ito.TradeRefundRetrieveRequest
	147, // 174: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.TradeRefundStockinRetrieveRequest
	73,  // 175: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateKingdeeSalReturnStock:input_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockRequest
	137, // 176: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateTradeRefund:input_type -> kingdee_service.kingdee_ito.TradeRefundRequest
	145, // 177: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateTradeRefundStockin:input_type -> kingdee_service.kingdee_ito.TradeRefundStockinRequest
	16,  // 178: kingdee_service.kingdee_ito.AlipayBillController.CreateAlipayBillAccountlog:output_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogResponse
	149, // 179: kingdee_service.kingdee_ito.AlipayBillController.DestroyAlipayBillAccountlog:output_type -> google.protobuf.Empty
	13,  // 180: kingdee_service.kingdee_ito.AlipayBillController.ListAlipayBillAccountlog:output_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogListResponse
	16,  // 181: kingdee_service.kingdee_ito.AlipayBillController.PartialUpdateAlipayBillAccountlog:output_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogResponse
	16,  // 182: kingdee_service.kingdee_ito.AlipayBillController.RetrieveAlipayBillAccountlog:output_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogResponse
	16,  // 183: kingdee_service.kingdee_ito.AlipayBillController.UpdateAlipayBillAccountlog:output_type -> kingdee_service.kingdee_ito.AlipayBillAccountlogResponse
	33,  // 184: kingdee_service.kingdee_ito.CeleryTaskController.CreateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	42,  // 185: kingdee_service.kingdee_ito.CeleryTaskController.CreateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	54,  // 186: kingdee_service.kingdee_ito.CeleryTaskController.CreateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	100, // 187: kingdee_service.kingdee_ito.CeleryTaskController.CreatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	128, // 188: kingdee_service.kingdee_ito.CeleryTaskController.CreateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	149, // 189: kingdee_service.kingdee_ito.CeleryTaskController.DestroyClockedSchedule:output_type -> google.protobuf.Empty
	149, // 190: kingdee_service.kingdee_ito.CeleryTaskController.DestroyCrontabSchedule:output_type -> google.protobuf.Empty
	149, // 191: kingdee_service.kingdee_ito.CeleryTaskController.DestroyIntervalSchedule:output_type -> google.protobuf.Empty
	149, // 192: kingdee_service.kingdee_ito.CeleryTaskController.DestroyPeriodicTask:output_type -> google.protobuf.Empty
	149, // 193: kingdee_service.kingdee_ito.CeleryTaskController.DestroyTaskResult:output_type -> google.protobuf.Empty
	22,  // 194: kingdee_service.kingdee_ito.CeleryTaskController.ListCeleryTasks:output_type -> kingdee_service.kingdee_ito.CeleryTaskInfoListResponse
	30,  // 195: kingdee_service.kingdee_ito.CeleryTaskController.ListClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleListResponse
	39,  // 196: kingdee_service.kingdee_ito.CeleryTaskController.ListCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleListResponse
	51,  // 197: kingdee_service.kingdee_ito.CeleryTaskController.ListIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleListResponse
	97,  // 198: kingdee_service.kingdee_ito.CeleryTaskController.ListPeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskListResponse
	125, // 199: kingdee_service.kingdee_ito.CeleryTaskController.ListTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultListResponse
	33,  // 200: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	42,  // 201: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	54,  // 202: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	100, // 203: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	128, // 204: kingdee_service.kingdee_ito.CeleryTaskController.PartialUpdateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	33,  // 205: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	42,  // 206: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	54,  // 207: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	100, // 208: kingdee_service.kingdee_ito.CeleryTaskController.RetrievePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	128, // 209: kingdee_service.kingdee_ito.CeleryTaskController.RetrieveTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	26,  // 210: kingdee_service.kingdee_ito.CeleryTaskController.RunCeleryTask:output_type -> kingdee_service.kingdee_ito.CeleryTaskRunOptsResponse
	33,  // 211: kingdee_service.kingdee_ito.CeleryTaskController.UpdateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	42,  // 212: kingdee_service.kingdee_ito.CeleryTaskController.UpdateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	54,  // 213: kingdee_service.kingdee_ito.CeleryTaskController.UpdateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	100, // 214: kingdee_service.kingdee_ito.CeleryTaskController.UpdatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	128, // 215: kingdee_service.kingdee_ito.CeleryTaskController.UpdateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	19,  // 216: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.BulkCreateKingdeePurchaseOrderResponse
	21,  // 217: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.BulkCreateKingdeeReceiveBill:output_type -> kingdee_service.kingdee_ito.BulkCreateKingdeeReceiveBillResponse
	62,  // 218: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Create:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	149, // 219: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Destroy:output_type -> google.protobuf.Empty
	59,  // 220: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.List:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseListResponse
	62,  // 221: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.PartialUpdate:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	106, // 222: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.QueryKingdeePurchaseOrder:output_type -> kingdee_service.kingdee_ito.QueryKingdeePurchaseOrderResponse
	62,  // 223: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Retrieve:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	62,  // 224: kingdee_service.kingdee_ito.KingdeePurchaseOrderController.Update:output_type -> kingdee_service.kingdee_ito.KingdeePurchaseResponse
	10,  // 225: kingdee_service.kingdee_ito.TradeAggController.CountAggPushStatus:output_type -> kingdee_service.kingdee_ito.AggPushStatusCountResponse
	85,  // 226: kingdee_service.kingdee_ito.TradeAggController.Create:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	6,   // 227: kingdee_service.kingdee_ito.TradeAggController.CreateAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	33,  // 228: kingdee_service.kingdee_ito.TradeAggController.CreateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	42,  // 229: kingdee_service.kingdee_ito.TradeAggController.CreateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	54,  // 230: kingdee_service.kingdee_ito.TradeAggController.CreateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	100, // 231: kingdee_service.kingdee_ito.TradeAggController.CreatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	128, // 232: kingdee_service.kingdee_ito.TradeAggController.CreateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	149, // 233: kingdee_service.kingdee_ito.TradeAggController.Destroy:output_type -> google.protobuf.Empty
	149, // 234: kingdee_service.kingdee_ito.TradeAggController.DestroyAggParamsTrade:output_type -> google.protobuf.Empty
	149, // 235: kingdee_service.kingdee_ito.TradeAggController.DestroyClockedSchedule:output_type -> google.protobuf.Empty
	149, // 236: kingdee_service.kingdee_ito.TradeAggController.DestroyCrontabSchedule:output_type -> google.protobuf.Empty
	149, // 237: kingdee_service.kingdee_ito.TradeAggController.DestroyIntervalSchedule:output_type -> google.protobuf.Empty
	149, // 238: kingdee_service.kingdee_ito.TradeAggController.DestroyPeriodicTask:output_type -> google.protobuf.Empty
	149, // 239: kingdee_service.kingdee_ito.TradeAggController.DestroyTaskResult:output_type -> google.protobuf.Empty
	47,  // 240: kingdee_service.kingdee_ito.TradeAggController.FetchQimenTrade:output_type -> kingdee_service.kingdee_ito.FetchQimenTradeResponse
	77,  // 241: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeShopNoInfo:output_type -> kingdee_service.kingdee_ito.KingdeeShopNoInfoResponse
	79,  // 242: kingdee_service.kingdee_ito.TradeAggController.GetKingdeeStockNoInfo:output_type -> kingdee_service.kingdee_ito.KingdeeStockNoInfoResponse
	82,  // 243: kingdee_service.kingdee_ito.TradeAggController.List:output_type -> kingdee_service.kingdee_ito.KingdeeTradeListResponse
	3,   // 244: kingdee_service.kingdee_ito.TradeAggController.ListAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeListResponse
	30,  // 245: kingdee_service.kingdee_ito.TradeAggController.ListClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleListResponse
	39,  // 246: kingdee_service.kingdee_ito.TradeAggController.ListCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleListResponse
	51,  // 247: kingdee_service.kingdee_ito.TradeAggController.ListIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleListResponse
	65,  // 248: kingdee_service.kingdee_ito.TradeAggController.ListKingdeeSalOutStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockListResponse
	89,  // 249: kingdee_service.kingdee_ito.TradeAggController.ListMongoTrades:output_type -> kingdee_service.kingdee_ito.MongoTradesListResponse
	97,  // 250: kingdee_service.kingdee_ito.TradeAggController.ListPeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskListResponse
	125, // 251: kingdee_service.kingdee_ito.TradeAggController.ListTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultListResponse
	5,   // 252: kingdee_service.kingdee_ito.TradeAggController.NextNoAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeNextNoResponse
	85,  // 253: kingdee_service.kingdee_ito.TradeAggController.PartialUpdate:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	93,  // 254: kingdee_service.kingdee_ito.TradeAggController.PeriodAggTrade:output_type -> kingdee_service.kingdee_ito.PeriodAggTradeResponse
	104, // 255: kingdee_service.kingdee_ito.TradeAggController.PushToKingDeeSalOutStock:output_type -> kingdee_service.kingdee_ito.PushToKingDeeSalOutStockResponse
	85,  // 256: kingdee_service.kingdee_ito.TradeAggController.Retrieve:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	6,   // 257: kingdee_service.kingdee_ito.TradeAggController.RetrieveAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	33,  // 258: kingdee_service.kingdee_ito.TradeAggController.RetrieveClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	42,  // 259: kingdee_service.kingdee_ito.TradeAggController.RetrieveCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	54,  // 260: kingdee_service.kingdee_ito.TradeAggController.RetrieveIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	67,  // 261: kingdee_service.kingdee_ito.TradeAggController.RetrieveKingdeeSalOutStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalOutStockResponse
	90,  // 262: kingdee_service.kingdee_ito.TradeAggController.RetrieveMongoTrades:output_type -> kingdee_service.kingdee_ito.MongoTradesResponse
	100, // 263: kingdee_service.kingdee_ito.TradeAggController.RetrievePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	128, // 264: kingdee_service.kingdee_ito.TradeAggController.RetrieveTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	108, // 265: kingdee_service.kingdee_ito.TradeAggController.RevokeKingdeeSalOutstock:output_type -> kingdee_service.kingdee_ito.RevokeKingdeeSalOutstockResponse
	110, // 266: kingdee_service.kingdee_ito.TradeAggController.RunPeriodAggSharedTask:output_type -> kingdee_service.kingdee_ito.RunPeriodAggSharedTaskResponse
	112, // 267: kingdee_service.kingdee_ito.TradeAggController.RunPeriodPushToKingDeeSalOutStock:output_type -> kingdee_service.kingdee_ito.RunPeriodPushToKingDeeSalOutStockResponse
	114, // 268: kingdee_service.kingdee_ito.TradeAggController.RunPeriodicTask:output_type -> kingdee_service.kingdee_ito.RunPeriodicTaskResponse
	116, // 269: kingdee_service.kingdee_ito.TradeAggController.RunSliceFetchTrade:output_type -> kingdee_service.kingdee_ito.RunSharedTaskResponse
	120, // 270: kingdee_service.kingdee_ito.TradeAggController.StopPeriodicTask:output_type -> kingdee_service.kingdee_ito.StopPeriodicTaskResponse
	85,  // 271: kingdee_service.kingdee_ito.TradeAggController.Update:output_type -> kingdee_service.kingdee_ito.KingdeeTradeResponse
	6,   // 272: kingdee_service.kingdee_ito.TradeAggController.UpdateAggParamsTrade:output_type -> kingdee_service.kingdee_ito.AggParamsTradeResponse
	33,  // 273: kingdee_service.kingdee_ito.TradeAggController.UpdateClockedSchedule:output_type -> kingdee_service.kingdee_ito.ClockedScheduleResponse
	42,  // 274: kingdee_service.kingdee_ito.TradeAggController.UpdateCrontabSchedule:output_type -> kingdee_service.kingdee_ito.CrontabScheduleResponse
	54,  // 275: kingdee_service.kingdee_ito.TradeAggController.UpdateIntervalSchedule:output_type -> kingdee_service.kingdee_ito.IntervalScheduleResponse
	100, // 276: kingdee_service.kingdee_ito.TradeAggController.UpdatePeriodicTask:output_type -> kingdee_service.kingdee_ito.PeriodicTaskResponse
	128, // 277: kingdee_service.kingdee_ito.TradeAggController.UpdateTaskResult:output_type -> kingdee_service.kingdee_ito.TaskResultResponse
	74,  // 278: kingdee_service.kingdee_ito.TradeRefundAggController.CreateKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	138, // 279: kingdee_service.kingdee_ito.TradeRefundAggController.CreateTradeRefund:output_type -> kingdee_service.kingdee_ito.TradeRefundResponse
	146, // 280: kingdee_service.kingdee_ito.TradeRefundAggController.CreateTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.TradeRefundStockinResponse
	149, // 281: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyKingdeeSalReturnStock:output_type -> google.protobuf.Empty
	149, // 282: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyTradeRefund:output_type -> google.protobuf.Empty
	149, // 283: kingdee_service.kingdee_ito.TradeRefundAggController.DestroyTradeRefundStockin:output_type -> google.protobuf.Empty
	71,  // 284: kingdee_service.kingdee_ito.TradeRefundAggController.ListKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockListResponse
	135, // 285: kingdee_service.kingdee_ito.TradeRefundAggController.ListTradeRefund:output_type -> kingdee_service.kingdee_ito.TradeRefundListResponse
	143, // 286: kingdee_service.kingdee_ito.TradeRefundAggController.ListTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.TradeRefundStockinListResponse
	74,  // 287: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	138, // 288: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateTradeRefund:output_type -> kingdee_service.kingdee_ito.TradeRefundResponse
	146, // 289: kingdee_service.kingdee_ito.TradeRefundAggController.PartialUpdateTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.TradeRefundStockinResponse
	74,  // 290: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	138, // 291: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveTradeRefund:output_type -> kingdee_service.kingdee_ito.TradeRefundResponse
	146, // 292: kingdee_service.kingdee_ito.TradeRefundAggController.RetrieveTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.TradeRefundStockinResponse
	74,  // 293: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateKingdeeSalReturnStock:output_type -> kingdee_service.kingdee_ito.KingdeeSalReturnStockResponse
	138, // 294: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateTradeRefund:output_type -> kingdee_service.kingdee_ito.TradeRefundResponse
	146, // 295: kingdee_service.kingdee_ito.TradeRefundAggController.UpdateTradeRefundStockin:output_type -> kingdee_service.kingdee_ito.TradeRefundStockinResponse
	178, // [178:296] is the sub-list for method output_type
	60,  // [60:178] is the sub-list for method input_type
	60,  // [60:60] is the sub-list for extension type_name
	60,  // [60:60] is the sub-list for extension extendee
	0,   // [0:60] is the sub-list for field type_name
}

func init() { file_kingdee_ito_proto_init() }
func file_kingdee_ito_proto_init() {
	if File_kingdee_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kingdee_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeNextNoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeNextNoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggParamsTradeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggPushStatusCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggPushStatusCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAccountlogDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAccountlogListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAccountlogListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAccountlogPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAccountlogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAccountlogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayBillAccountlogRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeePurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeePurchaseOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeeReceiveBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateKingdeeReceiveBillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskInfoListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskQueryOptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskRunOptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeleryTaskRunOptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedSchedulePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockedScheduleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabSchedulePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabScheduleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchQimenTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchQimenTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalSchedulePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalScheduleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchasePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeePurchaseRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalOutStockRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeSalReturnStockRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeShopNoInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeShopNoInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStockNoInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeStockNoInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdeeTradeRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoGoodslistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoTradesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoTradesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoTradesRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodAggTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodAggTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTaskUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToKingDeeSalOutStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToKingDeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKingdeePurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKingdeePurchaseOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeKingdeeSalOutstockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeKingdeeSalOutstockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodAggSharedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodAggSharedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushToKingDeeSalOutStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodPushToKingDeeSalOutStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodicTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPeriodicTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSharedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSharedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalReturnStockEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalReturnStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPeriodicTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPeriodicTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubHeadEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResultUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kingdee_ito_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefundStockinRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kingdee_ito_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[90].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[99].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[111].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[113].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[118].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[122].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[124].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[126].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[127].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[128].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[130].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[132].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[133].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[134].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[136].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[137].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[138].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[141].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[142].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[145].OneofWrappers = []interface{}{}
	file_kingdee_ito_proto_msgTypes[146].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kingdee_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   148,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_kingdee_ito_proto_goTypes,
		DependencyIndexes: file_kingdee_ito_proto_depIdxs,
		MessageInfos:      file_kingdee_ito_proto_msgTypes,
	}.Build()
	File_kingdee_ito_proto = out.File
	file_kingdee_ito_proto_rawDesc = nil
	file_kingdee_ito_proto_goTypes = nil
	file_kingdee_ito_proto_depIdxs = nil
}
