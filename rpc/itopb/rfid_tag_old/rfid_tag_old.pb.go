// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: rfid_tag_old.proto

package rfid_tag_old

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ItoTagsModelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters                 string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CreateTime              string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	DeletedState            int32   `protobuf:"varint,4,opt,name=deleted_state,json=deletedState,proto3" json:"deleted_state,omitempty"`
	UpdateTime              *string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	CreateUserid            *int32  `protobuf:"varint,6,opt,name=create_userid,json=createUserid,proto3,oneof" json:"create_userid,omitempty"`
	UpdateUserid            *int32  `protobuf:"varint,7,opt,name=update_userid,json=updateUserid,proto3,oneof" json:"update_userid,omitempty"`
	Epc                     string  `protobuf:"bytes,8,opt,name=epc,proto3" json:"epc,omitempty"`
	QaDate                  *string `protobuf:"bytes,9,opt,name=qa_date,json=qaDate,proto3,oneof" json:"qa_date,omitempty"`
	QaOrderNo               *string `protobuf:"bytes,10,opt,name=qa_order_no,json=qaOrderNo,proto3,oneof" json:"qa_order_no,omitempty"`
	QaUser                  *string `protobuf:"bytes,11,opt,name=qa_user,json=qaUser,proto3,oneof" json:"qa_user,omitempty"`
	ProdCode                string  `protobuf:"bytes,12,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	Tid                     *string `protobuf:"bytes,13,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	Afc                     *string `protobuf:"bytes,14,opt,name=afc,proto3,oneof" json:"afc,omitempty"`
	BatchNo                 *string `protobuf:"bytes,15,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	Defect                  *int32  `protobuf:"varint,16,opt,name=defect,proto3,oneof" json:"defect,omitempty"`
	DeliveryOrderNo         *string `protobuf:"bytes,17,opt,name=delivery_order_no,json=deliveryOrderNo,proto3,oneof" json:"delivery_order_no,omitempty"`
	EpcStatus               *int32  `protobuf:"varint,18,opt,name=epc_status,json=epcStatus,proto3,oneof" json:"epc_status,omitempty"`
	ErpStockInNo            *string `protobuf:"bytes,19,opt,name=erp_stock_in_no,json=erpStockInNo,proto3,oneof" json:"erp_stock_in_no,omitempty"`
	ErpTradeNo              *string `protobuf:"bytes,20,opt,name=erp_trade_no,json=erpTradeNo,proto3,oneof" json:"erp_trade_no,omitempty"`
	InfoConfDate            *string `protobuf:"bytes,21,opt,name=info_conf_date,json=infoConfDate,proto3,oneof" json:"info_conf_date,omitempty"`
	InfoConfUser            *string `protobuf:"bytes,22,opt,name=info_conf_user,json=infoConfUser,proto3,oneof" json:"info_conf_user,omitempty"`
	ManufactureDate         *string `protobuf:"bytes,23,opt,name=manufacture_date,json=manufactureDate,proto3,oneof" json:"manufacture_date,omitempty"`
	OwnerNo                 *string `protobuf:"bytes,24,opt,name=owner_no,json=ownerNo,proto3,oneof" json:"owner_no,omitempty"`
	PlatStockInNo           *string `protobuf:"bytes,25,opt,name=plat_stock_in_no,json=platStockInNo,proto3,oneof" json:"plat_stock_in_no,omitempty"`
	PlatTradeNo             *string `protobuf:"bytes,26,opt,name=plat_trade_no,json=platTradeNo,proto3,oneof" json:"plat_trade_no,omitempty"`
	PositionNo              *string `protobuf:"bytes,27,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	Reason                  *string `protobuf:"bytes,28,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	ReceivingOrderNo        *string `protobuf:"bytes,29,opt,name=receiving_order_no,json=receivingOrderNo,proto3,oneof" json:"receiving_order_no,omitempty"`
	ReturnOrderNo           *string `protobuf:"bytes,30,opt,name=return_order_no,json=returnOrderNo,proto3,oneof" json:"return_order_no,omitempty"`
	SortingOrderNo          *string `protobuf:"bytes,31,opt,name=sorting_order_no,json=sortingOrderNo,proto3,oneof" json:"sorting_order_no,omitempty"`
	StockInType             *int32  `protobuf:"varint,32,opt,name=stock_in_type,json=stockInType,proto3,oneof" json:"stock_in_type,omitempty"`
	StoreId                 *int32  `protobuf:"varint,33,opt,name=store_id,json=storeId,proto3,oneof" json:"store_id,omitempty"`
	SupplierDeliveryOrderNo *string `protobuf:"bytes,34,opt,name=supplier_delivery_order_no,json=supplierDeliveryOrderNo,proto3,oneof" json:"supplier_delivery_order_no,omitempty"`
	SupplierNo              *string `protobuf:"bytes,35,opt,name=supplier_no,json=supplierNo,proto3,oneof" json:"supplier_no,omitempty"`
	SupplierOrderNo         *string `protobuf:"bytes,36,opt,name=supplier_order_no,json=supplierOrderNo,proto3,oneof" json:"supplier_order_no,omitempty"`
	TenantId                *int32  `protobuf:"varint,37,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
	TradeOrderNo            *string `protobuf:"bytes,38,opt,name=trade_order_no,json=tradeOrderNo,proto3,oneof" json:"trade_order_no,omitempty"`
	TradeType               *int32  `protobuf:"varint,39,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	WarehouseNo             *string `protobuf:"bytes,40,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	PrefixUrl               *string `protobuf:"bytes,41,opt,name=prefix_url,json=prefixUrl,proto3,oneof" json:"prefix_url,omitempty"`
}

func (x *ItoTagsModelListRequest) Reset() {
	*x = ItoTagsModelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_tag_old_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTagsModelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTagsModelListRequest) ProtoMessage() {}

func (x *ItoTagsModelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_tag_old_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTagsModelListRequest.ProtoReflect.Descriptor instead.
func (*ItoTagsModelListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_tag_old_proto_rawDescGZIP(), []int{0}
}

func (x *ItoTagsModelListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetDeletedState() int32 {
	if x != nil {
		return x.DeletedState
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetCreateUserid() int32 {
	if x != nil && x.CreateUserid != nil {
		return *x.CreateUserid
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetUpdateUserid() int32 {
	if x != nil && x.UpdateUserid != nil {
		return *x.UpdateUserid
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetQaDate() string {
	if x != nil && x.QaDate != nil {
		return *x.QaDate
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetQaOrderNo() string {
	if x != nil && x.QaOrderNo != nil {
		return *x.QaOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetQaUser() string {
	if x != nil && x.QaUser != nil {
		return *x.QaUser
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetAfc() string {
	if x != nil && x.Afc != nil {
		return *x.Afc
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetDefect() int32 {
	if x != nil && x.Defect != nil {
		return *x.Defect
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetDeliveryOrderNo() string {
	if x != nil && x.DeliveryOrderNo != nil {
		return *x.DeliveryOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetEpcStatus() int32 {
	if x != nil && x.EpcStatus != nil {
		return *x.EpcStatus
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetErpStockInNo() string {
	if x != nil && x.ErpStockInNo != nil {
		return *x.ErpStockInNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetErpTradeNo() string {
	if x != nil && x.ErpTradeNo != nil {
		return *x.ErpTradeNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetInfoConfDate() string {
	if x != nil && x.InfoConfDate != nil {
		return *x.InfoConfDate
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetInfoConfUser() string {
	if x != nil && x.InfoConfUser != nil {
		return *x.InfoConfUser
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetManufactureDate() string {
	if x != nil && x.ManufactureDate != nil {
		return *x.ManufactureDate
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetOwnerNo() string {
	if x != nil && x.OwnerNo != nil {
		return *x.OwnerNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetPlatStockInNo() string {
	if x != nil && x.PlatStockInNo != nil {
		return *x.PlatStockInNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetPlatTradeNo() string {
	if x != nil && x.PlatTradeNo != nil {
		return *x.PlatTradeNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetReceivingOrderNo() string {
	if x != nil && x.ReceivingOrderNo != nil {
		return *x.ReceivingOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetReturnOrderNo() string {
	if x != nil && x.ReturnOrderNo != nil {
		return *x.ReturnOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetSortingOrderNo() string {
	if x != nil && x.SortingOrderNo != nil {
		return *x.SortingOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetStockInType() int32 {
	if x != nil && x.StockInType != nil {
		return *x.StockInType
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetStoreId() int32 {
	if x != nil && x.StoreId != nil {
		return *x.StoreId
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetSupplierDeliveryOrderNo() string {
	if x != nil && x.SupplierDeliveryOrderNo != nil {
		return *x.SupplierDeliveryOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetSupplierNo() string {
	if x != nil && x.SupplierNo != nil {
		return *x.SupplierNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetSupplierOrderNo() string {
	if x != nil && x.SupplierOrderNo != nil {
		return *x.SupplierOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetTenantId() int32 {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetTradeOrderNo() string {
	if x != nil && x.TradeOrderNo != nil {
		return *x.TradeOrderNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *ItoTagsModelListRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *ItoTagsModelListRequest) GetPrefixUrl() string {
	if x != nil && x.PrefixUrl != nil {
		return *x.PrefixUrl
	}
	return ""
}

type ItoTagsModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ItoTagsModelResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ItoTagsModelListResponse) Reset() {
	*x = ItoTagsModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_tag_old_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTagsModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTagsModelListResponse) ProtoMessage() {}

func (x *ItoTagsModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_tag_old_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTagsModelListResponse.ProtoReflect.Descriptor instead.
func (*ItoTagsModelListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_tag_old_proto_rawDescGZIP(), []int{1}
}

func (x *ItoTagsModelListResponse) GetResults() []*ItoTagsModelResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ItoTagsModelListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ItoTagsModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime              string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	DeletedState            int32   `protobuf:"varint,3,opt,name=deleted_state,json=deletedState,proto3" json:"deleted_state,omitempty"`
	UpdateTime              *string `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	CreateUserid            *int32  `protobuf:"varint,5,opt,name=create_userid,json=createUserid,proto3,oneof" json:"create_userid,omitempty"`
	UpdateUserid            *int32  `protobuf:"varint,6,opt,name=update_userid,json=updateUserid,proto3,oneof" json:"update_userid,omitempty"`
	Epc                     string  `protobuf:"bytes,7,opt,name=epc,proto3" json:"epc,omitempty"`
	QaDate                  *string `protobuf:"bytes,8,opt,name=qa_date,json=qaDate,proto3,oneof" json:"qa_date,omitempty"`
	QaOrderNo               *string `protobuf:"bytes,9,opt,name=qa_order_no,json=qaOrderNo,proto3,oneof" json:"qa_order_no,omitempty"`
	QaUser                  *string `protobuf:"bytes,10,opt,name=qa_user,json=qaUser,proto3,oneof" json:"qa_user,omitempty"`
	ProdCode                string  `protobuf:"bytes,11,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	Tid                     *string `protobuf:"bytes,12,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	Afc                     *string `protobuf:"bytes,13,opt,name=afc,proto3,oneof" json:"afc,omitempty"`
	BatchNo                 *string `protobuf:"bytes,14,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	Defect                  *int32  `protobuf:"varint,15,opt,name=defect,proto3,oneof" json:"defect,omitempty"`
	DeliveryOrderNo         *string `protobuf:"bytes,16,opt,name=delivery_order_no,json=deliveryOrderNo,proto3,oneof" json:"delivery_order_no,omitempty"`
	EpcStatus               *int32  `protobuf:"varint,17,opt,name=epc_status,json=epcStatus,proto3,oneof" json:"epc_status,omitempty"`
	ErpStockInNo            *string `protobuf:"bytes,18,opt,name=erp_stock_in_no,json=erpStockInNo,proto3,oneof" json:"erp_stock_in_no,omitempty"`
	ErpTradeNo              *string `protobuf:"bytes,19,opt,name=erp_trade_no,json=erpTradeNo,proto3,oneof" json:"erp_trade_no,omitempty"`
	InfoConfDate            *string `protobuf:"bytes,20,opt,name=info_conf_date,json=infoConfDate,proto3,oneof" json:"info_conf_date,omitempty"`
	InfoConfUser            *string `protobuf:"bytes,21,opt,name=info_conf_user,json=infoConfUser,proto3,oneof" json:"info_conf_user,omitempty"`
	ManufactureDate         *string `protobuf:"bytes,22,opt,name=manufacture_date,json=manufactureDate,proto3,oneof" json:"manufacture_date,omitempty"`
	OwnerNo                 *string `protobuf:"bytes,23,opt,name=owner_no,json=ownerNo,proto3,oneof" json:"owner_no,omitempty"`
	PlatStockInNo           *string `protobuf:"bytes,24,opt,name=plat_stock_in_no,json=platStockInNo,proto3,oneof" json:"plat_stock_in_no,omitempty"`
	PlatTradeNo             *string `protobuf:"bytes,25,opt,name=plat_trade_no,json=platTradeNo,proto3,oneof" json:"plat_trade_no,omitempty"`
	PositionNo              *string `protobuf:"bytes,26,opt,name=position_no,json=positionNo,proto3,oneof" json:"position_no,omitempty"`
	Reason                  *string `protobuf:"bytes,27,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	ReceivingOrderNo        *string `protobuf:"bytes,28,opt,name=receiving_order_no,json=receivingOrderNo,proto3,oneof" json:"receiving_order_no,omitempty"`
	ReturnOrderNo           *string `protobuf:"bytes,29,opt,name=return_order_no,json=returnOrderNo,proto3,oneof" json:"return_order_no,omitempty"`
	SortingOrderNo          *string `protobuf:"bytes,30,opt,name=sorting_order_no,json=sortingOrderNo,proto3,oneof" json:"sorting_order_no,omitempty"`
	StockInType             *int32  `protobuf:"varint,31,opt,name=stock_in_type,json=stockInType,proto3,oneof" json:"stock_in_type,omitempty"`
	StoreId                 *int32  `protobuf:"varint,32,opt,name=store_id,json=storeId,proto3,oneof" json:"store_id,omitempty"`
	SupplierDeliveryOrderNo *string `protobuf:"bytes,33,opt,name=supplier_delivery_order_no,json=supplierDeliveryOrderNo,proto3,oneof" json:"supplier_delivery_order_no,omitempty"`
	SupplierNo              *string `protobuf:"bytes,34,opt,name=supplier_no,json=supplierNo,proto3,oneof" json:"supplier_no,omitempty"`
	SupplierOrderNo         *string `protobuf:"bytes,35,opt,name=supplier_order_no,json=supplierOrderNo,proto3,oneof" json:"supplier_order_no,omitempty"`
	TenantId                *int32  `protobuf:"varint,36,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
	TradeOrderNo            *string `protobuf:"bytes,37,opt,name=trade_order_no,json=tradeOrderNo,proto3,oneof" json:"trade_order_no,omitempty"`
	TradeType               *int32  `protobuf:"varint,38,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	WarehouseNo             *string `protobuf:"bytes,39,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	PrefixUrl               *string `protobuf:"bytes,40,opt,name=prefix_url,json=prefixUrl,proto3,oneof" json:"prefix_url,omitempty"`
	EpcStatusName           string  `protobuf:"bytes,41,opt,name=epc_status_name,json=epcStatusName,proto3" json:"epc_status_name,omitempty"`
}

func (x *ItoTagsModelResponse) Reset() {
	*x = ItoTagsModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_tag_old_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTagsModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTagsModelResponse) ProtoMessage() {}

func (x *ItoTagsModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_tag_old_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTagsModelResponse.ProtoReflect.Descriptor instead.
func (*ItoTagsModelResponse) Descriptor() ([]byte, []int) {
	return file_rfid_tag_old_proto_rawDescGZIP(), []int{2}
}

func (x *ItoTagsModelResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItoTagsModelResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ItoTagsModelResponse) GetDeletedState() int32 {
	if x != nil {
		return x.DeletedState
	}
	return 0
}

func (x *ItoTagsModelResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *ItoTagsModelResponse) GetCreateUserid() int32 {
	if x != nil && x.CreateUserid != nil {
		return *x.CreateUserid
	}
	return 0
}

func (x *ItoTagsModelResponse) GetUpdateUserid() int32 {
	if x != nil && x.UpdateUserid != nil {
		return *x.UpdateUserid
	}
	return 0
}

func (x *ItoTagsModelResponse) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *ItoTagsModelResponse) GetQaDate() string {
	if x != nil && x.QaDate != nil {
		return *x.QaDate
	}
	return ""
}

func (x *ItoTagsModelResponse) GetQaOrderNo() string {
	if x != nil && x.QaOrderNo != nil {
		return *x.QaOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetQaUser() string {
	if x != nil && x.QaUser != nil {
		return *x.QaUser
	}
	return ""
}

func (x *ItoTagsModelResponse) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ItoTagsModelResponse) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *ItoTagsModelResponse) GetAfc() string {
	if x != nil && x.Afc != nil {
		return *x.Afc
	}
	return ""
}

func (x *ItoTagsModelResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetDefect() int32 {
	if x != nil && x.Defect != nil {
		return *x.Defect
	}
	return 0
}

func (x *ItoTagsModelResponse) GetDeliveryOrderNo() string {
	if x != nil && x.DeliveryOrderNo != nil {
		return *x.DeliveryOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetEpcStatus() int32 {
	if x != nil && x.EpcStatus != nil {
		return *x.EpcStatus
	}
	return 0
}

func (x *ItoTagsModelResponse) GetErpStockInNo() string {
	if x != nil && x.ErpStockInNo != nil {
		return *x.ErpStockInNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetErpTradeNo() string {
	if x != nil && x.ErpTradeNo != nil {
		return *x.ErpTradeNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetInfoConfDate() string {
	if x != nil && x.InfoConfDate != nil {
		return *x.InfoConfDate
	}
	return ""
}

func (x *ItoTagsModelResponse) GetInfoConfUser() string {
	if x != nil && x.InfoConfUser != nil {
		return *x.InfoConfUser
	}
	return ""
}

func (x *ItoTagsModelResponse) GetManufactureDate() string {
	if x != nil && x.ManufactureDate != nil {
		return *x.ManufactureDate
	}
	return ""
}

func (x *ItoTagsModelResponse) GetOwnerNo() string {
	if x != nil && x.OwnerNo != nil {
		return *x.OwnerNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetPlatStockInNo() string {
	if x != nil && x.PlatStockInNo != nil {
		return *x.PlatStockInNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetPlatTradeNo() string {
	if x != nil && x.PlatTradeNo != nil {
		return *x.PlatTradeNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetPositionNo() string {
	if x != nil && x.PositionNo != nil {
		return *x.PositionNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *ItoTagsModelResponse) GetReceivingOrderNo() string {
	if x != nil && x.ReceivingOrderNo != nil {
		return *x.ReceivingOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetReturnOrderNo() string {
	if x != nil && x.ReturnOrderNo != nil {
		return *x.ReturnOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetSortingOrderNo() string {
	if x != nil && x.SortingOrderNo != nil {
		return *x.SortingOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetStockInType() int32 {
	if x != nil && x.StockInType != nil {
		return *x.StockInType
	}
	return 0
}

func (x *ItoTagsModelResponse) GetStoreId() int32 {
	if x != nil && x.StoreId != nil {
		return *x.StoreId
	}
	return 0
}

func (x *ItoTagsModelResponse) GetSupplierDeliveryOrderNo() string {
	if x != nil && x.SupplierDeliveryOrderNo != nil {
		return *x.SupplierDeliveryOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetSupplierNo() string {
	if x != nil && x.SupplierNo != nil {
		return *x.SupplierNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetSupplierOrderNo() string {
	if x != nil && x.SupplierOrderNo != nil {
		return *x.SupplierOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetTenantId() int32 {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return 0
}

func (x *ItoTagsModelResponse) GetTradeOrderNo() string {
	if x != nil && x.TradeOrderNo != nil {
		return *x.TradeOrderNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *ItoTagsModelResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *ItoTagsModelResponse) GetPrefixUrl() string {
	if x != nil && x.PrefixUrl != nil {
		return *x.PrefixUrl
	}
	return ""
}

func (x *ItoTagsModelResponse) GetEpcStatusName() string {
	if x != nil {
		return x.EpcStatusName
	}
	return ""
}

type ItoTagsModelRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ItoTagsModelRetrieveRequest) Reset() {
	*x = ItoTagsModelRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_tag_old_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTagsModelRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTagsModelRetrieveRequest) ProtoMessage() {}

func (x *ItoTagsModelRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_tag_old_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTagsModelRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ItoTagsModelRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_tag_old_proto_rawDescGZIP(), []int{3}
}

func (x *ItoTagsModelRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_rfid_tag_old_proto protoreflect.FileDescriptor

var file_rfid_tag_old_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c, 0x64, 0x22,
	0xe0, 0x10, 0x0a, 0x17, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x1c, 0x0a, 0x07, 0x71, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x71, 0x61, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x71, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x71, 0x61,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x71, 0x61,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x71,
	0x61, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x61, 0x66, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x03, 0x61, 0x66, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06, 0x64, 0x65, 0x66, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x09, 0x65, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x65, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x0c, 0x65, 0x72, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x65, 0x72, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x70, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x69,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1a, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x21, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x61, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61,
	0x66, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x63, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x65, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x72, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75,
	0x72, 0x6c, 0x22, 0x7b, 0x0a, 0x18, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c, 0x64, 0x2e, 0x49, 0x74, 0x6f, 0x54,
	0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xeb, 0x10, 0x0a, 0x14, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x1c, 0x0a, 0x07, 0x71, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x71,
	0x61, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x71, 0x61, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x09, 0x71, 0x61, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x71, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x71, 0x61, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x61, 0x66, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x03,
	0x61, 0x66, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06, 0x64, 0x65, 0x66, 0x65, 0x63, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x09, 0x65, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x65, 0x72, 0x70, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x0c, 0x65, 0x72, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x65, 0x72, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x65, 0x72,
	0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0f, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x19, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1e, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x70, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x66, 0x63, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x63, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65,
	0x72, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x65, 0x72, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x2d, 0x0a,
	0x1b, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x32, 0x80, 0x02, 0x0a,
	0x14, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c, 0x64, 0x2e, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c, 0x64, 0x2e, 0x49, 0x74,
	0x6f, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x12, 0x36, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c, 0x64,
	0x2e, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c, 0x64, 0x2e, 0x49, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6c,
	0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rfid_tag_old_proto_rawDescOnce sync.Once
	file_rfid_tag_old_proto_rawDescData = file_rfid_tag_old_proto_rawDesc
)

func file_rfid_tag_old_proto_rawDescGZIP() []byte {
	file_rfid_tag_old_proto_rawDescOnce.Do(func() {
		file_rfid_tag_old_proto_rawDescData = protoimpl.X.CompressGZIP(file_rfid_tag_old_proto_rawDescData)
	})
	return file_rfid_tag_old_proto_rawDescData
}

var file_rfid_tag_old_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rfid_tag_old_proto_goTypes = []interface{}{
	(*ItoTagsModelListRequest)(nil),     // 0: rfid_service.rfid_tag_old.ItoTagsModelListRequest
	(*ItoTagsModelListResponse)(nil),    // 1: rfid_service.rfid_tag_old.ItoTagsModelListResponse
	(*ItoTagsModelResponse)(nil),        // 2: rfid_service.rfid_tag_old.ItoTagsModelResponse
	(*ItoTagsModelRetrieveRequest)(nil), // 3: rfid_service.rfid_tag_old.ItoTagsModelRetrieveRequest
}
var file_rfid_tag_old_proto_depIdxs = []int32{
	2, // 0: rfid_service.rfid_tag_old.ItoTagsModelListResponse.results:type_name -> rfid_service.rfid_tag_old.ItoTagsModelResponse
	0, // 1: rfid_service.rfid_tag_old.ItoTagsOldController.List:input_type -> rfid_service.rfid_tag_old.ItoTagsModelListRequest
	3, // 2: rfid_service.rfid_tag_old.ItoTagsOldController.Retrieve:input_type -> rfid_service.rfid_tag_old.ItoTagsModelRetrieveRequest
	1, // 3: rfid_service.rfid_tag_old.ItoTagsOldController.List:output_type -> rfid_service.rfid_tag_old.ItoTagsModelListResponse
	2, // 4: rfid_service.rfid_tag_old.ItoTagsOldController.Retrieve:output_type -> rfid_service.rfid_tag_old.ItoTagsModelResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_rfid_tag_old_proto_init() }
func file_rfid_tag_old_proto_init() {
	if File_rfid_tag_old_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rfid_tag_old_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTagsModelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_tag_old_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTagsModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_tag_old_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTagsModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_tag_old_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTagsModelRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rfid_tag_old_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_rfid_tag_old_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rfid_tag_old_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rfid_tag_old_proto_goTypes,
		DependencyIndexes: file_rfid_tag_old_proto_depIdxs,
		MessageInfos:      file_rfid_tag_old_proto_msgTypes,
	}.Build()
	File_rfid_tag_old_proto = out.File
	file_rfid_tag_old_proto_rawDesc = nil
	file_rfid_tag_old_proto_goTypes = nil
	file_rfid_tag_old_proto_depIdxs = nil
}
