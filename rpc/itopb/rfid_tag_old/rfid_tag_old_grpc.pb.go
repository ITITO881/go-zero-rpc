// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rfid_tag_old.proto

package rfid_tag_old

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ItoTagsOldController_List_FullMethodName     = "/rfid_service.rfid_tag_old.ItoTagsOldController/List"
	ItoTagsOldController_Retrieve_FullMethodName = "/rfid_service.rfid_tag_old.ItoTagsOldController/Retrieve"
)

// ItoTagsOldControllerClient is the client API for ItoTagsOldController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItoTagsOldControllerClient interface {
	List(ctx context.Context, in *ItoTagsModelListRequest, opts ...grpc.CallOption) (*ItoTagsModelListResponse, error)
	Retrieve(ctx context.Context, in *ItoTagsModelRetrieveRequest, opts ...grpc.CallOption) (*ItoTagsModelResponse, error)
}

type itoTagsOldControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewItoTagsOldControllerClient(cc grpc.ClientConnInterface) ItoTagsOldControllerClient {
	return &itoTagsOldControllerClient{cc}
}

func (c *itoTagsOldControllerClient) List(ctx context.Context, in *ItoTagsModelListRequest, opts ...grpc.CallOption) (*ItoTagsModelListResponse, error) {
	out := new(ItoTagsModelListResponse)
	err := c.cc.Invoke(ctx, ItoTagsOldController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itoTagsOldControllerClient) Retrieve(ctx context.Context, in *ItoTagsModelRetrieveRequest, opts ...grpc.CallOption) (*ItoTagsModelResponse, error) {
	out := new(ItoTagsModelResponse)
	err := c.cc.Invoke(ctx, ItoTagsOldController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItoTagsOldControllerServer is the server API for ItoTagsOldController service.
// All implementations must embed UnimplementedItoTagsOldControllerServer
// for forward compatibility
type ItoTagsOldControllerServer interface {
	List(context.Context, *ItoTagsModelListRequest) (*ItoTagsModelListResponse, error)
	Retrieve(context.Context, *ItoTagsModelRetrieveRequest) (*ItoTagsModelResponse, error)
	mustEmbedUnimplementedItoTagsOldControllerServer()
}

// UnimplementedItoTagsOldControllerServer must be embedded to have forward compatible implementations.
type UnimplementedItoTagsOldControllerServer struct {
}

func (UnimplementedItoTagsOldControllerServer) List(context.Context, *ItoTagsModelListRequest) (*ItoTagsModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedItoTagsOldControllerServer) Retrieve(context.Context, *ItoTagsModelRetrieveRequest) (*ItoTagsModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedItoTagsOldControllerServer) mustEmbedUnimplementedItoTagsOldControllerServer() {}

// UnsafeItoTagsOldControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItoTagsOldControllerServer will
// result in compilation errors.
type UnsafeItoTagsOldControllerServer interface {
	mustEmbedUnimplementedItoTagsOldControllerServer()
}

func RegisterItoTagsOldControllerServer(s grpc.ServiceRegistrar, srv ItoTagsOldControllerServer) {
	s.RegisterService(&ItoTagsOldController_ServiceDesc, srv)
}

func _ItoTagsOldController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItoTagsModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItoTagsOldControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItoTagsOldController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItoTagsOldControllerServer).List(ctx, req.(*ItoTagsModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItoTagsOldController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItoTagsModelRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItoTagsOldControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItoTagsOldController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItoTagsOldControllerServer).Retrieve(ctx, req.(*ItoTagsModelRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItoTagsOldController_ServiceDesc is the grpc.ServiceDesc for ItoTagsOldController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItoTagsOldController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfid_service.rfid_tag_old.ItoTagsOldController",
	HandlerType: (*ItoTagsOldControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ItoTagsOldController_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ItoTagsOldController_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rfid_tag_old.proto",
}
