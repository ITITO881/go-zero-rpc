// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: ctm_auth.proto

package pbctmauthito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MpLoginSvc_MpCtmToken_FullMethodName       = "/login.MpLoginSvc/MpCtmToken"
	MpLoginSvc_MpCtmMp_FullMethodName          = "/login.MpLoginSvc/MpCtmMp"
	MpLoginSvc_GenCtmToken_FullMethodName      = "/login.MpLoginSvc/GenCtmToken"
	MpLoginSvc_ParseCtmToken_FullMethodName    = "/login.MpLoginSvc/ParseCtmToken"
	MpLoginSvc_WxaSecurityCheck_FullMethodName = "/login.MpLoginSvc/WxaSecurityCheck"
)

// MpLoginSvcClient is the client API for MpLoginSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MpLoginSvcClient interface {
	// 1. 根据mp用户 jsCode，获取unionId，以及openId
	MpCtmToken(ctx context.Context, in *CtmJsCodeReq, opts ...grpc.CallOption) (*CtmJsCodeResp, error)
	// 2. 根据mp用 手机code，获取手机解密号码
	MpCtmMp(ctx context.Context, in *CtmPhoneReq, opts ...grpc.CallOption) (*CtmPhoneResp, error)
	// 3. 根据openId，userId，userMobile 生成 客户使用的 token
	GenCtmToken(ctx context.Context, in *GenCtmTokenReq, opts ...grpc.CallOption) (*GenCtmTokenResp, error)
	// 4. 根据用户使用的 token 返回 openId，userId，userMobile
	ParseCtmToken(ctx context.Context, in *ParseCtmTokenReq, opts ...grpc.CallOption) (*ParseCtmTokenResp, error)
	// 5. 内容安全
	WxaSecurityCheck(ctx context.Context, in *WxaSecurityCheckReq, opts ...grpc.CallOption) (*WxaSecurityCheckResp, error)
}

type mpLoginSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMpLoginSvcClient(cc grpc.ClientConnInterface) MpLoginSvcClient {
	return &mpLoginSvcClient{cc}
}

func (c *mpLoginSvcClient) MpCtmToken(ctx context.Context, in *CtmJsCodeReq, opts ...grpc.CallOption) (*CtmJsCodeResp, error) {
	out := new(CtmJsCodeResp)
	err := c.cc.Invoke(ctx, MpLoginSvc_MpCtmToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpLoginSvcClient) MpCtmMp(ctx context.Context, in *CtmPhoneReq, opts ...grpc.CallOption) (*CtmPhoneResp, error) {
	out := new(CtmPhoneResp)
	err := c.cc.Invoke(ctx, MpLoginSvc_MpCtmMp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpLoginSvcClient) GenCtmToken(ctx context.Context, in *GenCtmTokenReq, opts ...grpc.CallOption) (*GenCtmTokenResp, error) {
	out := new(GenCtmTokenResp)
	err := c.cc.Invoke(ctx, MpLoginSvc_GenCtmToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpLoginSvcClient) ParseCtmToken(ctx context.Context, in *ParseCtmTokenReq, opts ...grpc.CallOption) (*ParseCtmTokenResp, error) {
	out := new(ParseCtmTokenResp)
	err := c.cc.Invoke(ctx, MpLoginSvc_ParseCtmToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpLoginSvcClient) WxaSecurityCheck(ctx context.Context, in *WxaSecurityCheckReq, opts ...grpc.CallOption) (*WxaSecurityCheckResp, error) {
	out := new(WxaSecurityCheckResp)
	err := c.cc.Invoke(ctx, MpLoginSvc_WxaSecurityCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MpLoginSvcServer is the server API for MpLoginSvc service.
// All implementations must embed UnimplementedMpLoginSvcServer
// for forward compatibility
type MpLoginSvcServer interface {
	// 1. 根据mp用户 jsCode，获取unionId，以及openId
	MpCtmToken(context.Context, *CtmJsCodeReq) (*CtmJsCodeResp, error)
	// 2. 根据mp用 手机code，获取手机解密号码
	MpCtmMp(context.Context, *CtmPhoneReq) (*CtmPhoneResp, error)
	// 3. 根据openId，userId，userMobile 生成 客户使用的 token
	GenCtmToken(context.Context, *GenCtmTokenReq) (*GenCtmTokenResp, error)
	// 4. 根据用户使用的 token 返回 openId，userId，userMobile
	ParseCtmToken(context.Context, *ParseCtmTokenReq) (*ParseCtmTokenResp, error)
	// 5. 内容安全
	WxaSecurityCheck(context.Context, *WxaSecurityCheckReq) (*WxaSecurityCheckResp, error)
	mustEmbedUnimplementedMpLoginSvcServer()
}

// UnimplementedMpLoginSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMpLoginSvcServer struct {
}

func (UnimplementedMpLoginSvcServer) MpCtmToken(context.Context, *CtmJsCodeReq) (*CtmJsCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MpCtmToken not implemented")
}
func (UnimplementedMpLoginSvcServer) MpCtmMp(context.Context, *CtmPhoneReq) (*CtmPhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MpCtmMp not implemented")
}
func (UnimplementedMpLoginSvcServer) GenCtmToken(context.Context, *GenCtmTokenReq) (*GenCtmTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenCtmToken not implemented")
}
func (UnimplementedMpLoginSvcServer) ParseCtmToken(context.Context, *ParseCtmTokenReq) (*ParseCtmTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseCtmToken not implemented")
}
func (UnimplementedMpLoginSvcServer) WxaSecurityCheck(context.Context, *WxaSecurityCheckReq) (*WxaSecurityCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxaSecurityCheck not implemented")
}
func (UnimplementedMpLoginSvcServer) mustEmbedUnimplementedMpLoginSvcServer() {}

// UnsafeMpLoginSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MpLoginSvcServer will
// result in compilation errors.
type UnsafeMpLoginSvcServer interface {
	mustEmbedUnimplementedMpLoginSvcServer()
}

func RegisterMpLoginSvcServer(s grpc.ServiceRegistrar, srv MpLoginSvcServer) {
	s.RegisterService(&MpLoginSvc_ServiceDesc, srv)
}

func _MpLoginSvc_MpCtmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmJsCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpLoginSvcServer).MpCtmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpLoginSvc_MpCtmToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpLoginSvcServer).MpCtmToken(ctx, req.(*CtmJsCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpLoginSvc_MpCtmMp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpLoginSvcServer).MpCtmMp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpLoginSvc_MpCtmMp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpLoginSvcServer).MpCtmMp(ctx, req.(*CtmPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpLoginSvc_GenCtmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenCtmTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpLoginSvcServer).GenCtmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpLoginSvc_GenCtmToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpLoginSvcServer).GenCtmToken(ctx, req.(*GenCtmTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpLoginSvc_ParseCtmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseCtmTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpLoginSvcServer).ParseCtmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpLoginSvc_ParseCtmToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpLoginSvcServer).ParseCtmToken(ctx, req.(*ParseCtmTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpLoginSvc_WxaSecurityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxaSecurityCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpLoginSvcServer).WxaSecurityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpLoginSvc_WxaSecurityCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpLoginSvcServer).WxaSecurityCheck(ctx, req.(*WxaSecurityCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MpLoginSvc_ServiceDesc is the grpc.ServiceDesc for MpLoginSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MpLoginSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "login.MpLoginSvc",
	HandlerType: (*MpLoginSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MpCtmToken",
			Handler:    _MpLoginSvc_MpCtmToken_Handler,
		},
		{
			MethodName: "MpCtmMp",
			Handler:    _MpLoginSvc_MpCtmMp_Handler,
		},
		{
			MethodName: "GenCtmToken",
			Handler:    _MpLoginSvc_GenCtmToken_Handler,
		},
		{
			MethodName: "ParseCtmToken",
			Handler:    _MpLoginSvc_ParseCtmToken_Handler,
		},
		{
			MethodName: "WxaSecurityCheck",
			Handler:    _MpLoginSvc_WxaSecurityCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ctm_auth.proto",
}
