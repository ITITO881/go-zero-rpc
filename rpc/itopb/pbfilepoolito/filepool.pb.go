// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: filepool.proto

package pbfilepoolito

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdentityExistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Source   int64  `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *IdentityExistReq) Reset() {
	*x = IdentityExistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityExistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityExistReq) ProtoMessage() {}

func (x *IdentityExistReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityExistReq.ProtoReflect.Descriptor instead.
func (*IdentityExistReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{0}
}

func (x *IdentityExistReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *IdentityExistReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

type IdentityExistResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist           bool   `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
	PreFileIdentity string `protobuf:"bytes,2,opt,name=PreFileIdentity,proto3" json:"PreFileIdentity,omitempty"`
	Parent          int64  `protobuf:"varint,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Index           int64  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Path            string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *IdentityExistResp) Reset() {
	*x = IdentityExistResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityExistResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityExistResp) ProtoMessage() {}

func (x *IdentityExistResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityExistResp.ProtoReflect.Descriptor instead.
func (*IdentityExistResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{1}
}

func (x *IdentityExistResp) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *IdentityExistResp) GetPreFileIdentity() string {
	if x != nil {
		return x.PreFileIdentity
	}
	return ""
}

func (x *IdentityExistResp) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *IdentityExistResp) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IdentityExistResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveIdentityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Source   int64  `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *RemoveIdentityReq) Reset() {
	*x = RemoveIdentityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIdentityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIdentityReq) ProtoMessage() {}

func (x *RemoveIdentityReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIdentityReq.ProtoReflect.Descriptor instead.
func (*RemoveIdentityReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveIdentityReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RemoveIdentityReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

type RemoveIdentityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected int64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *RemoveIdentityResp) Reset() {
	*x = RemoveIdentityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIdentityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIdentityResp) ProtoMessage() {}

func (x *RemoveIdentityResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIdentityResp.ProtoReflect.Descriptor instead.
func (*RemoveIdentityResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveIdentityResp) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type UpdateSrcFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected int64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *UpdateSrcFileResp) Reset() {
	*x = UpdateSrcFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSrcFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSrcFileResp) ProtoMessage() {}

func (x *UpdateSrcFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSrcFileResp.ProtoReflect.Descriptor instead.
func (*UpdateSrcFileResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSrcFileResp) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

// 更新filepool的文件数据
type UpdateSrcFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. 必传参数
	Source   int64   `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Identity *string `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	// 2。可选 文件 基础数据
	Brief  *string `protobuf:"bytes,6,opt,name=brief,proto3,oneof" json:"brief,omitempty"`
	Desc   *string `protobuf:"bytes,7,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	Tag    *string `protobuf:"bytes,8,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	Remark *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Parent *int64  `protobuf:"varint,10,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Index  *int64  `protobuf:"varint,11,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// 3. 可选 文件 产品关联数据
	Spu     *string `protobuf:"bytes,12,opt,name=spu,proto3,oneof" json:"spu,omitempty"`
	Sku     *string `protobuf:"bytes,13,opt,name=sku,proto3,oneof" json:"sku,omitempty"`
	SubType *string `protobuf:"bytes,14,opt,name=subType,proto3,oneof" json:"subType,omitempty"`
	// 4. 可选控制参数
	OnClick    *string `protobuf:"bytes,15,opt,name=onClick,proto3,oneof" json:"onClick,omitempty"`
	LinkType   *string `protobuf:"bytes,16,opt,name=linkType,proto3,oneof" json:"linkType,omitempty"`
	IsSelected *int64  `protobuf:"varint,17,opt,name=isSelected,proto3,oneof" json:"isSelected,omitempty"`
	StartedAt  *string `protobuf:"bytes,18,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	ExpiredAt  *string `protobuf:"bytes,19,opt,name=expiredAt,proto3,oneof" json:"expiredAt,omitempty"`
}

func (x *UpdateSrcFileReq) Reset() {
	*x = UpdateSrcFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSrcFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSrcFileReq) ProtoMessage() {}

func (x *UpdateSrcFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSrcFileReq.ProtoReflect.Descriptor instead.
func (*UpdateSrcFileReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSrcFileReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *UpdateSrcFileReq) GetIdentity() string {
	if x != nil && x.Identity != nil {
		return *x.Identity
	}
	return ""
}

func (x *UpdateSrcFileReq) GetBrief() string {
	if x != nil && x.Brief != nil {
		return *x.Brief
	}
	return ""
}

func (x *UpdateSrcFileReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *UpdateSrcFileReq) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *UpdateSrcFileReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *UpdateSrcFileReq) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *UpdateSrcFileReq) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *UpdateSrcFileReq) GetSpu() string {
	if x != nil && x.Spu != nil {
		return *x.Spu
	}
	return ""
}

func (x *UpdateSrcFileReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *UpdateSrcFileReq) GetSubType() string {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return ""
}

func (x *UpdateSrcFileReq) GetOnClick() string {
	if x != nil && x.OnClick != nil {
		return *x.OnClick
	}
	return ""
}

func (x *UpdateSrcFileReq) GetLinkType() string {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return ""
}

func (x *UpdateSrcFileReq) GetIsSelected() int64 {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return 0
}

func (x *UpdateSrcFileReq) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *UpdateSrcFileReq) GetExpiredAt() string {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return ""
}

// 筛选filepool文件的参数
type FilterFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. 必选 参数
	Source int64 `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	// 2. 可选 分页配置参数
	Page     *int64 `protobuf:"varint,3,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize *int64 `protobuf:"varint,4,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
	// 3. 可选 保存 相关查询参数
	Identity *string `protobuf:"bytes,10,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	Path     *string `protobuf:"bytes,11,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Name     *string `protobuf:"bytes,12,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Ext      *string `protobuf:"bytes,13,opt,name=ext,proto3,oneof" json:"ext,omitempty"`
	Size     *int64  `protobuf:"varint,14,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// 4. 可选 文件数据相关查询参数
	Brief  *string `protobuf:"bytes,20,opt,name=brief,proto3,oneof" json:"brief,omitempty"`
	Desc   *string `protobuf:"bytes,21,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	Tag    *string `protobuf:"bytes,22,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	Remark *string `protobuf:"bytes,23,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Parent *int64  `protobuf:"varint,24,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Index  *int64  `protobuf:"varint,25,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// 5. 可选，产品关联相关查询参数
	Spu     *string `protobuf:"bytes,30,opt,name=spu,proto3,oneof" json:"spu,omitempty"`
	Sku     *string `protobuf:"bytes,31,opt,name=sku,proto3,oneof" json:"sku,omitempty"`
	SubType *string `protobuf:"bytes,32,opt,name=subType,proto3,oneof" json:"subType,omitempty"`
	// 6. 可选，事件相关查询参数
	OnClick    *string `protobuf:"bytes,40,opt,name=onClick,proto3,oneof" json:"onClick,omitempty"`
	LinkType   *string `protobuf:"bytes,41,opt,name=linkType,proto3,oneof" json:"linkType,omitempty"`
	IsSelected *int64  `protobuf:"varint,42,opt,name=isSelected,proto3,oneof" json:"isSelected,omitempty"`
	StartedAt  *string `protobuf:"bytes,43,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"` // 暂未实现时间筛选
	ExpiredAt  *string `protobuf:"bytes,44,opt,name=expiredAt,proto3,oneof" json:"expiredAt,omitempty"` // 暂未实现时间筛选
}

func (x *FilterFileReq) Reset() {
	*x = FilterFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterFileReq) ProtoMessage() {}

func (x *FilterFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterFileReq.ProtoReflect.Descriptor instead.
func (*FilterFileReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{6}
}

func (x *FilterFileReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *FilterFileReq) GetPage() int64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *FilterFileReq) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FilterFileReq) GetIdentity() string {
	if x != nil && x.Identity != nil {
		return *x.Identity
	}
	return ""
}

func (x *FilterFileReq) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FilterFileReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FilterFileReq) GetExt() string {
	if x != nil && x.Ext != nil {
		return *x.Ext
	}
	return ""
}

func (x *FilterFileReq) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *FilterFileReq) GetBrief() string {
	if x != nil && x.Brief != nil {
		return *x.Brief
	}
	return ""
}

func (x *FilterFileReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *FilterFileReq) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *FilterFileReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *FilterFileReq) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *FilterFileReq) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *FilterFileReq) GetSpu() string {
	if x != nil && x.Spu != nil {
		return *x.Spu
	}
	return ""
}

func (x *FilterFileReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *FilterFileReq) GetSubType() string {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return ""
}

func (x *FilterFileReq) GetOnClick() string {
	if x != nil && x.OnClick != nil {
		return *x.OnClick
	}
	return ""
}

func (x *FilterFileReq) GetLinkType() string {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return ""
}

func (x *FilterFileReq) GetIsSelected() int64 {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return 0
}

func (x *FilterFileReq) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *FilterFileReq) GetExpiredAt() string {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return ""
}

type FilterFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*FileObj `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
	Count  int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FilterFileResp) Reset() {
	*x = FilterFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterFileResp) ProtoMessage() {}

func (x *FilterFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterFileResp.ProtoReflect.Descriptor instead.
func (*FilterFileResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{7}
}

func (x *FilterFileResp) GetResult() []*FileObj {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FilterFileResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FileListSrcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   int64  `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Page     *int64 `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize *int64 `protobuf:"varint,3,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
}

func (x *FileListSrcReq) Reset() {
	*x = FileListSrcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListSrcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListSrcReq) ProtoMessage() {}

func (x *FileListSrcReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListSrcReq.ProtoReflect.Descriptor instead.
func (*FileListSrcReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{8}
}

func (x *FileListSrcReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *FileListSrcReq) GetPage() int64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *FileListSrcReq) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

// 查询返回值对象
type FileObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. 访问地址
	PreAuthUrl string `protobuf:"bytes,1,opt,name=preAuthUrl,proto3" json:"preAuthUrl,omitempty"`
	// 2. 文件保存相关基础信息
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ext      string `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`
	Size     int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// 3. 文件基础信息
	Brief  string `protobuf:"bytes,10,opt,name=brief,proto3" json:"brief,omitempty"`
	Desc   string `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	Tag    string `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	Parent int64  `protobuf:"varint,14,opt,name=parent,proto3" json:"parent,omitempty"`
	Index  int64  `protobuf:"varint,15,opt,name=index,proto3" json:"index,omitempty"`
	// 4. 文件 产品 相关信息
	Spu     string `protobuf:"bytes,20,opt,name=spu,proto3" json:"spu,omitempty"`
	Sku     string `protobuf:"bytes,21,opt,name=sku,proto3" json:"sku,omitempty"`
	SubType string `protobuf:"bytes,22,opt,name=subType,proto3" json:"subType,omitempty"`
	// 5. 文件 控制 相关信息
	OnClick    string     `protobuf:"bytes,30,opt,name=onClick,proto3" json:"onClick,omitempty"`
	LinkType   string     `protobuf:"bytes,31,opt,name=linkType,proto3" json:"linkType,omitempty"`
	IsSelected int64      `protobuf:"varint,32,opt,name=isSelected,proto3" json:"isSelected,omitempty"`
	StartedAt  string     `protobuf:"bytes,33,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	ExpiredAt  string     `protobuf:"bytes,34,opt,name=expiredAt,proto3" json:"expiredAt,omitempty"`
	Children   []*FileObj `protobuf:"bytes,35,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *FileObj) Reset() {
	*x = FileObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileObj) ProtoMessage() {}

func (x *FileObj) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileObj.ProtoReflect.Descriptor instead.
func (*FileObj) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{9}
}

func (x *FileObj) GetPreAuthUrl() string {
	if x != nil {
		return x.PreAuthUrl
	}
	return ""
}

func (x *FileObj) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *FileObj) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileObj) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *FileObj) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileObj) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

func (x *FileObj) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FileObj) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FileObj) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FileObj) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *FileObj) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FileObj) GetSpu() string {
	if x != nil {
		return x.Spu
	}
	return ""
}

func (x *FileObj) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *FileObj) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *FileObj) GetOnClick() string {
	if x != nil {
		return x.OnClick
	}
	return ""
}

func (x *FileObj) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *FileObj) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

func (x *FileObj) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *FileObj) GetExpiredAt() string {
	if x != nil {
		return x.ExpiredAt
	}
	return ""
}

func (x *FileObj) GetChildren() []*FileObj {
	if x != nil {
		return x.Children
	}
	return nil
}

type FileListSrcResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*FileObj `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
	Count  int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FileListSrcResp) Reset() {
	*x = FileListSrcResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListSrcResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListSrcResp) ProtoMessage() {}

func (x *FileListSrcResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListSrcResp.ProtoReflect.Descriptor instead.
func (*FileListSrcResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{10}
}

func (x *FileListSrcResp) GetResult() []*FileObj {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FileListSrcResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 文件上传数据类型
type UploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. 必传，标识参数
	Source   int64  `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// 2. 必须，文件 保存 相关参数
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Ext  string `protobuf:"bytes,6,opt,name=ext,proto3" json:"ext,omitempty"`
	Size int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// 3. 可选 文件 基础数据
	Brief  *string `protobuf:"bytes,10,opt,name=brief,proto3,oneof" json:"brief,omitempty"`
	Desc   *string `protobuf:"bytes,11,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	Tag    *string `protobuf:"bytes,12,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	Remark *string `protobuf:"bytes,13,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Parent *int64  `protobuf:"varint,14,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Index  *int64  `protobuf:"varint,15,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// 4. 可选 文件 产品相关数据
	Spu     *string `protobuf:"bytes,20,opt,name=spu,proto3,oneof" json:"spu,omitempty"`
	Sku     *string `protobuf:"bytes,21,opt,name=sku,proto3,oneof" json:"sku,omitempty"`
	SubType *string `protobuf:"bytes,22,opt,name=subType,proto3,oneof" json:"subType,omitempty"`
	// 5. 可选 文件 控制相关参数
	OnClick    *string `protobuf:"bytes,30,opt,name=onClick,proto3,oneof" json:"onClick,omitempty"`
	LinkType   *string `protobuf:"bytes,31,opt,name=linkType,proto3,oneof" json:"linkType,omitempty"`
	IsSelected *int64  `protobuf:"varint,32,opt,name=isSelected,proto3,oneof" json:"isSelected,omitempty"`
	StartedAt  *string `protobuf:"bytes,33,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	ExpiredAt  *string `protobuf:"bytes,34,opt,name=expiredAt,proto3,oneof" json:"expiredAt,omitempty"`
}

func (x *UploadFileReq) Reset() {
	*x = UploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileReq) ProtoMessage() {}

func (x *UploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileReq.ProtoReflect.Descriptor instead.
func (*UploadFileReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{11}
}

func (x *UploadFileReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *UploadFileReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *UploadFileReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *UploadFileReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UploadFileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadFileReq) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *UploadFileReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UploadFileReq) GetBrief() string {
	if x != nil && x.Brief != nil {
		return *x.Brief
	}
	return ""
}

func (x *UploadFileReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *UploadFileReq) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *UploadFileReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *UploadFileReq) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *UploadFileReq) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *UploadFileReq) GetSpu() string {
	if x != nil && x.Spu != nil {
		return *x.Spu
	}
	return ""
}

func (x *UploadFileReq) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *UploadFileReq) GetSubType() string {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return ""
}

func (x *UploadFileReq) GetOnClick() string {
	if x != nil && x.OnClick != nil {
		return *x.OnClick
	}
	return ""
}

func (x *UploadFileReq) GetLinkType() string {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return ""
}

func (x *UploadFileReq) GetIsSelected() int64 {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return 0
}

func (x *UploadFileReq) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *UploadFileReq) GetExpiredAt() string {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return ""
}

type UploadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected int64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *UploadFileResp) Reset() {
	*x = UploadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResp) ProtoMessage() {}

func (x *UploadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResp.ProtoReflect.Descriptor instead.
func (*UploadFileResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{12}
}

func (x *UploadFileResp) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type HashExistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Source int64  `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *HashExistReq) Reset() {
	*x = HashExistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashExistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashExistReq) ProtoMessage() {}

func (x *HashExistReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashExistReq.ProtoReflect.Descriptor instead.
func (*HashExistReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{13}
}

func (x *HashExistReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *HashExistReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

type HashExistResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist           bool   `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
	PreFileIdentity string `protobuf:"bytes,2,opt,name=PreFileIdentity,proto3" json:"PreFileIdentity,omitempty"`
	Path            string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HashExistResp) Reset() {
	*x = HashExistResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashExistResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashExistResp) ProtoMessage() {}

func (x *HashExistResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashExistResp.ProtoReflect.Descriptor instead.
func (*HashExistResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{14}
}

func (x *HashExistResp) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *HashExistResp) GetPreFileIdentity() string {
	if x != nil {
		return x.PreFileIdentity
	}
	return ""
}

func (x *HashExistResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Source int64  `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *RemoveHashReq) Reset() {
	*x = RemoveHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHashReq) ProtoMessage() {}

func (x *RemoveHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHashReq.ProtoReflect.Descriptor instead.
func (*RemoveHashReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveHashReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RemoveHashReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

type RemoveHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected int64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *RemoveHashResp) Reset() {
	*x = RemoveHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHashResp) ProtoMessage() {}

func (x *RemoveHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHashResp.ProtoReflect.Descriptor instead.
func (*RemoveHashResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveHashResp) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type UserRepoCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentity string `protobuf:"bytes,1,opt,name=userIdentity,proto3" json:"userIdentity,omitempty"`
	FileIdentity string `protobuf:"bytes,2,opt,name=fileIdentity,proto3" json:"fileIdentity,omitempty"`
	ParentId     *int64 `protobuf:"varint,3,opt,name=parentId,proto3,oneof" json:"parentId,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Ext          string `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`
	Source       int64  `protobuf:"varint,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *UserRepoCreateReq) Reset() {
	*x = UserRepoCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRepoCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRepoCreateReq) ProtoMessage() {}

func (x *UserRepoCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRepoCreateReq.ProtoReflect.Descriptor instead.
func (*UserRepoCreateReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{17}
}

func (x *UserRepoCreateReq) GetUserIdentity() string {
	if x != nil {
		return x.UserIdentity
	}
	return ""
}

func (x *UserRepoCreateReq) GetFileIdentity() string {
	if x != nil {
		return x.FileIdentity
	}
	return ""
}

func (x *UserRepoCreateReq) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *UserRepoCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserRepoCreateReq) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *UserRepoCreateReq) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

type UserRepoCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected int64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *UserRepoCreateResp) Reset() {
	*x = UserRepoCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRepoCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRepoCreateResp) ProtoMessage() {}

func (x *UserRepoCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRepoCreateResp.ProtoReflect.Descriptor instead.
func (*UserRepoCreateResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{18}
}

func (x *UserRepoCreateResp) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type IdByUserFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentity string `protobuf:"bytes,1,opt,name=userIdentity,proto3" json:"userIdentity,omitempty"`
	FileIdentity string `protobuf:"bytes,2,opt,name=fileIdentity,proto3" json:"fileIdentity,omitempty"`
}

func (x *IdByUserFileReq) Reset() {
	*x = IdByUserFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdByUserFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdByUserFileReq) ProtoMessage() {}

func (x *IdByUserFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdByUserFileReq.ProtoReflect.Descriptor instead.
func (*IdByUserFileReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{19}
}

func (x *IdByUserFileReq) GetUserIdentity() string {
	if x != nil {
		return x.UserIdentity
	}
	return ""
}

func (x *IdByUserFileReq) GetFileIdentity() string {
	if x != nil {
		return x.FileIdentity
	}
	return ""
}

type IdByUserFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdByUserFileResp) Reset() {
	*x = IdByUserFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdByUserFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdByUserFileResp) ProtoMessage() {}

func (x *IdByUserFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdByUserFileResp.ProtoReflect.Descriptor instead.
func (*IdByUserFileResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{20}
}

func (x *IdByUserFileResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateFileIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileIdentity string  `protobuf:"bytes,2,opt,name=fileIdentity,proto3" json:"fileIdentity,omitempty"`
	ParentId     *int64  `protobuf:"varint,3,opt,name=parentId,proto3,oneof" json:"parentId,omitempty"`
	Name         *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Ext          *string `protobuf:"bytes,5,opt,name=ext,proto3,oneof" json:"ext,omitempty"`
	Source       *int64  `protobuf:"varint,6,opt,name=source,proto3,oneof" json:"source,omitempty"`
}

func (x *UpdateFileIdReq) Reset() {
	*x = UpdateFileIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFileIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileIdReq) ProtoMessage() {}

func (x *UpdateFileIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileIdReq.ProtoReflect.Descriptor instead.
func (*UpdateFileIdReq) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateFileIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFileIdReq) GetFileIdentity() string {
	if x != nil {
		return x.FileIdentity
	}
	return ""
}

func (x *UpdateFileIdReq) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *UpdateFileIdReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateFileIdReq) GetExt() string {
	if x != nil && x.Ext != nil {
		return *x.Ext
	}
	return ""
}

func (x *UpdateFileIdReq) GetSource() int64 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

type UpdateFileIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected int64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *UpdateFileIdResp) Reset() {
	*x = UpdateFileIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filepool_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFileIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileIdResp) ProtoMessage() {}

func (x *UpdateFileIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filepool_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileIdResp.ProtoReflect.Descriptor instead.
func (*UpdateFileIdResp) Descriptor() ([]byte, []int) {
	return file_filepool_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateFileIdResp) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

var File_filepool_proto protoreflect.FileDescriptor

var file_filepool_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x46, 0x0a, 0x10, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x47, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x2f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x8b, 0x05, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x03, 0x73, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x73, 0x6b, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x03, 0x73, 0x6b, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdd, 0x06, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x73, 0x70, 0x75, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52,
	0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x13, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x78,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x52, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x0e, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x72, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x81, 0x04, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x72, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x05, 0x0a,
	0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x03, 0x73, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x70, 0x75, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x63, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x59, 0x0a,
	0x0f, 0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x22, 0x0a, 0x10, 0x49, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x78, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0xc4, 0x06, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0a, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42, 0x79, 0x53, 0x72, 0x63, 0x12, 0x19,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x72, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x72,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x72,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x72, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x42, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x49, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x62, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x69, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filepool_proto_rawDescOnce sync.Once
	file_filepool_proto_rawDescData = file_filepool_proto_rawDesc
)

func file_filepool_proto_rawDescGZIP() []byte {
	file_filepool_proto_rawDescOnce.Do(func() {
		file_filepool_proto_rawDescData = protoimpl.X.CompressGZIP(file_filepool_proto_rawDescData)
	})
	return file_filepool_proto_rawDescData
}

var file_filepool_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_filepool_proto_goTypes = []interface{}{
	(*IdentityExistReq)(nil),   // 0: file_pool.IdentityExistReq
	(*IdentityExistResp)(nil),  // 1: file_pool.IdentityExistResp
	(*RemoveIdentityReq)(nil),  // 2: file_pool.RemoveIdentityReq
	(*RemoveIdentityResp)(nil), // 3: file_pool.RemoveIdentityResp
	(*UpdateSrcFileResp)(nil),  // 4: file_pool.UpdateSrcFileResp
	(*UpdateSrcFileReq)(nil),   // 5: file_pool.UpdateSrcFileReq
	(*FilterFileReq)(nil),      // 6: file_pool.FilterFileReq
	(*FilterFileResp)(nil),     // 7: file_pool.FilterFileResp
	(*FileListSrcReq)(nil),     // 8: file_pool.FileListSrcReq
	(*FileObj)(nil),            // 9: file_pool.fileObj
	(*FileListSrcResp)(nil),    // 10: file_pool.FileListSrcResp
	(*UploadFileReq)(nil),      // 11: file_pool.UploadFileReq
	(*UploadFileResp)(nil),     // 12: file_pool.UploadFileResp
	(*HashExistReq)(nil),       // 13: file_pool.HashExistReq
	(*HashExistResp)(nil),      // 14: file_pool.HashExistResp
	(*RemoveHashReq)(nil),      // 15: file_pool.RemoveHashReq
	(*RemoveHashResp)(nil),     // 16: file_pool.RemoveHashResp
	(*UserRepoCreateReq)(nil),  // 17: file_pool.UserRepoCreateReq
	(*UserRepoCreateResp)(nil), // 18: file_pool.UserRepoCreateResp
	(*IdByUserFileReq)(nil),    // 19: file_pool.IdByUserFileReq
	(*IdByUserFileResp)(nil),   // 20: file_pool.IdByUserFileResp
	(*UpdateFileIdReq)(nil),    // 21: file_pool.UpdateFileIdReq
	(*UpdateFileIdResp)(nil),   // 22: file_pool.UpdateFileIdResp
}
var file_filepool_proto_depIdxs = []int32{
	9,  // 0: file_pool.FilterFileResp.Result:type_name -> file_pool.fileObj
	9,  // 1: file_pool.fileObj.children:type_name -> file_pool.fileObj
	9,  // 2: file_pool.FileListSrcResp.Result:type_name -> file_pool.fileObj
	11, // 3: file_pool.FilePoolIto.UploadFile:input_type -> file_pool.UploadFileReq
	13, // 4: file_pool.FilePoolIto.HashExist:input_type -> file_pool.HashExistReq
	15, // 5: file_pool.FilePoolIto.RemoveByHash:input_type -> file_pool.RemoveHashReq
	8,  // 6: file_pool.FilePoolIto.FileListPathBySrc:input_type -> file_pool.FileListSrcReq
	6,  // 7: file_pool.FilePoolIto.FilterFiles:input_type -> file_pool.FilterFileReq
	5,  // 8: file_pool.FilePoolIto.UpdateFile:input_type -> file_pool.UpdateSrcFileReq
	2,  // 9: file_pool.FilePoolIto.RemoveByIdentity:input_type -> file_pool.RemoveIdentityReq
	0,  // 10: file_pool.FilePoolIto.IdentityExist:input_type -> file_pool.IdentityExistReq
	17, // 11: file_pool.FilePoolIto.UserRepoCreate:input_type -> file_pool.UserRepoCreateReq
	19, // 12: file_pool.FilePoolIto.IdByUserFile:input_type -> file_pool.IdByUserFileReq
	21, // 13: file_pool.FilePoolIto.UpdateUserFile:input_type -> file_pool.UpdateFileIdReq
	12, // 14: file_pool.FilePoolIto.UploadFile:output_type -> file_pool.UploadFileResp
	14, // 15: file_pool.FilePoolIto.HashExist:output_type -> file_pool.HashExistResp
	16, // 16: file_pool.FilePoolIto.RemoveByHash:output_type -> file_pool.RemoveHashResp
	10, // 17: file_pool.FilePoolIto.FileListPathBySrc:output_type -> file_pool.FileListSrcResp
	7,  // 18: file_pool.FilePoolIto.FilterFiles:output_type -> file_pool.FilterFileResp
	4,  // 19: file_pool.FilePoolIto.UpdateFile:output_type -> file_pool.UpdateSrcFileResp
	3,  // 20: file_pool.FilePoolIto.RemoveByIdentity:output_type -> file_pool.RemoveIdentityResp
	1,  // 21: file_pool.FilePoolIto.IdentityExist:output_type -> file_pool.IdentityExistResp
	18, // 22: file_pool.FilePoolIto.UserRepoCreate:output_type -> file_pool.UserRepoCreateResp
	20, // 23: file_pool.FilePoolIto.IdByUserFile:output_type -> file_pool.IdByUserFileResp
	22, // 24: file_pool.FilePoolIto.UpdateUserFile:output_type -> file_pool.UpdateFileIdResp
	14, // [14:25] is the sub-list for method output_type
	3,  // [3:14] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_filepool_proto_init() }
func file_filepool_proto_init() {
	if File_filepool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_filepool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityExistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityExistResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIdentityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIdentityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSrcFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSrcFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileListSrcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileListSrcResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashExistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashExistResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRepoCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRepoCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdByUserFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdByUserFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFileIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filepool_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFileIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_filepool_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_filepool_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_filepool_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_filepool_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_filepool_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_filepool_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filepool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filepool_proto_goTypes,
		DependencyIndexes: file_filepool_proto_depIdxs,
		MessageInfos:      file_filepool_proto_msgTypes,
	}.Build()
	File_filepool_proto = out.File
	file_filepool_proto_rawDesc = nil
	file_filepool_proto_goTypes = nil
	file_filepool_proto_depIdxs = nil
}
