// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: filepool.proto

package pbfilepoolito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FilePoolIto_UploadFile_FullMethodName        = "/file_pool.FilePoolIto/UploadFile"
	FilePoolIto_HashExist_FullMethodName         = "/file_pool.FilePoolIto/HashExist"
	FilePoolIto_RemoveByHash_FullMethodName      = "/file_pool.FilePoolIto/RemoveByHash"
	FilePoolIto_FileListPathBySrc_FullMethodName = "/file_pool.FilePoolIto/FileListPathBySrc"
	FilePoolIto_FilterFiles_FullMethodName       = "/file_pool.FilePoolIto/FilterFiles"
	FilePoolIto_UpdateFile_FullMethodName        = "/file_pool.FilePoolIto/UpdateFile"
	FilePoolIto_RemoveByIdentity_FullMethodName  = "/file_pool.FilePoolIto/RemoveByIdentity"
	FilePoolIto_IdentityExist_FullMethodName     = "/file_pool.FilePoolIto/IdentityExist"
	FilePoolIto_UserRepoCreate_FullMethodName    = "/file_pool.FilePoolIto/UserRepoCreate"
	FilePoolIto_IdByUserFile_FullMethodName      = "/file_pool.FilePoolIto/IdByUserFile"
	FilePoolIto_UpdateUserFile_FullMethodName    = "/file_pool.FilePoolIto/UpdateUserFile"
)

// FilePoolItoClient is the client API for FilePoolIto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilePoolItoClient interface {
	// 1. 新增1条记录
	UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error)
	// 2. 文件Hash值是否已存在
	HashExist(ctx context.Context, in *HashExistReq, opts ...grpc.CallOption) (*HashExistResp, error)
	// 3. 删除指定文件Hash值的记录
	RemoveByHash(ctx context.Context, in *RemoveHashReq, opts ...grpc.CallOption) (*RemoveHashResp, error)
	// 4. 分页查询，指定Source来源码的文件存储地址
	FileListPathBySrc(ctx context.Context, in *FileListSrcReq, opts ...grpc.CallOption) (*FileListSrcResp, error)
	// 5. 条件查询，指定Source来源码及筛选条件进行查询
	FilterFiles(ctx context.Context, in *FilterFileReq, opts ...grpc.CallOption) (*FilterFileResp, error)
	// 6. 指定source文件源，根据文件的Identity，更新文件的描述信息
	UpdateFile(ctx context.Context, in *UpdateSrcFileReq, opts ...grpc.CallOption) (*UpdateSrcFileResp, error)
	// 7. 指定source文件源，根据文件的Identity，删除对应的文件
	RemoveByIdentity(ctx context.Context, in *RemoveIdentityReq, opts ...grpc.CallOption) (*RemoveIdentityResp, error)
	// 8. 指定source文件源，文件Identity是否已存在
	IdentityExist(ctx context.Context, in *IdentityExistReq, opts ...grpc.CallOption) (*IdentityExistResp, error)
	// 1. 新增1条记录
	UserRepoCreate(ctx context.Context, in *UserRepoCreateReq, opts ...grpc.CallOption) (*UserRepoCreateResp, error)
	// 2. 根据 用户标识 及 文件标识，联合查询，是否该条记录存在于数据库
	IdByUserFile(ctx context.Context, in *IdByUserFileReq, opts ...grpc.CallOption) (*IdByUserFileResp, error)
	// 3. 指定记录ID，更新该条记录中 的关联文件唯一标识
	UpdateUserFile(ctx context.Context, in *UpdateFileIdReq, opts ...grpc.CallOption) (*UpdateFileIdResp, error)
}

type filePoolItoClient struct {
	cc grpc.ClientConnInterface
}

func NewFilePoolItoClient(cc grpc.ClientConnInterface) FilePoolItoClient {
	return &filePoolItoClient{cc}
}

func (c *filePoolItoClient) UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error) {
	out := new(UploadFileResp)
	err := c.cc.Invoke(ctx, FilePoolIto_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) HashExist(ctx context.Context, in *HashExistReq, opts ...grpc.CallOption) (*HashExistResp, error) {
	out := new(HashExistResp)
	err := c.cc.Invoke(ctx, FilePoolIto_HashExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) RemoveByHash(ctx context.Context, in *RemoveHashReq, opts ...grpc.CallOption) (*RemoveHashResp, error) {
	out := new(RemoveHashResp)
	err := c.cc.Invoke(ctx, FilePoolIto_RemoveByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) FileListPathBySrc(ctx context.Context, in *FileListSrcReq, opts ...grpc.CallOption) (*FileListSrcResp, error) {
	out := new(FileListSrcResp)
	err := c.cc.Invoke(ctx, FilePoolIto_FileListPathBySrc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) FilterFiles(ctx context.Context, in *FilterFileReq, opts ...grpc.CallOption) (*FilterFileResp, error) {
	out := new(FilterFileResp)
	err := c.cc.Invoke(ctx, FilePoolIto_FilterFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) UpdateFile(ctx context.Context, in *UpdateSrcFileReq, opts ...grpc.CallOption) (*UpdateSrcFileResp, error) {
	out := new(UpdateSrcFileResp)
	err := c.cc.Invoke(ctx, FilePoolIto_UpdateFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) RemoveByIdentity(ctx context.Context, in *RemoveIdentityReq, opts ...grpc.CallOption) (*RemoveIdentityResp, error) {
	out := new(RemoveIdentityResp)
	err := c.cc.Invoke(ctx, FilePoolIto_RemoveByIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) IdentityExist(ctx context.Context, in *IdentityExistReq, opts ...grpc.CallOption) (*IdentityExistResp, error) {
	out := new(IdentityExistResp)
	err := c.cc.Invoke(ctx, FilePoolIto_IdentityExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) UserRepoCreate(ctx context.Context, in *UserRepoCreateReq, opts ...grpc.CallOption) (*UserRepoCreateResp, error) {
	out := new(UserRepoCreateResp)
	err := c.cc.Invoke(ctx, FilePoolIto_UserRepoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) IdByUserFile(ctx context.Context, in *IdByUserFileReq, opts ...grpc.CallOption) (*IdByUserFileResp, error) {
	out := new(IdByUserFileResp)
	err := c.cc.Invoke(ctx, FilePoolIto_IdByUserFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoolItoClient) UpdateUserFile(ctx context.Context, in *UpdateFileIdReq, opts ...grpc.CallOption) (*UpdateFileIdResp, error) {
	out := new(UpdateFileIdResp)
	err := c.cc.Invoke(ctx, FilePoolIto_UpdateUserFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilePoolItoServer is the server API for FilePoolIto service.
// All implementations must embed UnimplementedFilePoolItoServer
// for forward compatibility
type FilePoolItoServer interface {
	// 1. 新增1条记录
	UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error)
	// 2. 文件Hash值是否已存在
	HashExist(context.Context, *HashExistReq) (*HashExistResp, error)
	// 3. 删除指定文件Hash值的记录
	RemoveByHash(context.Context, *RemoveHashReq) (*RemoveHashResp, error)
	// 4. 分页查询，指定Source来源码的文件存储地址
	FileListPathBySrc(context.Context, *FileListSrcReq) (*FileListSrcResp, error)
	// 5. 条件查询，指定Source来源码及筛选条件进行查询
	FilterFiles(context.Context, *FilterFileReq) (*FilterFileResp, error)
	// 6. 指定source文件源，根据文件的Identity，更新文件的描述信息
	UpdateFile(context.Context, *UpdateSrcFileReq) (*UpdateSrcFileResp, error)
	// 7. 指定source文件源，根据文件的Identity，删除对应的文件
	RemoveByIdentity(context.Context, *RemoveIdentityReq) (*RemoveIdentityResp, error)
	// 8. 指定source文件源，文件Identity是否已存在
	IdentityExist(context.Context, *IdentityExistReq) (*IdentityExistResp, error)
	// 1. 新增1条记录
	UserRepoCreate(context.Context, *UserRepoCreateReq) (*UserRepoCreateResp, error)
	// 2. 根据 用户标识 及 文件标识，联合查询，是否该条记录存在于数据库
	IdByUserFile(context.Context, *IdByUserFileReq) (*IdByUserFileResp, error)
	// 3. 指定记录ID，更新该条记录中 的关联文件唯一标识
	UpdateUserFile(context.Context, *UpdateFileIdReq) (*UpdateFileIdResp, error)
	mustEmbedUnimplementedFilePoolItoServer()
}

// UnimplementedFilePoolItoServer must be embedded to have forward compatible implementations.
type UnimplementedFilePoolItoServer struct {
}

func (UnimplementedFilePoolItoServer) UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilePoolItoServer) HashExist(context.Context, *HashExistReq) (*HashExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashExist not implemented")
}
func (UnimplementedFilePoolItoServer) RemoveByHash(context.Context, *RemoveHashReq) (*RemoveHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveByHash not implemented")
}
func (UnimplementedFilePoolItoServer) FileListPathBySrc(context.Context, *FileListSrcReq) (*FileListSrcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileListPathBySrc not implemented")
}
func (UnimplementedFilePoolItoServer) FilterFiles(context.Context, *FilterFileReq) (*FilterFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterFiles not implemented")
}
func (UnimplementedFilePoolItoServer) UpdateFile(context.Context, *UpdateSrcFileReq) (*UpdateSrcFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedFilePoolItoServer) RemoveByIdentity(context.Context, *RemoveIdentityReq) (*RemoveIdentityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveByIdentity not implemented")
}
func (UnimplementedFilePoolItoServer) IdentityExist(context.Context, *IdentityExistReq) (*IdentityExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityExist not implemented")
}
func (UnimplementedFilePoolItoServer) UserRepoCreate(context.Context, *UserRepoCreateReq) (*UserRepoCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRepoCreate not implemented")
}
func (UnimplementedFilePoolItoServer) IdByUserFile(context.Context, *IdByUserFileReq) (*IdByUserFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdByUserFile not implemented")
}
func (UnimplementedFilePoolItoServer) UpdateUserFile(context.Context, *UpdateFileIdReq) (*UpdateFileIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserFile not implemented")
}
func (UnimplementedFilePoolItoServer) mustEmbedUnimplementedFilePoolItoServer() {}

// UnsafeFilePoolItoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilePoolItoServer will
// result in compilation errors.
type UnsafeFilePoolItoServer interface {
	mustEmbedUnimplementedFilePoolItoServer()
}

func RegisterFilePoolItoServer(s grpc.ServiceRegistrar, srv FilePoolItoServer) {
	s.RegisterService(&FilePoolIto_ServiceDesc, srv)
}

func _FilePoolIto_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).UploadFile(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_HashExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).HashExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_HashExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).HashExist(ctx, req.(*HashExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_RemoveByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).RemoveByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_RemoveByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).RemoveByHash(ctx, req.(*RemoveHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_FileListPathBySrc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListSrcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).FileListPathBySrc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_FileListPathBySrc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).FileListPathBySrc(ctx, req.(*FileListSrcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_FilterFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).FilterFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_FilterFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).FilterFiles(ctx, req.(*FilterFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSrcFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).UpdateFile(ctx, req.(*UpdateSrcFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_RemoveByIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).RemoveByIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_RemoveByIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).RemoveByIdentity(ctx, req.(*RemoveIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_IdentityExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).IdentityExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_IdentityExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).IdentityExist(ctx, req.(*IdentityExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_UserRepoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRepoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).UserRepoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_UserRepoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).UserRepoCreate(ctx, req.(*UserRepoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_IdByUserFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdByUserFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).IdByUserFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_IdByUserFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).IdByUserFile(ctx, req.(*IdByUserFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoolIto_UpdateUserFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoolItoServer).UpdateUserFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoolIto_UpdateUserFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoolItoServer).UpdateUserFile(ctx, req.(*UpdateFileIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FilePoolIto_ServiceDesc is the grpc.ServiceDesc for FilePoolIto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilePoolIto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_pool.FilePoolIto",
	HandlerType: (*FilePoolItoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _FilePoolIto_UploadFile_Handler,
		},
		{
			MethodName: "HashExist",
			Handler:    _FilePoolIto_HashExist_Handler,
		},
		{
			MethodName: "RemoveByHash",
			Handler:    _FilePoolIto_RemoveByHash_Handler,
		},
		{
			MethodName: "FileListPathBySrc",
			Handler:    _FilePoolIto_FileListPathBySrc_Handler,
		},
		{
			MethodName: "FilterFiles",
			Handler:    _FilePoolIto_FilterFiles_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _FilePoolIto_UpdateFile_Handler,
		},
		{
			MethodName: "RemoveByIdentity",
			Handler:    _FilePoolIto_RemoveByIdentity_Handler,
		},
		{
			MethodName: "IdentityExist",
			Handler:    _FilePoolIto_IdentityExist_Handler,
		},
		{
			MethodName: "UserRepoCreate",
			Handler:    _FilePoolIto_UserRepoCreate_Handler,
		},
		{
			MethodName: "IdByUserFile",
			Handler:    _FilePoolIto_IdByUserFile_Handler,
		},
		{
			MethodName: "UpdateUserFile",
			Handler:    _FilePoolIto_UpdateUserFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filepool.proto",
}
